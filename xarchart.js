

$('[data-sticky=true]').each(function(){
    data = $(this).data('api-config')
    data.api.limit = 50;
    $(this).data('api-config', data)
})

! function(e) {
    var t = {};

    function a(i) {
        if (t[i]) return t[i].exports;
        var r = t[i] = {
            i: i,
            l: !1,
            exports: {}
        };
        return e[i].call(r.exports, r, r.exports, a), r.l = !0, r.exports
    }
    a.m = e, a.c = t, a.d = function(e, t, i) {
        a.o(e, t) || Object.defineProperty(e, t, {
            configurable: !1,
            enumerable: !0,
            get: i
        })
    }, a.n = function(e) {
        var t = e && e.__esModule ? function() {
            return e.default
        } : function() {
            return e
        };
        return a.d(t, "a", t), t
    }, a.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }, a.p = "/", a(a.s = 0)
}({
    "++YA": function(e, t, a) {
        "use strict";
        var i = "IncomeStatement";
        angular.module(i, []).directive("incomeStatement", a("exxO"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "+/S2": function(e, t, a) {
        "use strict";
        angular.module("CotReports", []).controller("cotReportsCtrl", a("YRpp")).service("cotReportsApiService", a("4IHL"));
        e.exports = {
            enable: !0,
            name: "CotReports"
        }
    },
    "+2vj": function(e, t, a) {
        "use strict";
        var i = "PerformanceReport";
        angular.module(i, []).directive("performanceReport", a("KOeA"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "+4s5": function(e, t, a) {
        "use strict";
        var i = {
                ALL_US_EQUITIES: 0,
                ALL_CANADIAN_EQUITIES: 1,
                ALL_OTHER_EQUITIES: 2
            },
            r = [];
        r[i.ALL_US_EQUITIES] = {
            groupName: "allUSEquities",
            groupLabel: "All US Equities",
            groupSelected: !1,
            groupMarkets: [{
                id: 1,
                label: "AMEX"
            }, {
                id: 2,
                label: "NYSE"
            }, {
                id: 3,
                label: "NASDAQ"
            }, {
                id: 4,
                label: "OTC"
            }, {
                id: 5,
                label: "Other-OTC"
            }, {
                id: 6,
                label: "ETFs"
            }]
        }, r[i.ALL_CANADIAN_EQUITIES] = {
            groupName: "allCanadianEquities",
            groupLabel: "All Canadian Equities",
            groupSelected: !1,
            groupMarkets: [{
                id: 7,
                label: "Toronto (TSX)"
            }, {
                id: 8,
                label: "Toronto Venture"
            }]
        }, r[i.ALL_OTHER_EQUITIES] = {
            groupName: "allOtherEquities",
            groupLabel: "All Other Equities",
            groupSelected: !1,
            groupMarkets: [{
                id: 9,
                label: "Indices"
            }, {
                id: 10,
                label: "London (LSE)"
            }, {
                id: 11,
                label: "India (NSE)"
            }, {
                id: 12,
                label: "Australia (ASX)"
            }]
        }, e.exports = {
            markets: r,
            marketConstants: {
                AMEX: 0,
                NYSE: 1,
                NASDAQ: 2,
                OTC: 3,
                OTHER_OTC: 4,
                ETFS: 5,
                TSX: 0,
                TSV: 1,
                INDICES: 0,
                LSE: 1,
                NSE: 2,
                ASX: 3
            },
            marketSections: i
        }
    },
    "+5Mf": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    settings: "=",
                    dashboardMode: "=",
                    chartVisibility: "="
                },
                controller: ["$scope", "$rootScope", "interactiveChartApi", "interactiveChartSettings", "events", "_", "interactiveChartPeriodConfig", "interactiveChartStateService", "interactiveChartPeriodSizeConfig", function(e, t, a, i, r, o, n, s, l) {
                    e.periods = n.periods;
                    var c = n.items;
                    e.periodSizes = l.periodSizes, c[e.settings.period] || (e.settings.period = e.periods[e.settings.aggregation.unit][0].period), e.changePeriod = function(o) {
                        e.settings.period = o;
                        var n, l, c = "YTD" === o ? "P" + (n = new Date, l = new Date(n.getFullYear(), 0, 0), Math.floor((n - l) / 864e5)) + "D" : o;
                        "CUSTOM" !== o ? (a.changePeriod(c).render(), e.settings.range.from = null, e.settings.range.to = null, i.setChartPeriod(e.settings.period), i.setChartRange(e.settings.range), t.$broadcast(r.ON_INTERACTIVE_CHART_SET_PERIOD, {
                            period: e.settings.period
                        })) : (i.setChartPeriod(e.settings.period), "Intraday" === e.settings.aggregation.unit && e.periodSizes[e.settings.period] && e.settings.aggregation.size !== e.periodSizes[e.settings.period] && (e.settings.aggregation.size = e.periodSizes[e.settings.period], i.setChartAggregation(e.settings.aggregation)), t.$broadcast(r.ON_INTERACTIVE_CHART_SET_PERIOD, {
                            period: e.settings.period
                        })), s.save()
                    }, e.$on(r.ON_INTERACTIVE_CHART_SET_AGGREGATION, function() {
                        var a = e.periods[e.settings.aggregation.unit];
                        "CUSTOM" === e.settings.period || -1 === o.findIndex(a, {
                            period: e.settings.period
                        }) ? e.changePeriod(a[0].period) : t.$broadcast(r.ON_INTERACTIVE_CHART_SET_PERIOD, {
                            period: e.settings.period
                        })
                    }), e.getLabel = function() {
                        return c[e.settings.period] ? c[e.settings.period].labelShort : "YTD"
                    }
                }],
                template: a("RWfe")
            }
        }
        i.$inject = [], e.exports = i
    },
    "+Eaz": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = [],
                r = [],
                o = [],
                n = "",
                s = !0,
                l = {},
                c = {};

            function d() {
                var t = l.highPrice - l.lowPrice;
                e.chart.rowChartMark = 0, 0 === t ? e.chart.rowChartWidth = 100 : (e.chart.rowChartWidth = (l.lastPrice - l.lowPrice) / t * 100, s && (e.chart.rowChartMark = (l.openPrice - l.lowPrice) / t * 100, e.chart.rowChartMark < 0 && (e.chart.rowChartMark = 0), e.chart.rowChartMark > 100 && (e.chart.rowChartMark = 100)))
            }

            function u(e) {
                var t = e.toString().split(".");
                return t[0] = t[0].replace(/\B(?=(\d{3})+(?!\d))/g, ","), t.join(".")
            }
            e.chart = {}, e.setColor = a.setColor, e.init = function(a, p, m, h, g, f, b) {
                e.symbol = a, e.financialData = h, e.rowChartData = m, e.fieldTitles = p, g, s = f, 1 !== b && 7 !== b || !0, l.highPrice = "number" != typeof e.rowChartData.highPrice ? parseFloat(e.rowChartData.highPrice.replace(/,/g, "")) : e.rowChartData.highPrice, l.lowPrice = "number" != typeof e.rowChartData.lowPrice ? parseFloat(e.rowChartData.lowPrice.replace(/,/g, "")) : e.rowChartData.lowPrice, l.lastPrice = "number" != typeof e.rowChartData.lastPrice ? parseFloat(e.rowChartData.lastPrice.replace(/,/g, "")) : e.rowChartData.lastPrice, s && (l.openPrice = parseFloat(e.rowChartData.openPrice.replace(/,/g, ""))), d(), s && (e.$on("realtimeUpdate", function() {
                    if (i = t.symbols[e.symbol] || {}, r = t.batSymbolsData[e.symbol] || {}, c = t.profile[e.symbol], i && c) {
                        switch (i.lastPriceDirection && (n = i.lastPriceDirection), t.marketStatus) {
                            case "Pre-market":
                                ! function(t) {
                                    t.previousLowPrice && c.formatPrice(t.previousLowPrice) !== e.rowChartData.lowPrice && (e.rowChartData.lowPrice = c.formatPrice(t.previousLowPrice), l.lowPrice = t.previousLowPrice, o.lowPrice = !0), t.previousHighPrice && c.formatPrice(t.previousHighPrice) !== e.rowChartData.highPrice && (e.rowChartData.highPrice = c.formatPrice(t.previousHighPrice), l.highPrice = t.previousHighPrice, o.highPrice = !0), t.previousOpenPrice && c.formatPrice(t.previousOpenPrice) !== e.rowChartData.openPrice && (l.openPrice = t.previousOpenPrice, e.rowChartData.openPrice = c.formatPrice(t.previousOpenPrice)), t.previousSettlementPrice && c.formatPrice(t.previousSettlementPrice) !== e.rowChartData.lastPrice && (l.lastPrice = t.previousSettlementPrice, e.rowChartData.lastPrice = c.formatPrice(t.previousSettlementPrice), e.financialData.previousPrice = c.formatPrice(t.previousSettlementPrice))
                                }(i);
                                break;
                            case "Post-market":
                                ! function(t) {
                                    t.lowPrice && c.formatPrice(t.lowPrice) !== e.rowChartData.lowPrice && (e.rowChartData.lowPrice = c.formatPrice(t.lowPrice), l.lowPrice = t.lowPrice, o.lowPrice = !0), t.highPrice && c.formatPrice(t.highPrice) !== e.rowChartData.highPrice && (e.rowChartData.highPrice = c.formatPrice(t.highPrice), l.highPrice = t.highPrice, o.highPrice = !0), t.openPrice && c.formatPrice(t.openPrice) !== e.rowChartData.openPrice && (l.openPrice = t.openPrice, e.rowChartData.openPrice = c.formatPrice(t.openPrice)), t.settlementPrice && c.formatPrice(t.settlementPrice) !== e.rowChartData.lastPrice && (l.lastPrice = t.settlementPrice, e.rowChartData.lastPrice = c.formatPrice(t.settlementPrice)), t.previousPrice && c.formatPrice(t.previousPrice) !== e.financialData.previousPrice && (e.financialData.previousPrice = c.formatPrice(t.previousPrice))
                                }(i);
                                break;
                            case "Realtime":
                                ! function(t, a) {
                                    a.lowPrice && c.formatPrice(a.lowPrice) !== e.rowChartData.lowPrice && (e.rowChartData.lowPrice = c.formatPrice(a.lowPrice), l.lowPrice = a.lowPrice, o.lowPrice = !0), a.highPrice && c.formatPrice(a.highPrice) !== e.rowChartData.highPrice && (e.rowChartData.highPrice = c.formatPrice(a.highPrice), l.highPrice = a.highPrice, o.highPrice = !0), a.openPrice && c.formatPrice(a.openPrice) !== e.rowChartData.openPrice && (l.openPrice = a.openPrice, e.rowChartData.openPrice = c.formatPrice(a.openPrice)), a.lastPrice && c.formatPrice(a.lastPrice) !== e.rowChartData.lastPrice && (l.lastPrice = a.lastPrice, e.rowChartData.lastPrice = c.formatPrice(a.lastPrice)), t.previousPrice && c.formatPrice(t.previousPrice) !== e.financialData.previousPrice && (e.financialData.previousPrice = c.formatPrice(t.previousPrice), o.previousPrice = !0), t.volume && u(t.volume) !== e.financialData.volume && (e.financialData.volume = u(t.volume), o.volume = !0)
                                }(i, r);
                                break;
                            default:
                                ! function(t) {
                                    t.volume && u(t.volume) !== e.financialData.volume && (e.financialData.volume = u(t.volume), o.volume = !0), t.lastPrice && c.formatPrice(t.lastPrice) !== e.rowChartData.lastPrice && (l.lastPrice = t.lastPrice, e.rowChartData.lastPrice = c.formatPrice(t.lastPrice)), t.lowPrice && c.formatPrice(t.lowPrice) !== e.rowChartData.lowPrice && (e.rowChartData.lowPrice = c.formatPrice(t.lowPrice), l.lowPrice = t.lowPrice, o.lowPrice = !0), t.highPrice && c.formatPrice(t.highPrice) !== e.rowChartData.highPrice && (e.rowChartData.highPrice = c.formatPrice(t.highPrice), l.highPrice = t.highPrice, o.highPrice = !0), t.openPrice && c.formatPrice(t.openPrice) !== e.rowChartData.openPrice && (l.openPrice = t.openPrice, e.rowChartData.openPrice = c.formatPrice(t.openPrice)), t.previousPrice && c.formatPrice(t.previousPrice) !== e.financialData.previousPrice && (e.financialData.previousPrice = c.formatPrice(t.previousPrice))
                                }(i)
                        }
                        d()
                    }
                }), e.$on("realtimeDeleteClasses", function() {
                    o = {}
                }))
            }, e.highlightValue = function(t) {
                var a = "";
                return "contractExpirationDate" === t && e.financialData.contractExpirationWithin7Days && (a += "exp-within-7-days"), "contractFirstNoticeDate" === t && e.financialData.contractFirstNoticeWithin7Days && (a += "exp-within-7-days"), o[t] && (a += "volume" === t ? "up-highlight" : n + "-highlight"), a
            }
        }
        i.$inject = ["$scope", "realtimeConnectService", "utils"], e.exports = i
    },
    "+F5q": function(e, t, a) {
        "use strict";
        var i = "UserConversionMessage";
        angular.module(i, []).controller(i + ".MainCtrl", a("IDkH")), e.exports = {
            enable: !0,
            name: i
        }
    },
    "+Gb6": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                require: "ngModel",
                scope: {
                    minuteDepends: "=",
                    ngModel: "="
                },
                link: function(t, a, i, r) {
                    var o = e.minutesRange.min,
                        n = e.minutesRange.max;
                    r.$parsers.unshift(function(e) {
                        return r.$setValidity("range", function(e) {
                            var t = !0;
                            return (+e < o || +e > n) && (t = !1), "" !== e && null !== e || (t = !1), t
                        }(e)), e
                    }), t.$watch(function() {
                        return t.minuteDepends
                    }, function(e) {
                        "I" !== e && (r.$setValidity("range", !0), a.removeClass("error-input"))
                    }), t.$watch(function() {
                        return r.$modelValue
                    }, function() {
                        r.$invalid ? a.addClass("error-input") : a.removeClass("error-input")
                    })
                }
            }
        }
        i.$inject = ["technicalChartConfig"], e.exports = i
    },
    "+JDX": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                scope: {
                    formDataModel: "=",
                    helperData: "="
                },
                link: function(t) {
                    function a(e, a) {
                        t.helperData[e].active = !a || !t.helperData[e].active;
                        var r, o = (r = [], t.helperData.forEach(function(e, t) {
                            e.active && r.push(t)
                        }), r);
                        t.helperData[e].active ? function(e, a) {
                            for (var i = e; i <= a; i++) t.helperData[i].active = !0
                        }(o[0], o[o.length - 1]) : e - 1 !== o[o.length - 1] && i(o[0], e);
                        var n = function() {
                            var e = [null, null];
                            return t.helperData.forEach(function(t) {
                                t.active && (null === e[0] && (e[0] = t.range[0]), e[1] = t.range[1])
                            }), e
                        }();
                        t.formDataModel.value = null !== n[0] ? n : []
                    }

                    function i(e, a) {
                        for (var i = e; i <= a; i++) t.helperData[i].active = !1
                    }

                    function r() {
                        i(0, t.helperData.length - 1)
                    }
                    if (t.$on("screenerRangeHelperReset", function() {
                            r()
                        }), t.updateFilter = function(t) {
                            e.checkPermissions() && a(t, !0)
                        }, t.formDataModel.value.every(function(e) {
                            return "" === e
                        })) t.helperData.forEach(function(e, t) {
                        e.default && a(t)
                    });
                    else {
                        var o = Array.prototype.slice.call(t.formDataModel.value),
                            n = 0;
                        try {
                            o.forEach(function(e, i) {
                                try {
                                    t.helperData.forEach(function(t, r) {
                                        if (Array.isArray(t.range) && t.range[0] === o[0] && t.range[1] === o[1]) throw a(r), n = 2, new Error("break");
                                        if (Array.isArray(t.range) && t.range[i] === e) throw a(r), n++, new Error("continue")
                                    })
                                } catch (e) {
                                    if ("break" === e.message) throw new Error("end")
                                }
                            }), 2 !== n && (r(), t.formDataModel.value[0] = o[0], t.formDataModel.value[1] = o[1])
                        } catch (e) {}
                    }
                },
                template: a("xjiV")
            }
        }
        i.$inject = ["screenerPermissionService"], e.exports = i
    },
    "+NFT": function(e, t) {
        e.exports = '<div class=bc-technical-chart data-ng-class="{\'full-screen\': fullScreen, \'flipchart\': flipChartMode}"> <div class=quick-chart-settings> <dashboard-technical-chart-quick-settings data-draw-chart=drawChart() data-current-symbol=currentSymbol data-symbol-sector=symbolSector data-form-data=formData.forms.basic data-chart-data=chartData data-full-screen=fullScreen data-error=error data-my-charts-mode=myChartsMode data-data-loading=dataLoading></dashboard-technical-chart-quick-settings> </div> <div data-ng-hide=shouldMapBeShown() class="image-map-data hide-for-small-only"> <div class=image-map-data-inner data-ng-if=mapDataEmpty> [[ ::mapDataEmpty ]] </div> <div class=image-map-data-inner data-ng-if=!mapDataEmpty> <span class=main data-ng-bind=tooltipData.date></span> <span class=main data-ng-bind=tooltipData.symbol></span> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.open> <span>Open:</span> <span data-ng-bind=tooltipBaseData.open></span> </div> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.high> <span>High:</span> <span data-ng-bind=tooltipBaseData.high></span> </div> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.low> <span>Low:</span> <span data-ng-bind=tooltipBaseData.low></span> </div> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.close> <span>Close:</span> <span data-ng-bind=tooltipBaseData.close></span> </div> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.Volume> <span>Volume:</span> <span data-ng-bind=tooltipBaseData.Volume></span> </div> <div class=inline-image-helper-desk data-ng-repeat="(key, value) in tooltipData"> <span data-ng-hide="key === \'date\' || key === \'symbol\'">[[ key | ucfirst ]]:</span> <span data-ng-hide="key === \'date\' || key === \'symbol\'" data-ng-bind=value></span> </div> </div> </div> <div class=chart-view> <div class="chart-template js-chart-template"> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=technical-chart__chart-error-block data-ng-show=chartError> [[ chartError ]] </div> <img data-ng-mouseleave=hideTooltip() data-ng-hide=chartError data-bc-click-outside=hideTooltip() data-bc-responsive-image-map data-ng-class="{\'opacity\':dataLoading}" usemap=#bcTechnicalChartMap class="chart-image js-chart-image" data-ng-src="[[ chartData.image ]]"/> <map id=bc-technical-chart-image-map data-bc-image-map-tooltip=technical-chart-image-tooltip data-tooltip-left="[[ toolTipLeft ]]" data-image-class=js-chart-image name=bcTechnicalChartMap></map> <technical-chart-tooltip-box data-ng-show=shouldMapBeShown() data-id=technical-chart-image-tooltip data-class=technical-chart-image-tooltip data-show-tooltip=showTooltip data-tooltip-base-data=tooltipBaseData data-tooltip-data=tooltipData data-map-data-empty=mapDataEmpty> </technical-chart-tooltip-box> </div> </div> <div class="chart-form-wrapper no-print" data-ng-hide=flipChartMode> <form class="chart-form bc-form" novalidate name=technicalChartForm data-ng-submit=drawChartButtonClick()> <div class="chart-form-section border-bottom"> <div class="row collapse"> <div class="column small-12" data-ng-class="{\'medium-4\': !fullScreen}"> <div class=form-close-wrapper data-ng-show=fullScreen> <i class="bc-glyph-times form-close" data-ng-click=toggleChartForm()></i> </div> <div data-ng-show=error.symbol class=error-block> <span class=error-msg data-ng-bind=error.symbol></span> </div> <label class=section-label for=bc-technical-chart__input-symbol data-ng-hide="chartSettings.currentSetting === technicalChartConfig.chartSettings.SPREAD">Enter Symbol:</label> <input id=bc-technical-chart__input-symbol data-ng-hide="chartSettings.currentSetting === technicalChartConfig.chartSettings.SPREAD" class="technical-chart-symbol-input js-technical-chart-symbol-form-in-base" data-ng-class="{\'error-input\': error.symbol}" type=text placeholder=Symbol name=symbol data-ng-model=formData.forms.basic[fields.SYMBOL] /> </div> <div class="column small-12 text-right" data-ng-class="{\'medium-8\': !fullScreen}"> <technical-chart-comparison-link data-ng-show="chartSettings.currentSetting === \'comparison\'" data-comparison-form=formData.forms.comparison data-symbol="[[ ::currentSymbol.symbol ]]" data-symbol-sector="[[ ::symbolSector ]]" data-symbol-type="[[ ::currentSymbol.symbolType ]]"></technical-chart-comparison-link> <label class=bc-technical-chart__select-chart-type-label for=bc-technical-chart__select-chart-type>Chart Type:</label> <div class="bc-dropdown styled bc-technical-chart__select-chart-settings"> <select name=chartSetting id=bc-technical-chart__select-chart-type data-ng-model=chartSettings.currentSetting data-ng-options="setting.value as setting.title for setting in chartSettingTypes"> </select> </div> </div> </div> </div> <div class=error-block data-ng-show=technicalChartForm.minutesPeriod.$invalid> <span class=error-msg data-ng-show=technicalChartForm.minutesPeriod.$invalid> Use minutes value in range: 1-999 </span> </div> <div data-ng-switch on=chartSettings.currentSetting> <div data-ng-switch-when=basic> <technical-chart-basic-settings data-symbol-sector=symbolSector data-form=technicalChartForm data-form-submitted=formSubmitted data-form-data=formData.forms.basic></technical-chart-basic-settings> </div> <div data-ng-switch-when=spread> <technical-chart-spread-settings data-symbol="[[ currentSymbol.symbol ]]" data-error=error data-form-data=formData.forms.spread data-full-screen=fullScreen></technical-chart-spread-settings> <technical-chart-basic-settings data-is-spread="[[ true ]]" data-form=technicalChartForm data-form-submitted=formSubmitted data-symbol-sector=symbolSector data-form-data=formData.forms.basic></technical-chart-basic-settings> </div> <div data-ng-switch-when=comparison> <technical-chart-comparison-settings data-symbol-sector=symbolSector data-error=error data-form-data=formData.forms.comparison data-full-screen=fullScreen></technical-chart-comparison-settings> <technical-chart-basic-settings data-symbol-sector=symbolSector data-form=technicalChartForm data-form-submitted=formSubmitted data-form-data=formData.forms.basic></technical-chart-basic-settings> </div> </div> <div class=chart-form-section> <div data-ng-show="dateRangeError && formSubmitted" class=error-block> <span class=error-msg>Please make sure the date ranged entered uses the format MM/DD/YYYY.</span> </div> <dashboard-technical-chart-buttons></dashboard-technical-chart-buttons> </div> </form> </div> </div>'
    },
    "+NOo": function(e, t) {
        e.exports = '<div class="bc-portfolio-visualization-investment-weights chart-wrapper"> <highchart data-config=config></highchart> </div>'
    },
    "+Qev": function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i) {
                    e.search().timeFrame && "daily" === e.search().timeFrame ? i.addClass("hide") : i.removeClass("hide"), a.$on("filterChange", function(a, r) {
                        void 0 !== r && r.name && "timeFrame" === r.name && ("daily" === r.value ? (i.addClass("hide"), e.search().viewName && e.search().viewName === t.EXTENDED && e.search("viewName", t.MAIN), e.search().portfolioViewName && e.search().portfolioViewName === t.EXTENDED && e.search("portfolioViewName", t.PORTFOLIO)) : i.removeClass("hide"))
                    })
                }
            }
        }
        i.$inject = ["$location", "viewsConstants"], e.exports = i
    },
    "+fs9": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.ref = t, e.instance = a
        }
        i.$inject = ["$scope", "ref", "$modalInstance"], e.exports = i
    },
    "+jbq": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            function i(t, a) {
                e.save()
            }

            function r(a, i, r) {
                setTimeout(function() {
                    switch (i.id) {
                        case "FiftyPercentLine":
                            t.toolMiddleLine(i).then(function() {
                                e.save()
                            });
                            break;
                        case "ComputedText":
                            "ProfitLoss" === i.extras.kind ? t.toolProfitLoss(i).then(function() {
                                e.save()
                            }) : "RewardRisk" === i.extras.kind && t.toolRewardRisk(i).then(function() {
                                e.save()
                            });
                            break;
                        default:
                            t.openAnnotationModal(i).then(function() {})
                    }
                }, 300)
            }

            function o() {
                e.save()
            }

            function n() {
                e.save()
            }

            function s(e, t) {
                t.elementId && "bc-interactive-chart__chart-container" === t.elementId && (a.hasData = !1)
            }
            this.EVENTS = {
                CH_NODATAFORMAINSYMBOL: "CH_NODATAFORMAINSYMBOL",
                CH_ANNOTATIONCHANGED: "CH_ANNOTATIONCHANGED",
                CH_PANEHEIGHTSCHANGED: "CH_PANEHEIGHTSCHANGED",
                CH_CARDPLOTCLICKED: "CH_CARDPLOTCLICKED",
                CH_ANNNEEDSCONTEXTMENU: "CH_ANNNEEDSCONTEXTMENU",
                CH_PANESREORDERED: "CH_PANESREORDERED"
            }, this.subscribeOnChartEvents = function(e) {
                -1 !== e.indexOf("CH_NODATAFORMAINSYMBOL") && Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_NODATAFORMAINSYMBOL, s), -1 !== e.indexOf("CH_ANNOTATIONCHANGED") && Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_ANNOTATIONCHANGED, n), -1 !== e.indexOf("CH_PANEHEIGHTSCHANGED") && Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_PANEHEIGHTSCHANGED, o), e.indexOf("CH_ANNNEEDSCONTEXTMENU") && Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_ANNNEEDSCONTEXTMENU, r), e.indexOf("CH_PANESREORDERED") && Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_PANESREORDERED, i)
            }, this.unsubscribeOnChartEvents = function(e) {
                -1 !== e.indexOf("CH_NODATAFORMAINSYMBOL") && Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(s), -1 !== e.indexOf("CH_ANNOTATIONCHANGED") && Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(n), -1 !== e.indexOf("CH_PANEHEIGHTSCHANGED") && Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(o), e.indexOf("CH_ANNNEEDSCONTEXTMENU") && Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(r), e.indexOf("CH_PANESREORDERED") && Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(i)
            }
        }
        i.$inject = ["interactiveChartStateService", "interactiveChartModals", "chartVisibility"], e.exports = i
    },
    "+k7j": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    comment: "=",
                    portfolioId: "=",
                    deleteComment: "&",
                    deletePending: "=",
                    editableComment: "=",
                    symbolsData: "=",
                    publicView: "="
                },
                controller: ["$scope", function(t) {
                    t.commentModel = t.comment.body, t.showFull = !1, t.saveComment = function() {
                        t.errorMessage = !1, t.commentModel ? e.editComment(t.portfolioId, t.comment.id, {
                            body: t.commentModel
                        }).then(function(e) {
                            t.comment = e.data[0], t.close()
                        }, function(e) {
                            t.errorMessage = e.error && e.error.message && e.error.message.body ? e.error.message.body[0] : "Something went wrong"
                        }) : t.deleteComment()
                    }, t.editComment = function() {
                        t.editableComment.item_id = t.comment.id, t.editableComment.type = t.comment.type
                    }, t.isCurrentOpen = function() {
                        return t.editableComment.item_id === t.comment.id && t.editableComment.type === t.comment.type
                    }, t.close = function() {
                        t.editableComment.item_id = !1, t.editableComment.type = !1, t.errorMessage = !1, t.commentModel = t.comment.body
                    }
                }],
                template: a("ZNtd")
            }
        }
        i.$inject = ["portfolioApiFactory"], e.exports = i
    },
    "+kSv": function(e, t, a) {
        "use strict";

        function i(e) {
            var t, a = !1;
            return e.isIOS() && e.isMobile() && angular.element(document).on("touchstart", function(e) {
                a && (angular.element(document.querySelector('[data-barchart-datatable-chart-view-tooltip-toggle="' + t + '"]')).triggerHandler("click"), angular.element(document.querySelectorAll(".js-chart-down")).removeClass("background-negative"), angular.element(document.querySelectorAll(".js-chart-up")).removeClass("background-positive"), a = !1)
            }), {
                restrict: "A",
                link: function(i, r, o) {
                    e.isMobile() ? r.on("click", function(e) {
                        t = r.attr("data-barchart-datatable-chart-view-tooltip-toggle"), angular.element(document.querySelectorAll(".js-chart-down")).removeClass("background-negative"), angular.element(document.querySelectorAll(".js-chart-up")).removeClass("background-positive"), r.hasClass("js-chart-up") && r.addClass("background-positive"), r.hasClass("js-chart-down") && r.addClass("background-negative"), a = !0
                    }) : (r.on("mouseenter", function() {
                        r.hasClass("js-chart-up") && r.addClass("background-positive"), r.hasClass("js-chart-down") && r.addClass("background-negative"), r.triggerHandler("click")
                    }), r.on("mouseleave", function() {
                        r.triggerHandler("click"), r.removeClass("background-negative"), r.removeClass("background-positive")
                    }))
                }
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    "+mcS": function(e, t) {
        e.exports = '<div class=register-block> <div data-ng-hide=success> <h2 class=header>Free Membership</h2> <div class=social-block> <div class=block-for-social><data-social-component></data-social-component></div> <span class=social-text-small>(We won\'t post to your account)</span> <div class=use-email-text>Or use email</div> </div> <form novalidate name=registerForm class="bc-form bc-login-form" data-ng-submit=register(registerForm)> <div class=form-group> <input type=text class="form-input form-field-login" name=first_name placeholder="First Name" data-ng-model=user.first_name> </div> <div class=form-group> <input type=text class="form-input form-field-login" name=last_name placeholder="Last Name" data-ng-model=user.last_name> </div> <div class="form-group exta-margin" data-ng-class="{\'error-input\':registerForm.email.$invalid && registerForm.$submitted}"> <input type=email data-ng-class="{\'remove-chrome-highlight\':registerForm.email.$invalid && registerForm.$submitted}" class="form-input form-field-login" placeholder="Email Address" name=email required autofocus data-ng-model=user.email data-bc-ng-email-validation> </div> <div class="form-group field-password-wrapper" data-ng-class="{\'error-input\':registerForm.password.$invalid && registerForm.$submitted}"> <input type=password data-hj-masked id=login-form-password data-ng-class="{\'remove-chrome-highlight\':registerForm.password.$invalid && registerForm.$submitted}" class="form-input form-field-login" name=password placeholder=Password required data-ng-minlength=5 data-ng-model=user.password> <data-show-password password-id="\'login-form-password\'" class=peek-at-password></data-show-password> </div> <p class=help-text>*Password must be at least 6 characters</p> <div class="form-group chart-of-the-day"> <div class=input-checkbox> <input id=chartOfTheDay name=chartOfTheDay data-ng-model=user.chartOfTheDay data-ng-init="user.chartOfTheDay=true" type=checkbox checked=checked> <label for=chartOfTheDay> <span class=bc-glyph-check></span> Send me your daily Chart-of-the-Day email. </label> </div> </div> <errors-component class=error-block data-ng-show=hasErrors data-form=registerForm data-messages="{\'email\':\'A valid permanent Email Address is required for activation.\'}" data-errors=errors></errors-component> <button type=submit class="form-field-submit create-account-btn">Create a free account</button> </form> <p class=back-link> <a href="" class="bc-button white-with-border login-button" data-ng-click=goToLogin()>I have an account. Log me in.</a> </p> <p class=policy-text> By signing up you indicate that you have read and agree to the <a target=_self class=link data-ng-href="[[ termServiceLink ]]">Terms of Service</a> and <a target=_self class=link data-ng-href="[[ privacyPolicyLink ]]">Privacy Policy</a>. </p> </div> <div class=activate-block data-ng-show=success> <h2 class=header>Activate Your Account</h2> <p class=forgot-text>Please check your inbox for a link to activate your My Barchart Account.</p> <p class=forgot-text>If you do not receive the email within a few minutes check your spam folder or <a href="" data-ng-click=goToContact()>contact our support team</a> for assistance.</p> <button class="form-field-submit create-account-btn" data-ng-click=close()>ok</button> </div> </div>'
    },
    "+wVO": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close();></i> </div> <div class=modal-inner-wrapper> <div>You\'ve reached the maximum number of (reports/charts) that can be sent through your account. Please <a href=/contact>Contact Us</a> to discuss premium market data delivery options through Barchart OnDemand.</div> <button type=button data-ng-click=close() class="form-field-submit create-account-btn">Close</button> </div> </div> </div>'
    },
    "+zsO": function(e, t) {
        e.exports = '<div class="chart-date-range bc-form"> <div class=date-wrapper> <div class=bc-datepicker-item> <input type=text name=dateFrom autocomplete=off class=bc-datepicker-control data-ng-model=settings.range.from data-ng-blur=checkDates() data-ng-change=applyRange() placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-bs-datepicker data-ng-disabled="settings.period !== \'CUSTOM\'"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> <span class=date-separator>-</span> <div class=date-wrapper> <div class=bc-datepicker-item> <input type=text name=date class=bc-datepicker-control data-ng-model=settings.range.to data-ng-blur=checkDates() data-ng-change=applyRange() placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy autocomplete=off data-bs-datepicker data-placement=bottom-right data-ng-disabled="settings.period !== \'CUSTOM\' || !settings.range.from"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> </div>'
    },
    "/0Wh": function(e, t) {
        e.exports = "<div class=signal-chart-link-wrapper> <a data-bc-flipcharts=flipcharts data-symbol=symbol data-options=options> <i class=bc-glyph-line-chart></i> </a> </div> "
    },
    "/25k": function(e, t, a) {
        "use strict";
        e.exports = [{
            category: "General News",
            feeds: [
                [{
                    name: "Associated Press",
                    feed: "Associated Press",
                    selected: !0
                }],
                [{
                    name: "Canadian Press",
                    feed: "Canadian Press",
                    selected: !0
                }]
            ]
        }, {
            category: "Press Releases and Filings",
            feeds: [
                [{
                    name: "BusinessWire",
                    feed: "BusinessWire",
                    selected: !0
                }, {
                    name: "PR Newswire",
                    feed: "PR Newswire",
                    selected: !0
                }, {
                    name: "PRWeb",
                    feed: "PRWeb",
                    selected: !0
                }],
                [{
                    name: "Marketwired",
                    feed: "Marketwired",
                    selected: !0
                }, {
                    name: "CNW Newswire",
                    feed: "CNW Newswire",
                    selected: !0
                }]
            ]
        }]
    },
    "/2ZT": function(e, t, a) {
        "use strict";
        var i = "NewsSearchForm";
        angular.module(i, []).controller(i + ".NewsSearchFormCtrl", a("Q9yX"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "/2vM": function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-modal-save-screener"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=modalScreenerClose()></i> </div> <h5 class=modal-title data-ng-show=!isEdit>Save Screener</h5> <h5 class=modal-title data-ng-show=isEdit>Edit Screener</h5> <form novalidate="" autocomplete=off class=bc-form name=screenerForm data-ng-submit=saveScreener(screenerForm)> <div class="bc-modals-tabs__tab-content screen-info"> <div class=modal-content-form-wrapper-input> <div class="form-items bc-screener__save-modal"> <div class="form-item screener-name" data-ng-class="{\'disabled\': isEdit || limitReached}"> <input type=text data-ng-disabled="isEdit || limitReached" maxlength=21 name=screenerName data-ng-class="{\'error\': (screenerForm.screenerName.$invalid && screenerForm.$submitted) || showConfirmation}" data-ng-model=screener.name data-ng-maxlength=20 data-ng-change=changeName() autofocus autocomplete=off placeholder="Enter a name..." required="" class=placeholder /> <i data-ng-show=!isEdit class=bc-glyph-chevron-down data-ng-click=toggleAutocomplete()></i> </div> <div class=bc-screener-name__template-autocomplete-block data-ng-show=showAutocomplete> <ul> <li data-ng-repeat="tmpl in templateList | filter:screener.name:startsWith track by $index" data-ng-click=applyExistingTemplateName(tmpl)> [[ tmpl.name ]] </li> </ul> </div> <div class="form-item margin-top-10"> <textarea name=screenerDesc data-ng-class="{\'error\': screenerForm.screenerDesc.$invalid && screenerForm.$submitted}" data-ng-model=screener.description data-ng-maxlength=80 maxlength=81 placeholder="Enter optional description here..."></textarea> </div> <h5 data-ng-if=addViewAndSort class="modal-title text-left bold">Barchart Premier Options</h5> <div class="form-item dropdown" data-ng-if=addViewAndSort> <label for=bc-screener__set-view>View:</label> <div class="bc-dropdown filter view-name bc-screener__set-view"> <select data-ng-model=screener.view data-ng-disabled=!isPremier data-show-custom-views-options id=bc-screener__set-view name=view> <option value=filter_view>Filter View</option> <option value=main>Main View</option> <option value=technical>Technical</option> <option value=performance>Performance</option> </select> <div class=invisible-block data-ng-click=checkPremier() data-ng-if=!isPremier></div> </div> </div> <div class="form-item dropdown sort-by" data-ng-if=addViewAndSort> <label for=bc-screener__order>Sort By:</label> <div class="bc-dropdown filter view-name bc-screener__set-view"> <select data-ng-disabled=!isPremier data-ng-model=screener.order_by data-screener=screener data-show-current-view-fields id=bc-screener__order name=order_by> <option value=symbol>Symbol</option> </select> <div class=invisible-block data-ng-click=checkPremier() data-ng-if=!isPremier></div> </div> <div class="radios-wrapper js-check-premier" data-ng-if=addViewAndSort> <div class=input-radio> <input type=radio data-ng-disabled=!isPremier id=bc-screener__order-asc name=order_dir data-ng-model=screener.order_dir value=asc /> <label for=bc-screener__order-asc><span></span>Ascending</label> </div> <div class=input-radio> <input type=radio data-ng-disabled=!isPremier id=bc-screener__order-desc name=order_dir data-ng-model=screener.order_dir value=desc /> <label for=bc-screener__order-desc><span></span>Descending</label> </div> </div> </div> <div class=form-item-errors> <span data-ng-show=screenerForm.screenerName.$error.maxlength> Name must be between 1 and 20 characters </span> <span data-ng-show=screenerForm.screenerDesc.$error.maxlength> Description must be between 1 and 80 characters </span> <span data-ng-show="screenerForm.screenerName.$error.required && screenerForm.$submitted"> Name is required </span> <span data-ng-show="error && screenerForm.$submitted" data-ng-bind=error></span> </div> </div> </div> </div> <div class="bc-modals-tabs__tab-content report js-check-premier-report bc-screener__save-modal" data-ng-show=addViewAndSort> <p class=text-left>Schedule the results of this screener to be delivered to <b>[[ email ]]</b>, the <a target=_self href=/my/profile>primary email address</a> on your account</p> <div class=form-item> <label for=bc-modal-save-screener__send-report> Send Report: </label> <div class=input-checkbox> <input id=bc-modal-save-screener__send-report data-ng-model=screener.send_report data-ng-true-value=1 data-ng-false-value=0 name=send_report data-ng-change=checkEodCount(screener.send_report) data-ng-disabled=!isPremier type=checkbox> <label for=bc-modal-save-screener__send-report> <span class=bc-glyph-check></span> </label> </div> </div> <div class="form-item dropdown" data-ng-if=addViewAndSort> <label for=bc-screener__nbr-results>Email Me:</label> <div class="bc-dropdown filter view-name bc-screener__set-view" data-ng-class="{\'disabled\': !screener.send_report }"> <select data-ng-model=screener.nbr_results data-ng-disabled="!isPremier || !screener.send_report " id=bc-screener__nbr-results name=nbr_results data-ng-options="opt.val as opt.label for opt in limitOptions"> </select> <div class=invisible-block data-ng-click="checkPremier(\'eodScreeners\')" data-ng-if=!isPremier></div> </div> </div> <div class="form-item attach-csv"> <div class=input-checkbox> <input id=bc-modal-save-screener__attach-csv data-ng-model=screener.email_csv data-ng-true-value=1 data-ng-false-value=0 name=email_csv data-ng-class="{\'disabled\': !screener.send_report }" data-ng-disabled="!isPremier || !screener.send_report" type=checkbox> <label for=bc-modal-save-screener__attach-csv> <span class=bc-glyph-check></span> Attach .csv of first 1000 results </label> </div> </div> </div> <div class=modal-content-form-wrapper-input> <div class=form-item-errors> <span data-ng-show=showConfirmation> A screener with this name already exists. Do you want to replace it? </span> </div> </div> <div class="form-buttons margin-top-10"> <input type=submit class="bc-button save light-blue" value=Save data-ng-show=!showConfirmation> <input type=button data-ng-click=modalScreenerClose() class="bc-button cancel grey" value=CANCEL data-ng-show=showConfirmation> <input type=submit class="bc-button save light-blue" value=Replace data-ng-show=showConfirmation> </div> </form> </div>'
    },
    "/AcI": function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <p data-ng-if=portfolio>Are you sure you want to delete this portfolio and all its transactions? You will not be able to undo this action.</p> <h5 class=text-center data-ng-if=portfolio>[[ portfolio ]]</h5> <p data-ng-if=!portfolio>Are you sure you want to delete this transaction? You will not be able to undo this action.</p> <div> <a class="bc-button grey ok ctxt" data-ng-click=cancel()>Cancel</a> <a class="bc-button light-blue ok ctxt" data-ng-click=confirm()>Delete</a> </div> </div>'
    },
    "/DrK": function(e, t, a) {
        "use strict";
        var i = "IntradayChart";
        angular.module(i, []).directive("expandChart", a("nJBB")).constant("expandChartConfig", a("Xla2"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "/IDI": function(e, t) {
        e.exports = '<div class="barchart-symbol-widget widget-overview"> <div class=barchart-symbol-widget__title> Overview <a data-ng-href="[[  \'/\' + sector + \'/quotes/\' + symbol ]]" class="bc-button small white-with-border right" target=_blank> Full Quote </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href="[[ \'/\' + sector + \'/quotes/\' + symbol ]]" target=_blank> <div class=barchart-symbol-widget__columns> <div class=barchart-symbol-widget__left-column> <div class="bc-quote-overview dashboard"> <div data-ng-cloak class="bc-quote-row-chart row"> <div class=row> <div class="small-6 column"> <div>[[ rowChartData.labelLow ]]</div> <div class=inline data-ng-show=rowChartData.lowPriceFormatted>[[ rowChartData.lowPriceFormatted ]]</div> <div class=inline data-ng-show=!rowChartData.lowPriceFormatted>[[ rowChartData.lowPrice ]]</div> </div> <div class="small-6 column text-right"> <div>[[ rowChartData.labelHigh ]]</div> <div class=inline data-ng-show=rowChartData.highPriceFormatted>[[ rowChartData.highPriceFormatted ]]</div> <div class=inline data-ng-show=!rowChartData.highPriceFormatted>[[ rowChartData.highPrice ]]</div> </div> </div> <barchart-row-chart data-ng-if=rowChartData.mark data-approach=rowChartData.chartWidth data-mark-value=rowChartData.openPrice data-mark-text="\'Open\'" data-mark=rowChartData.mark></barchart-row-chart> <barchart-row-chart data-ng-if=!rowChartData.mark data-approach=rowChartData.chartWidth></barchart-row-chart> <div data-ng-if="rowChartData.lowDate && rowChartData.highDate" class="row row-chart-since"> <div class="small-6 column"> since [[ rowChartData.lowDate ]] </div> <div class="small-6 column text-right"> since [[ rowChartData.highDate ]] </div> </div> </div> </div> <ul class="barchart-symbol-widget__list first-with-border"> <li data-ng-if=data.previousPrice> <span class=right>[[ data.previousPrice ]]</span> Previous Close </li> <li data-ng-if=data.volume> <span class=right>[[ data.volume ]]</span> Volume </li> <li data-ng-if=data.openInterest> <span class=right>[[ data.openInterest ]]</span> Open Interest </li> <li data-ng-if=data.averageVolume> <span class=right>[[ data.averageVolume ]]</span> Avg Vol </li> <li data-ng-if=data.highPriceYtd> <span class=right>[[ data.highPriceYtd ]]</span> YTD High </li> <li data-ng-if=data.lowPriceYtd> <span class=right>[[ data.lowPriceYtd ]]</span> YTD Low </li> <li data-ng-if=data.priceChange5d> <span class=right data-ng-class=setColor(data.priceChange5d)>[[ data.priceChange5d ]]</span> 5-Day Change </li> <li data-ng-if=data.yearRange> <span class=right>[[ data.yearRange ]]</span> 52-Week Range </li> </ul> </div> <div class=barchart-symbol-widget__right-column> <div class="barchart-symbol-widget__title text-uppercase"> Performance - Past 5 Days </div> <div class=dashboard-widget-table-wrapper> <table> <tr> <th class=text-left>Date</th> <th>Last</th> <th>Change</th> <th>%Chg</th> </tr> <tr data-ng-repeat="item in performance"> <td class=text-left>[[ item.date ]]</td> <td>[[ item.lastPrice ]]</td> <td data-ng-class=setColor(item.priceChange)>[[ item.priceChange ]]</td> <td data-ng-class=setColor(item.percentChange)>[[ item.percentChange ]]</td> </tr> </table> </div> </div> </div> </a> </div>'
    },
    "/Qdw": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l) {
            var c = this;

            function d(i, r) {
                var o = a.defer();
                if (i[t.COMPARE_FIRST_SYMBOL_VALUE] || i[t.COMPARE_SECOND_SYMBOL_VALUE] || i[t.COMPARE_THIRD_SYMBOL_VALUE]) {
                    var s = [i[t.COMPARE_FIRST_SYMBOL_VALUE], i[t.COMPARE_SECOND_SYMBOL_VALUE], i[t.COMPARE_THIRD_SYMBOL_VALUE]].filter(function(e) {
                        return e
                    });
                    e.validSymbols(s).then(function(e) {
                        if (e.length > 0) {
                            var s = [];
                            e.forEach(function(t) {
                                t && s.push(n.validateSymbol(t).then(function() {
                                    var a = e.indexOf(t);
                                    a > -1 && e.splice(a, 1)
                                }))
                            }), a.all(s).then(function() {
                                o.resolve(r)
                            }, function() {
                                e.length > 0 ? o.reject({
                                    symbols: [i[t.COMPARE_FIRST_SYMBOL_VALUE], i[t.COMPARE_SECOND_SYMBOL_VALUE], i[t.COMPARE_THIRD_SYMBOL_VALUE]].map(function(e) {
                                        return e ? e.toUpperCase() : e
                                    }),
                                    invalidSymbols: e
                                }) : o.resolve(r)
                            })
                        } else o.resolve(r)
                    })
                } else o.resolve(r);
                return o.promise
            }
            this.drawBasicChart = function(r, o) {
                var n = a.defer();
                return o.symbol.toUpperCase() !== r[t.SYMBOL] && r.expiredSymbol !== r[t.SYMBOL] ? e.validSymbol(r[t.SYMBOL]).then(function(e) {
                    1 !== e.count || e.errors ? (i.eraseParam(t.SYMBOL), n.reject(e.errors)) : n.resolve(e.data[0])
                }) : n.resolve(o), n.promise
            }, this.drawComparisonChart = function(e, r, u) {
                var p = a.defer();
                return u.symbol.toUpperCase() === r[t.SYMBOL] || r.expiredSymbol && r.expiredSymbol === r[t.SYMBOL] ? d(e, r) : (c.drawBasicChart(r, u).then(function() {
                    d(e, r).then(function(e) {
                        p.resolve(e)
                    }, function(e) {
                        p.reject(e)
                    })
                }, function() {
                    n.validateSymbol(r.sym).then(function(e) {
                        r.expiredSymbol = r.sym, s.search("expiredSymbol", r.sym), r.sym = n.getRootSymbol(), c.symbolSector = l.getSector(e.symbolType);
                        var t = i.createRouteBySymbol(r.sym, c.symbolSector, c.fullScreen);
                        o.location.href = t
                    }, function() {
                        p.reject({
                            invalidSymbol: !0
                        })
                    })
                }), p.promise)
            }, this.drawSpreadChart = function(e, i, r, o) {
                var n = a.defer();
                return setTimeout(function() {
                    i && n.resolve(e);
                    var a = e[t.SYMBOL],
                        r = a.search(/(-|\+|\*|\/)/),
                        o = a.substring(r).search(/(-|\+|\/)/),
                        s = isNaN(+a[0]);
                    if (s || (r = a.search(/(-|\+|\/)/)), 2 === o && 2 === r ? a.substring(0, 4) : s ? a.substring(0, ~a.search(/(-|\+|\*|\/)/) ? a.search(/(-|\+|\*|\/)/) : a.length) : a.substring(0, ~a.search(/(-|\+|\/)/) ? a.search(/(-|\+|\/)/) : a.length), !s) {
                        var l = a.search(/(\*)/);
                        if (~l) {
                            var c = l + 1;
                            a.substring(c, ~a.search(/(-|\+|\/)/) ? a.search(/(-|\+|\/)/) : a.length - c)
                        }
                    }
                    n.resolve(e)
                }, 0), n.promise
            }, this.findSymbolInExpression = function(e) {
                var t = e.match(/[\^\$A-Za-z\.]+([\*\d]{1,2})?([A-Za-z\.0-9]+)/gi);
                return t ? t[0] : e
            }, this.createImageMapMarkup = function(e, t) {
                var a = "";
                return e.forEach(function(e, t) {
                    a += '<area shape="' + e.shape + '" coords="' + e.coords.join() + '" data-ng-mousemove="showAreaInfo(chartData.map[' + t + '].data)" data-ng-click="showAreaInfo(chartData.map[' + t + '].data)" data-ng-mouseleave="hideTooltipData()">'
                }), r(a)(t)
            }
        }
        i.$inject = ["technicalChartValidationService", "technicalChartFields", "$q", "technicalChartUrlService", "$compile", "$window", "bcExpiredFuturesValidation", "$location", "quotesService"], e.exports = i
    },
    "/SZW": function(e, t, a) {
        "use strict";
        var i = "CurrencyConverter";
        angular.module(i, []).controller(i + ".currencyConverterCtrl", a("63iX"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "/VwW": function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = ["$scope", function(a) {
                if (!e.config.currentSymbol) throw new Error("mediaOverlayClassicChart must be called only on quotes pages, which are under currentSymbol middleware");
                a.chartData = JSON.parse(t.get("flipcharts.classicChartData"));
                var r = a.params.date.substring(4);
                r = 6 === a.params.date.length ? "20" + r : r;
                var o, n, s = parseInt(a.params.date.substring(0, 2)) - 1,
                    l = a.params.date.substring(2, 4);
                "Entry" === a.chartData.direction ? n = (o = new Date(r, s, l).getTime()) + 158112e5 : o = (n = new Date(r, s, l).getTime()) - 158112e5, a.currentSymbol = angular.copy(e.config.currentSymbol), a.flipChartSymbolIntChartUrl = "/" + i.getSector(a.currentSymbol.symbolType) + "/quotes/" + a.currentSymbol.symbol + "/interactive-chart", a.chartSettings = {
                    interactiveStudy: a.params.interactiveChartStudy,
                    dateRange: {
                        from: o,
                        to: n
                    }
                };
                var c = angular.element(document.querySelector(".bc-overlay-modal-wrapper .modal-content"));
                c.css("min-height", window.innerHeight + 10 + "px"), window.addEventListener("resize", function() {
                    var e = window.innerHeight + 10 + "px";
                    c.css("min-height", e)
                }, !0), a.sharingUrl = window.location.href, a.sharingTitle = a.params.symbol + " Chart", window.scroll(0, 0)
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    params: "=",
                    hideOverlayModal: "&"
                },
                template: a("wg/N"),
                controller: r
            }
        }
        i.$inject = ["$window", "localStorageService", "quotesService"], e.exports = i
    },
    "/Xqz": function(e, t) {
        e.exports = '<tr class=expand-new-rows data-ng-repeat="item in newContent" data-ng-class="{\'last\': $last}"> <td data-ng-repeat="field in filterExcludeHeader(options.fields)" data-ng-class="{\'text-left\': field === \'symbolName\' }"> <div data-ng-if="field === \'symbolName\'"> <a target=_self data-ng-href="[[ getNewLineLink(item) ]]"> [[ getNewLineSymbolName(item) ]] </a> </div> <div data-ng-if="field !== \'symbolName\'"> [[ item[field] ]] </div> </td> </tr>'
    },
    "/YJv": function(e, t, a) {
        "use strict";
        var i = "TechnicalAnalysis";
        angular.module(i, []).directive("technicalAnalysis", a("D8Yk"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "/dU9": function(e, t, a) {
        "use strict";
        e.exports = function() {
            function e(e) {
                var t = angular.copy(e);
                if ("string" == typeof e) try {
                    t = JSON.parse(e)
                } catch (e) {
                    if (e instanceof SyntaxError) throw new InvalidJSONStateError;
                    throw e
                }
                return "string" == typeof e ? JSON.stringify(t) : t
            }
            return function(t) {
                var a, i, r = t;
                return "string" == typeof t && (r = JSON.parse(t)), r.template && (r.template = (a = r.template, i = angular.copy(a), "string" == typeof a && (i = JSON.parse(a)), "string" == typeof a ? JSON.stringify(i) : i)), r.definition && (r.definition = e(r.definition)), r.state && (r.state = e(r.state)), "string" == typeof t ? JSON.stringify(r) : r
            }
        }
    },
    "/f0w": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: !0,
                bindToController: {
                    loading: "=",
                    apiConfig: "@",
                    content: "=",
                    options: "=",
                    callback: "="
                },
                controller: ["apiFactory", "barchartDatatableCallbackHandlers", function(e, t) {
                    var a = this;
                    a.loading = a.loading || !0, a.apiConfig ? (a.apiConfig = JSON.parse(a.apiConfig), e.makeRequest(a.apiConfig).then(function(e) {
                        var i = e[0];
                        if (void 0 !== a.options.callback && t.hasOwnProperty(a.options.callback)) return t[a.options.callback].call(a, e), void(a.loading = !1);
                        a.callback ? a.callback(i) : a.content = i, a.loading = !1
                    })) : a.loading = !1
                }],
                controllerAs: "barchartMiniTableCtrl",
                template: a("ncC7"),
                link: function(e, t, a) {}
            }
        }
        i.$inject = [], e.exports = i
    },
    "/gYY": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e) {
                return window.encodeURIComponent(e)
            }
        }
    },
    "/j0q": function(e, t) {
        e.exports = '<form class="bc-interactive-chart__symbol-selector bc-form" data-ng-submit=$ctrl.changeSymbol() autocomplete=off> <div class=bc-interactive-chart__symbol-selector-fieldset> <input type=submit value=Go class="bc-button light-blue"> <input id=bc-technical-chart__input-symbol class="technical-chart-symbol-input js-technical-chart-symbol-selector-input" data-ng-class="{\'error-input\': $ctrl.invalidSymbol}" type=text placeholder=Symbol name=symbol autocomplete=off data-ng-focus=$ctrl.preSymbolEnter() data-ng-change=$ctrl.useSearch() data-ng-blur=$ctrl.pastSymbolEnter() data-ng-keydown=$ctrl.keyboardNavigation($event) data-ng-model=$ctrl.formData.sym /> <symbol-autocomplete data-ng-show=$ctrl.searchResultsVisible data-ng-class="{\'hide\': !$ctrl.searchResultsVisible}" data-model=$ctrl.formData.sym data-search-results=$ctrl.searchResults data-on-symbol-select=$ctrl.selectSymbol(symbol)> </symbol-autocomplete> </div> </form> '
    },
    "/oTr": function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                trackPage: function() {
                    t(function() {}, 0)
                }
            }
        }
        i.$inject = ["$location", "$timeout"], e.exports = i
    },
    "/rTH": function(e, t, a) {
        "use strict";
        angular.module("WebinarCard", []).controller("webinarCtrl", a("eBbE"));
        e.exports = {
            enable: !0,
            name: "WebinarCard"
        }
    },
    "/wNF": function(e, t) {
        e.exports = '<div class=bc-portfolio-instance> <div class="bc-datatable-toolbar clearfix invisible" data-ng-class="{\'visible\': true}"> <div class=toolbar-group> <div class=filters> <div class="bc-dropdown styled time-frame"> <select data-ng-model=timeFrame data-ng-change=changePortfolioTimeFrame() data-change-filter name=timeFrame> <option value=current>Intraday</option> <option value=daily>End-of-Day</option> </select> </div> <div class="bc-dropdown styled"> <select data-ng-model=portfolioView data-ng-change=changePortfolioView() data-show-custom-views-options data-change-filter name=portfolioViewName> <option value=portfolio>Portfolio View</option> <option value=detailed>Detailed View</option> <option value=visual>Visualization View</option> <option value=main>Main View</option> <option value=technical>Technical</option> <option value=performance>Performance</option> <option data-hide-extended-view value=extended>Extended Hours</option> </select> </div> <bc-checkbox data-cb-model=showClosedPositions data-cb-label="\'Show Closed Positions\'" data-cb-id="\'show-closed-positions\'" data-ng-disabled=disabledShowClosedPositions data-cb-click=toggleClosedPositions()></bc-checkbox> </div> </div> <div class="toolbar-group clearfix"> <div class="buttons right"> <a title="Refresh Portfolio Data" class="toolbar-button refresh" data-ng-click=refreshPortfolio()> <i class=bc-glyph-refresh></i> refresh </a> <a data-ng-show=!publicView title="Run Stock Screener on this page" class="toolbar-button screen" data-bc-screen=stocks.screener data-param-key=portfolio data-static-list="[[ portfolio.id ]]"> <i class=bc-glyph-filter></i> screen</a> <a title="View charts for all symbols" class="toolbar-button flipcharts" data-bc-flipcharts> <i class=bc-glyph-flipcharts></i> flipcharts </a> <a title="Download page to .csv file" class="toolbar-button download" data-ng-hide="portfolioView === \'visual\'" data-bc-download-button="Portfolio-[[ portfolio.caption ]]"> <i class=bc-glyph-download></i> download </a> </div> </div> </div> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <barchart-datatable data-ng-if="portfolioView !==\'visual\' && portfolioDatatableData" data-ng-show=!dataLoading data-sticky=datatableSticky data-api-config=datatableApiConfig data-content=portfolioDatatableData data-options=datatableConfig></barchart-datatable> <portfolio-visualization-view data-ng-show=!dataLoading data-ng-if="portfolioView === \'visual\'" data-portfolio=portfolio data-show-closed-positions=showClosedPositions data-time-frame=timeFrame></portfolio-visualization-view> <bc-table-pagination data-ng-if="portfolioView !==\'visual\' && datatableConfig.pagination && portfolio.items.length && !dataLoading && portfolio.item_count > datatableConfig.pagination" data-total=portfolio.item_count data-count=portfolio.items.length data-pagination=paginationParams data-show-all=!datatableConfig.paginationHideShowAll data-pagination-callback=loadPage() data-load-all=loadAllData()> </bc-table-pagination> </div>'
    },
    0: function(e, t, a) {
        a("QOqO"), e.exports = a("xQMk")
    },
    "00Va": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                restrict: "A",
                link: function r() {
                    var o = t.hash();
                    o && (document.querySelector("#" + o), e.isMobile() || (a.yOffset = 120), a(o));
                    i.$on("$locationChangeSuccess", function() {
                        r()
                    })
                }
            }
        }
        i.$inject = ["utils", "$location", "$anchorScroll", "$rootScope"], e.exports = i
    },
    "037f": function(e, t, a) {
        "use strict";
        var i = "AnalystRating";
        angular.module(i, []).directive("symbolChart", a("kcEl"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "05fI": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    widgetData: "=",
                    symbol: "@",
                    symbolTypeSpec: "@",
                    modalInstance: "="
                },
                controller: ["utils", "quotesService", "_", "$location", function(e, t, a, i) {
                    var r = this;
                    r.link = "/" + t.getSector(r.symbolTypeSpec) + "/quotes/" + r.symbol + "/news", r.currentURL = a.escape(i.url()).replace("?", "%3F"), r.data = r.widgetData.data, r.itemList = r.data.filter(function(t) {
                        return !e.filter_var(t.raw.isExternal, "BOOLEAN")
                    }), r.filter_var = e.filter_var, r.selectNews = function() {
                        r.modalInstance.close()
                    }
                }],
                controllerAs: "$ctrl",
                template: a("VkGB")
            }
        }
    },
    "07Nk": function(e, t, a) {
        "use strict";
        e.exports = {
            lineTools: [
                [{
                    label: "Trendline",
                    icon: "bc-glyph-trendline",
                    id: "Line"
                }, {
                    label: "Horizontal Line",
                    icon: "bc-glyph-line-vertical",
                    id: "HorizontalLine"
                }, {
                    label: "Vertical Line",
                    icon: "bc-glyph-line-horizontal",
                    id: "VerticalLine"
                }, {
                    label: "50% Line",
                    icon: "bc-glyph-middle-line",
                    id: "FiftyPercentLine"
                }, {
                    label: "Trend Channel",
                    icon: "bc-glyph-channel",
                    id: "TrendChannel"
                }, {
                    label: "Fibonacci Arcs",
                    icon: "bc-glyph-arc",
                    id: "FibonacciArcs"
                }, {
                    label: "Resistance Arcs",
                    icon: "bc-glyph-arc",
                    id: "SpeedResistanceArcs"
                }, {
                    label: "Ellipse",
                    icon: "bc-glyph-ellipse",
                    id: "Ellipse"
                }],
                [{
                    label: "Text",
                    icon: "bc-glyph-text-caret",
                    id: "Text"
                }, {
                    label: "Retracement",
                    icon: "bc-glyph-retracement",
                    id: "FibonacciRetracement"
                }, {
                    label: "Pitchfork",
                    icon: "bc-glyph-pitchfork",
                    id: "AndrewsPitchfork"
                }, {
                    label: "Fibonacci Fan",
                    icon: "bc-glyph-fan",
                    id: "FibonacciFan"
                }, {
                    label: "Resistance Fan",
                    icon: "bc-glyph-fan",
                    id: "SpeedResistanceFan"
                }, {
                    label: "Gann Fan",
                    icon: "bc-glyph-fan",
                    id: "GannFan"
                }, {
                    label: "Time Zone",
                    icon: "bc-glyph-timezone",
                    id: "FibonacciTimeZones"
                }, {
                    label: "Rectangle",
                    icon: "bc-glyph-rectangle",
                    id: "Rectangle"
                }]
            ],
            textTools: [
                [{
                    label: "Profit/Loss",
                    icon: "bc-glyph-percent",
                    id: "CalculateProfitLoss"
                }],
                [{
                    label: "Reward/Risk",
                    icon: "bc-glyph-calculator",
                    id: "CalculateRewardRisk"
                }]
            ],
            iconTools: [
                [{
                    label: "Arrow Up",
                    icon: "bc-glyph-arrow-up",
                    id: "SymbolArrowUp"
                }, {
                    label: "Arrow Down",
                    icon: "bc-glyph-arrow-down",
                    id: "SymbolArrowDown"
                }, {
                    label: "Arrow Right",
                    icon: "bc-glyph-arrow-right",
                    id: "SymbolArrowRight"
                }, {
                    label: "Arrow Left",
                    icon: "bc-glyph-arrow-left",
                    id: "SymbolArrowLeft"
                }, {
                    label: "Arc Up",
                    icon: "bc-glyph-arc-up",
                    id: "SymbolArcUp"
                }, {
                    label: "Arc Down",
                    icon: "bc-glyph-arc-down",
                    id: "SymbolArcDown"
                }, {
                    label: "Fish Hook",
                    icon: "bc-glyph-fish-hook",
                    id: "SymbolFishHook"
                }],
                [{
                    label: "Thumb Up",
                    icon: "bc-glyph-thumbs-o-up",
                    id: "SymbolThumbsUp"
                }, {
                    label: "Thumb Down",
                    icon: "bc-glyph-thumbs-o-down",
                    id: "SymbolThumbsDown"
                }, {
                    label: "Number 1",
                    icon: "bc-glyph-circle-1",
                    id: "SymbolOne"
                }, {
                    label: "Number 2",
                    icon: "bc-glyph-circle-2",
                    id: "SymbolTwo"
                }, {
                    label: "Number 3",
                    icon: "bc-glyph-circle-3",
                    id: "SymbolThree"
                }, {
                    label: "Question?",
                    icon: "bc-glyph-circle-question",
                    id: "SymbolQuestion"
                }]
            ]
        }
    },
    "08c9": function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "=",
                    errors: "=",
                    transactionForm: "=",
                    transactionData: "=",
                    isNote: "=",
                    showAdjustment: "=",
                    cash: "="
                },
                link: function(a) {
                    a.setColor = function(t) {
                        return e.setColor(t)
                    }, a.transactionData ? (["entry_price", "exit_price", "low_alert", "high_alert"].forEach(function(e) {
                        a.transactionData.raw[e] && (a[e] = a.transactionData[e])
                    }), ["quantity", "exit_date", "entry_date", "commission", "notes"].forEach(function(e) {
                        a.transactionData.raw[e] && "0000-00-00" !== a.transactionData.raw[e] && (a[e] = a.transactionData.raw[e])
                    }), a.adjust_cash = 1 === a.transactionData.adjust_cash ? "1" : "0", a.transactionData.action && (a.action = a.transactionData.raw.action.toString())) : (a.entry_date = new Date, a.adjust_cash = "0"), e.isMobile() || t(function() {
                        document.querySelector(".js-focus-quantity-input").focus()
                    }, 0), a.isNote && t(function() {
                        document.querySelector(".js-focus-notes-field").focus()
                    }, 0), a.setBackground = function(e) {
                        if (a.transactionData && a.transactionData.raw) {
                            var t = a.transactionData.raw.lastPrice,
                                i = e;
                            return a.transactionData && a.transactionData.exit_price && a.transactionData.raw.exit_price && (t = a.transactionData.raw.exit_price), -1 === a.transactionData.raw.action && (i = "high" === e ? "low" : "high"), "high" === e && a.transactionData.raw.high_alert && a.transactionData.raw.high_alert < t || "low" === e && a.transactionData.raw.low_alert && a.transactionData.raw.low_alert > t ? i + "-alert" : ""
                        }
                    }, a.$watch("exit_price", function(e, t) {
                        t || !e || a.exit_date || (a.exit_date = new Date)
                    })
                },
                template: a("muB7")
            }
        }
        i.$inject = ["utils", "$timeout"], e.exports = i
    },
    "0AMl": function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };

        function o(e, t, a) {
            var i = {
                between: function(e) {
                    var a, i;
                    return a = isNaN(e.value[0]) ? e.value[0] : "" === e.value[0] ? "" : -1 !== e.value[0].toString().indexOf(".") ? parseFloat(e.value[0]) : parseInt(e.value[0], 10), i = void 0 === e.value[1] && !0 === /\d{4}-\d{2}-\d{2}/.test(a) ? t("date")(new Date, "yyyy-MM-dd") : isNaN(e.value[1]) ? e.value[1] : "" === e.value[1] ? "" : -1 !== e.value[1].toString().indexOf(".") ? parseFloat(e.value[1]) : parseInt(e.value[1], 10), this.between(e.field, a, i)
                },
                gt: function(e) {
                    return this.gt(e.field, e.value)
                },
                gtField: function(e) {
                    return this.gt(e.field, e.value)
                },
                geField: function(e) {
                    return this.ge(e.field, e.value)
                },
                gte: function(e) {
                    return this.ge(e.field, e.value)
                },
                lte: function(e) {
                    return this.le(e.field, e.value)
                },
                ge: function(e) {
                    return this.ge(e.field, e.value)
                },
                le: function(e) {
                    return this.le(e.field, e.value)
                },
                eq: function(e) {
                    return this.eq(e.field, e.value)
                },
                lt: function(e) {
                    return this.lt(e.field, e.value)
                },
                ltField: function(e) {
                    return this.lt(e.field, e.value)
                },
                in: function(e) {
                    if ("symbol" === e.field) {
                        var t = e.value.replace(/[\s]/g, "").toUpperCase().split(",");
                        e.field = "symbols", e.value = t
                    }
                    return this.in(e.field, Array.isArray(e.value) ? e.value : Object.keys(e.value))
                },
                contains: function(e) {
                    return this.contains(e.field, e.value)
                },
                excludes: function(e) {
                    return this.excludes(e.field, e.value)
                },
                startsWith: function(e) {
                    var t = this.lt(e.field, e.value),
                        i = a.difference(t.args, this.args);
                    return i[0].name = "startsWith", this.args.push(i[0]), this
                },
                endsWith: function(e) {
                    var t = this.lt(e.field, e.value),
                        i = a.difference(t.args, this.args);
                    return i[0].name = "endsWith", this.args.push(i[0]), this
                }
            };
            return {
                createQuery: function(t) {
                    if (!Array.isArray(t)) throw new Error("Income parameter of screenerQueryService: createQuery method must be an array");
                    var a = new e;
                    return t.forEach(function(e) {
                        ! function(e, t) {
                            if (!Array.isArray(e)) throw new Error("Income parameter of screenerQueryService: checkProperties must be an array");
                            if (!e.every(function(e) {
                                    return e in t
                                })) throw console.error(t), new PropertyRequiredError("Object must have the following properties " + e)
                        }(["value", "field", "operator"], e), void 0 === e.value || null === e.value || "object" === r(e.value) && !e.value.length || (a = i[e.operator].call(a, e))
                    }), a
                }
            }
        }
        o.$inject = ["rqlQuery", "$filter", "_"], e.exports = o
    },
    "0Cpv": function(e, t, a) {
        "use strict";
        var i = "SymbolChart";
        angular.module(i, []).controller(i + ".symbolChartCtrl", a("6d9V"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "0Hua": function(e, t) {
        e.exports = '<div class=bc-portfolio__edit-transactions> <div class=bc-datatable-toolbar> <div class=row> <div class="column small-6 text-left"> <div class="bc-dropdown filter"> <select data-ng-model=sortOrder data-ng-change=sortRows();> <option selected=selected value="">Sort List</option> <option value=symbol>Alphabetically by Symbol </option> <option value=symbolName>Alphabetically by Name</option> <option value=entry_date>Sort by Entry Date</option> </select> </div> </div> <div class="small-6 column text-right"> <button class="bc-button white-with-border" data-ng-click=addBlankRow()>+Blank Row</button> </div> </div> </div> <div ui-tree class=bc-tools-edit__tool-symbols-row> <div class="bc-tools-edit__symbols-list-header clearfix"> <div class=bc-portfolio__edit-transactions-field-symbol>Symbol</div> <div class=bc-portfolio__edit-transactions-field-name>Name</div> <div class=bc-portfolio__edit-transactions-field-order></div> <div class=bc-portfolio__edit-transactions-field-order>Order</div> <div class=bc-portfolio__edit-transactions-field-group> <div class=bc-portfolio__edit-transactions-field-item>Action</div> <div class=bc-portfolio__edit-transactions-field-item>Quantity</div> <div class=bc-portfolio__edit-transactions-field-item>Entry Date</div> <div class=bc-portfolio__edit-transactions-field-item>Entry Price</div> <div class=bc-portfolio__edit-transactions-field-item>Exit Date</div> <div class=bc-portfolio__edit-transactions-field-item>Exit Price</div> </div> </div> <ul ui-tree-nodes class=bc-tools-edit__symbols-list data-ng-model=treeTransactions> <li ui-tree-node class="bc-tools-edit__symbols-list-symbol bc-tools-edit__tool-symbols-row" data-ng-repeat="node in treeTransactions" data-ng-class-odd="\'odd\'"> <span class="left bc-glyph-minus-circle bc-tools-edit__symbol-delete visibility-animated" data-ng-class="{\'invisible\': pendingTransactionDelete === node}" data-ng-click=removeTransaction(node)></span> <div class=bc-tools-edit__delete-symbol data-ng-show="pendingTransactionDelete === node"> <span class=block-title data-ng-if="node.symbol !== \'~\'">Delete [[ node.symbol ]]?</span> <span class=block-title data-ng-if="node.symbol === \'~\'">Delete Blank Row?</span> <a class="bc-button small light-blue" data-ng-click=removeTransactionConfirm($index)>Yes</a> <a class="bc-button small grey" data-ng-click=removeTransactionCancel()>No</a> </div> <div class=bc-tools-edit__symbol-data> <div class="bc-portfolio__edit-transactions-field-symbol visibility-animated" data-ng-class="{\'invisible\': pendingTransactionDelete === node}">[[ node.symbol | blankRow ]]</div> <div class="bc-portfolio__edit-transactions-field-name visibility-animated" data-ng-class="{\'invisible\': pendingTransactionDelete === node}"> [[ node.symbolName ]]</div> <div class="bc-portfolio__edit-transactions-field-group visibility-animated" data-ng-class="{\'invisible\': pendingTransactionDelete === node}"> <div class=hide-for-large-up> <div data-ng-if="node.action && node.quantity"> [[ node.action ]] [[ node.quantity ]] on [[ node.entry_date ]] for [[ node.entry_price ]] </div> <div data-ng-if="node.exit_date && node.exit_price"> Exit on [[ node.exit_date ]] @ [[ node.exit_price ]] </div> </div> <div class=show-for-large-up> <div class=bc-portfolio__edit-transactions-field-item>[[ node.action ]]</div> <div class=bc-portfolio__edit-transactions-field-item>[[ node.quantity ]]</div> <div class=bc-portfolio__edit-transactions-field-item>[[ node.entry_date ]]</div> <div class=bc-portfolio__edit-transactions-field-item>[[ node.entry_price ]]</div> <div class=bc-portfolio__edit-transactions-field-item>[[ node.exit_date ]]</div> <div class=bc-portfolio__edit-transactions-field-item>[[ node.exit_price ]]</div> </div> </div> <div ui-tree-handle class="right bc-glyph-bars bc-tools-edit__symbol-drag-icon"></div> <div class="right bc-glyph-arrow-up bc-tools-edit__symbol-up-icon" data-ng-click=moveSymbolTop($index)></div> </div> </li> </ul> <div class=bc-tools-edit__symbols-list-error data-ng-show=lastTransaction> Portfolio must have at least one transaction. </div> </div> </div> '
    },
    "0L7Y": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            this.checkNameLength = function(t) {
                var a = e.defer();
                return t && t.length <= 30 ? a.resolve(t) : a.reject("nameLength"), a.promise
            }, this.checkNameUnique = function(i) {
                var r = e.defer();
                return void 0 === t.find(a.getUserData().custom_views, function(e) {
                    return e.name.toLowerCase() === i.toLowerCase()
                }) ? r.resolve(i) : r.reject("nameUnique"), r.promise
            }, this.checkDescriptionLength = function(t, a) {
                var i = e.defer();
                return !t || t.length <= a ? i.resolve(t) : i.reject("descriptionLength"), i.promise
            }
        }
        i.$inject = ["$q", "_", "authService"], e.exports = i
    },
    "0N5s": function(e, t) {
        e.exports = '<div class=dashboard-simple-chart> <simple-chart class=overview-symbols-charts data-ng-if=$ctrl.ready data-symbol="[[ $ctrl.symbolData.symbol ]]" data-period="[[ $ctrl.period ]]" data-aggregation-unit="[[ $ctrl.aggregationUnit ]]" data-aggregation-size="[[ $ctrl.aggregationSize ]]" data-x-axis-tick-pixel-interval=100 data-x-axis-gridlines-visible=false data-x-axis-crosshair-enabled=true data-y-axis-crosshair-enabled=true data-y-axis-visible=true data-y-axis-show-last=true data-style=OHLC data-tooltip-visible=false data-line-width=1 data-title="[[ $ctrl.title ]]" data-primary-color=#000000 data-vary-color-per-bar=false data-state="[[ $ctrl.state ]]"> </simple-chart> </div>'
    },
    "0Pw4": function(e, t) {
        e.exports = '<div class=bc-modal-content> <input type=hidden /> <div class=modal-header> <i class="bc-glyph-times form-close" data-ng-click=cancel()></i> </div> <form data-ng-submit=apply()> <div class=bc-modal-content-inner> <span class=title>Margin Settings</span> <div class="modal-settings-row row-chart-margins"> <div class=label>Right Margin</div> <div class=bc-dropdown-suffix-label> <div class=bc-dropdown__suffix-label>Bars</div> <input type=number data-ng-model=formData.marginBars max=25 min=0 required=required> </div> <span class=row-chart-margins-help>(25 max)</span> </div> </div> <div class="modal-controls-row text-center"> <button class="bc-button grey" data-ng-click=cancel()>Cancel</button> <button type=submit class="bc-button light-blue">Apply</button> </div> </form> </div> '
    },
    "0Rk1": function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    content: "="
                },
                controller: ["$scope", function(a) {
                    var r = angular.copy(t.default);
                    r.series[1].innerSize = "75%", i.isMobileOnly() && (r.series[1].dataLabels.distance = 5, r.series[1].size = "55%"), a.config = r, a.$watch("content", function(t) {
                        t && function() {
                            var t = [],
                                i = [];
                            e.ready(function() {
                                var e = Highcharts.getOptions().colors,
                                    o = 0;
                                Object.keys(a.content).forEach(function(r) {
                                    if (a.content[r]) {
                                        t.push({
                                            name: r,
                                            y: a.content[r].percent,
                                            value: a.content[r].value,
                                            color: e[o]
                                        });
                                        var n, s = Object.keys(a.content[r].symbols).length,
                                            l = 0;
                                        Object.keys(a.content[r].symbols).forEach(function(t) {
                                            n = .35 - ++l / s / 5, i.push({
                                                name: t,
                                                y: a.content[r].symbols[t].percent,
                                                value: a.content[r].symbols[t].value,
                                                color: Highcharts.Color(e[o]).brighten(n).get()
                                            })
                                        })
                                    }
                                    o++
                                }), r.series[0].data = t, r.series[1].data = i
                            }, this)
                        }()
                    })
                }],
                template: a("Z9Am")
            }
        }
        i.$inject = ["highchartsNG", "chartsSettings", "utils"], e.exports = i
    },
    "0Skw": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c) {
            var d = "barchart.com",
                u = !1,
                p = !1;

            function m(i) {
                var r = a.defer();
                return i.user_id = String(t.getUserData().id), i.alert_system = d, e.retrieveAlerts(i).then(function(e) {
                    r.resolve(e)
                }, function(e) {
                    console.error(e)
                }), r.promise
            }

            function h(e, a) {
                t.isLoggedIn() && (t.getUserData().alerts_default_publishers = e);
                var i = null;
                try {
                    e.forEach(function(e) {
                        if ("sms" === e.transport) throw i = angular.copy(e), new Error
                    })
                } catch (e) {
                    a.resolve(i)
                }
                a.reject("Mobile publisher was not found")
            }
            this.isNotesFocused = function() {
                return p
            }, this.setFocusNotes = function(e) {
                p = e
            }, this.createAlert = function(i) {
                if (!(i instanceof r.AlertModel)) throw new Error("Alert must be instance of AlertModel");
                var o = a.defer();
                return i.alert_system = i.alert_system || d, i.user_id = String(t.getUserData().id), i.notes = i.notes || {}, i.conditions.length > 1 ? i.notes.level = "advanced" : "price" === i.alert_type ? i.notes.level = 1 === i.conditions[0].property.property_id || 5 === i.conditions[0].property.property_id ? "basic" : "advanced" : i.notes.level = "basic", e.createAlert(i).then(function(e) {
                    o.resolve(e)
                }, function(e) {
                    o.reject(e)
                }), o.promise
            }, this.editAlert = function(t) {
                var i = a.defer();
                return e.editAlert(t).then(function(e) {
                    i.resolve(e)
                }, function(e) {
                    i.reject(e)
                }), i.promise
            }, this.deleteAlert = function(t) {
                var i = a.defer();
                return e.deleteAlert(t).then(function(e) {
                    i.resolve(e)
                }), i.promise
            }, this.retrieveAlerts = function() {
                var i = a.defer(),
                    r = {};
                return e.connect().then(function() {
                    m(r).then(function(e) {
                        t.getUserData().is_premier || (e = e.filter(function(e) {
                            return !e.notes || "basic" === e.notes.level
                        })), i.resolve(e)
                    })
                }, function(e) {
                    console.warn("Connection to socket server failed"), l.$broadcast("onAlertServerUnavailable", e)
                }), i.promise
            }, this.retreiveAlertsSymbol = function(r) {
                var s = a.defer(),
                    c = {};
                return i.checkType(r, i.types.STRING), c.filter = function(e) {
                    return {
                        target: {
                            identifier: e.toUpperCase()
                        }
                    }
                }(r), e.connect().then(function() {
                    m(c).then(function(e) {
                        t.getUserData().is_premier || (e = e.filter(function(e) {
                            return !e.notes || "basic" === e.notes.level
                        })), n.info("Retrieved alerts for symbol " + r, e), o.setSymbolAlerts(r, e), s.resolve(e)
                    })
                }, function(e) {
                    l.$broadcast("onAlertServerUnavailable", e)
                }), s.promise
            }, this.enableAlert = function(t, i) {
                var r = a.defer();
                return l.$broadcast("onAlertStartedEnabling", {
                    alert: t
                }), e.enableAlert({
                    alert_id: t.alert_id
                }).then(function(e) {
                    if (void 0 !== i) {
                        var a = s.findIndex(o.getSymbolAlerts(i), {
                            alert_id: t.alert_id
                        });
                        o.getSymbolAlerts(i)[a] = e
                    }
                    l.$broadcast("onAlertCompletedEnabling", {
                        alert: e
                    }), r.resolve(e)
                }, function(e) {
                    n.debug("Something went wrong with enabling the alert. Reason: ", e), r.reject(e)
                }), r.promise
            }, this.disableAlert = function(t, i) {
                var r = a.defer();
                return e.disableAlert({
                    alert_id: t.alert_id
                }).then(function(e) {
                    if (void 0 !== i) {
                        var a = s.findIndex(o.getSymbolAlerts(i), {
                            alert_id: t.alert_id
                        });
                        o.getSymbolAlerts(i)[a] = e
                    }
                    r.resolve(e)
                }, function(e) {
                    n.debug("Something went wrong with disabling the alert. Reason: ", e), r.resolve(e)
                }), r.promise
            }, this.getPublisherTypeDefaults = function(i) {
                var r = a.defer(),
                    o = {};
                return o.user_id = void 0 !== i ? i.toString() : String(t.getUserData().id), o.alert_system = d, e.connect().then(function() {
                    e.getPublisherTypeDefaults(o).then(function(e) {
                        t.isLoggedIn() && (t.getUserData().alerts_default_publishers = e), r.resolve(e)
                    })
                }), r.promise
            }, this.getEmailPublisherType = function(i) {
                var r = a.defer(),
                    o = {};
                return o.user_id = void 0 !== i ? i.toString() : String(t.getUserData().id), o.alert_system = d, e.connect().then(function() {
                    e.getPublisherTypeDefaults(o).then(function(e) {
                        t.isLoggedIn() && (t.getUserData().alerts_default_publishers = e);
                        var a = null;
                        try {
                            e.forEach(function(e) {
                                if ("email" === e.transport) throw a = angular.copy(e), new Error
                            })
                        } catch (e) {
                            r.resolve(a)
                        }
                        r.reject("Email publisher was not found")
                    })
                }), r.promise
            }, this.getMobilePublisherType = function(i) {
                var r = a.defer(),
                    o = {};
                return o.user_id = void 0 !== i ? i.toString() : String(t.getUserData().id), o.alert_system = d, n.debug("ALERTS: <getMobilePublisherType>", o), e.getIsDisposed() ? e.connect().then(function() {
                    n.debug("ALERTS: <getMobilePublisherType> re-connected"), e.getPublisherTypeDefaults(o).then(function(e) {
                        n.debug("ALERTS: <getMobilePublisherType> success", o), h(e, r)
                    }, function(e) {
                        console.error("ALERTS: <getMobilePublisherType> error", e)
                    })
                }) : e.getPublisherTypeDefaults(o).then(function(e) {
                    n.debug("ALERTS: <getMobilePublisherType> success", o), h(e, r)
                }, function(e) {
                    console.error("ALERTS: <getMobilePublisherType> error", e)
                }), r.promise
            }, this.assignPublisherTypeDefault = function(i, r) {
                var o = a.defer();
                return i.user_id = void 0 !== r ? r.toString() : String(t.getUserData().id), i.alert_system = d, n.debug("ALERTS: <assignPublisherTypeDefault>", i), e.getIsDisposed() ? e.connect().then(function() {
                    n.debug("ALERTS: <assignPublisherTypeDefault> re-connected"), e.assignPublisherTypeDefault(i).then(function(e) {
                        n.debug("ALERTS: <assignPublisherTypeDefault> success", e), o.resolve(e)
                    }, function(e) {
                        console.error("ALERTS: <assignPublisherTypeDefault> error", e), o.reject(e)
                    }).catch(function(e) {
                        console.error(e)
                    })
                }) : e.assignPublisherTypeDefault(i).then(function(e) {
                    n.debug("ALERTS: <assignPublisherTypeDefault> success", e), o.resolve(e)
                }, function(e) {
                    console.error("ALERTS: <assignPublisherTypeDefault> error", e), o.reject(e)
                }).catch(function(e) {
                    console.error(e)
                }), o.promise
            }, this.subscribeAlerts = function() {
                if (!u) {
                    var a = {
                        alert_system: d,
                        user_id: String(t.getUserData().id)
                    };
                    e.connect().then(function() {
                        e.subscribeAlerts(a, function(e) {
                            n.debug("[SOCKET] Alert has been changed:", e), l.$broadcast(c.ON_ALERT_CHANGED, e)
                        }, function(e) {
                            n.debug("[SOCKET] Alert has been deleted:", e), l.$broadcast(c.ON_ALERT_DELETED, e)
                        }, function(e) {
                            n.debug("[SOCKET] Alert has been created:", e), l.$broadcast(c.ON_ALERT_CREATED, e)
                        }, function(e) {
                            n.debug("[SOCKET] Alert has been triggered:", e), l.$broadcast(c.ON_ALERT_TRIGGERED, e)
                        })
                    }), u = !0
                }
            }, this.checkSymbol = function(t) {
                var i = a.defer();
                return e.connect().then(function() {
                    e.checkSymbol(t).then(function(e) {
                        i.resolve(e)
                    }, function(e) {
                        i.reject(e)
                    })
                }), i.promise
            }, this.dispose = function() {
                e.dispose()
            }, this.disableAlerts = function(i) {
                var r = {
                        user_id: void 0 !== i ? i.toString() : String(t.getUserData().id),
                        alert_system: d
                    },
                    o = a.defer();
                return e.connect().then(function() {
                    e.disableAlerts(r).then(function(e) {
                        o.resolve(e)
                    }, function(e) {
                        o.reject(e)
                    })
                }), o.promise
            }, this.enableAlerts = function(a) {
                var i = {
                    user_id: void 0 !== a ? a.toString() : String(t.getUserData().id),
                    alert_system: d
                };
                return e.disableAlerts(i)
            }
        }
        i.$inject = ["alertManager", "authService", "$q", "assert", "alertModelFactory", "alertsSymbolDataFactory", "$log", "_", "$rootScope", "events"], e.exports = i
    },
    "0Tjz": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class=bc-modal-content-inner> <div class=modal-header> Save Settings As Chart Template <i class="bc-glyph-times form-close right" data-ng-click=modalDismiss()></i> </div> <form class="bc-form bc-interactive-chart__template-save-form" data-ng-submit=saveTemplate() novalidate> <button type=submit class="bc-button light-blue upper">Save</button> <div class=bc-form__field-wrapper> <div class=input-wrapper> <input type=text required=required placeholder="Enter a name..." data-ng-maxlength=30 data-ng-model=template.name data-bc-auto-focus=desktop> <i class=bc-glyph-chevron-down data-ng-click=toggleAutocompleteList()></i> </div> <div class=bc-interactive-chart__template-autocomplete-block data-ng-show=showAutocompleteList> <ul> <li data-ng-repeat="item in templates | filter:template.name:startsWith track by $index" data-ng-click=applyExistingTemplate(item)> [[ item.name ]] </li> </ul> </div> </div> </form> </div> </div>'
    },
    "0WH3": function(e, t) {
        e.exports = "<div class=bc-portfolio__show-notes> <i class=bc-glyph-file data-ng-click=showDetails()></i> </div> "
    },
    "0YOt": function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = {},
                t = {
                    required: function(e, t) {
                        var a = !1,
                            i = function() {
                                "" === e.val().trim() ? (e.addClass("error"), t.$evalAsync(function() {
                                    t.form.$errors.required = !0, t.form.$invalid = !0, t.form.$valid = !1
                                }), a = !0) : a && (e.removeClass("error"), t.$evalAsync(function() {
                                    t.form.$errors.required = !1, t.form.$invalid = !1, t.form.$valid = !0
                                }), a = !1)
                            };
                        e.on("keyup change", i), t.$on("destroy", function() {
                            e.off("keyup change", i)
                        })
                    },
                    unique: function(t, a, i) {
                        e[a.form.$name] = e[a.form.$name] || {}, e[a.form.$name][i] = e[a.form.$name][i] || [];
                        var r = e[a.form.$name][i].push(t.val().trim()) - 1,
                            o = !1,
                            n = function() {
                                var n = t.val().trim();
                                e[a.form.$name][i][r] = n;
                                var s = e[a.form.$name][i].indexOf(n) + 1;
                                ~e[a.form.$name][i].indexOf(n, s) ? (a.$evalAsync(function() {
                                    a.form.$errors.unique = !0, a.form.$invalid = !0, a.form.$valid = !1
                                }), o = !0) : o && (a.$evalAsync(function() {
                                    a.form.$errors.unique = !1, a.form.$invalid = !1, a.form.$valid = !0
                                }), o = !1)
                            };
                        t.on("keyup change", n), a.$on("destroy", function() {
                            t.off("keyup change", n)
                        })
                    },
                    maxlentgh: function(e, t, a) {
                        var i = !1,
                            r = parseInt(a, 10),
                            o = function() {
                                e.val().trim().length > r ? (e.addClass("error"), t.$evalAsync(function() {
                                    t.form.$errors.maxlentgh = r, t.form.$invalid = !0, t.form.$valid = !1
                                }), i = !0) : i && (e.removeClass("error"), t.$evalAsync(function() {
                                    t.form.$errors.maxlentgh = !1, t.form.$invalid = !1, t.form.$valid = !0
                                }), i = !1)
                            };
                        e.on("keyup change", o), t.$on("destroy", function() {
                            e.off("keyup change", o)
                        })
                    }
                };
            return {
                restrict: "A",
                scope: {
                    form: "="
                },
                link: function(e, a, i) {
                    e.form.$errors = e.form.$errors || {}, Object.keys(i).forEach(function(r) {
                        if (0 === r.indexOf("validRule")) {
                            var o = r.substring("validRule".length).toLowerCase();
                            t.hasOwnProperty(o) && t[o].apply(null, [a, e, i[r]])
                        }
                    })
                }
            }
        }
    },
    "0Z+m": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login tools-dropdown tools-dropdown-tools"> <form class="bc-form bc-modal-content-inner" name=controllerSettings novalidate> <div class=modal-header> Controller Settings <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.closeModal()></i> </div> <div> <div class="modal-settings-row row-scale-type"> <div class=label>FlipChart Ribbon</div> <div class=input-radio> <input type=radio id=dashboard-grid__ribbon-show data-ng-model=$ctrl.showRibbon data-ng-value=true> <label for=dashboard-grid__ribbon-show> <span></span> Show </label> </div> <div class=input-radio> <input type=radio id=dashboard-grid__ribbon-hide data-ng-model=$ctrl.showRibbon data-ng-value=false> <label for=dashboard-grid__ribbon-hide> <span></span> Hide </label> </div> <p class=text-underline>Determines whether to show the ribbon once a Controller has been selected.</p> </div> <div class="modal-settings-row row-bar-type"> <div class=label>Controller View</div> <div class="bc-dropdown styled"> <select data-ng-model=$ctrl.view data-ng-options="item.label for item in $ctrl.controllerViews"> </select> </div> </div> </div> </form> <div class="modal-controls-row text-center"> <button class="bc-button grey" data-ng-click=$ctrl.closeModal()>Cancel</button> <button class="bc-button light-blue" data-ng-disabled=controllerSettings.$invalid data-ng-click=$ctrl.apply()>Apply</button> </div> </div>'
    },
    "0fnK": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                replace: !0,
                bindToController: {},
                controller: ["authService", "bcModalLoginSrv", "localStorageService", "dataProvider", "apiConfig", "httpVerbs", "Notification", function(e, t, a, i, r, o, n) {
                    var s = this;
                    if (s.isNotPremier = !e.isLoggedIn() || e.isLoggedIn() && !e.getUserData().is_premier, e.isLoggedIn()) {
                        var l = e.getUserPreferences();
                        s.hideContent = !!l.hide_my_chart_feature_ads
                    } else s.hideContent = a.get("hideMyChartFeatureAds");
                    s.showPremierModal = function() {
                        t.showPremier("myCharts")
                    }, s.close = function() {
                        e.isLoggedIn() ? i.call(r.API_URL + "/preferences", o.PUT, {
                            name: "hide_my_chart_feature_ads",
                            value: !0
                        }, []).then(function() {
                            s.hideContent = !0
                        }).catch(function() {
                            n.error("Something went wrong. Please try again.")
                        }) : (a.set("hideMyChartFeatureAds", !0), s.hideContent = !0)
                    }
                }],
                controllerAs: "$ctrl",
                template: a("AEeU")
            }
        }
    },
    "0kKB": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v, y) {
            var w = this,
                C = a.getSymbolData(),
                S = C ? C.symbol : null,
                x = null,
                k = h.getChartTab();
            k && (x = k.symbol);
            var D = p ? {
                    symbol: S
                } : a.getSymbolData(),
                T = i.getUserData() || {},
                _ = T.preferences ? T.preferences.charts_style : "interactive";
            v && (_ = v);
            var P = !1,
                E = {},
                A = f.config.page;

            function $(a) {
                var i = {
                    group_id: a.groupId,
                    type: a.type,
                    symbol: a.symbol,
                    name: a.name,
                    email: !1
                };
                "interactive" === a.type ? (i.state = JSON.stringify(s.getDefinition(!0)), i.configuration = JSON.stringify(l.getChartGlobalConfig())) : i.state = JSON.stringify(u.getApiSettings()), t.createChart(i).then(function(t) {
                    if (c.addChart(i.group_id, t.data[0], i.type), e.close("OK"), "myCharts" !== A) {
                        var o = "Chart <b>'" + n.htmlEntities(w.model.name) + "'</b> has been added to <b>'" + n.htmlEntities(a.groupName) + "'</b>";
                        "dashboard" !== A && "dashboardMyCharts" !== A && (o += "<br/><a target='_self' href='" + window.config.routes["my.charts"] + "'>Go To My Charts</a>"), r.success(o)
                    }
                    d.$broadcast("myChartCreated", {
                        chart: angular.copy(t.data[0])
                    })
                }).catch(function() {
                    w.saving = !1, r.error("Something went wrong. Please try again.")
                })
            }
            w.groups = [], w.focusOnDescription = null !== S, w.saving = !1, w.createOnTheFly = p, w.invalidSymbol = !1, w.searchResultsVisible = !1, w.searchResults = null, w.model = {
                symbol: D.symbol,
                name: null,
                group: y || null
            }, "myCharts" === f.config.page && p && (w.model.symbol = null, w.focusOnDescription = !1), w.newGroupState = !1, w.newGroup = null, w.close = function() {
                e.dismiss()
            }, w.change = function(e) {
                "new" === e.id && (w.newGroupState = !0)
            }, w.addChart = function(e) {
                if (!e.$invalid) {
                    w.saving = !0, w.invalidSymbol = !1, P = !1, d.$broadcast("myChartsCreateNew", !0), p && S !== w.model.symbol ? (P = !0, b.validateSymbol(w.model.symbol).then(function(t) {
                        if (t.errors) w.invalidSymbol = !0, e.$setPristine(), w.saving = !1;
                        else {
                            var a = t.data[0];
                            "technical" === _ && k && d.$broadcast("myChartTechnicalIgnoreUpdate"), d.$broadcast("chartCurrentSymbolChanged", a.symbol), d.$broadcast("dashboardCurrentSymbolChanged", t.data[0])
                        }
                    }).catch(function(e) {
                        console.log("[Dashboard Ctrl]: interactiveChartValidation.validateSymbol got error:", e), w.saving = !1
                    })) : x && x !== w.model.symbol && "technical" === _ && S === w.model.symbol && b.validateSymbol(w.model.symbol).then(function(e) {
                        e.errors || d.$broadcast("dashboardHeaderSymbolChanged", e.data[0])
                    });
                    var a = o.defer();
                    w.newGroupState && w.newGroup ? t.createGroup({
                        name: w.newGroup
                    }).then(function(e) {
                        var t = e.data[0],
                            i = c.getGroups();
                        i.push(t), c.setGroups(i), a.resolve({
                            groupId: t.id,
                            type: _,
                            symbol: w.model.symbol,
                            name: w.model.name,
                            groupName: t.name,
                            delaySave: P
                        })
                    }).catch(function() {
                        w.saving = !1, r.error("Something went wrong. Please try again.")
                    }) : w.model.group ? a.resolve({
                        groupId: w.model.group.id,
                        type: _,
                        symbol: w.model.symbol,
                        name: w.model.name,
                        groupName: w.model.group.name,
                        delaySave: P
                    }) : t.createGroup({
                        name: "My Charts"
                    }).then(function(e) {
                        var t = e.data[0];
                        c.setGroups([t]), a.resolve({
                            groupId: t.id,
                            type: _,
                            symbol: w.model.symbol,
                            name: w.model.name,
                            groupName: t.name,
                            delaySave: P
                        })
                    }).catch(function() {
                        w.saving = !1, r.error("Something went wrong. Please try again.")
                    }), a.promise.then(function(e) {
                        e.delaySave ? E = angular.copy(e) : $(e)
                    })
                }
            }, w.preSymbolEnter = function() {
                w.model.symbol = ""
            }, w.pastSymbolEnter = function() {
                "myCharts" === f.config.page && p || w.model.symbol || (w.model.symbol = S)
            }, w.keyboardNavigation = function(e) {
                switch (e.keyCode) {
                    case 38:
                        d.$broadcast("autoCompleteMoveToPrevItem");
                        break;
                    case 40:
                        d.$broadcast("autoCompleteMoveToNextItem");
                        break;
                    case 13:
                        d.$broadcast("autoCompleteUseSelectedItem")
                }
            }, w.useSearch = function() {
                var e;
                w.model.symbol ? (e = w.model.symbol, g.connect().then(function() {
                    g.getSearchResults(e).then(function(e) {
                        var t;
                        e.instruments.length > 0 ? (t = e.instruments, w.selectedItemIndex = null, w.searchResults = t.slice(0, 6), w.searchResultsVisible = !0) : w.searchResults = null, m.$digest()
                    })
                })) : w.clearSearch()
            }, w.selectSymbol = function(e) {
                w.model.symbol = e.symbol, w.searchResultsVisible = !1, w.searchResults = null, w.selectedItemIndex = null
            }, w.clearSearch = function() {
                m.$evalAsync(function() {
                    w.search = null, w.searchResultsVisible = !1, w.searchResults = null
                })
            }, m.$on("interactiveChartInitialized", function() {
                $(E)
            }), m.$on("technicalChartRendered", function() {
                $(E)
            }), f.addEventListener("click", function() {
                setTimeout(function() {
                    document.activeElement !== document.querySelector(".js-interactive-chart-symbol-selector-input") && w.model.symbol && w.searchResultsVisible && (document.activeElement.blur(), w.clearSearch())
                }, 300)
            })
        }
        i.$inject = ["$modalInstance", "myChartsApiService", "dashboardSymbolStorage", "authService", "Notification", "$q", "utils", "interactiveChartApi", "interactiveChartSettings", "userMyChartStorageService", "$rootScope", "chartApiService", "createOnTheFly", "$scope", "userChartTabService", "searchConnectionService", "$window", "interactiveChartValidation", "chartType", "currentGroup"], e.exports = i
    },
    "0qO5": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c) {
            e.settingsSymbols = l, e.invalidSymbols = [], e.symbols = [];
            var d = s.getUserData().preferences,
                u = {};
            d.home_symbols && (u = JSON.parse(d.home_symbols) || {}), e.save = function() {
                if (e.repeatedSymbols = [], e.symbolIsRequired = !1, e.symbols.forEach(function(t, a) {
                        t ? e.symbols[a] = t.toUpperCase() : e.symbolIsRequired = !0
                    }), e.repeatedSymbols = c.filter(e.symbols, function(e, t, a) {
                        return e && c.includes(a, e, t + 1)
                    }), e.repeatedSymbols.length) return !1;
                if (e.symbolIsRequired) return !1;
                var l = e.symbols.join(",");
                s.getUserData().preferences;
                i.updateInlineDataForSymbol(l).then(function(i) {
                    if (i.errors && i.errors.invalidSymbols && i.errors.invalidSymbols.length) return e.invalidSymbols = i.errors.invalidSymbols, !1;
                    e.invalidSymbols = null, u[config.user.market] = e.symbols, r.call(o.API_URL + "/preferences", n.PUT, {
                        name: "home_symbols",
                        value: JSON.stringify(u)
                    }).then(function() {
                        t.$broadcast("updateOverviewCharts", u[config.user.market]), a.close()
                    })
                })
            }, e.revertToDefault = function() {
                u[config.user.market] && delete u[config.user.market], r.call(o.API_URL + "/preferences", n.PUT, {
                    name: "home_symbols",
                    value: JSON.stringify(u)
                }).then(function() {
                    t.$broadcast("updateOverviewCharts"), a.close()
                })
            }, e.modalDismiss = function() {
                a.dismiss()
            }
        }
        i.$inject = ["$scope", "$rootScope", "$modalInstance", "bcInlineData", "dataProvider", "apiConfig", "httpVerbs", "authService", "settingsSymbols", "_"], e.exports = i
    },
    "0x+1": function(e, t, a) {
        "use strict";
        angular.module("dataTable", []).run(a("BcMg")).constant("viewApiConfig", a("jhTF")).filter("parseHTML", a("ADiV")).factory("barchartDatatableService", a("3Qed")).factory("barchartDatatableApiService", a("UvNM")).factory("barchartDatatableFilterHandlers", a("uDw0")).factory("barchartDatatableCustomHandlers", a("EwMr")).service("barchartDatatableCallbackHandlers", a("qUKK")).service("barchartDatatableRealtime", a("V9Wx")).service("barchartDatatableGroupedData", a("7I5B")).factory("barchartDatatableSorting", a("lB6g")).factory("barchartDatatableFilterUrl", a("nZ0g")).factory("barchartDatatableColorize", a("f5ht")).service("barchartDatatableFieldsService", a("dnXn")).service("barchartDatatableChartHandlers", a("Y1RX")).service("barchartDatatableContentHandlers", a("VoN/")).directive("changeFilter", a("tXHX")).directive("changeExchanges", a("jhLy")).directive("changeWatchlist", a("poAY")).directive("updateFilterExchanges", a("F2dA")).directive("hideChartForMobile", a("Pia3")).directive("hideExtendedView", a("+Qev")).directive("barchartDatatable", a("9S+e")).directive("barchartDatatableChartView", a("ZGrD")).directive("barchartSorting", a("Mj+o")).directive("barchartDatatableMiddleware", a("XIDb")).directive("barchartDatatableChartViewTooltipToggle", a("+kSv")).directive("showCustomViewsOptions", a("nONU")).directive("showCurrentViewFields", a("3HO1")).directive("barchartDatatableCustomFooter", a("d0kw")).directive("bcFilterExperationDropDown", a("UdV2")).directive("bcFilterFuturesByExchangeDropDown", a("1Ctd")).directive("bcFilterExpiringDate", a("LZsM")).directive("bcFilterEtfsLeverage", a("3bjB")).directive("bcTileView", a("SqBK")).directive("barchartTableHeaderCellTemplate", a("V2K2")).directive("barchartTableHeaderCellSort", a("YErx")).directive("barchartTableCellTemplate", a("n20/")).directive("barchartTableCellColorize", a("yXux")).directive("barchartTableScroll", a("9fVm")).directive("barchartTableShowSymbolDetails", a("H1Dc")).directive("barchartSignalChartLink", a("Ioe0")).directive("barchartPerformanceLink", a("hKqp")).directive("barchartQuickLinks", a("lL7Y")).directive("barchartPortfolioEditTransaction", a("NvWv")).directive("barchartExplandNewRows", a("PZfr"))
    },
    "0xEQ": function(e, t, a) {
        "use strict";

        function i(e, t) {
            var i, r = ["$scope", function(e) {
                e.close = function() {
                    t.clearErrors(), t.clear(), i.dismiss()
                }
            }];
            return {
                restrict: "A",
                link: function(t, o) {
                    function n() {
                        i = e.open({
                            template: a("Rf+P"),
                            controller: r,
                            windowClass: "adv-modal authentication-modal auth-modal-ref-class"
                        })
                    }
                    o.on("click", n), t.$on("$destroy", function() {
                        o.off("click", n)
                    })
                }
            }
        }
        i.$inject = ["$modal", "userAuthFormData"], e.exports = i
    },
    "1/ku": function(e, t, a) {
        "use strict";

        function i(e, t) {
            var i = [function() {
                var a = this;
                a.apiData = JSON.parse(e.unescape(a.apiData));
                var i = JSON.parse(a.symbol);
                a.currentSymbol = i, a.quotesService = t, a.data = a.apiData.data, a.has6m = a.apiData.has6m, a.getLeftMargin = r
            }];

            function r(e, t) {
                var a = {};
                return "hold" === e && (a = {
                    "margin-left": (a = parseInt(t) / 100 / 2 * 60) + "px"
                }), a
            }
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("wVl2"),
                controller: i,
                controllerAs: "BarchartOpinionCtrl"
            }
        }
        i.$inject = ["_", "quotesService"], e.exports = i
    },
    "12DX": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                closeElementByDocumentClick: {
                    fn: function(e, t) {
                        angular.element(document).on("click touchstart", function(a) {
                            var i = angular.element(a.target);
                            if (!i.hasClass(e)) {
                                for (;
                                    "BODY" !== i[0].nodeName && (i = i.parent()) && !i.hasClass(e););
                                i.hasClass(e) || (angular.element(document).off("click touchstart"), t())
                            }
                        })
                    },
                    disable: function() {
                        angular.element(document).off("click touchstart")
                    },
                    state: !1
                }
            }
        }
        i.$inject = ["$log"], e.exports = i
    },
    "14Ns": function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    formData: "=",
                    type: "@",
                    defaultFilter: "@",
                    filterDisplayFields: "="
                },
                controller: ["$scope", function(a) {
                    a.copy = [], a.$on("removeRowFilter", function(t, i) {
                        var o = r.findIndex(a.formData.filters, "guid", i);
                        o && e.removeFilter(o)
                    }), a.treeOptions = {
                        dropped: function() {
                            i.orderChanged = !0
                        },
                        beforeDrag: function() {
                            return a.copy = angular.copy(a.formData.filters), i.filters = a.copy, !0
                        }
                    }, a.getGuid = function(e) {
                        return e.guid || t.guid()
                    }
                }],
                template: a("k9z+")
            }
        }
        i.$inject = ["screenerFilterService", "utils", "screenerCurrentConfigService", "_"], e.exports = i
    },
    "16iM": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-add-my-chart"> <input type=hidden /> <div class=bc-modal-content-inner> <div class=modal-header> Rename Chart <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.close()></i> </div> <form class=bc-form name=chartForm data-ng-submit=$ctrl.save(chartForm) novalidate> <div class=bc-form__field-wrapper> <label>Symbol</label> <input type=text name=symbol required=required class=disable data-ng-model=$ctrl.model.symbol disabled=disabled placeholder="Enter a name..."> </div> <div class=bc-form__field-wrapper> <label>Name</label> <input type=text name=name required=required data-ng-maxlength=30 data-ng-model=$ctrl.model.name placeholder="Enter a name..." data-bc-auto-focus=desktop> </div> <div class=bc-form__field-wrapper> <label>Group</label> <my-chart-groups-drop-down data-model=$ctrl.model.group></my-chart-groups-drop-down> <p class=tip>Chart Groups are Managed in the My Barchart tab.</p> </div> <div class=error-text data-ng-show="chartForm.name.$invalid && chartForm.$submitted"> <span data-ng-show=chartForm.name.$error.maxlength>Chart name cannot be longer than 30 characters.</span> <span data-ng-show=chartForm.name.$error.required>Fill the required fields.</span> </div> <div class=btn-actions> <button class="bc-button light-blue upper" type=submit data-ng-disabled=$ctrl.saving>Save</button> </div> </form> </div> </div>'
    },
    "1CqW": function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };

        function o(e) {
            return function(t, a) {
                var i = e[t];
                if (a) {
                    if (!angular.isObject(a)) throw new InvalidTypeError("the second argument of textFactory must be an object, but " + (void 0 === a ? "undefined" : r(a)) + " is given");
                    Object.keys(a).forEach(function(e) {
                        i = i.replace(new RegExp("{" + e + "}"), a[e])
                    })
                }
                return i
            }
        }
        o.$inject = ["textsConstant"], e.exports = o
    },
    "1Ctd": function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    selected: "@"
                },
                controller: ["$scope", "$rootScope", function(e, a) {
                    var i = e.$on("barchartDataTableIsReady", function(e, r) {
                        var o = t.getLocationPathObject().future || "";
                        a.$broadcast("initFuturesByExchange", {
                            data: o
                        }), i()
                    })
                }],
                link: function(e, t, a) {
                    var i = e.$on("onBarchartDataTableRendered", function(t, a) {
                        void 0 !== a.meta && void 0 !== a.meta.futures && (void 0 !== a.meta.futures.list && (e.exchangeSymbols = a.meta.futures.list), void 0 !== a.meta.futures.selected && (e.selected = a.meta.futures.selected)), i()
                    })
                },
                template: a("sbF0")
            }
        }
        i.$inject = ["localStorageService", "locationService", "$timeout"], e.exports = i
    },
    "1ETt": function(e, t) {
        e.exports = "<div class=bc-table-scrollable> <div class=bc-table-scrollable-inner> <ng-transclude></ng-transclude> <div class=right-shadow></div> <div class=left-shadow></div> </div> </div> "
    },
    "1FBL": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d) {
            var u = r.getChartSettings(),
                p = -1 !== ["Line", "Area"].indexOf(u.barType.curveStyle) && "percent" === u.scaleValue;
            e.correlatedSymbols = a("JTw3"), e.additionalConfig = {
                symbol: null,
                error: !1,
                forceLine: p
            }, e.settingsCompareSymbols = r.getChartCompareSymbols() || r.getChartDefaultGlobalConfig().compareSymbols, e.settingsCompareSymbols.forEach(function(e) {
                e.color = e.color || "#000000"
            }), e.comparisonSymbolChanged = function(e) {
                e.symbol ? e.leftScale = !0 : e.leftScale = !1
            }, e.applySelectedCorrelatedSymbol = function() {
                e.settingsCompareSymbols.forEach(function(t) {
                    !t.symbol && e.additionalConfig.symbol && (t.symbol = e.additionalConfig.symbol, t.leftScale = !0, e.additionalConfig.error = !1, e.additionalConfig.symbol = null)
                }), e.additionalConfig.symbol && (e.additionalConfig.symbol = null, e.additionalConfig.error = !0)
            }, e.clearLeftScaleSettings = function() {
                e.additionalConfig.forceLine && e.settingsCompareSymbols.forEach(function(e) {
                    e.leftScale = !1
                })
            }, e.compare = function() {
                var a = angular.copy(e.settingsCompareSymbols).filter(function(e) {
                        return e.symbol
                    }),
                    m = (a = a.map(function(e) {
                        return {
                            symbol: e.symbol.toUpperCase(),
                            curves: [{
                                colors: [e.color]
                            }],
                            leftScale: e.leftScale
                        }
                    })).reduce(function(e, t) {
                        return e + "," + t.symbol
                    }, r.getSymbol());
                n.updateInlineDataForSymbol(m).then(function(n) {
                    if (n.errors && n.errors.invalidSymbols && n.errors.invalidSymbols.length) return e.invalidSymbols = n.errors.invalidSymbols, !1;
                    e.invalidSymbols = null, e.settingsCompareSymbols.forEach(function(e) {
                        e.symbol || (e.leftScale = !1)
                    }), e.additionalConfig.forceLine !== p && (e.additionalConfig.forceLine ? (-1 === ["Line", "Area"].indexOf(u.barType.curveStyle) && (u.barType.curveStyle = "Line", u.barType.colors = d.find(c.types, function(e) {
                        return "Line" === e.key
                    }).defaultColors), u.scaleValue = "percent") : (u.barType.curveStyle = "OHLC", u.scaleValue = "price"), r.setChartSettings(u), i.changeCurveStyle(u.barType).changeAxisType(u.scaleValue)), i.changeCompare(a).render(), r.setChartCompareSymbols(e.settingsCompareSymbols), o.save(), s.$broadcast(l.ON_INTERACTIVE_CHART_COMPARISON_APPLIED), t.close()
                })
            }, e.modalDismiss = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "interactiveChartApi", "interactiveChartSettings", "interactiveChartStateService", "bcInlineData", "$rootScope", "events", "interactiveChartSettingsConfig", "_"], e.exports = i
    },
    "1H6C": function(e, t, a) {
        var i = function() {
                return this
            }() || Function("return this")(),
            r = i.regeneratorRuntime && Object.getOwnPropertyNames(i).indexOf("regeneratorRuntime") >= 0,
            o = r && i.regeneratorRuntime;
        if (i.regeneratorRuntime = void 0, e.exports = a("HhN8"), r) i.regeneratorRuntime = o;
        else try {
            delete i.regeneratorRuntime
        } catch (e) {
            i.regeneratorRuntime = void 0
        }
    },
    "1Jbu": function(e, t) {
        e.exports = '<div class=bc-interactive-chart__quick-settings> <ul class=quick-settings-list> <li data-ng-repeat="periodData in $ctrl.quickPeriods" data-ng-class="{\'active\': periodData.period === $ctrl.period}" data-ng-click=$ctrl.applyQuickSettings(periodData) data-ng-bind=periodData.label.mobile> </li> </ul> </div> '
    },
    "1Ji1": function(e, t) {
        e.exports = '<div class="bc-dropdown filter bc-screener__toolbar-select" data-ng-show="$ctrl.optionScreener !==\'/options/options-screener\'"> <select name=screenerOptionsScreeners data-ng-model=$ctrl.optionScreener data-ng-change=$ctrl.changeOptionScreener() data-ng-options="key as val for (key, val) in $ctrl.optionsScreenerList"> </select> </div>'
    },
    "1KkM": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u) {
            var p = angular.copy(i.traits),
                m = null,
                h = 2,
                g = a.getSymbolData().lastPrice,
                f = -1 !== g.toString().indexOf("-");
            try {
                h = g.substring(-1 !== g.indexOf(".") ? g.indexOf(".") + 1 : g.length).length
            } catch (e) {
                console.error("[interactive-chart-modal-tool-middle-line-ctrl.js]: Can not get lastPrice of symbol"), console.error(e.message), h = 2
            }
            try {
                m = u.getInlineDataForSymbol(a.getSymbolData().symbol).instrument.unitCode
            } catch (e) {
                console.error("[interactive-chart-modal-tool-middle-line-ctrl.js]: Can not get baseCode of symbol"), console.error(e.message)
            }
            o.getYearlyHighLowPrices(r.getSymbol()).then(function(t) {
                e.yearPrices = {
                    low: f ? Barchart.Utilities.priceFormatter("-").format(t.data[0].raw.lowPrice1y, m) : t.data[0].raw.lowPrice1y,
                    high: f ? Barchart.Utilities.priceFormatter("-").format(t.data[0].raw.highPrice1y, m) : t.data[0].raw.highPrice1y
                }
            }), e.numOfDecimal = h, e.lineTypes = i.lineTypes, e.formData = {
                price1: null,
                price1time: null,
                price2: null,
                price2time: null,
                axis: null,
                use52WeekPrices: !1,
                showPrices: !0,
                lines: C(p.line),
                middleLine: C(p.line)
            }, e.formData.lines.dashStyle = "Dash", e.formData.middleLine.color = "#5700B8", console.log("-> ANNOTATION DATA:", angular.copy(l)), e.annotationEditMode = l && l.id, l.traits && (e.formData.showPrices = l.traits.showPrices, e.formData.lines = C(l.traits.line), e.formData.middleLine = C(l.traits.line2)), l.points && l.points.length && (e.formData.price1 = f ? Barchart.Utilities.priceFormatter("-").format(l.points[0].price, m) : l.points[0].price, e.formData.price1time = l.points[0].time, e.formData.price2 = f ? Barchart.Utilities.priceFormatter("-").format(l.points[1].price, m) : l.points[1].price, e.formData.price2time = l.points[1].time);
            var b = null,
                v = Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_ANNPOINTPICKED, function(t, a) {
                    e.formData.axis = a.axis;
                    var i = a.point.price;
                    f && (i = Barchart.Utilities.priceFormatter("-").format(i, m)),
                        function(t, a) {
                            if (b) switch (e.formData[b] = t, e.formData[b + "time"] = a, b) {
                                case "price1":
                                    b = null, angular.element("#calc-tools-form__input-price2").focus();
                                    break;
                                case "price2":
                                    angular.element("#calc-tools-form__input-price2").blur(), b = null
                            }
                        }(f ? i : y(i, h), a.point.time)
                });

            function y(e, t) {
                return +(Math.round(e + "e+" + t) + "e-" + t)
            }

            function w() {
                c(function() {
                    angular.element("#calc-tools-form__input-price1").focus()
                }, 100)
            }

            function C(e) {
                var t = angular.copy(e);
                return t.color || (t.color = "#000"), t.dashStyle || (t.dashStyle = "Solid"), t.width || (t.width = 1), t
            }
            e.formData.price1 && e.formData.price1time || w(), e.changeYearPricesSelection = function(t) {
                t ? b = null : e.formData.price1 || e.formData.price2 || w()
            }, e.listenForChartClick = function(e) {
                b = e, a.useTool("PickPoint")
            }, e.unsubscribePickListener = function() {
                a.useTool(null)
            }, e.calculateMiddleLine = function() {
                var t = e.formData.use52WeekPrices ? e.yearPrices.low : e.formData.price1,
                    a = e.formData.use52WeekPrices ? e.yearPrices.high : e.formData.price2;
                if (t && a) {
                    if (f) {
                        var i = y(((t = d.string2Decimal(t, m)) + (a = d.string2Decimal(a, m))) / 2, 2);
                        return Barchart.Utilities.priceFormatter("-").format(i, m)
                    }
                    return y((t + a) / 2, h)
                }
            }, e.resetConfigToDefault = function() {
                e.formData.showPrices = !0, e.formData.lines = angular.copy(p.line), e.formData.middleLine = angular.copy(p.line), e.formData.lines.dashStyle = "Dash", e.formData.middleLine.color = "#5700B8"
            }, e.confirm = function() {
                var i = {
                        showPrices: e.formData.showPrices,
                        line: e.formData.lines,
                        line2: e.formData.middleLine
                    },
                    r = {
                        axis: e.formData.axis
                    };
                e.formData.use52WeekPrices ? r.points = [{
                    price: f ? d.string2Decimal(e.yearPrices.low, m) : e.yearPrices.low,
                    time: e.formData.price1time || Date.now()
                }, {
                    price: f ? d.string2Decimal(e.yearPrices.high, m) : e.yearPrices.high,
                    time: e.formData.price2time || Date.now()
                }] : r.points = [{
                    price: f ? d.string2Decimal(e.formData.price1, m) : +e.formData.price1,
                    time: e.formData.price1time || Date.now()
                }, {
                    price: f ? d.string2Decimal(e.formData.price2, m) : +e.formData.price2,
                    time: e.formData.price2time || Date.now()
                }], e.annotationEditMode ? a.updateTool({
                    uid: l.uid,
                    traits: i,
                    points: r.points
                }) : a.useTool("FiftyPercentLine", i, r), t.isLoggedIn() && n.saveAnnotationConfig("FiftyPercentLine", JSON.stringify(i)), e.close()
            }, e.removeAnnotation = function() {
                a.deleteTool({
                    uid: l.uid
                }), s.close()
            }, e.close = function() {
                Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(v), s.dismiss()
            }
        }
        i.$inject = ["$scope", "authService", "interactiveChartApi", "interactiveChartAnnotationsConfig", "interactiveChartSettings", "interactiveChartSymbolDataService", "interactiveChartUserPreferencesApi", "$modalInstance", "annotationData", "$timeout", "utils", "bcInlineData"], e.exports = i
    },
    "1Mn3": function(e, t) {
        e.exports = '<div class=my-chart-saved-charts-drop-down> <div class=drop-down-wrapper> <div class="bc-dropdown styled"> <select name=chart data-ng-model=$ctrl.model data-ng-change=$ctrl.change(item) data-ng-options="$ctrl.getItemName(item) for item in $ctrl.charts"> <option selected=selected value="">-- Select a Chart --</option> </select> </div> </div> </div>'
    },
    "1OJY": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {},
                controller: ["myChartsApiService", "Notification", function(e, t) {
                    var a = this;
                    a.save = function() {
                        a.saving = !0, e.createGroup({
                            name: a.name
                        }).then(function() {
                            window.location.href = window.config.routes["my.charts"]
                        }).catch(function() {
                            a.saving = !1, t.error("Something went wrong, please try again.")
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("ElQn")
            }
        }
    },
    "1RNZ": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    isFuture: "=",
                    settingsAggregation: "=",
                    settingsPeriod: "=",
                    settings: "=",
                    fullScreen: "=",
                    dashboardMode: "=",
                    asSelectList: "@",
                    myChartsMode: "="
                },
                controller: ["$scope", function(d) {
                    function u() {
                        var e = o.getCurrentFlipChartQuickSettings();
                        e && d.applyQuickSettings(l.find(d.quickPeriods, {
                            period: e
                        }))
                    }

                    function p(e) {
                        d.period = l.find(d.quickPeriods, {
                            period: e || i.getChartPeriod()
                        }) || d.quickPeriods[4]
                    }
                    d.quickPeriods = a("Y+ID").quickChartPeriods, d.isMobile = n.isMobileOnly(), d.$on(e.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED, function() {
                        o.setCurrentFlipChartQuickSettings(null), p()
                    }), d.$on("flipChartSymbolChanged", function() {
                        u(), p()
                    }), d.$on("triggerApplyPeriod", function(e, t) {
                        var a = l.find(d.quickPeriods, function(e) {
                            return e.period === t
                        });
                        a && d.applyQuickSettings(a)
                    }), d.applyQuickSettings = function(e) {
                        var a = angular.copy(d.settingsPeriod),
                            r = angular.copy(d.settingsAggregation);
                        d.settingsPeriod = e.period, d.settingsAggregation.unit = e.aggregation.unit, d.settingsAggregation.size = e.aggregation.size;
                        var n = i.getChartAggregation();
                        d.isFuture ? e.aggregation.spec || (e.aggregation.spec = "Nearest" === n.spec ? "None" : n.spec) : e.aggregation.spec = i.getChartSettings().extendedHours ? "FormT" : "None", d.settingsAggregation.spec = e.aggregation.spec;
                        try {
                            if (t.changeAggregation(e.aggregation), e.period && "CUSTOM" === e.period) {
                                if (e.range && e.range.from) {
                                    var l = e.range.from + "T00:00:00",
                                        u = {
                                            from: new Date(l).getTime()
                                        };
                                    if (e.range.to) {
                                        var p = e.range.to + "T23:59:59";
                                        u.to = new Date(p).getTime()
                                    }
                                    t.changeRange(u).render()
                                }
                            } else t.changePeriod(e.period).render()
                        } catch (e) {
                            var m;
                            return c.error({
                                message: e.message,
                                delay: 1e4
                            }), d.settingsPeriod = a, d.settingsAggregation = r, d.quickPeriods.forEach(function(e) {
                                e.period === d.settingsPeriod && e.aggregation.unit === d.settingsAggregation.unit && e.aggregation.size === d.settingsAggregation.size && (m = e)
                            }), void d.applyQuickSettings(m)
                        }
                        s.hasData = !0, i.setChartPeriod(e.period), i.setChartAggregation(e.aggregation), e.range ? i.setChartRange(e.range) : i.resetChartRange(), i.setChartTemplate(null), i.updateChartCurrentConfig(d.settings), o.setCurrentFlipChartQuickSettings(e.period), o.save()
                    }, d.showAggregationModal = function() {
                        r.aggregationModal(d.isFuture).then(function(e) {
                            d.applyQuickSettings(e)
                        })
                    }, u(), p(), d.$on("$destroy", function() {
                        o.resetCurrentFlipChartQuickSettings()
                    })
                }],
                template: a("F/G7")
            }
        }
        i.$inject = ["events", "interactiveChartApi", "interactiveChartSettings", "interactiveChartModals", "interactiveChartStateService", "utils", "chartVisibility", "_", "Notification"], e.exports = i
    },
    "1S74": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <div class=modal-header> Reward/Risk <i class="bc-glyph-times form-close right" data-ng-click=close()></i> </div> <form class="bc-modal-content-inner bc-form" novalidate> <div class=calc-tools-form__fields-row> <label for=calc-tools-form__input-entry-price class=calc-tools-form__input-label>Entry Price:</label> <input type=text id=calc-tools-form__input-entry-price class=calc-tools-form__input data-bc-auto-focus="" data-ng-model=formData.entryPrice data-ng-keypress=unsubscribePickListener() data-ng-change=calculateResult() data-ng-focus="listenForChartClick(\'entryPrice\')"> </div> <div class=calc-tools-form__fields-row> <label for=calc-tools-form__input-stop-loss class=calc-tools-form__input-label>Stop Loss:</label> <input type=text id=calc-tools-form__input-stop-loss class=calc-tools-form__input data-ng-model=formData.stopLoss data-ng-keypress=unsubscribePickListener() data-ng-change=calculateResult() data-ng-focus="listenForChartClick(\'stopLoss\')"> </div> <div class=calc-tools-form__fields-row> <label for=calc-tools-form__input-target-price class=calc-tools-form__input-label>Target Price:</label> <input type=text id=calc-tools-form__input-target-price class=calc-tools-form__input data-ng-model=formData.targetPrice data-ng-keypress=unsubscribePickListener() data-ng-change=calculateResult() data-ng-focus="listenForChartClick(\'targetPrice\')"> </div> <div class=calc-tools-form__fields-row> <label for=calc-tools-form__input-contracts class=calc-tools-form__input-label>Nbr Contracts:</label> <input type=number id=calc-tools-form__input-contracts class=calc-tools-form__input data-ng-model=formData.contracts data-ng-change=calculateResult()> </div> <div class=calc-tools-form__fields-row> <div class=input-radio> <input type=radio data-ng-model=formData.direction data-ng-change=calculateResult() name=toolProfitLossTypeLongRadio value=Long id=tool-profit-loss-direction-long-radio> <label for=tool-profit-loss-direction-long-radio> Long <span></span> </label> </div> <div class=input-radio> <input type=radio data-ng-model=formData.direction data-ng-change=calculateResult() name=toolProfitLossTypeShortRadio value=Short id=tool-profit-loss-direction-short-radio> <label for=tool-profit-loss-direction-short-radio> Short <span></span> </label> </div> </div> <div class=calc-tools-form__fields-row> <div class=calc-tools-form__results-box> <div class="row collapse"> <div class="column small-6"> Reward: <span class=right data-ng-class="{\'up\': formData.reward > 0, \'down\': formData.reward <= 0}" data-ng-show="formData.reward !== null">$[[ formData.reward | number: 2 ]]</span> </div> <div class="column small-6"> Ratio: <span class=right>[[ formData.ratio ]] : 1</span> </div> </div> <div class="row collapse"> <div class="column small-6"> Risk <span class=right data-ng-class="{\'up\': formData.risk > 0, \'down\': formData.risk <= 0}" data-ng-show="formData.risk !== null">$[[ formData.risk | number: 2 ]]</span> </div> </div> </div> </div> <div class=calc-tools-form__fields-row> <bc-checkbox data-cb-model=formData.showPrices data-cb-label="\'Show Prices\'"></bc-checkbox> </div> <div class=calc-tools-form__fields-row> <span class=annotation-modal__color-selector-label>Price Lines:</span> <bc-color-picker data-color-model=formData.line.color></bc-color-picker> <bc-line-width-selector data-line-width-model=formData.line.width></bc-line-width-selector> </div> <div class=calc-tools-form__fields-row> <div class="bc-dropdown styled"> <select data-ng-options="line.value as line.label for line in lineTypes" data-ng-model=formData.line.dashStyle></select> </div> </div> <div class="button-block text-center margin-top-20"> <a class="bc-button red" data-ng-if=annotationEditMode data-ng-click=removeAnnotation()>Delete</a> <button class="bc-button ok light-blue" data-ng-disabled="!formData.entryPrice || !formData.stopLoss || !formData.targetPrice" data-ng-click=confirm()>Add</button> </div> </form> </div>'
    },
    "1TrF": function(e, t, a) {
        "use strict";

        function i(e) {
            e.captcha = !0, e.submitForm = function(t) {
                !1 === e.captcha && t.preventDefault()
            }
        }
        i.$inject = ["$scope"], e.exports = i
    },
    "1Tzj": function(e, t) {
        e.exports = '<div class=bc-alerts__alerts-modal> <div class=bc-alerts__alerts-modal-header> <a class="bc-alerts__alerts-modal-close bc-glyph-times" data-ng-click=$modalInstance.close()></a> <bc-short-symbol-info></bc-short-symbol-info> </div> <div class=bc-alerts__alerts-modal-content data-ng-hide=loading> <div class=bc-alerts__alerts-modal-empty-message data-ng-show="alerts.length === 0 && !expired"> You have no alerts set for this symbol.<br/> </div> <div class=bc-alerts__premier-warning data-ng-show=expired> <div class="bc-alerts__alerts-modal-empty-message bc-alerts__premier-warning-warning"> We cannot create alerts for [[ symbol ]] because it does not appear to be actively trading.<br/> </div> </div> <div class=alert-symbol-list-modal-wrapper data-ng-show="alerts.length > 0 && !expired"> <alerts-symbol-list data-events=events data-confirm=true data-alerts=alerts data-close=$modalInstance.close()></alerts-symbol-list> </div> <div class=bc-alerts__alerts-modal-controls data-ng-show=!expired> <button class="bc-button ok white-with-border" data-ng-click=addAlert()>+ Alert</button> </div> <bc-premier-ads-block data-ng-if=isSymbolPage data-ref-code="\'advAlerts\'" data-custom-class="\'alerts-modal\'"></bc-premier-ads-block> <div class=bc-alerts__premier-warning data-ng-show=subscriptionWarning> <div class=bc-alerts__premier-warning-warning>Your membership provides for one price alert per symbol.</div> <div class=bc-alerts__premier-warning-title>Try Advanced Alerts!</div> <div class=bc-alerts__premier-warning-text> Get Advanced Alerts with your Barchart Premier Membership. Set multiple alerts using Price, Technical, and Opinion data variables. <a target=_self data-ng-href="[[ ::premierLink ]]?ref=advAlerts">Learn More.</a> </div> </div> </div> <div class=bc-alerts__alerts-modal-footer> <div data-ng-show=alertServerUnavailable> <p data-ng-bind=alertServerUnavailable></p> </div> <button class="bc-button save light-blue" data-ng-click=done()>Done</button> </div> </div> '
    },
    "1UwF": function(e, t, a) {
        "use strict";
        e.exports = [{
            label: "1D",
            settings: {
                data: "I",
                density: "L",
                im: "5",
                startDate: null,
                endDate: null,
                daterange: null
            }
        }, {
            label: "5D",
            settings: {
                data: "I",
                density: "X",
                im: "30",
                startDate: null,
                endDate: null,
                daterange: null
            }
        }, {
            label: "1M",
            settings: {
                data: "I",
                density: "H120",
                im: "120",
                startDate: null,
                endDate: null,
                daterange: null
            }
        }, {
            label: "3M",
            settings: {
                data: "DO",
                density: "ML",
                im: null,
                startDate: null,
                endDate: null,
                daterange: null
            }
        }, {
            label: "6M",
            settings: {
                data: "DO",
                density: "M",
                im: null,
                startDate: null,
                endDate: null,
                daterange: null
            }
        }, {
            label: "1Y",
            settings: {
                data: "DO",
                density: "X",
                im: null,
                startDate: null,
                endDate: null,
                daterange: null
            }
        }, {
            label: "5Y",
            settings: {
                data: "WO",
                density: "X",
                im: null,
                startDate: null,
                endDate: null,
                daterange: null
            }
        }, {
            label: "20Y",
            settings: {
                data: "MO",
                density: "X",
                im: null,
                startDate: null,
                endDate: null,
                daterange: null
            }
        }]
    },
    "1V8Y": function(e, t, a) {
        "use strict";
        angular.module("selectMarket", []).directive("changeMarket", a("xbhX")).factory("changeMarketFactory", a("9vIg"));
        e.exports = {
            enable: !0,
            name: "selectMarket"
        }
    },
    "1Y+h": function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = [function() {
                var a = this;
                a.utils = t, a.apiData = JSON.parse(e.unescape(a.apiData));
                var r = JSON.parse(a.symbol);
                a.currentSymbol = r, a.quotesService = i, a.data = a.apiData.data, a.expDate = a.apiData.expDate, a.template = a.apiData.template
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("oKKp"),
                controller: r,
                controllerAs: "OptionsCtrl"
            }
        }
        i.$inject = ["_", "utils", "quotesService"], e.exports = i
    },
    "1hvb": function(e, t) {
        e.exports = '<div class=bc-scroll-wrapper data-ng-class="{\'scroll-inactive\': !scrollableForward && !scrollableBack, \'separator-visible\': separatorVisible}"> <div class="wrapper bc-scroll-container" data-ng-transclude> </div> <div data-ng-cloak class=bc-scroll-navigation data-ng-if="links && showLinks"> <ul> <li data-ng-style="{\'width\': linkWidth}" data-ng-repeat="(key, link) in links " data-ng-class="{ \'active\' : activeLink === link.id }" data-ng-click=goto(link.id)>[[ link.title ]]</li> </ul> </div> <div class="scroll-control forward show-for-large-up" data-ng-show="scrollableForward && arrowsVisible" data-ng-click=scrollWidgetsForward()><i class=bc-glyph-chevron-right></i> </div> <div class="scroll-control back show-for-large-up" data-ng-show="scrollableBack && arrowsVisible" data-ng-click=scrollWidgetsBack()><i class=bc-glyph-chevron-left></i> </div> <div class="hint-shadow left" data-ng-class="{\'animate-show\': scrollableBack && shadowsVisible}"></div> <div class="hint-shadow right" data-ng-class="{\'animate-show\': scrollableForward && shadowsVisible}"></div> </div>'
    },
    "1k2J": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p) {
            if (e.user = t.getUserData(), e.dataLoading = !1, e.error = !1, e.errorWatchlist = !1, e.isLoggedIn = t.isLoggedIn(), e.limitOptions = [{
                    val: 10,
                    label: "Top 10"
                }, {
                    val: 25,
                    label: "Top 25"
                }, {
                    val: 50,
                    label: "Top 50"
                }], e.isNewDisabled = t.getEodReportsNumber("screeners", "send_report") >= u.config.limits.reportsLimit, e.showType = function(e) {
                    return a[e] || e
                }, e.user && e.user.screeners.length) {
                var m = angular.copy(e.user.screeners);
                e.screeners = [], (m = o.sortBy(m, function(e) {
                    return e.name.toLowerCase()
                }, ["asc"])).forEach(function(t) {
                    -1 !== ["STK"].indexOf(t.type) && e.screeners.push(t)
                }), m.forEach(function(t) {
                    -1 !== ["ETF"].indexOf(t.type) && e.screeners.push(t)
                }), m.forEach(function(t) {
                    -1 !== ["FUND"].indexOf(t.type) && e.screeners.push(t)
                })
            }
            e.editScreener = function(e) {
                var t = [];
                s.parseFiltersAsync(JSON.parse(e.filters), e.type).then(function() {
                    l.prepareFilters(l.getFilters(), t).then(function() {
                        c.setFilterViewFields(t), d.open({
                            templateUrl: "bc-saved-screener-modal.html",
                            controller: "Screener.ModalSaveScreenerCtrl",
                            windowClass: "bc-light-modal ",
                            resolve: {
                                savedScreenerName: function() {
                                    return e.name
                                },
                                savedScreener: function() {
                                    return e
                                },
                                screenerType: function() {
                                    return e.type
                                },
                                filters: function() {
                                    return JSON.parse(e.filters)
                                },
                                organisePage: function() {
                                    return !0
                                }
                            }
                        }).result.then(function(t) {
                            "OK" === t.status && i.success("Screener " + e.name + " saved.")
                        })
                    })
                })
            }, e.$on("onUpdateScreener", function(t, a) {
                var i = o.findIndex(e.screeners, {
                    id: a.screener.id
                });
                e.screeners[i] = angular.copy(a.screener)
            }), e.updateScreener = function(a) {
                if (e.isNewDisabled && a.send_report) return a.send_report = !1, i.warning({
                    message: p("MAX_EOD_REPORTS"),
                    delay: 8e3
                }), !1;
                var s = o.find(e.screeners, {
                    id: a.id
                });
                r.update(a.id, new n(s)).then(function(a) {
                    var r = o.findIndex(e.screeners, {
                        id: s.id
                    });
                    e.screeners[r] = angular.copy(a.data[0]), t.setScreeners(e.screeners), e.isNewDisabled = t.getEodReportsNumber("screeners", "send_report") >= u.config.limits.reportsLimit, i.success("End-of-Day Screener Emails preferences have been saved.")
                }, function(e) {
                    i.error(e.error.message)
                })
            }, e.createLink = function(e, t) {
                switch (e) {
                    case "STK":
                        return u.config.routes["stocks.screener"] + "?tab=result&screener=" + t;
                    case "ETF":
                        return u.config.routes["etfs-funds.etfsScreener"] + "?tab=result&screener=" + t;
                    case "FUND":
                        return u.config.routes["etfs-funds.fundsScreener"] + "?tab=result&screener=" + t;
                    default:
                        return u.config.routes["stocks.screener"] + "?tab=result&screener=" + t
                }
            }
        }
        i.$inject = ["$scope", "authService", "screenerNames", "Notification", "screenerApiService", "_", "ScreenerModel", "screenerParseService", "screenerFilterService", "screenerCurrentConfigService", "$modal", "$window", "textFactory"], e.exports = i
    },
    "1uEf": function(e, t, a) {
        "use strict";
        var i = "SyntheticSpread";
        angular.module(i, []).service("syntheticApiService", a("Dm0l")).directive("syntheticSpreadTable", a("LzrJ")), e.exports = {
            enable: !0,
            name: i
        }
    },
    "240y": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a, i) {
                    i.ref;

                    function r(t) {
                        e[i.bcCheckLimits]() && t.preventDefault()
                    }
                    a.on("click", r), t.$on("$destroy", function() {
                        a.off("click", r)
                    })
                }
            }
        }
        i.$inject = ["limitsService"], e.exports = i
    },
    "24Gw": function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <div class=bc-tools__modal-with-header-header> <div class="bc-tools__modal-with-header-close bc-glyph-times" data-ng-click=cancel();></div> <div class=bc-tools__modal-with-header-wrapper> [[ symbolData.name ]] ([[ symbolData.symbol ]]) </div> </div> <div class=bc-tools__modal-with-header-content data-ng-show=!loading> <div data-ng-show=!portfolios.length class=no-portfolios> <div class=error-text> You have no Portfolios. <a target=_self data-ng-href="[[ portfolioRoute ]]">Create one here</a>. </div> <div> Portfolios are used to track your Buy/Sell transactions, where a Watchlist is used to follow your favorite symbols. </div> </div> <div data-ng-show=portfolios.length class=portfolios-list> <ul> <li data-ng-repeat="portfolio in portfolios"> <a data-ng-click=addTransaction(portfolio)>[[ portfolio.caption ]]</a> </li> </ul> </div> </div> </div>'
    },
    "25aB": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    symbolType: "@",
                    symbol: "@",
                    symbolSector: "@",
                    comparisonForm: "="
                },
                controller: ["$window", "utils", "$scope", function(e, t, a) {
                    var i = this,
                        r = [];

                    function o(e) {
                        return [e.overlay1, e.overlay2, e.overlay3].filter(function(e) {
                            return !!e
                        })
                    }

                    function n(a) {
                        return a.length > 0 ? t.buildUrl(t.route(e.config.routes["quotes.comparison"], {
                            sector: i.symbolSector,
                            symbol: i.symbol
                        }), {
                            symbols: a
                        }) : t.route(e.config.routes["quotes.comparison"], {
                            sector: i.symbolSector,
                            symbol: i.symbol
                        })
                    }
                    a.$on("drawChartHasBeenCalled", function() {
                        r = o(i.comparisonForm), i.comparisonTableLink = n(r)
                    }), r = o(i.comparisonForm), i.comparisonTableLink = n(r)
                }],
                controllerAs: "$ctrl",
                template: a("UL0k")
            }
        }
    },
    "29SJ": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    enableMyCharts: "="
                },
                link: function(a) {
                    a.currentSymbol = null, a.gridView = 1, a.gridLoading = !1, a.selectedGridChart = null;
                    var l = t.getUserData() || {};
                    a.chartStyle = l.preferences ? l.preferences.charts_style : "interactive", a.selectGridChart = function(t) {
                        a.selectedGridChart && t.symbol === a.selectedGridChart.symbol ? a.selectedGridChart = null : a.selectedGridChart = t, e.$broadcast("selectedGridChart", a.selectedGridChart)
                    }, a.switchToOneViewGrid = function(t) {
                        e.$broadcast("dashboardResetGridView"), a.currentSymbol = angular.copy(t), e.$broadcast("dashboardHeaderSymbolChanged", angular.copy(t)), e.$broadcast("dashboardCurrentSymbolChanged", t)
                    }, a.$on("dashboardCurrentSymbolUpdated", function(e, t) {
                        console.log("[Dashboard Chart]: event <dashboardCurrentSymbolUpdated> ", t), "technical" === a.chartStyle && (a.currentSymbol = t, console.log("[Dashboard Chart]: Current symbol:", a.currentSymbol))
                    }), a.$on("dashboardCurrentSymbolChanged", function(t, n) {
                        if (console.log("[Dashboard Chart]: event <dashboardCurrentSymbolChanged> ", n), "interactive" !== a.chartStyle && e.$broadcast("onDashboardTechnicalChartPreference"), "interactive" === a.chartStyle && 1 === s.getView()) i.updateInlineDataForMainChart(n.symbol).then(function() {
                            if (a.currentSymbol = n, "mycharts" !== o.getParameter("activeTab")) {
                                var t = r.lastViewedTabSymbol();
                                a.currentSymbol.symbol === t && (console.log("[Dashboard Chart]: Force chart re-render"), e.$broadcast("dashboardTabChanged", n), r.clearLastViewedTabSymbol())
                            }
                        }).catch(function(e) {
                            console.log("[Dashboard Chart]: failed to update inline data, error:", e)
                        });
                        else {
                            if (n.primitiveSymbol = n.symbol, a.currentSymbol && a.currentSymbol.symbol !== n.symbol && e.$broadcast("technicalChartSymbolChanged", n.symbol), a.currentSymbol = n, !r.getChartTab()) {
                                var l = r.lastViewedTabSymbol();
                                a.currentSymbol.symbol === l && (r.clearLastViewedTabSymbol(), console.log("[Dashboard Chart]: Force chart re-render, trigger <dashboardTechnicalChartForceRender>"), e.$broadcast("dashboardTechnicalChartForceRender", n))
                            }
                            console.log("[Dashboard Chart]: Current symbol:", a.currentSymbol)
                        }
                    }), a.$on("renderGridCharts", function(e, t) {
                        console.log("[Dashboard Chart]: event <renderGridCharts>", t), a.symbolsToLoad = [], a.selectedGridChart = null, t.symbols.length > 0 ? (a.gridLoading = !0, n.addInlineDataForSymbols(t.symbols, !0).then(function(e) {
                            a.symbolsToLoad = e.data, s.setSymbolsData(e.data), a.gridView = t.gridView, a.gridLoading = !1
                        })) : (a.gridView = t.gridView, s.setSymbolsData([]))
                    })
                },
                template: a("ndig")
            }
        }
        i.$inject = ["$rootScope", "authService", "dashboardInlineDataService", "userChartTabService", "dashboardSettingsService", "bcInlineData", "dashboardGridSettings"], e.exports = i
    },
    "2B5V": function(e, t) {
        e.exports = '<div class=bc-datatabs-widget-wrapper> <tabset> <tab data-ng-repeat="tab in barchartDatatabsCtrl.tabs" heading={{tab.title}} active=tab.active> <div barchart-datatabs-tab-template data-template-key=template></div> </tab> </tabset> </div>'
    },
    "2BWD": function(e, t, a) {
        "use strict";
        e.exports = {
            default: {
                title: {
                    text: null
                },
                subtitle: {
                    text: null
                },
                yAxis: {
                    title: {
                        text: ""
                    }
                },
                options: {
                    pie: {
                        shadow: !1,
                        center: ["50%", "30%"]
                    },
                    chart: {
                        type: "pie",
                        margin: 0
                    },
                    tooltip: {
                        formatter: function() {
                            return "<b>" + this.key + "</b>: <b>" + (100 * this.y).toFixed(2) + "%</b>"
                        }
                    },
                    plotOptions: {
                        pie: {
                            cursor: "pointer",
                            center: ["50%", "40%"]
                        }
                    },
                    legend: {
                        floating: !1,
                        verticalAlign: "bottom",
                        align: "center",
                        maxHeight: 60,
                        y: 10,
                        labelFormatter: function() {
                            return this.name.toUpperCase()
                        }
                    }
                },
                series: [{
                    name: null,
                    data: {},
                    size: "50%",
                    dataLabels: {
                        formatter: function() {
                            return this.y > .02 ? this.point.name : null
                        },
                        enabled: !1
                    },
                    showInLegend: !0
                }, {
                    name: null,
                    data: {},
                    size: "60%",
                    innerSize: "55%",
                    dataLabels: {
                        formatter: function() {
                            return this.point.name
                        },
                        distance: 10
                    }
                }]
            },
            investment: {
                title: {
                    text: null
                },
                subtitle: {
                    text: null
                },
                yAxis: {
                    title: {
                        text: ""
                    }
                },
                options: {
                    pie: {
                        shadow: !1,
                        center: ["50%", "50%"]
                    },
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: null,
                        plotShadow: !1,
                        type: "pie"
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: !0,
                            cursor: "pointer",
                            dataLabels: {
                                enabled: !1
                            },
                            size: "80%",
                            showInLegend: !0
                        }
                    },
                    legend: {
                        labelFormatter: function() {
                            return this.name.toUpperCase()
                        }
                    }
                },
                series: [{
                    name: null,
                    colorByPoint: !0,
                    data: []
                }]
            }
        }
    },
    "2DFX": function(e, t) {
        e.exports = '<div class=media-overlay-my-chart-flipchart> <div data-left-right-arrow data-left-fn=$ctrl.loadChartForSymbol($ctrl.flipChartPrevChart) data-right-fn=$ctrl.loadChartForSymbol($ctrl.flipChartNextChart) data-close-fn=$ctrl.hideOverlayModal()> <div class="modal-mobile-navigation hide-for-medium-up"> <div class=modal-prev data-ng-if="$ctrl.charts.length > 1"> <a data-ng-click=$ctrl.loadChartForSymbol($ctrl.flipChartPrevChart) data-ng-if="$ctrl.flipChartPrevChart && !$ctrl.dataLoading"> <i class=bc-glyph-chevron-left></i> Previous </a> <span data-ng-if="!$ctrl.flipChartPrevChart || $ctrl.dataLoading"> <i class=bc-glyph-chevron-left></i> Previous </span> </div> <div class=modal-next data-ng-if="$ctrl.charts.length > 1"> <a data-ng-click=$ctrl.loadChartForSymbol($ctrl.flipChartNextChart) data-ng-if="$ctrl.flipChartNextChart && !$ctrl.dataLoading"> Next <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if="!$ctrl.flipChartNextChart || $ctrl.dataLoading"> Next <i class=bc-glyph-chevron-right></i> </span> </div> <div class=modal-close> <span data-ng-click=$ctrl.hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class="modal-sidebar-left show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-prev data-ng-if="$ctrl.charts.length > 1"> <a data-ng-click=$ctrl.loadChartForSymbol($ctrl.flipChartPrevChart) data-ng-if="$ctrl.flipChartPrevChart && !$ctrl.dataLoading"> <i class=bc-glyph-chevron-left></i> </a> <span data-ng-if="!$ctrl.flipChartPrevChart || $ctrl.dataLoading"> <i class=bc-glyph-chevron-left></i> </span> </div> </div> <div class="modal-sidebar-right show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-close> <span data-ng-click=$ctrl.hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> <div class=modal-next data-ng-if="$ctrl.charts.length > 1"> <a data-ng-click=$ctrl.loadChartForSymbol($ctrl.flipChartNextChart) data-ng-if="$ctrl.flipChartNextChart && !$ctrl.dataLoading"> <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if="!$ctrl.flipChartNextChart || $ctrl.dataLoading"> <i class=bc-glyph-chevron-right></i> </span> </div> </div> <div class=modal-share-group data-ng-if="!$ctrl.dataLoading && $ctrl.flipChartSymbol"> <p>Share</p> <ul bc-social-chart-share> <li class=facebook title="Share on Facebook"> <a data-bc-facebook-share-chart data-dynamic-title=socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type="[[ ::$ctrl.chartType ]]" data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.flipChartSymbol.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-facebook></i> </a> </li> <li class=twitter title="Share on Twitter"> <a bc-twitter-share-chart data-dynamic-title=socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type="[[ ::$ctrl.chartType ]]" data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.flipChartSymbol.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-twitter></i> </a> </li> <li class=linkedin title="Share on LinkedIn"> <a bc-linkedin-share-chart data-dynamic-title=socialTitle data-description="[[ ::socialDesctiprion ]]" data-convert-type="[[ ::socialImageType ]]" data-chart-type="[[ ::$ctrl.chartType ]]" data-redirect-url=redirectUrl data-set-chart-page-url=redirectUrl data-symbol=flipChartSymbol.symbol data-t-chart-data=chartData> <i class=bc-glyph-linkedin></i> </a> </li> <li class=google-plus title="Share on Google+"> <a bc-gplus-share-chart data-dynamic-title=socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type="[[ ::$ctrl.chartType ]]" data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.flipChartSymbol.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-google-plus></i> </a> </li> <li class=email title="Share via Email"> <a data-bc-mail-share-chart data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type="[[ ::$ctrl.chartType ]]" data-t-chart-data=$ctrl.chartData data-current-symbol=$ctrl.flipChartSymbol data-use-default-title=true data-ref-link=$ctrl.redirectUrl class=emailShare> <i class=bc-glyph-envelope-o></i> </a> </li> <li class=print title=Print> <a bc-print-share data-container-id=bcModalFlipchartContent> <i class=bc-glyph-print></i> </a> </li> </ul> </div> <div class=modal-inner> <div class=modal-content> <div class=bc-flipchart data-ng-class="{\'bc-flipchart-my-chart-technical\': $ctrl.chartType === \'technical\'}"> <div class="bc-flipchart__symbols-scroller hide-for-print"> <div data-ng-if=$ctrl.charts.length> <bc-scrollbar> <ul class=bc-flipchart__scroller-list> <li class=bc-flipchart__scroller-item data-ng-class="{\'active\': chart.id === $ctrl.currentChart.id}" data-ng-click=$ctrl.loadChartForSymbol(chart) data-ng-repeat="chart in $ctrl.charts" data-scroll-item-id="[[ chart.id ]]">([[ chart.symbol ]]) [[ chart.name ]]</li> </ul> </bc-scrollbar> </div> </div> <div class=throbber-wrapper data-ng-show=$ctrl.dataLoading> <img alt="Loading, please wait..." src=/img/throbber.gif /> </div> <div data-ng-if="$ctrl.chartType === \'technical\' && $ctrl.flipChartSymbol"> <div class="bc-flipchart__header header-technical clearfix hide-for-print"> <div class=bc-flipchart__title data-ng-show=!$ctrl.dataLoading> <a class=bc-flipchart__title-link href="[[ $ctrl.flipChartSymbolTechChartUrl ]]" data-ng-click=$ctrl.hideOverlayModal()> [[ $ctrl.flipChartData.metadata.desc | limitTo:35 ]] </a> <a class=add-to-watchlist data-ng-click=$ctrl.addToWatchlist()> <i class=bc-glyph-star></i> <span>Watchlist</span> </a> <div class="bc-dropdown styled bc-flipchart__apply-period-drop-down"> <select data-ng-model=$ctrl.technicalChartQuickSettings.settings data-ng-change=$ctrl.changeQuickSettings() data-ng-options="item.settings as item.label for item in $ctrl.quickSettings"> <option value="" disabled=disabled data-ng-show=!$ctrl.technicalChartQuickSettings.settings>---</option> </select> </div> </div> <div class="bc-flipchart__template-selector text-right" data-ng-show=!$ctrl.dataLoading> <div> <a target=_self class=bc-flipchart__template-selector-link data-ng-href="[[ $ctrl.technicalTemplatesEditingLink ]]" data-ng-hide=!$ctrl.userChartTemplates.length> Template: </a> <div class="bc-dropdown filter" data-ng-hide=!$ctrl.userChartTemplates.length> <select id=bc-flipchart-template-selector data-ng-model=$ctrl.technicalChartQuickSettings.template data-ng-change=$ctrl.applyChartTemplate($ctrl.technicalChartQuickSettings.template) data-ng-options="template as template.name for template in $ctrl.userChartTemplates"> <option value="" selected=selected>-None-</option> </select> </div> <a class="technical-chart-expand popup-chart" data-ng-click=$ctrl.openFullScreenTechnicalChart()> <i class=bc-glyph-long-arrow-ne></i> </a> <div class=apply-template-wrapper data-ng-show=!$ctrl.userChartTemplates.length> <a target=_self class="apply-template-label create-new" href="[[ $ctrl.technicalTemplatesEditingLink ]]"> Create Chart Template </a> </div> </div> </div> </div> <div id=bcModalFlipchartContent> <div data-ng-hide=$ctrl.shouldMapBeShown() class=bc-flipchart__data-tooltip> <div data-ng-if=!$ctrl.tooltipData.date> Mouseover chart to view prices. </div> <div data-ng-if=$ctrl.tooltipData.date> <span class=main data-ng-bind=$ctrl.tooltipData.date></span> <span class=main data-ng-bind=$ctrl.tooltipData.symbol></span> <span data-ng-show=$ctrl.tooltipBaseData.open> <span>Open:</span> <span data-ng-bind=$ctrl.tooltipBaseData.open></span> </span> <span data-ng-show=$ctrl.tooltipBaseData.high> <span>High:</span> <span data-ng-bind=$ctrl.tooltipBaseData.high></span> </span> <span data-ng-show=$ctrl.tooltipBaseData.low> <span>Low:</span> <span data-ng-bind=$ctrl.tooltipBaseData.low></span> </span> <span data-ng-show=$ctrl.tooltipBaseData.close> <span>Close:</span> <span data-ng-bind=$ctrl.tooltipBaseData.close></span> </span> <span data-ng-show=$ctrl.tooltipBaseData.Volume> <span>Volume:</span> <span data-ng-bind=$ctrl.tooltipBaseData.Volume></span> </span> <span data-ng-repeat="(key, value) in $ctrl.tooltipData"> <span data-ng-hide="key === \'date\' || key === \'symbol\'">[[ key | ucfirst ]]:</span> <span data-ng-hide="key === \'date\' || key === \'symbol\'" data-ng-bind=value></span> </span> </div> </div> <div class=bc-flipchart__chart data-ng-show=!$ctrl.dataLoading> <img data-ng-mouseleave=$ctrl.hideTooltip() data-bc-responsive-image-map data-bc-click-outside=$ctrl.hideTooltip() width=1060 data-ng-src="[[ $ctrl.flipChartData.image ]]" alt=Flipchart usemap=#bcFlipchartsMyChartMap class=bc-flipchart__my-chart-chart-image> <map id=bc-technical-chart-flipchart-image-map data-bc-image-map-tooltip=technical-chart-image-tooltip data-offset-scroll-y=170 data-top=30 data-tablet-offset name=bcFlipchartsMyChartMap data-image-class=bc-flipchart__my-chart-chart-image> </map> </div> </div> </div> <div data-ng-if="$ctrl.chartType === \'interactive\' && $ctrl.flipChartSymbol"> <interactive-chart data-current-symbol=$ctrl.flipChartSymbol data-full-screen=false data-dashboard-mode=true data-my-charts-mode=true data-flip-chart-mode=true element-id=bc-interactive-chart__flipchart-chart-container data-enable-my-charts=true> </interactive-chart> <div class=margin-top-10> <p>Tools are displayed from your full-sized chart, but any changes to tools from FlipCharts are not retained.</p> </div> </div> </div> </div> </div> <technical-chart-tooltip-box data-ng-show=$ctrl.shouldMapBeShown() data-id=technical-chart-image-tooltip data-class=technical-chart-image-tooltip data-show-tooltip=$ctrl.showTooltip data-tooltip-base-data=$ctrl.tooltipBaseData data-tooltip-data=$ctrl.tooltipData data-map-data-empty=mapDataEmpty> </technical-chart-tooltip-box> </div> </div>'
    },
    "2EOV": function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = null;
            this.getSymbolData = function() {
                return e
            }, this.setSymbolData = function(t) {
                e = angular.copy(t)
            }
        }
    },
    "2EU9": function(e, t) {
        e.exports = '<div class="bc-widget-simple__content bc-alerts-settings__additional-settings"> <div class=bc-alerts-settings__fieldset> <div class=bc-alerts-settings__fieldset-label>Deliver text alerts to:</div> <div class=bc-alerts-settings__fieldset-content> <a data-ng-if=!smsPublishier.default_recipient data-ng-click=addPhoneNumber()>Add Mobile Number</a> <div data-ng-if=smsPublishier.default_recipient> <span data-ng-bind=smsPublishier.default_recipient></span> <a href=# data-ng-click=addPhoneNumber()>Edit</a> <span class=text-red data-ng-show=!smsPublishier.default_recipient_hmac>Unverified</span> <a href=# class=bc-alerts-settings__link-remove data-ng-click=removePhone()>Delete</a> </div> </div> </div> <div class=bc-alerts-settings__fieldset> <div class=bc-alerts-settings__fieldset-label> <label for=bc-alerts-settings__select-time-zone>Time Zone:</label> </div> <div class=bc-alerts-settings__fieldset-content> <div class="bc-dropdown styled arrow-black rounded bc-alerts-settings__select-time-zone"> <select data-ng-model=smsPublishier.allow_window_timezone name=settingsTimeZone id=bc-alerts-settings__select-time-zone> <option data-ng-repeat="(key, val) in timezoneList" value="[[ ::key ]]">[[ ::val ]]</option> </select> </div> </div> </div> <div class=bc-alerts-settings__fieldset> <div class=bc-alerts-settings__fieldset-label>Send alerts between:</div> <div class=bc-alerts-settings__fieldset-content> <input name=settingsAlertsStartTime type=text class="rounded bc-alerts-settings__field-time-range" data-ng-model=smsPublishier.allow_window_start> <span class=bc-alerts-settings__fields-separator>-</span> <input name=settingsAlertsEndTime type=text class="rounded bc-alerts-settings__field-time-range" data-ng-model=smsPublishier.allow_window_end> <span class=bc-alerts-settings__time-range-notification>(Enter in military time)</span> </div> </div> </div>'
    },
    "2F3v": function(e, t, a) {
        "use strict";
        e.exports = function() {
            this.addHasOptionsColumn = function(e) {
                var t = e.options.resetExclude.indexOf("hasOptions"); - 1 !== t && (e.options.resetExclude.splice(t, 1), e.options.hasOptionsView = !0)
            }
        }
    },
    "2GMn": function(e, t) {
        e.exports = '<div> <div class=templates-list-tree ui-tree=treeOptions> <div class="templates-tree-head clearfix"> <div class=head-left-container> Name </div> <div class=head-right-container> <div class=hrc-right-block> <div class=column-order> Order </div> </div> <div class=hrc-left-block> <div class=column-description> Description </div> </div> </div> </div> <ol class=templates-tree-nodes ui-tree-nodes data-ng-model=templates> <li class=templates-tree-node ui-tree-node data-ng-repeat="template in templates"> <div class="templates-tree-handle clearfix" ui-tree-handle> <div class=item-left-container data-nodrag> <div class=item-minus> <i class=bc-glyph-minus-circle data-ng-click=removeTemplate(template)></i> </div> <div class=item-name> <a target=_self href="[[ template.link ]]" title="Change template settings"> [[ template.name ]] </a> </div> <div class=item-delete data-ng-show="pendingRemoveTemplate === template"> <span>Delete Template?</span> <a class="bc-button small light-blue" data-ng-click=confirmRemoveTemplate()>Yes</a> <a class="bc-button small grey" data-ng-click=cancelRemoveTemplate()>No</a> </div> </div> <div class=item-right-container> <div class=irc-right-block> <div class=item-bars> <i class=nodrag-area data-nodrag></i> <i class=bc-glyph-bars></i> </div> </div> <div class=irc-left-block> <div class=item-description> <span class=desktop> [[ template.description ]] </span> <span class=tablet data-nodrag> [[ template.description ]] </span> </div> </div> </div> </div> </li> </ol> </div> </div>'
    },
    "2IFW": function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a) {
                    a.$watch("item.eod_view", function(i, r) {
                        i !== r && -1 === ["main", "custom_create_view"].indexOf(i) && 2 !== e.getUserData().subscription && (a.item.eod_view = "main", t.showPremier("watchEmail"))
                    })
                }
            }
        }
        i.$inject = ["authService", "bcModalLoginSrv"], e.exports = i
    },
    "2Jxb": function(e, t) {
        e.exports = {
            onLogin: [],
            onRegister: [],
            preventLoginReload: !1
        }
    },
    "2L3L": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                restrict: "A",
                link: function(t, r, o) {
                    t.apiConfig = {};
                    var n = a.config.routes[o.bcScreen] || o.bcScreen,
                        s = o.staticList || null;

                    function l() {
                        if (o.paramKey && e.isLoggedIn() && !e.getUserData().is_premier) return i.showPremier("wlScreen"), !1;
                        if (!e.isLoggedIn() || e.isLoggedIn() && !e.getUserData().is_premier) return i.showPremier("listScreen"), !1;
                        "string" == typeof t.apiConfig && (t.apiConfig = JSON.parse(t.apiConfig)), s && (t.apiConfig.list = s);
                        var r = t.apiConfig.list || t.apiConfig.lists,
                            l = o.paramKey || "list";
                        a.location.href = r ? n + "?" + l + "=" + r : n
                    }
                    t.$on("filterChange", function(e, t) {
                        "screener" === t.name && (n = "etfs" === t.value || "etf" === t.value ? a.config.routes["etfs-funds.etfsScreener"] : a.config.routes[o.bcScreen] || o.bcScreen)
                    }), s || t.$on("setDownloadConfig", function(e, a) {
                        t.apiConfig = angular.copy(a)
                    }), t.$on("tableSorted", function(e, a) {
                        t.apiConfig.orderBy = a.field, t.apiConfig.orderDir = a.dir ? "desc" : "asc"
                    }), t.$on("$destroy", function() {
                        r.off("click", l)
                    }), r.on("click", l)
                },
                $attrs: {
                    bcScreen: "@",
                    staticList: "@"
                }
            }
        }
        i.$inject = ["authService", "authRouteService", "$window", "bcModalLoginSrv"], e.exports = i
    },
    "2MfX": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    settingsAggregation: "=",
                    settings: "=",
                    chartVisibility: "="
                },
                controller: ["$scope", "events", function(a, n) {
                    a.periodSizes = r.periodSizes;
                    var s = a.settingsAggregation.size;
                    a.updateAggregation = function(e) {
                        e.$valid && s !== a.settingsAggregation.size && (angular.element(document.querySelector(".js-chart-form-minutes"))[0].blur(), c(a.settings.period), s = a.settingsAggregation.size)
                    }, a.$on(n.ON_INTERACTIVE_CHART_SET_PERIOD, function(e, t) {
                        "Intraday" === a.settingsAggregation.unit && "CUSTOM" !== t.period && a.periodSizes[t.period] && a.settingsAggregation.size !== a.periodSizes[t.period] && (a.settingsAggregation.size = a.periodSizes[t.period], c(t.period))
                    });
                    var l = !1;

                    function c(r) {
                        a.chartVisibility.hasData = !0, setTimeout(function() {
                            if (e.changeAggregation({
                                    size: a.settingsAggregation.size
                                }).render(), "CUSTOM" !== r) e.changePeriod(r), a.settings.range.from = null, a.settings.range.to = null, t.setChartRange(a.settings.range);
                            else if (a.settings.range && a.settings.range.from) {
                                var n = {
                                    from: o.getUTCFromTime(a.settings.range.from)
                                };
                                a.settings.range.to && (n.to = o.getUTCToTime(a.settings.range.to)), e.changeRange(n).render()
                            }
                            e.render(), t.setChartAggregation(a.settingsAggregation), t.setChartTemplate(null), a.settings.template = null, i.save(t.getChartGlobalConfig())
                        }, 0)
                    }
                    a.$watch(function() {
                        return a.settingsAggregation.size
                    }, function(e, t) {
                        l ? s = t : l = !0
                    })
                }],
                template: a("xg0C")
            }
        }
        i.$inject = ["interactiveChartApi", "interactiveChartSettings", "interactiveChartStateService", "interactiveChartPeriodSizeConfig", "utils"], e.exports = i
    },
    "2Q5W": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                require: "ngModel",
                link: function(e, t, a, i) {
                    function r(t) {
                        var r = t === e.$eval(a.bcEquals);
                        return i.$setValidity("isEquals", r), t
                    }
                    i && (i.$parsers.push(r), i.$formatters.push(r), e.$watch(a.bcEquals, function() {
                        r(i.$viewValue)
                    }))
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    "2QoM": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    enableMyChart: "="
                },
                controller: ["watchlistFormModalService", "$scope", "authService", "interactiveChartApi", "interactiveChartUtils", "technicalChartUtils", "technicalChartImageStorage", "$rootScope", "bcModalLoginSrv", "dashboardSettingsService", "dashboardModalsService", function(e, t, a, i, r, o, n, s, l, c, d) {
                    var u = this,
                        p = a.getUserData() || {},
                        m = (c.getParameter("activeTab"), null);

                    function h() {
                        u.activeItem = null, c.updateParameter("isHidden", !0), s.$broadcast("menuVisibilityChanged", !0), s.$broadcast("closeRightMenu")
                    }
                    u.currentSymbol = null, u.isAuthenticated = a.isLoggedIn(), u.activeItem = null, u.chartStyle = p.preferences ? p.preferences.charts_style : "interactive", u.isCurrentSymbolDisabled = !1, u.isGridActive = !1, u.openMarkets = function() {
                        "markets" === u.activeItem ? h() : (u.activeItem = "markets", s.$broadcast("dashboardChangeTab", "markets"), s.$broadcast("menuVisibilityChanged", !1), c.updateParameter("isHidden", !1))
                    }, u.openWatchlists = function() {
                        "watchlist" === u.activeItem ? h() : (u.activeItem = "watchlist", s.$broadcast("dashboardChangeTab", "watchlist"), s.$broadcast("menuVisibilityChanged", !1), c.updateParameter("isHidden", !1))
                    }, u.openPortfolio = function() {
                        "portfolio" === u.activeItem ? h() : (u.activeItem = "portfolio", s.$broadcast("dashboardChangeTab", "portfolio"), s.$broadcast("menuVisibilityChanged", !1), c.updateParameter("isHidden", !1))
                    }, u.openMyCharts = function() {
                        !a.isLoggedIn() || a.isLoggedIn() && !a.getUserData().is_premier ? (l.showPremier("myCharts"), c.updateParameter("isHidden", !0)) : "mycharts" === u.activeItem ? h() : (u.activeItem = "mycharts", s.$broadcast("dashboardChangeTab", "mycharts"), s.$broadcast("menuVisibilityChanged", !1), c.updateParameter("isHidden", !1))
                    }, u.saveToMyCharts = function() {
                        u.isGridActive || (!a.isLoggedIn() || a.isLoggedIn() && !a.getUserData().is_premier ? l.showPremier("myCharts") : d.openSaveMyChartModal())
                    }, u.addToWatchlist = function() {
                        if (u.isAuthenticated) {
                            if (u.isCurrentSymbolDisabled) return;
                            e.addToWatchlist(u.currentSymbol.symbol, u.currentSymbol.symbolName, !0)
                        }
                    }, u.downloadAsImage = function() {
                        if (!u.isGridActive) {
                            var e = u.currentSymbol.symbol + "_Barchart_Interactive_Chart_" + window.moment(new Date).format("MM/DD/YYYY");
                            switch (u.chartStyle) {
                                case "interactive":
                                    r.saveAsImage(i.getSVGForExport(), e);
                                    break;
                                case "technical":
                                    o.saveAsImage(n.getChartData().image, e)
                            }
                        }
                    }, t.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        window.config.currentSymbol = t, u.currentSymbol = t
                    }), t.$on("dashboardCurrentSymbolUpdated", function(e, t) {
                        window.config.currentSymbol = t, u.currentSymbol = t
                    }), t.$on("dashboardSymbolChangedFromSelector", function(e, t) {
                        window.config.currentSymbol = t, u.currentSymbol = t
                    }), t.$on("closeRightPanel", function() {
                        h()
                    }), t.$on("dashboardForceSelectTab", function(e, t) {
                        switch (t.tab) {
                            case "markets":
                                u.openMarkets();
                                break;
                            case "mycharts":
                                u.openMyCharts();
                                break;
                            case "watchlist":
                                u.openWatchlists()
                        }
                    }), t.$on("selectedGridChart", function(e, t) {
                        null !== t ? (null === m && (m = angular.copy(u.currentSymbol)), u.currentSymbol = t, window.config.currentSymbol = t, !0 === u.isCurrentSymbolDisabled && (u.isCurrentSymbolDisabled = !1)) : (u.currentSymbol = angular.copy(m), window.config.currentSymbol = u.currentSymbol, m = null, u.isCurrentSymbolDisabled = !0), console.log("[Dashboard Right Menu]: event <selectedGridChart>", t)
                    }), t.$on("renderGridCharts", function(e, t) {
                        1 === t.gridView && null !== m && (u.currentSymbol = angular.copy(m), window.config.currentSymbol = u.currentSymbol, m = null), 1 !== t.gridView ? (u.isCurrentSymbolDisabled = !0, u.isGridActive = !0) : (u.isCurrentSymbolDisabled = !1, u.isGridActive = !1)
                    })
                }],
                controllerAs: "$ctrl",
                template: a("GmFH")
            }
        }
    },
    "2SJq": function(e, t, a) {
        "use strict";
        var i = "TradingStrategiesIndicator";
        angular.module(i, []).controller("TradingStrategiesIndicatorCtrl", a("Pn3t")), e.exports = {
            enable: !0,
            name: i
        }
    },
    "2Smn": function(e, t) {
        e.exports = '<div> <div class=bc-screener__common-filter-value> <div class="bc-dropdown filter bc-screener__common-filter-value-field"> <select data-ng-model=$ctrl.filterData.signal.value data-ng-options="item.key as item.value for item in $ctrl.filters.signal.value"></select> </div> <div class="bc-dropdown filter bc-screener__common-filter-value-field" data-ng-hide="$ctrl.filterData.signal.value === \'h\'"> <select data-ng-model=$ctrl.filterData.percent.operator data-ng-options="item.key as item.value for item in $ctrl.filters.percent.operator"></select> </div> <div class=bc-screener__input-group-wrapper data-ng-hide="$ctrl.filterData.signal.value === \'h\'"> <div class=input-group data-ng-if="$ctrl.filterData.percent.operator !== \'between\'"> <input type=number class=bc-screener__common-filter-value-percent data-ng-model=$ctrl.filterData.percent.value /> <span class=input-group-suffix>%</span> </div> <div class=input-group data-ng-if="$ctrl.filterData.percent.operator === \'between\'"> <screener-range data-form-data=$ctrl.filterData.percent.value data-input-prefix=$ctrl.filters.percent.prepend data-input-suffix=$ctrl.filters.percent.append></screener-range> </div> </div> </div> </div>'
    },
    "2Tgn": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            return {
                restrict: "A",
                scope: {
                    title: "@",
                    link: "@",
                    refLink: "=",
                    chartType: "@",
                    convertType: "@",
                    tChartData: "=",
                    imageString: "@",
                    currentSymbol: "=",
                    onShared: "&",
                    useDefaultTitle: "@"
                },
                link: function(n, s) {
                    var l, c;

                    function d() {
                        var s, d = n.currentSymbol || o.config.currentSymbol;
                        if ("interactive" === n.chartType) {
                            var u = {
                                configuration: JSON.stringify(r.getChartGlobalConfig()),
                                state: e.save()
                            };
                            s = "true" === n.useDefaultTitle ? d.symbol + " | Custom Interactive Chart for " + d.symbolName : n.title, i.saveChartDataForSymbolAnon(r.getSymbol(), u).then(function(i) {
                                var r = o.location.origin + o.location.pathname + "?id=" + i.id;
                                n.link && (r = n.link + "?id=" + i.id), d && (c = "Please see the attached chart for " + d.symbolName + " (" + d.symbol + ") created on Barchart.com."), l = e.getSVGForExport(), t.openShareChartThoughMailModal({
                                    image: l,
                                    link: void 0 !== n.refLink ? n.refLink + "?id=" + i.id : r,
                                    subject: s,
                                    type: n.convertType,
                                    systemBody: c,
                                    symbol: d.symbol
                                }, "Share Chart With Email", o.config.routes["share.chart_mail"], {
                                    hideLink: !0
                                }).then(function(e) {
                                    "OK" === e && (window.dataLayer.push({
                                        event: "socialInteraction",
                                        socialNetwork: "Email",
                                        socialAction: "Sent",
                                        socialTarget: void 0 !== n.refLink ? n.refLink + "?id=" + e.id : r
                                    }), a.success("Email has been sent."), n.onShared())
                                })
                            })
                        } else "technical" === n.chartType ? (d && (c = "Please see the attached chart for " + d.symbolName + " (" + d.symbol + ") created on Barchart.com."), s = "true" === n.useDefaultTitle ? d.symbol + " | Custom Technical Chart for " + d.symbolName : n.title, l = n.tChartData.image, t.openShareChartThoughMailModal({
                            image: l,
                            link: void 0 !== n.refLink ? n.refLink : n.link,
                            subject: s,
                            type: n.convertType,
                            systemBody: c,
                            symbol: d.symbol
                        }, "Share Chart With Email", o.config.routes["share.chart_mail"], {
                            hideLink: !0
                        }).then(function(e) {
                            "OK" === e && (window.dataLayer.push({
                                event: "socialInteraction",
                                socialNetwork: "Email",
                                socialAction: "Sent",
                                socialTarget: void 0 !== n.refLink ? n.refLink : n.link
                            }), a.success("Email has been sent."), n.onShared())
                        })) : t.openShareChartThoughMailModal({
                            imageData: n.imageString,
                            link: n.link,
                            widget: !0,
                            subject: n.title,
                            systemBody: "Please see " + n.title + " created on Barchart.com."
                        }, "Share Widget With Email", o.config.routes["share.news"], {
                            hideLink: !0
                        }).then(function(e) {
                            "OK" === e && (window.dataLayer.push({
                                event: "socialInteraction",
                                socialNetwork: "Email",
                                socialAction: "Sent",
                                socialTarget: n.link
                            }), a.success("Email has been sent."), n.onShared())
                        })
                    }
                    s.on("click", d), n.$on("$destroy", function() {
                        s.off("click", d)
                    })
                }
            }
        }
        i.$inject = ["interactiveChartApi", "interactiveChartModals", "Notification", "interactiveChartStateApi", "interactiveChartSettings", "$window"], e.exports = i
    },
    "2WSe": function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.dataLoading = !1, e.success = !1, e.unsubscribe = function(a, i) {
                var r = {
                    email: a,
                    lists: [i]
                };
                t.unsubscribe(r).then(function(t) {
                    t.success && (e.success = !0)
                }, function(e) {})
            }
        }
        i.$inject = ["$scope", "barchartEmailsApiFactory"], e.exports = i
    },
    "2fX1": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = {
                    P1D: "1-Day Performance",
                    P5D: "5-Day Performance",
                    P1M: "1-Month Performance",
                    P3M: "3-Month Performance",
                    P6M: "6-Month Performance",
                    P1Y: "1-Year Performance",
                    P5Y: "5-Year Performance",
                    P20Y: "20-Year Performance"
                },
                r = {
                    P1D: {
                        size: 5,
                        unit: "Intraday"
                    },
                    P5D: {
                        size: 30,
                        unit: "Intraday"
                    },
                    P1M: {
                        size: 60,
                        unit: "Intraday"
                    },
                    P3M: {
                        size: 1,
                        unit: "Day"
                    },
                    P6M: {
                        size: 1,
                        unit: "Day"
                    },
                    P1Y: {
                        size: 1,
                        unit: "Day"
                    },
                    P5Y: {
                        size: 1,
                        unit: "Week"
                    },
                    P20Y: {
                        size: 1,
                        unit: "Month"
                    }
                };
            this.userData = t.getUserData(), this.defaultPeriod = "P3M", this.defaultAggregation = r.P3M, t.isLoggedIn() && this.userData && this.userData.preferences.default_period && (this.defaultPeriod = this.userData.preferences.default_period, r[this.defaultPeriod] && (this.defaultAggregation = r[this.defaultPeriod])), this.periodChanged = function(a) {
                i.hasOwnProperty(a.period) && t.isLoggedIn() && e.savePreferencesItem("default_period", a.period)
            }
        }
        i.$inject = ["interactiveChartUserPreferencesApi", "authService", "Notification"], e.exports = i
    },
    "2yQB": function(e, t, a) {
        "use strict";
        angular.module("authentication", []).value("authCallbacks", a("2Jxb")).constant("bcLoginRef", a("S682")).constant("bcLoginPremierRef", a("MdxV")).controller("bcModalLoginCtrl", a("bUPr")).controller("LoginCtrl", a("1TrF")).controller("bcModalRefCtrl", a("Hvc5")).controller("bcModalAgreementCtrl", a("6d2Q")).controller("bcForgotPasswordCtrl", a("pGJx")).controller("bcPremierModalCtrl", a("+fs9")).controller("Authentication.forgotPasswordModalCtrl", a("oK6E")).controller("Authentication.registerModalCtrl", a("sZhb")).controller("Authentication.contactSupportModalCtrl", a("umTJ")).provider("authService", a("pEo0")).factory("authApiService", a("3Dq7")).factory("bcModalLoginSrv", a("mBmo")).factory("authRouteService", a("L0wU")).factory("userAuthFormData", a("3k5U")).service("userDataService", a("b+om")).service("bcAgreementService", a("oAk1")).service("authRedirectService", a("FPY3")).service("limitsService", a("fnFl")).directive("bcModalLogin", a("QnJG")).directive("bcGrecaptcha", a("eO16")).directive("bcCheckLimits", a("240y")).directive("loginComponent", a("dv7W")).directive("errorsComponent", a("xGPI")).directive("refComponent", a("GrRd")).directive("registerComponent", a("oAEk")).directive("socialComponent", a("e+Nl")).directive("forgotComponent", a("9TZC")).directive("contactSupportComponent", a("5o+i")).directive("showPassword", a("yGWH")).directive("bcResendActivationMail", a("li66")).directive("bcUserAuthButton", a("OsVs")).directive("bcGoToRegister", a("yVWT")).directive("bcGoToForgot", a("JrL5")).directive("showSupportModal", a("ZUan")).directive("bcResendVerificationEmail", a("8z5t")).directive("bcPremierForm", a("Yg4J"))
    },
    "31Pk": function(e, t) {
        e.exports = "<div class=bc-portfolio__show-notes> <i class=bc-glyph-file data-ng-click=showDetails()></i> </div> "
    },
    "34k3": function(e, t, a) {
        "use strict";
        var i = "BarchartOpinion";
        angular.module(i, []).directive("barchartOpinion", a("1/ku"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "38yg": function(e, t, a) {
        "use strict";
        var i = "welcomeTutorial";
        angular.module(i, []).controller(i + ".IntroHeaderBar", a("4EXa")).controller(i + ".TakeTheTour", a("N5Bs"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "3BS9": function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$compile", "$window", "$scope", "BarchartMediaOverlayApiFactory", "$sce", function(e, t, a, i, r) {
                a.content = "", a.relatedSymbols = null, a.nextItem = null, a.prevItem = null, a.itemUrl = null, a.dataLoading = !1;
                var o = angular.element(document.querySelector(".bc-overlay-modal-wrapper .modal-content")),
                    n = angular.element(document.querySelector(".bc-overlay-modal-wrapper .bc-article"));
                o.css("min-height", window.innerHeight + 10 + "px"), n.css("min-height", window.innerHeight + 10 + "px"), window.addEventListener("resize", function() {
                    var e = window.innerHeight + 10 + "px";
                    o.css("min-height", e), n.css("min-height", e)
                }, !0);
                var s = document.querySelector(".bc-technical-indicator");

                function l() {
                    var e = a.item;
                    a.item.includes("options_glossary") && (e = "options_glossary");
                    var t = a.linksKeys.indexOf(e); - 1 !== t && a.linksKeys[t - 1] ? a.prevItem = "/education/" + a.type + "/" + a.linksKeys[t - 1] : a.prevItem = null, -1 !== t && a.linksKeys[t + 1] ? a.nextItem = "/education/" + a.type + "/" + a.linksKeys[t + 1] : a.nextItem = null
                }

                function c() {
                    a.dataLoading = !0, window.players.length && (window.players.forEach(function(e) {
                        var t = document.getElementById(e.id_);
                        t && window.videojs(t).dispose()
                    }), window.players = []), i.getEducationContent(a.type, a.item).then(function(e) {
                        e.success && (document.querySelector("title").text = angular.element("<div>" + e.data + "</div>").find("h1").text() + " - Barchart.com", a.content = r.trustAsHtml(e.data)), a.dataLoading = !1
                    }, function() {
                        a.dataLoading = !1
                    }), t.scroll(0, 0)
                }
                a.linksKeys = JSON.parse(s.getAttribute("data-links-keys")), a.$watch("item", function() {
                    l(), c()
                }), l(), c()
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    item: "=",
                    type: "=",
                    hideOverlayModal: "&"
                },
                template: a("dlnT"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    "3Dq7": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                register: function(t) {
                    return t.refcode = t.refcode || a, e.call("/register", "POST", t)
                },
                login: function(t) {
                    return e.call("/login", "POST", t)
                },
                contact: function(a) {
                    return e.call(t.config.routes["user.contact"], "POST", a)
                },
                sendPass: function(t) {
                    return e.call("/forgot-password", "POST", {
                        email: t
                    })
                },
                giveFeedback: function(t) {
                    return e.call("/give-feedback", "POST", t)
                },
                sendBugReport: function(a) {
                    return e.call(t.config.routes["user.bugReport"], "POST", a)
                }
            }
        }
        i.$inject = ["dataProvider", "$window", "DEFAULT_REF"], e.exports = i
    },
    "3EYg": function(e, t) {
        e.exports = "<div> <div class=show-for-small-only> <p class=bc-major-market-sectors-matrix-error> Matrix view is not supported on mobile devices. </p> </div> <div class=show-for-medium-up> <table class=bc-major-market-sectors-table-matrix> <thead> <tr> <th class=sector> [[ sectorsData.meta.field.name.symbolName ]] </th> <th class=last-price> [[ sectorsData.meta.field.name.lastPrice ]] </th> <th class=\"heat-price today-price\"> [[ sectorsData.meta.field.name.percentChange ]] </th> <th class=heat-price> [[ sectorsData.meta.field.name.percentChange1y ]] </th> <th class=heat-price> [[ sectorsData.meta.field.name.percentChange5y ]] </th> <th class=heat-price> [[ sectorsData.meta.field.name.percentChange10y ]] </th> </tr> </thead> <tbody data-ng-repeat=\"(itemKey, item) in sectorsData.data\" data-ng-class=\"itemKey === 0 ? 'major-index' : 'comparable-index'\" data-ng-class-even=\"'even'\"> <tr> <td class=sector> <div class=title-wrapper> <a target=_self data-ng-href=\"[[ ::getLink(item, true) ]]\"> [[ item.symbolName ]] </a> </div> </td> <td class=last-price> [[ item.lastPrice ]] </td> <td class=\"heat-price today-price\"> <span data-ng-if=\"itemKey === 0\" data-ng-class=getValueClass(item.percentChange)> [[ item.percentChange ]] </span> <div data-ng-if=\"itemKey !== 0\" data-ng-style=\"{background: item['percentChange' + 'Color'], opacity: item['percentChange' + 'Opacity']}\"> <span>[[ item.percentChange ]]</span> </div> </td> <td class=heat-price> <span data-ng-if=\"itemKey === 0\" data-ng-class=getValueClass(item.percentChange1y)> [[ item.percentChange1y ]] </span> <div data-ng-if=\"itemKey !== 0\" data-ng-style=\"{background: item['percentChange1y' + 'Color'], opacity: item['percentChange1y' + 'Opacity']}\"> <span>[[ item.percentChange1y ]]</span> </div> </td> <td class=heat-price> <span data-ng-if=\"itemKey === 0\" data-ng-class=getValueClass(item.percentChange5y)> [[ item.percentChange5y ]] </span> <div data-ng-if=\"itemKey !== 0\" data-ng-style=\"{background: item['percentChange5y' + 'Color'], opacity: item['percentChange5y' + 'Opacity']}\"> <span>[[ item.percentChange5y ]]</span> </div> </td> <td class=heat-price> <span data-ng-if=\"itemKey === 0\" data-ng-class=getValueClass(item.percentChange10y)> [[ item.percentChange10y ]] </span> <div data-ng-if=\"itemKey !== 0\" data-ng-style=\"{background: item['percentChange10y' + 'Color'], opacity: item['percentChange10y' + 'Opacity']}\"> <span>[[ item.percentChange10y ]]</span> </div> </td> </tr> </tbody> </table> </div> </div>"
    },
    "3HO1": function(e, t, a) {
        "use strict";

        function i(e, t) {
            function a(e, t) {
                var a = "",
                    i = null;
                t.children().remove(), Object.keys(e).forEach(function(t) {
                    i = (i = '<option value="{%value%}">{%label%}</option>'.replace(/{%value%}/, t)).replace(/{%label%}/, e[t]), a += i, i = null
                }), t.append(a)
            }
            return {
                restrict: "A",
                require: "?ngModel",
                scope: {
                    screener: "="
                },
                link: function(i, r, o, n) {
                    a(s(i.screener.view && "filter_view" !== i.screener.view ? t.getFieldsByViewName(i.screener.view).split(",") : e.getFilterViewFields()), r), n && i.$watch(function() {
                        return n.$modelValue
                    }, function(e) {
                        e && setTimeout(function() {
                            r.val(e)
                        })
                    });

                    function s(e) {
                        var t = [];
                        return window.config.fieldsTitle.symbol = "Symbol", e.forEach(function(e) {
                            t[e] = window.config.fieldsTitle[e] || e
                        }), t
                    }
                    i.$watch("screener.view", function(i) {
                        a(s(i && "filter_view" !== i ? t.getFieldsByViewName(i).split(",") : e.getFilterViewFields()), r)
                    })
                }
            }
        }
        i.$inject = ["screenerCurrentConfigService", "barchartDatatableFieldsService"], e.exports = i
    },
    "3HSm": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = {},
                r = {},
                o = ["UsEquity", "UsEquityOtc", "CanadianEquity", "OtherInternationalEquities", "Etf"];
            return {
                setData: function(e) {
                    i = e
                },
                getData: function() {
                    return i
                },
                clearData: function() {
                    i = {}
                },
                hasData: function() {
                    return !t.isEmpty(i)
                },
                getSymbolAlerts: function(t) {
                    return e.checkType(t, e.types.STRING), r[t] || []
                },
                setSymbolAlerts: function(t, a) {
                    e.checkType(t, e.types.STRING), e.checkType(a, e.types.ARRAY), r[t] = a.slice()
                },
                removeSymbolAlert: function(a, i) {
                    if (r.hasOwnProperty(a)) {
                        e.checkType(i, e.types.OBJECT);
                        var o = t.findIndex(r[a], function(e) {
                            return e.alert_id === i.alert_id
                        }); - 1 !== o && r[a].splice(o, 1)
                    }
                },
                addSymbolAlert: function(t, a) {
                    e.checkType(t, e.types.STRING), e.checkType(a, e.types.OBJECT), r.hasOwnProperty(t) || (r[t] = []), r[t].push(a)
                },
                editSymbolAlert: function(t, a, i) {
                    e.checkType(t, e.types.STRING), e.checkType(a, e.types.OBJECT), e.checkType(i, e.types.OBJECT), Array.isArray(r[t]) ? r[t].every(function(e, i) {
                        return e.alert_id !== a.alert_id || (r[t].splice(i, 1), !1)
                    }) : r[t] = [], r[t].push(i)
                },
                symbolEquitityValidate: function() {
                    var e = !0,
                        t = void 0 !== i.symbolTypeSpec ? i.symbolTypeSpec : i.symbolType,
                        r = a.config.symbols.type_names[t];
                    return ~o.indexOf(r) || (e = !1), e
                },
                hasNewsAlert: function(e) {
                    var t = !1;
                    return e.every(function(e) {
                        return "news" !== e.alert_type || (t = !0, !1)
                    }), t
                }
            }
        }
        i.$inject = ["assert", "_", "$window"], e.exports = i
    },
    "3Hs9": function(e, t, a) {
        "use strict";
        var i = "BarchartEmails";
        angular.module(i, []).controller(i + ".barchartEmailsCtrl", a("nbLj")).controller(i + ".barchartEmailsUnsubscriptionCtrl", a("2WSe")).directive("newsletterUnlockSubscriptionForm", a("7CWe")).factory("barchartEmailsApiFactory", a("UmQ+"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "3IRH": function(e, t) {
        e.exports = function(e) {
            return e.webpackPolyfill || (e.deprecate = function() {}, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", {
                enumerable: !0,
                get: function() {
                    return e.l
                }
            }), Object.defineProperty(e, "id", {
                enumerable: !0,
                get: function() {
                    return e.i
                }
            }), e.webpackPolyfill = 1), e
        }
    },
    "3KkX": function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["$location", "bcWebinarModalService", "bcSurveyModalService", "$window", "bcModalLoginSrv", "barchartPremierModalService", function(e, t, a, i, r, o) {
            e.search().webinar && (t.showModal(), e.search("webinar", null)), i.config.survey && a.showModal(), e.search().success && "/my/barchart-premier" === e.path() && (o.successSubscriptionModal(), e.search("success", null)), i.config.showPremierModal && setTimeout(function() {
                r.showPremier(i.config.showPremierModal.ref)
            }, i.config.showPremierModal.time)
        }])
    },
    "3L7b": function(e, t) {
        e.exports = '<div class=bc-modal-content> <input type=hidden /> <div class=modal-header> <i class="bc-glyph-times form-close" data-ng-click=cancel()></i> </div> <form data-ng-submit=apply()> <div class=bc-modal-content-inner> <div class="modal-settings-row row-chart-size"> <div class="label bold">Chart Size</div> <div class="bc-dropdown styled"> <select data-ng-options="size.value as size.label for size in chartSizes" data-ng-model=formData.dimensions.chartHeight></select> </div> </div> </div> <div class="modal-controls-row text-center"> <button class="bc-button grey" data-ng-click=cancel()>Cancel</button> <button type=submit class="bc-button light-blue">Apply</button> </div> </form> </div> '
    },
    "3Qed": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            return {
                observe: function() {
                    (function() {
                        var t = this;
                        t.$on("filterChange", function(a, i) {
                            "viewName" !== i.name && t.page && "all" !== t.page && !r.search().page && (t.page = 1), e.makeRequest.call(t, i)
                        }), "string" == typeof this.watch && (t.watch = JSON.parse(t.watch)), i.$broadcast("triggerFilterChange", t.watch)
                    }).call(this),
                        function() {
                            var t = this;
                            t.$on("reorderDataTable", function(i, r) {
                                void 0 !== r.guid && t.guid !== r.guid || (t.processing = !0, t.apiConfig.api.orderBy = r.field, t.apiConfig.api.orderDir = r.dir ? "desc" : "asc", t.options.pagination && t.options.pagination > 0 ? (t.apiConfig.api.limit || (t.apiConfig.api.limit = t.options.pagination), a.loadPage(t.apiConfig, t.paginationParams.currentPage).then(function(e) {
                                    t.processData(e)
                                })) : e.reloadRequest.call(t))
                            })
                        }.call(this), this.customHandlers && function() {
                            if (!angular.isObject(this.customHandlers)) throw new Error('customHandlers must be an object. Example: {"eventName":"calbackHandler"}');
                            var e = this;
                            Object.keys(this.customHandlers).forEach(function(r) {
                                t.hasOwnProperty(e.customHandlers[r]) && e.$on(r, function(o, n) {
                                    t[e.customHandlers[r]].call(e, n), e.apiConfig && i.$broadcast("setDownloadConfig", e.apiConfig.api), !e.apiIsRunning && e.apiConfig && (e.dataLoading = !0, a.makeRequest(e.apiConfig).then(function(t) {
                                        e.processData(t)
                                    }, function(t) {
                                        e.content = [], e.apiIsRunning = !1, e.dataLoading = !1, void 0 !== t.error && (e.error = "Sorry, something went wrong. Try again.")
                                    }))
                                })
                            })
                        }.call(this), i.$broadcast("barchartDataTableIsReady"), this.apiConfig && i.$broadcast("setDownloadConfig", this.apiConfig.api)
                }
            }
        }
        i.$inject = ["barchartDatatableApiService", "barchartDatatableCustomHandlers", "datatableApiFactory", "$rootScope", "$location"], e.exports = i
    },
    "3Rwf": function(e, t) {
        e.exports = '<div class=bc-datepicker data-ng-class="\'bc-datepicker-mode-\' + $mode"> <table> <thead> <tr class=text-center> <th class=text-left> <a tabindex=-1 class="" data-ng-click=$selectPane(-1)> <i class=bc-glyph-chevron-left></i> </a> </th> <th class=text-center colspan="[[ rows[0].length - 2 ]]"> <a tabindex=-1 class="" data-ng-click=$toggleMode()> <strong data-ng-bind=title></strong> </a> </th> <th class=text-right> <a tabindex=-1 class="" data-ng-click=$selectPane(+1)> <i class=bc-glyph-chevron-right></i> </a> </th> </tr> <tr data-ng-if=showLabels data-ng-bind-html=labels></tr> </thead> <tbody> <tr data-ng-repeat="(i, row) in rows" data-height="[[ 100 / rows.length ]]%"> <td class=text-center data-ng-repeat="(j, el) in row"> <button type=button class=btn-item data-ng-class="{\'item-selected\': el.selected, \'item-today\': el.isToday && !el.selected}" data-ng-click=$select(el.date) data-ng-disabled=el.disabled> <span data-ng-class="{\'text-muted\': el.muted}" data-ng-bind=el.label></span> </button> </td> </tr> </tbody> </table> <div class=datepicker-bottom-controls data-ng-show=showDatePickerButtons> <button class="bc-button white-with-border extra small" data-ng-click=setToday()>Today</button> <button class="bc-button white-with-border extra small" data-ng-click=clearDatePickerField()>Clear</button> <button class="bc-button white-with-border extra small" data-ng-click=closeDatePicker()>Close</button> </div> </div>'
    },
    "3T3q": function(e, t) {
        e.exports = '<div class="form-wrapper clearfix"> <form novalidate class=bc-form name=periodForm> [[priceHistory.minDate]] <div data-ng-if=true class="bc-datepicker-item date-from" data-bc-modal-login=historical> <input type=text name=dateFrom autocomplete=off class=bc-datepicker-control data-date-format=MM/dd/yyyy data-ng-checked=update() data-ng-class="{\'not-empty\' : priceHistory.dateFrom}" data-ng-model=priceHistory.dateFrom data-ng-model-options="{ updateOn: \'blur\' }" data-bs-datepicker data-ng-disabled=!loggedIn placeholder=MM/DD/YYYY data-min-date="[[ limits.minDateFrom ]]" data-max-date="[[ limits.maxDateFrom ]]"> <i class=bc-glyph-calendar></i> </div> <div class=dash> <span>-</span> </div> <div data-ng-if=true class="bc-datepicker-item date-to" data-bc-modal-login=historical> <input type=text name=dateTo autocomplete=off data-date-format=MM/dd/yyyy data-ng-disabled=!loggedIn data-ng-class="{\'not-empty\' : priceHistory.dateTo}" class=bc-datepicker-control placeholder=MM/DD/YYYY data-ng-model=priceHistory.dateTo data-ng-model-options="{ updateOn: \'blur\' }" data-bs-datepicker data-min-date="[[ limits.minDateTo ]]" data-max-date="[[ limits.maxDateTo ]]"> <i class=bc-glyph-calendar></i> </div> </form> </div>'
    },
    "3YQP": function(e, t, a) {
        "use strict";

        function i(e) {
            this.getLocationPathString = function() {
                return e.url()
            }, this.getLocationPathObject = function() {
                return e.search()
            }, this.setPathParameter = function(t, a) {
                return e.search(t, a), this
            }, this.clearPathParameter = function(t) {
                e.search(t, null)
            }
        }
        i.$inject = ["$location"], e.exports = i
    },
    "3bCC": function(e, t, a) {
        "use strict";

        function i(e) {
            this.name = "InvalidTypeError", this.message = e, Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = (new Error).stack
        }

        function r(e) {
            this.name = "PropertyError", this.property = e, Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = (new Error).stack
        }

        function o(e) {
            r.call(this, e), this.name = "PropertyRequiredError", this.message = "Property " + e + " is required"
        }
        i.prototype = Object.create(Error.prototype), i.prototype.constructor = i, r.prototype = Object.create(Error.prototype), r.prototype.constructor = r, o.prototype = Object.create(r.prototype), o.prototype.constructor = o, e.exports = {
            PropertyError: r,
            PropertyRequiredError: o,
            InvalidTypeError: i,
            InvalidJSONStateError: function() {
                this.name = "InvalidJSONStateError", Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = (new Error).stack
            }
        }
    },
    "3bjB": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    onlyLong: "=",
                    leverageKey: "="
                },
                link: function(a) {
                    var l = "",
                        c = {
                            leverages: !1
                        },
                        d = !1,
                        u = i.isLoggedIn() ? i.getUserPreferences() : {};
                    a.checkboxes = "cad" === window.config.user.market ? {
                        "1x": "Long",
                        "2x": "Double-Long",
                        "-1x": "Short",
                        "-2x": "Double-Short"
                    } : {
                        "1x": "Long",
                        "2x": "Double-Long",
                        "3x": "Triple-Long",
                        "-1x": "Short",
                        "-2x": "Double-Short",
                        "-3x": "Triple-Short"
                    };
                    var p = "cad" === window.config.user.market ? "LeverageCad" : "Leverage";
                    u[a.leverageKey + p] ? (a.leverages = u[a.leverageKey + p].split(","), c = h()) : a.leverages = a.onlyLong ? ["1x"] : Object.keys(a.checkboxes), a.changeLeverage = function() {
                        l = a.leverages.join(","), t.search("leverage", l), o.call(n.API_URL + "/preferences", s.PUT, {
                            name: a.leverageKey + p,
                            value: l
                        }), e.$broadcast("etfsLeverageEvent", h())
                    }, a.checkUser = function() {
                        if (d && !i.isLoggedIn()) return r.goToLogin("etfLeverage"), !1
                    };
                    var m = a.$on("barchartDataTableIsReady", function() {
                        t.search().leverage ? (l = t.search().leverage, a.leverages = l.split(","), e.$broadcast("etfsLeverageEvent", h())) : e.$broadcast("etfsLeverageEvent", c), m()
                    });

                    function h() {
                        return a.onlyLong && (c.onlyLong = !0), c.leverages = a.leverages, c
                    }
                    a.$on("onBarchartDataTableRendered", function() {
                        d = !0
                    })
                },
                template: a("P8Mb")
            }
        }
        i.$inject = ["$rootScope", "$location", "authService", "authRouteService", "dataProvider", "apiConfig", "httpVerbs"], e.exports = i
    },
    "3cKZ": function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "BarchartMediaOverlayApiFactory", "BarchartMediaOverlayApiConfig", "$timeout", "$rootScope", "utils", "interactiveChartApi", "bcInlineData", "interactiveChartSettings", "authService", "interactiveChartStateService", "events", "watchlistFormModalService", function(e, t, a, i, r, o, n, s, l, c, d, u, p) {
                var m = angular.element(document.querySelector(".bc-overlay-modal-wrapper .modal-content"));
                m.css("min-height", window.innerHeight + 10 + "px");
                var h = c.getUserData() || {};
                window.addEventListener("resize", function() {
                    var e = window.innerHeight + 10 + "px";
                    m.css("min-height", e)
                }, !0), e.$watch("currentSymbol", function() {
                    e.symbol = b(e.currentSymbol), e.loadChartForSymbol(e.symbol)
                });
                var g = document.querySelector(".bc-commitment-of-traders");

                function f(t) {
                    return ~["Currencies", "Financials", "Indices"].indexOf(e.dropdown[t].group) ? [{
                        id: "COTLC"
                    }, {
                        id: "COTFTR"
                    }] : [{
                        id: "COTLC"
                    }, {
                        id: "COTDAG"
                    }]
                }

                function b(t) {
                    return {
                        symbol: t,
                        symbolName: e.dropdown[t].symbolName,
                        type: 2
                    }
                }

                function v(t) {
                    var a = e.chartKeys.indexOf(t.symbol); - 1 !== a && e.chartKeys[a - 1] ? e.flipChartPrevSymbol = r.currentURL + "/interactive-charts/" + e.chartKeys[a - 1] : e.flipChartPrevSymbol = null, -1 !== a && e.chartKeys[a + 1] ? e.flipChartNextSymbol = r.currentURL + "/interactive-charts/" + e.chartKeys[a + 1] : e.flipChartNextSymbol = null
                }
                e.dropdown = JSON.parse(g.getAttribute("data-charts-group")), e.chartKeys = JSON.parse(g.getAttribute("data-chart-keys")), e.symbols = [], e.flipChartData = null, e.dataLoading = !1, e.flipChartSymbol = null, e.flipChartNextSymbol = null, e.flipChartPrevSymbol = null, e.flipChartSymbolUrl = null, e.flipChartSharingUrl = null, e.flipChartSharingTitle = null, e.fullChartUrl = null, Object.keys(e.dropdown).forEach(function(t) {
                    e.symbols.push(angular.merge({
                        symbol: t
                    }, e.dropdown[t]))
                }), e.addToWatchlist = function() {
                    p.addToWatchlist(e.flipChartSymbol.symbol, e.flipChartSymbol.symbolName)
                }, e.initInteractiveChart = function(t) {
                    if (!e.dataLoading && t) {
                        e.dataLoading = !0, i(function() {
                                r.$broadcast("bc-scrollbar-scroll-to-item", t.symbol)
                            }, 500), e.flipChartSharingTitle = t.symbol + " Chart",
                            function(t) {
                                e.flipChartSymbolUrl = "/futures/quotes/" + t.symbol + "/interactive-chart", e.flipChartSharingUrl = window.location.href
                            }(t), e.socialTitle = t.symbol + " | Custom Interactive Chart for " + t.symbolName, v(t);
                        var a = t.symbol;
                        e.chartSettings = {
                            interactiveStudy: f(t.symbol)
                        }, s.updateInlineDataForSymbol(a).then(function(a) {
                            a.data && a.data.length && (t.symbolName = a.data[0].symbolName, t.symbolType = a.data[0].symbolType, t.raw = {
                                symbolName: a.data[0].raw.contractName || a.data[0].raw.symbolName
                            }), n.getDeferredChart().then(function() {
                                h.preferences && "None" === h.preferences.flipcharts_template_interactive && e.defaultPlot && "LINE" === e.defaultPlot.toUpperCase() && setTimeout(function() {
                                    var e = JSON.parse(n.save());
                                    e.panes[0].axes[0].plots[0].curves[0].style = "Line", e.panes[0].axes[0].plots[0].curves[0].fields = ["Close", "Change"], n.load(JSON.stringify(e))
                                }, 0), e.dataLoading = !1, e.socialImage = n.getSVGForExport()
                            }), e.dataLoading = !1, e.flipChartSymbol = t
                        })
                    }
                }, e.$on(u.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED, function() {
                    if (null === l.getChartTemplate() && e.defaultPlot && "LINE" === e.defaultPlot.toUpperCase()) {
                        var t = JSON.parse(n.save());
                        t.panes[0].axes[0].plots[0].curves[0].style = "Line", t.panes[0].axes[0].plots[0].curves[0].fields = ["Close", "Change"], n.load(JSON.stringify(t))
                    }
                }), e.loadChartForSymbol = function(t) {
                    e.updateInteractiveChart(t), v(t), i(function() {
                        r.$broadcast("bc-scrollbar-scroll-to-item", t.symbol)
                    }, 500)
                }, e.updateInteractiveChart = function(t) {
                    !e.dataLoading && t && (e.chartSettings = {
                        interactiveStudy: f(t.symbol)
                    }, s.updateInlineDataForSymbol(t.symbol).then(function(a) {
                        t && t.symbolName || !a.data || !a.data.length || (t.symbolName = a.data[0].symbolName, t.symbolType = a.data[0].symbolType), t.raw || (t.raw = angular.copy(a.data[0].raw)), n.setSymbolData(t), e.socialTitle = t.symbol + " | Custom Interactive Chart for " + t.symbolName, e.flipChartSymbol = t
                    }))
                }, e.currentSymbol && (e.symbol = b(e.currentSymbol), e.initInteractiveChart(e.symbol)), e.updateChart = function() {
                    e.commodity && (window.location.href = "#/interactive-charts/" + e.commodity)
                }, e.showLegendTTF = function() {
                    return !!~["Currencies", "Financials", "Indices"].indexOf(e.dropdown[e.currentSymbol].group)
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    currentSymbol: "=",
                    symbol: "=",
                    hideOverlayModal: "&"
                },
                template: a("xXnz"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    "3gdR": function(e, t, a) {
        "use strict";
        e.exports = {
            refCodes: {
                default: "highsLows",
                forexHighsLows: "highsLowsTabs",
                futuresHighsLows: "highsLowsTabs",
                stocksPercentChange: "percentChange",
                etfsPercentChange: "percentChange",
                mutualPercentChange: "percentChange",
                futuresPerformanceLeaders: "futuresPerformance",
                futuresMostActive: "mostActiveFutures",
                stocksOptionsQuotes: "optionsView",
                stocksVolatilityGreeks: "optionsView",
                futuresOptionsQuotes: "optionsView",
                futuresVolatilityGreeks: "optionsView"
            },
            sectorName: {
                stocks: "Stocks",
                etfs: "ETFs",
                mutual: "Mutual Funds",
                forex: "Forex",
                futures: "Futures"
            },
            customLinkName: {
                default: "Highs/Lows Page",
                stocksPercentChange: "Percent Change Page",
                etfsPercentChange: " view",
                mutualPercentChange: " view",
                futuresMostActive: "Most Active Futures Page",
                futuresPerformanceLeaders: "Performance Leaders Page",
                stocksOptionsQuotes: " view",
                stocksVolatilityGreeks: " view",
                futuresOptionsQuotes: " view",
                futuresVolatilityGreeks: " view"
            },
            customSuccessMessage: {
                stocksPercentChange: "Percent Change - %tab% %timeframe% page has been saved as your default Percent Change page.",
                etfsPercentChange: "Percent Change - %tab% %timeframe% page has been saved as your default Percent Change page.",
                mutualPercentChange: "Percent Change - %tab% %timeframe% page has been saved as your default Percent Change page.",
                futuresMostActive: "%tab% Most Active Futures page has been saved as your default Most Active Futures.",
                futuresPerformanceLeaders: "Futures Performance Leaders: %timeframe% page has been saved as your default Performance Leaders page.",
                stocksOptionsQuotes: "%view% has been saved as default view for Options Quotes page.",
                futuresOptionsQuotes: "Default view for Options Quotes page has been saved.",
                stocksVolatilityGreeks: "Default view for Volatility Greeks page has been saved.",
                futuresVolatilityGreeks: "Default view for Volatility Greeks page has been saved."
            },
            forexTabName: {
                major: "Major Rates",
                aud: "Australian",
                gbp: "British",
                cad: "Canadian",
                eur: "Euro FX",
                jpy: "Japanese",
                chf: "Swiss",
                usd: "US Dollar"
            }
        }
    },
    "3h3U": function(e, t, a) {
        "use strict";

        function i(e, t) {
            var a = this;
            a.miniTable = {
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["percentHolding", "percentChange3m"]
                    },
                    colorize: ["percentChange3m"]
                }
            }, a.content = [], a.loading = !0, this.getData = function() {
                t.getRelatedEtfsData().then(function(e) {
                    a.content = e, a.loading = !1
                })
            }, this.getData()
        }
        i.$inject = ["$scope", "RelatedEtfsApiFactory"], e.exports = i
    },
    "3hdP": function(e, t) {
        e.exports = '<div> <div data-left-right-arrow data-left-fn=loadChartForSymbol(flipChartPrevSymbol) data-right-fn=loadChartForSymbol(flipChartNextSymbol) data-close-fn=hideOverlayModal()> <div class="modal-mobile-navigation hide-for-medium-up"> <div class=modal-prev data-ng-if="symbols.length > 1"> <a data-ng-click=loadChartForSymbol(flipChartPrevSymbol) data-ng-if="flipChartPrevSymbol && !dataLoading"> <i class=bc-glyph-chevron-left></i> Previous </a> <span data-ng-if="!flipChartPrevSymbol || dataLoading"> <i class=bc-glyph-chevron-left></i> Previous </span> </div> <div class=modal-next data-ng-if="symbols.length > 1"> <a data-ng-click=loadChartForSymbol(flipChartNextSymbol) data-ng-if="flipChartNextSymbol && !dataLoading"> Next <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if="!flipChartNextSymbol || dataLoading"> Next <i class=bc-glyph-chevron-right></i> </span> </div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class="modal-sidebar-left show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-prev data-ng-if="symbols.length > 1"> <a data-ng-click=loadChartForSymbol(flipChartPrevSymbol) data-ng-if="flipChartPrevSymbol && !dataLoading"> <i class=bc-glyph-chevron-left></i> </a> <span data-ng-if="!flipChartPrevSymbol || dataLoading"> <i class=bc-glyph-chevron-left></i> </span> </div> </div> <div class="modal-sidebar-right show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> <div class=modal-next data-ng-if="symbols.length > 1"> <a data-ng-click=loadChartForSymbol(flipChartNextSymbol) data-ng-if="flipChartNextSymbol && !dataLoading"> <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if="!flipChartNextSymbol || dataLoading"> <i class=bc-glyph-chevron-right></i> </span> </div> </div> <div class=modal-share-group data-ng-if="!dataLoading && flipChartSymbol"> <p>Share</p> <ul bc-social-chart-share> <li class=facebook title="Share on Facebook"> <a data-bc-facebook-share-chart data-dynamic-title=socialTitle data-description="[[ ::socialDesctiprion ]]" data-convert-type="[[ ::socialImageType ]]" data-chart-type="[[ ::chartType ]]" data-redirect-url=redirectUrl data-set-chart-page-url=redirectUrl data-symbol=flipChartSymbol.symbol data-t-chart-data=chartData> <i class=bc-glyph-facebook></i> </a> </li> <li class=twitter title="Share on Twitter"> <a bc-twitter-share-chart data-dynamic-title=socialTitle data-description="[[ ::socialDesctiprion ]]" data-convert-type="[[ ::socialImageType ]]" data-chart-type="[[ ::chartType ]]" data-redirect-url=redirectUrl data-set-chart-page-url=redirectUrl data-symbol=flipChartSymbol.symbol data-t-chart-data=chartData> <i class=bc-glyph-twitter></i> </a> </li> <li class=linkedin title="Share on LinkedIn"> <a bc-linkedin-share-chart data-dynamic-title=socialTitle data-description="[[ ::socialDesctiprion ]]" data-convert-type="[[ ::socialImageType ]]" data-chart-type="[[ ::chartType ]]" data-redirect-url=redirectUrl data-set-chart-page-url=redirectUrl data-symbol=flipChartSymbol.symbol data-t-chart-data=chartData> <i class=bc-glyph-linkedin></i> </a> </li> <li class=google-plus title="Share on Google+"> <a bc-gplus-share-chart data-dynamic-title=socialTitle data-description="[[ ::socialDesctiprion ]]" data-convert-type="[[ ::socialImageType ]]" data-chart-type="[[ ::chartType ]]" data-redirect-url=redirectUrl data-set-chart-page-url=redirectUrl data-symbol=flipChartSymbol.symbol data-t-chart-data=chartData> <i class=bc-glyph-google-plus></i> </a> </li> <li class=email title="Share via Email"> <a data-bc-mail-share-chart data-convert-type="[[ ::socialImageType ]]" data-chart-type="[[ ::chartType ]]" data-t-chart-data=chartData data-current-symbol=flipChartSymbol data-use-default-title=true data-ref-link=redirectUrl class=emailShare> <i class=bc-glyph-envelope-o></i> </a> </li> <li class=print title=Print> <a bc-print-share data-container-id=bcModalFlipchartContent> <i class=bc-glyph-print></i> </a> </li> </ul> </div> <div class=modal-inner> <div class=modal-content> <div class=bc-flipchart> <div class="bc-flipchart__symbols-scroller hide-for-print"> <div data-ng-if=symbols.length> <bc-scrollbar> <ul class=bc-flipchart__scroller-list> <li class=bc-flipchart__scroller-item data-ng-class="{\'active\': symbolData.symbol === flipChartSymbol.symbol}" data-ng-click=loadChartForSymbol(symbolData) data-ng-repeat="symbolData in symbols" data-scroll-item-id="[[ symbolData.symbol ]]">[[ symbolData.symbol ]]</li> </ul> </bc-scrollbar> </div> </div> <div class=throbber-wrapper data-ng-show=dataLoading> <img alt="Loading, please wait..." src=/img/throbber.gif /> </div> <div data-ng-if=!interactiveChart class="bc-flipchart__header header-technical flipchart-mode clearfix hide-for-print row" data-ng-show=!dataLoading> <div class="bc-flipchart__title flipchart-mode__left-column margin-top-5"> <a class=bc-flipchart__title-link href="[[ flipChartSymbolTechChartUrl ]]" data-ng-click=closeThisModal(flipChartSymbolTechChartUrl)>[[ flipChartData.metadata.desc | limitTo:35 ]]</a> <div class="bc-dropdown styled bc-flipchart__apply-period-drop-down"> <select data-ng-model=currentQuickSettings.settings data-ng-change=changeQuickSettings() data-ng-options="item.settings as item.label for item in quickSettings"> <option value="" disabled=disabled data-ng-show=!currentQuickSettings.settings>---</option> </select> </div> <a class=bc-flipchart-header_button data-ng-click=addToWatchlist()><i class=bc-glyph-star></i> <span>Watch</span> </a> <a class="bc-flipchart-header_button more-data" data-bc-symbol-widgets-modal data-symbol-data=flipChartSymbol title="Additional Symbol Information"> <span>More Data</span> </a> </div> <div class="bc-flipchart__template-selector flipchart-mode__right-column margin-top-5 text-right"> <div data-ng-if="!options || !options.title" class=flipchart-mode__tools-block> <a target=_self class=bc-flipchart__template-selector-link data-ng-href="[[ technicalTemplatesEditingLink ]]" data-ng-hide=!userChartTemplates.length> Template: </a> <div class="bc-dropdown filter" data-ng-hide=!userChartTemplates.length> <select id=bc-flipchart-template-selector data-ng-model=currentQuickSettings.template data-ng-change=applyChartTemplate(currentQuickSettings.template) data-ng-options="template as template.name for template in userChartTemplates"> <option value="" selected=selected>-None-</option> </select> </div> <a class="technical-chart-expand popup-chart" data-ng-click=openFullScreenTechnicalChart()> <i class=bc-glyph-long-arrow-ne></i> </a> <div class=apply-template-wrapper data-ng-show=!userChartTemplates.length> <a target=_self class="apply-template-label create-new" href="[[ technicalTemplatesEditingLink ]]">Create Chart Template</a> </div> </div> <div data-ng-if="options && options.title" class=flipchart-title> [[ options.title ]] </div> </div> </div> <div data-ng-if=!interactiveChart id=bcModalFlipchartContent data-ng-show=!dataLoading> <div data-ng-hide=shouldMapBeShown() class=bc-flipchart__data-tooltip> <div data-ng-if=!tooltipData.date> Mouseover chart to view prices. </div> <div data-ng-if=tooltipData.date> <span class=main data-ng-bind=tooltipData.date></span> <span class=main data-ng-bind=tooltipData.symbol></span> <span data-ng-show=tooltipBaseData.open> <span>Open:</span> <span data-ng-bind=tooltipBaseData.open></span> </span> <span data-ng-show=tooltipBaseData.high> <span>High:</span> <span data-ng-bind=tooltipBaseData.high></span> </span> <span data-ng-show=tooltipBaseData.low> <span>Low:</span> <span data-ng-bind=tooltipBaseData.low></span> </span> <span data-ng-show=tooltipBaseData.close> <span>Close:</span> <span data-ng-bind=tooltipBaseData.close></span> </span> <span data-ng-show=tooltipBaseData.Volume> <span>Volume:</span> <span data-ng-bind=tooltipBaseData.Volume></span> </span> <span data-ng-repeat="(key, value) in tooltipData"> <span data-ng-hide="key === \'date\' || key === \'symbol\'">[[ key | ucfirst ]]:</span> <span data-ng-hide="key === \'date\' || key === \'symbol\'" data-ng-bind=value></span> </span> </div> </div> <div class=bc-flipchart__chart data-ng-show=!dataLoading> <img data-ng-mouseleave=hideTooltip() data-bc-responsive-image-map data-bc-click-outside=hideTooltip() width=1060 data-ng-src="[[ flipChartData.image ]]" alt=Flipchart usemap=#bcFlipchartsMap class=bc-flipchart__chart-image> <map id=bc-technical-chart-image-map data-bc-image-map-tooltip=technical-chart-image-tooltip data-offset-scroll-y=170 data-top=30 data-tablet-offset name=bcFlipchartsMap data-image-class=bc-flipchart__chart-image> </map> </div> </div> <div data-ng-if="interactiveChart && flipChartSymbol"> <div class="bc-flipchart__header header-interactive hide-for-print" data-ng-show=!dataLoading> <div class=bc-flipchart__title> <div class="bc-flipchart__study-name right"> [[ options.title ]] </div> </div> </div> <interactive-chart data-current-symbol=flipChartSymbol data-full-screen=false data-ng-show=!dataLoading data-flip-chart-mode=true data-chart-init-settings=options.chartSettings></interactive-chart> <div class=margin-top-10> <p>Tools are displayed from your full-sized chart, but any changes to tools from FlipCharts are not retained.</p> </div> </div> </div> </div> </div> <technical-chart-tooltip-box data-ng-show=shouldMapBeShown() data-id=technical-chart-image-tooltip data-class=technical-chart-image-tooltip data-show-tooltip=showTooltip data-tooltip-base-data=tooltipBaseData data-tooltip-data=tooltipData data-map-data-empty=mapDataEmpty> </technical-chart-tooltip-box> </div> </div> '
    },
    "3k5U": function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = {},
                t = {};
            return {
                getData: function() {
                    return e
                },
                setData: function(t) {
                    e = t
                },
                clear: function() {
                    e = {}
                },
                setErrors: function(e) {
                    t = e
                },
                getErrors: function() {
                    return t
                },
                clearErrors: function() {
                    t = {}
                }
            }
        }
    },
    "3lPj": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p) {
            e.isLoggedIn = a.isLoggedIn(), e.fullScreen = n, e.saveChartCallback = o, e.currentSymbol = angular.copy(i), e.applyAction = function(e) {
                t.close(e)
            }, e.addToWatchlist = function() {
                s.addToWatchlist(e.currentSymbol.symbol, e.currentSymbol.symbolName), t.dismiss()
            }, e.downloadChartData = function() {
                if (!a.isLoggedIn() || a.isLoggedIn() && !a.getUserData().is_premier) r.showPremier("chartDownload");
                else {
                    var t = e.currentSymbol.symbol + "_Barchart_Interactive_Chart_" + u.moment(new Date).format("MM/DD/YYYY"),
                        i = d.exportData();
                    p.generateAndSubmit(u.config.routes.interactiveChartExportCsv, {
                        title: t,
                        content: i
                    })
                }
            }, e.saveToMyCharts = function() {
                if (!a.isLoggedIn() || a.isLoggedIn() && !a.getUserData().is_premier) r.showPremier("myCharts");
                else {
                    var e = a.getUserData() || {};
                    "technical" === (e.preferences ? e.preferences.charts_style : "interactive") ? l.openWarningModal(): c.openSaveMyChartModal()
                }
            }, e.modalDismiss = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "authService", "currentSymbol", "bcModalLoginSrv", "saveChartCallback", "fullScreen", "watchlistFormModalService", "myChartModalService", "dashboardModalsService", "interactiveChartApi", "$window", "bcFormGenerator"], e.exports = i
    },
    "3p71": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-share-with-email"> <div class=modal-header> [[ ::$ctrl.modalTitle ]] <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.close();></i> <p class=title-desc>Barchart will not save or use the email addresses provided on this form</p> </div> <form class=bc-form novalidate name=shareMailForm data-ng-submit=$ctrl.submitForm(shareMailForm) autocomplete=off> <div class=form-field> <label for=share-chart-mail-to>To</label> <div class=clear-button-wrapper> <tags-input ng-model=$ctrl.mail.to type=email id=share-chart-mail-to class="bc-tags-input-wrapper clearfix" placeholder="Enter recipient\'s email..." name=to data-find-input=true data-bc-auto-focus=desktop add-on-blur=true on-tag-adding=$ctrl.tagAdding($tag) on-tag-added=$ctrl.tagAdded() add-on-paste=true data-ng-class="{\'error\': shareMailForm.to.$invalid && shareMailForm.$submitted}" allowed-tags-pattern=^[A-Za-z0-9._%+-]+@([A-Za-z0-9-])+.[A-Za-z]{2,5} allow-leftover-text=false ng-required=true add-on-space=false> </tags-input> <span class=help-text>You can add multiple recipients using comma as delimiter.</span> </div> </div> <div class=form-field> <label for=share-chart-mail-from>From</label> <div class=clear-button-wrapper> <input type=text id=share-chart-mail-from name=from required placeholder="Enter your email..." data-ng-class="{\'error\': shareMailForm.from.$invalid && shareMailForm.$submitted}" data-bc-ng-email-validation data-bc-ng-oneword-validation data-ng-model=$ctrl.mail.from data-barchart-clear-input/> </div> </div> <div class=section-border> <div class="link-block subject-line-block"> <span class=label>Subject Line</span> <div> <span class=text> [[ ::$ctrl.mail.subject ]] </span> </div> </div> <div class=link-block> <span class=label>Message Included</span> <div> <span class=text data-ng-if=$ctrl.mail.systemBody> [[ ::$ctrl.mail.systemBody ]] </span> <div class=link data-ng-if=!$ctrl.hideLink> <a target=_self href="[[ ::$ctrl.mail.link ]]">[[ ::$ctrl.mail.link ]]</a> </div> </div> </div> <div class=form-field> <label for=share-chart-mail-body>Personal Message</label> <div> <textarea placeholder="Enter a note for recipient..." id=share-chart-mail-body data-ng-model=$ctrl.mail.body></textarea> </div> </div> </div> <div data-ng-if=!$ctrl.isLoggedIn data-vc-recaptcha data-size=invisible required=false data-key="[[ $ctrl.grecaptchaInvisibleKey ]]" on-create=$ctrl.onRender(widgetId) on-success=$ctrl.onSuccess()> </div> <errors-component class=error-block data-ng-show=$ctrl.hasErrors data-form=shareMailForm data-messages="{\'invalidOneword\': \'You can only send to one email address at a time.\'}" data-errors=$ctrl.errors></errors-component> <div class="text-center button-actions"> <button type=submit data-ng-disabled=$ctrl.loading class="bc-button ok light-blue">submit</button> </div> </form> </div>'
    },
    "3pFJ": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    apiConfig: "=",
                    defaultSymbols: "=",
                    chartType: "@",
                    configurateButton: "@",
                    threeColumn: "@",
                    type: "@"
                },
                controller: ["$scope", function(c) {
                    if (e.hasOwnProperty(c.chartType)) {
                        c.loading = !0, c.inlineDataLoading = !1, c.quotesData = [], c.chartConfig = [], c.leadersData = [], c.apiConfig.api.quotes.symbols.split(",").forEach(function(t) {
                            c.chartConfig[t] = angular.copy(e[c.chartType])
                        });
                        var d = {},
                            u = i.defer(),
                            p = (u.promise, !0);
                        m(), c.$on("updateOverviewCharts", function(t, a) {
                            c.quotesData = [], c.chartConfig = [], c.loading = !0, c.inlineDataLoading = !0, p = !1, a || (a = c.defaultSymbols.symbols, c.apiConfig.api.quotes.description = {
                                symbols: c.defaultSymbols.description
                            }, p = !0), c.apiConfig.charts = a, c.apiConfig.api.quotes.symbols = a.join(), a.forEach(function(t) {
                                c.chartConfig[t] = angular.copy(e[c.chartType])
                            }), m(), l.updateInlineDataForSymbol(a.join()).then(function() {
                                c.inlineDataLoading = !1
                            })
                        }), c.editPreferences = function() {
                            return o.isLoggedIn() && o.getUserData().subscription === r.SUBSCRIPTIONS.PREMIUM_USER ? s.open({
                                template: a("oISZ"),
                                controller: "configureSymbolsModalCtrl",
                                windowClass: "configure-symbols-modal",
                                resolve: {
                                    settingsSymbols: function() {
                                        return c.apiConfig.charts
                                    }
                                }
                            }).result : (n.showPremier("homeSymbols"), !1)
                        }
                    }

                    function m() {
                        t.getQuotes(c.apiConfig.api.quotes).then(function(e) {
                            c.quotesData = e.data, c.quotesData.description = [], c.quotesData.forEach(function(e, t) {
                                e.hasOwnProperty("previous") && (d[e.symbol] = Number(e.previous.replace(/[,]/g, ""))), c.quotesData.description.push(e.symbol)
                            }), p && c.apiConfig.api.quotes.description && c.apiConfig.api.quotes.description.symbols && (c.quotesData.description = c.apiConfig.api.quotes.description.symbols), c.loading = !1, u.resolve(d)
                        })
                    }
                }],
                template: a("M8OA")
            }
        }
        i.$inject = ["OverviewChartsHighChartConfig", "OverviewChartsApiFactory", "$q", "appConfig", "authService", "bcModalLoginSrv", "$modal", "bcInlineData"], e.exports = i
    },
    "3pIW": function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.isLoggedIn = t.isLoggedIn()
        }
        i.$inject = ["$scope", "authService"], e.exports = i
    },
    "3sLf": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            var n = a("beDk")(e);
            return {
                basic: n.basic,
                spread: n.spread,
                comparison: n.comparison,
                getChartSettings: function(e, a) {
                    var n;
                    return function(e) {
                        var a;
                        switch (e) {
                            case o.chartSettings.BASIC:
                                a = "applyBasicSettings";
                                break;
                            case o.chartSettings.SPREAD:
                                a = "applySpreadSettings";
                                break;
                            case o.chartSettings.COMPARISON:
                                a = "applyComparisonSettings"
                        }
                        t.$broadcast(a)
                    }(a), n = r.merge({}, e.basic, e[a]), i.mapData(n), n
                }
            }
        }
        i.$inject = ["technicalChartFields", "$rootScope", "technicalChartMappingService", "_", "technicalChartConfig"], e.exports = i
    },
    "3vJn": function(e, t) {
        e.exports = '<div class=bc-alerts__alerts-modal-form-news> <div class=bc-alerts__news-label>Select Feeds for News Alert:</div> <bc-checkbox class=bc-alerts__news-feeds-select-all data-cb-model=allFeedsSelected.selected data-cb-label="\'All Feeds\'" data-cb-click=feedsBatchUpdate()> </bc-checkbox> <div class="bc-alerts__news-feeds-list clearfix"> <div data-ng-repeat="column in newsFeedsCheckboxes"> <span class=bc-alerts__news-column-title>[[ column.category ]]</span> <ul class=bc-alerts__news-feeds-column data-ng-repeat="columnFeed in column.feeds"> <li data-ng-repeat="newsFeed in columnFeed"> <bc-checkbox data-cb-model=newsFeed.selected data-cb-label=newsFeed.name data-cb-click=checkNewsFeedSelection()></bc-checkbox> </li> </ul> </div> </div> </div>'
    },
    "3wU/": function(e, t) {
        e.exports = '<div class="bc-alerts__alerts-modal-form-price bc-alerts__modal-premier-alerts"> <div class=bc-alerts__alerts-modal-form> <div class=bc-alerts__alerts-modal-form-top-text>Check Frequency:</div> <div class=bc-form__filedset> <div class=input-radio> <input type=radio data-ng-model=frequency data-ng-change=changeFrequency() id="bc-screener__filter-tabs-tab-value-[[ radioGuid ]]" value=intraday> <label for="bc-screener__filter-tabs-tab-value-[[ radioGuid ]]"> <span></span> Intraday </label> </div> <div class=input-radio> <input type=radio data-ng-model=frequency data-ng-change=changeFrequency() id="bc-screener__filter-tabs-tab-field-[[ radioGuid ]]" value=schedule> <label class=bc-alerts__alerts-modal-form-label-for-radio for="bc-screener__filter-tabs-tab-field-[[ radioGuid ]]"> <span></span> End of Day (4:30P CT) </label> </div> </div> <div class="bc-form__filedset bc-alert-notes"> <div class="clear-notes clearfix"> <a class=right data-ng-click="alertModel.user_notes = \'\'">Clear Notes</a></div> <span class=bc-alerts__alerts-modal-form-label>Notes: <a class="small-notes right" data-ng-click="alertModel.user_notes = \'\'">Clear Notes</a></span> <div class=bc-alerts__alerts-modal-form-input-message-wrapper> <textarea class=bc-alerts__alerts-modal-form-input-message bc-auto-focus data-bc-auto-focus-disable="[[ setFocusInNotes ]]" data-ng-model=alertModel.user_notes placeholder="This message will be sent when the alert triggers..."></textarea> </div> </div> <div class=bc-alerts__alerts-modal-notes-message data-ng-show="frequency === \'intraday\'"> Once triggered, the alert is frozen and will not be sent again until reactivated. </div> <div class=bc-alerts__alerts-modal-notes-message data-ng-show="frequency === \'schedule\'"> End of Day alerts will continue to be monitored even after they trigger, unless deleted. </div> <div class=bc-alerts__alerts-modal-form-separator></div> <div class=bc-alerts__alerts-modal-form-top-text>Alert me when [[ symbol ]]:</div> <div class=bc-alerts__modal-conditions-wrapper> <div data-ng-repeat="condition in conditions" class=bc-alerts_modal-condition-block> <price-alert-new-condition-form data-symbol="[[ ::symbol ]]" data-remove-condition=removeCondition($index) data-disable-removing="$index === 0 && conditionIsRequired" data-condition=condition></price-alert-new-condition-form> <div class=bc-alerts__modal-condition-separator data-ng-hide="conditions.length === $index + 1">And</div> </div> </div> <div class=bc-alerts__add-condition-button> <a data-ng-click=addCondition()>+Add A Condition</a> </div> </div> </div>'
    },
    "3zD8": function(e, t, a) {
        "use strict";
        e.exports = {
            mobile: {
                ONE_DAY: "1D",
                TWO_DAYS: "2D",
                THREE_DAYS: "3D",
                FOUR_DAYS: "4D",
                FIVE_DAYS: "5D",
                ONE_WEEK: "1Wk",
                ONE_MONTH: "1M",
                TWO_MONTHS: "2M",
                THREE_MONTHS: "3M",
                FOUR_MONTHS: "4M",
                THREE_MONTH: "3M",
                SIX_MONTHS: "6M",
                NINE_MONTHS: "9M",
                YEAR_TO_DATE: "YTD",
                ONE_YEAR: "1Y",
                TWO_YEARS: "2Y",
                THREE_YEARS: "3Y",
                FOUR_YEARS: "4Y",
                FIVE_YEARS: "5Y",
                SEVEN_YEARS: "7Yrs",
                TEN_YEARS: "10Yrs",
                FIFTEEN_YEARS: "15Yrs",
                TWENTY_YEARS: "20Yr",
                TWENTY_FIVE_YEARS: "25Yr",
                TEN_DAYS_60_MIN: "10D",
                FIFTEEN_DAYS_90_MIN: "15D",
                TWENTY_DAYS_60_MIN: "20D",
                TWENTY_FIVE_DAYS_120_MIN: "25D",
                MONTH: "Mth",
                YEAR: "Yr",
                DAILY: "Daily",
                DAILY_CONTRACT: "Daily Contract",
                DAILY_NEAREST: "Daily Nearest",
                DAILY_CONTINUATION: "Daily Continuation",
                INTRADAY: "Intraday",
                WEEKLY: "Weekly",
                WEEKLY_CONTRACT: "Weekly Contract",
                WEEKLY_NEAREST: "Weekly Nearest",
                WEEKLY_CONTINUATION: " Weekly Continuation",
                MONTHLY: "Monthly",
                MONTHLY_CONTRACT: "Monthly Contract",
                MONTHLY_NEAREST: "Monthly Nearest",
                MONTHLY_CONTINUATION: "Monthly Continuation",
                VOLUME_ON: "Volume On",
                VOLUME_OFF: "Volume Off",
                VOLUME_TOTAL: "Total Volume",
                VOLUME_CONTRACT: "Contract Volume"
            },
            desktop: {
                ONE_DAY: "1-Day",
                TWO_DAYS: "2-Days",
                THREE_DAYS: "3-Days",
                FOUR_DAYS: "4-Days",
                FIVE_DAYS: "5-Days",
                ONE_WEEK: "1-Week",
                ONE_MONTH: "1-Month",
                TWO_MONTHS: "2-Months",
                THREE_MONTHS: "3-Months",
                FOUR_MONTHS: "4-Months",
                THREE_MONTH: "3-Months",
                SIX_MONTHS: "6-Months",
                NINE_MONTHS: "9-Months",
                YEAR_TO_DATE: "Year-to-Date",
                ONE_YEAR: "1-Year",
                TWO_YEARS: "2-Years",
                THREE_YEARS: "3-Years",
                FOUR_YEARS: "4-Years",
                FIVE_YEARS: "5-Years",
                SEVEN_YEARS: "7-Years",
                TEN_YEARS: "10-Years",
                FIFTEEN_YEARS: "15-Years",
                TWENTY_YEARS: "20-Years",
                TWENTY_FIVE_YEARS: "25-Years",
                TEN_DAYS_60_MIN: "10-Day",
                FIFTEEN_DAYS_90_MIN: "15-Day",
                TWENTY_DAYS_60_MIN: "20-Day",
                TWENTY_FIVE_DAYS_120_MIN: "25-Day",
                MONTH: "Month",
                YEAR: "Year",
                DAILY: "Daily",
                DAILY_CONTRACT: "Daily Contract",
                DAILY_NEAREST: "Daily Nearest",
                DAILY_CONTINUATION: "Daily Continuation",
                INTRADAY: "Intraday",
                WEEKLY: "Weekly",
                WEEKLY_CONTRACT: "Weekly Contract",
                WEEKLY_NEAREST: "Weekly Nearest",
                WEEKLY_CONTINUATION: " Weekly Continuation",
                MONTHLY: "Monthly",
                MONTHLY_CONTRACT: "Monthly Contract",
                MONTHLY_NEAREST: "Monthly Nearest",
                MONTHLY_CONTINUATION: "Monthly Continuation",
                VOLUME_ON: "Volume On",
                VOLUME_OFF: "Volume Off",
                VOLUME_TOTAL: "Total Volume",
                VOLUME_CONTRACT: "Contract Volume"
            },
            quick_chart: {
                mobile: {
                    ONE_DAY: "1D",
                    FIVE_DAYS: "5D",
                    ONE_MONTH: "1M",
                    THREE_MONTHS: "3M",
                    SIX_MONTHS: "6M",
                    ONE_YEAR: "1Y",
                    THREE_YEARS: "3Y",
                    FIVE_YEARS: "5Y",
                    MAX: "20Y"
                },
                desktop: {
                    ONE_DAY: "1-Day",
                    FIVE_DAYS: "5-Day",
                    ONE_MONTH: "1-Mth",
                    THREE_MONTHS: "3-Mth",
                    SIX_MONTHS: "6-Mth",
                    ONE_YEAR: "1-Yr",
                    THREE_YEARS: "3-Yr",
                    FIVE_YEARS: "5-Yr",
                    MAX: "20-Yr"
                }
            }
        }
    },
    "40wb": function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    refCode: "=",
                    showForPremier: "=",
                    customClass: "="
                },
                link: function(a) {
                    var o = {
                        eodScreeners: "bcPremierAdsScreeners",
                        tileView: "bcPremierAdsTileView",
                        advAlerts: "bcPremierAdsAdvAlerts",
                        listScreen: "bcPremierAdsListScreen"
                    };
                    if (a.isNotPremier = !e.isLoggedIn() || e.isLoggedIn() && !e.getUserData().is_premier, a.premierLink = i.config.routes["my.barchartPremier"] + "?" + a.refCode, a.isNotPremier) a.hideContent = !!t(o[a.refCode]);
                    else if (a.showForPremier) {
                        var n = e.getUserPreferences();
                        a.hideContent = !!n[o[a.refCode]]
                    } else a.hideContent = !0;
                    a.close = function() {
                        t(o[a.refCode], !0, {
                            expires: window.config.premierAdsCookie,
                            path: "/"
                        }), a.hideContent = !0, !a.isNotPremier && a.showForPremier && r.savePreference(o[a.refCode], !0)
                    }, a.gotoLink = function() {
                        a.close(), i.location.href = a.premierLink
                    }
                },
                template: a("PKdj")
            }
        }
        i.$inject = ["authService", "ipCookie", "$window", "bcSavePreferencesService"], e.exports = i
    },
    "4E15": function(e, t) {
        e.exports = '<div class="modal-content-wrapper barchart-custom-subscription-modal"> <div class=modal-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <div class=header> <h5>[[ data.title ]]</h5> </div> <div class=content-block> <p> [[ data.description ]]</p> <span class=frequency>[[ data.frequency ]]</span> </div> <bc-news-subscription-form data-list=list></bc-news-subscription-form> </div> '
    },
    "4EXa": function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            r.isMobileOnly() || i.get("welcomeTutorialViewed") || (i.set("welcomeTutorialViewed", !0), function() {
                var e;
                e = document.getElementsByTagName("body");
                var i = t.open({
                    template: a("m+k0"),
                    controller: "welcomeTutorial.TakeTheTour",
                    windowClass: "bc-fdn-modal bc-modal-site-tour"
                });
                i.opened.then(function() {
                    angular.element(e).addClass("modal-welcome-tutorial")
                }), i.result.finally(function() {
                    angular.element(e).removeClass("modal-welcome-tutorial")
                })
            }())
        }
        i.$inject = ["$scope", "$modal", "localStorageService", "utils"], e.exports = i
    },
    "4Ez/": function(e, t) {
        e.exports = '<div class=bc-screener__filter-range-custom> <div class="bc-dropdown styled bc-screener__filter-range-custom-dropdown"> <select data-ng-model=filterData.default.field data-ng-options="item.key as item.value for item in filters.default.field"></select> </div> <screener-range-date data-form-data=filterData.default.value></screener-range-date> </div>'
    },
    "4H3P": function(e, t) {
        e.exports = "<div class=portfolio-edit-link-wrapper> <div data-ng-click=editTransaction();> <div data-bs-tooltip=tooltip data-placement=left data-template-url=bc-tooltip-portfolio.html> <i class=bc-glyph-cog></i> </div> </div> </div> "
    },
    "4IHL": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                getData: function(i) {
                    return e.call(a.API_URL + "/commitment-of-traders/get", t.GET, i, [])
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "apiConfig"], e.exports = i
    },
    "4JBA": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r;
            r = {
                viewNameLength: {
                    title: "View Name Error",
                    description: "Name must be between 1 and 20 characters."
                },
                viewNameUnique: {
                    title: "View Name Exists",
                    description: "Current name already in use."
                },
                viewDescriptionLength: {
                    title: "View Description Error",
                    description: "Description must be less than 80 characters."
                },
                viewMandatoryColumnAbsent: {
                    title: "View Columns Error",
                    description: "Symbol is a mandatory field and must be the first column."
                },
                viewColumnLimitReached: {
                    title: "View Columns Limit Reached",
                    description: "Custom views are limited to 15 fields. Please remove a field if you want to add another."
                },
                templateNameLength: {
                    title: "Template Name Error",
                    description: "Name must be between 1 and 30 characters."
                },
                templateDescriptionLength: {
                    title: "Template Description Error",
                    description: "Description must be less than 80 characters."
                },
                invalidMinutes: {
                    title: "Invalid Minutes Value",
                    description: "Valid minutes are " + i.minutesRange.min + "-" + i.minutesRange.max + "."
                },
                invalidMinutesInteractive: {
                    title: "Invalid Minutes Value",
                    description: "Valid minutes are 1-480."
                },
                invalidMarginBarsInteractive: {
                    title: "Invalid Right margin Value",
                    description: "Valid right margins are 0-25 bars."
                },
                invalidDateRange: {
                    title: "Invalid Date Range",
                    description: "Please make sure the date ranged entered uses the format MM/DD/YYYY."
                },
                default: {
                    title: "Something went wrong",
                    description: "Please check your data and try again."
                },
                defaultView: {
                    title: "",
                    description: "This view is used as your Default View in your Site Preferences and cannot be deleted."
                },
                defaultViewForWatchlist: {
                    title: "",
                    description: "This view is used as your Default View for your watchlist and cannot be deleted."
                },
                defaultViewForEodWatchlist: {
                    title: "",
                    description: "This view is used as your Default View for EOD email and cannot be deleted."
                },
                defaultChartTemplate: {
                    title: "",
                    description: "This chart template is used as a Default Template in your Site Preferences and cannot be deleted."
                },
                portfolioLimitReached: {
                    title: "",
                    description: "Portfolios are limited to 500 symbols. Please create a new portfolio."
                }
            }, a = a && r.hasOwnProperty(a) ? a : "default", e.errorTitle = r[a].title, e.errorDescription = r[a].description, e.cancel = function() {
                t.dismiss("cancel")
            }
        }
        i.$inject = ["$scope", "$modalInstance", "error", "technicalChartConfig"], e.exports = i
    },
    "4JPv": function(e, t, a) {
        "use strict";

        function i(e) {
            var t = [];
            return this.ignoreUrlChange = !1, this.filters = [], this.orderChanged = !1, {
                getFilterViewFields: function() {
                    var e = [];
                    return t.forEach(function(t) {
                        e.push(t.split(".")[0])
                    }), e
                },
                setFilterViewFields: function(a) {
                    var i = ["symbol", "symbolName", "exchange"].concat(a);
                    t = e.uniq(i)
                }
            }
        }
        i.$inject = ["_"], e.exports = i
    },
    "4MJh": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                validateSymbol: function(t) {
                    var a = {
                        symbol: t.toUpperCase(),
                        fields: "symbol,symbolName,symbolType,lastPrice,priceChange,percentChange,highPrice,lowPrice,volume,tradeTime,symbolCode,exchange,sicIndustry,contractName,hasBats,pointValue,unitCode",
                        raw: 1
                    };
                    return e.query(a, "/quotes/get")
                }
            }
        }
        i.$inject = ["apiFactory"], e.exports = i
    },
    "4P0x": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login technical-chart-display-settings-content study-modal"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> </div> <div class=settings> <div class=social-component> <ul class=social-list bc-social-share> <li class="social-icon icon-facebook" title="Share on Facebook"> <a data-bc-facebook-share data-image="[[ image ]]" data-title="[[ title ]]" data-url="[[ redirectUrl ]]" data-on-shared=close()> <i class=bc-glyph-facebook></i> </a> </li> <li class="social-icon icon-google-plus" title="Share on Google+"> <a data-bc-gplus-share data-image="[[ image ]]" data-title="[[ title ]]" data-url="[[ redirectUrl ]]" data-on-shared=close()> <i class=bc-glyph-google-plus></i> </a> </li> <li class="social-icon icon-linkedin" title="Share on LinkedIn"> <a data-bc-linkedin-share data-image="[[ image ]]" data-title="[[ title ]]" data-url="[[ redirectUrl ]]" data-on-shared=close()> <i class=bc-glyph-linkedin></i> </a> </li> <li class="social-icon icon-twitter" title="Share on Twitter"> <a data-bc-twitter-share data-image="[[ image ]]" data-title="[[ title ]]" data-url="[[ redirectUrl ]]" data-redirect-url="[[ path ]]" data-on-shared=close()> <i class=bc-glyph-twitter></i> </a> </li> <li class="social-icon email" title="Share via Email"> <a data-bc-mail-share-chart data-image-string="[[ imageString ]]" data-title="[[ title ]]" data-link="[[ redirectUrl ]]" data-on-shared=close() class=emailShare> <i class=bc-glyph-envelope-o></i> </a> </li> </ul> </div> </div> </div>'
    },
    "4TzK": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <div class=bc-modal-content-inner> <div class=modal-header> Tools <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.close()></i> </div> <div class="checkbox-wrapper snap-checkbox" data-ng-if=$ctrl.defaultAnnotationsConfigs> <input type=checkbox id=tools-modal-snap-price data-ng-change=$ctrl.changeSnapToPrice() data-ng-model=$ctrl.snapAnnotationsToPrices> <label for=tools-modal-snap-price>Snap to Closest Price</label> </div> <div class=bc-tabs> <div class=bc-tabs__tab data-ng-class="{\'active\': $ctrl.currentTab === \'drawings\'}" data-ng-click="$ctrl.currentTab = \'drawings\'">Drawings</div> <div class=bc-tabs__tab data-ng-class="{\'active\': $ctrl.currentTab === \'calcs\'}" data-ng-click="$ctrl.currentTab = \'calcs\'">Calcs</div> <div class=bc-tabs__tab data-ng-class="{\'active\': $ctrl.currentTab === \'symbols\'}" data-ng-click="$ctrl.currentTab = \'symbols\'">Symbols</div> </div> <div class=tools-dropdown-content data-ng-if=$ctrl.defaultAnnotationsConfigs> <div class="row collapse" data-ng-show="$ctrl.currentTab === \'drawings\'"> <div class="column small-6" data-ng-repeat="lineTools in $ctrl.tools.lineTools"> <ul> <li data-ng-repeat="tool in lineTools track by $index" data-ng-click=$ctrl.useTool(tool.id) data-ng-if="$ctrl.availableAnnotations.indexOf(tool.id) !== -1"> <i data-ng-class=tool.icon></i> [[ ::tool.label ]] </li> </ul> </div> </div> <div class="row collapse" data-ng-show="$ctrl.currentTab === \'calcs\'"> <div class="column small-6" data-ng-repeat="textTools in $ctrl.tools.textTools"> <ul> <li data-ng-repeat="tool in textTools track by $index" data-ng-click=$ctrl.useTool(tool.id)> <i data-ng-class=tool.icon></i> [[ ::tool.label ]] </li> </ul> </div> </div> <div class="row collapse" data-ng-show="$ctrl.currentTab === \'symbols\'"> <div class="column small-6" data-ng-repeat="iconTools in $ctrl.tools.iconTools"> <ul> <li data-ng-repeat="tool in iconTools track by $index" data-ng-click=$ctrl.useTool(tool.id) data-ng-if="$ctrl.availableAnnotations.indexOf(tool.id) !== -1"> <i data-ng-class=tool.icon></i> [[ ::tool.label ]] </li> </ul> </div> </div> </div> </div> </div>'
    },
    "4ZpX": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            var l, c = !1;
            n.config.settings.markets[config.user.market].uri, e.searchRequestTimeout = null, e.searchResults = null, e.searchResultsVisible = !1, e.selectedItemIndex = null, e.isMobile = o.isMobile(), e.currentSymbol = null, document.querySelector("#search").onkeypress = null, e.useSearch = function() {
                e.search ? (e.searchResultsVisible = !0, e.searchForQuery(e.search)) : e.clearSearch()
            }, e.searchForQuery = function(t) {
                c = !0, s.connect().then(function() {
                    s.getSearchResults(t).then(function(t) {
                        t.instruments.length > 0 ? (e.updateSearchResults(t.instruments), c = !1, e.$broadcast("symbolSearchCompleted")) : e.searchResults = null, e.$apply()
                    })
                })
            }, e.updateSearchResults = function(t) {
                e.selectedItemIndex = null, e.searchResults = t
            }, e.addHighlightMarkup = function(i) {
                var r = new RegExp(e.search, "gi");
                return -1 !== (i = t("stripTag")(i)).search(r) && (i = i.replace(r, function(e) {
                    return '<span class="highlight">' + e + "</span>"
                })), a.trustAsHtml(i)
            }, e.createSymbolLink = function(t) {
                return !e.currentSymbol || e.currentSymbol.alias && -1 === e.currentSymbol.alias.indexOf("quotes.") || (e.currentSymbol.symbolType = parseInt(e.currentSymbol.symbolType), t.symbolType !== e.currentSymbol.symbolType) ? e.stayOnPage ? n.location.href.replace(new RegExp(/(ca|us|au|uk\/)?\/([a-zA-Z-]+)\/quotes\/(-|\^|%24|%5E)?[\w\-\$ .*%]+/, "i"), "$1/" + r.getSector(t.symbolType) + "/quotes/" + t.symbol) : "/" + r.getSector(t.symbolType, t.symbol) + "/quotes/" + t.symbol : n.location.href.replace(new RegExp(/quotes\/((\$|\^|%24|%5E)?[\w!\-.*%]+)/, "i"), "quotes/" + t.symbol)
            }, e.submitSearchForm = function() {
                if (c) {
                    var t = e.$on("symbolSearchCompleted", function(a, i) {
                        e.submitSearchForm(), t()
                    });
                    return !0
                }
                var a = new RegExp("^" + e.search + "$", "gi");
                "number" == typeof e.selectedItemIndex ? e.goToSymbolPage(e.searchResults[e.selectedItemIndex]) : e.searchResults && e.searchResults.length && -1 !== e.searchResults[0].symbol.search(a) ? (e.goToSymbolPage(e.searchResults[0]), e.clearSearch()) : e.goToRedirectToSymbol()
            }, e.goToSymbolPage = function(t) {
                n.location.href = e.createSymbolLink(t)
            }, e.goToRedirectToSymbol = function() {
                if (e.search) {
                    var t = "/quotes/" + e.search;
                    e.currentSymbol && (t += "?sector=" + e.currentSymbol.sector + "&alias=" + e.currentSymbol.alias), n.location.href = t
                }
            }, e.clearSearch = function() {
                e.$evalAsync(function() {
                    e.search = null, e.searchResultsVisible = !1, e.searchResults = null, e.searchRequestTimeout && i.cancel(e.searchRequestTimeout)
                })
            }, e.emptySearch = function() {
                e.$evalAsync(function() {
                    e.search = null
                })
            }, document.querySelector(".js-quick-search").addEventListener("touchstart", function(e) {
                e.stopPropagation()
            }), n.addEventListener("click", function() {
                setTimeout(function() {
                    document.activeElement !== document.querySelector("#search") && (e.search || e.searchResultsVisible) && (document.activeElement.blur(), e.clearSearch())
                }, 300)
            }), e.keyboardNavigation = function(t) {
                switch (t.keyCode) {
                    case 38:
                        e.selectPrevItem();
                        break;
                    case 40:
                        e.selectNextItem();
                        break;
                    case 13:
                        setTimeout(function() {
                            e.goToSelectedItem(t)
                        }, 200)
                }
            }, e.selectNextItem = function() {
                e.searchResults && ("number" == typeof e.selectedItemIndex && e.selectedItemIndex < e.searchResults.length - 1 ? e.selectedItemIndex++ : e.selectedItemIndex = 0)
            }, e.selectPrevItem = function() {
                e.searchResults && ("number" == typeof e.selectedItemIndex && e.selectedItemIndex > 0 ? e.selectedItemIndex-- : e.selectedItemIndex = e.searchResults.length - 1)
            }, e.goToSelectedItem = function(t) {
                (l = function() {
                    if ("*" === e.search.substr(-1)) return e.search + "0";
                    return !1
                }()) ? function(e) {
                    n.location.href = o.route(config.routes["quotes.allFutures"], {
                        symbol: e
                    })
                }(l) : "number" == typeof e.selectedItemIndex ? (t.preventDefault(), e.goToSymbolPage(e.searchResults[e.selectedItemIndex])) : null == e.selectedItemIndex && e.searchResults && e.searchResults.length > 0 ? (e.goToSymbolPage(e.searchResults[0]), t.preventDefault()) : e.submitSearchForm()
            }, e.setSelectedItem = function(t) {
                e.selectedItemIndex = t
            }, e.init = function(t, a, i, r, o) {
                e.stayOnPage = !!o, e.currentSymbol = {
                    symbol: t,
                    symbolType: a,
                    sector: i,
                    alias: r
                }
            }
        }
        i.$inject = ["$scope", "$filter", "$sce", "$timeout", "quotesService", "utils", "$window", "searchConnectionService"], e.exports = i
    },
    "4hGt": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = e.API_URL + "/earnings-dividends/get";
            return {
                getData: function(e) {
                    return a.call(r, t.GET, e).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                getHistoryData: function(i) {
                    return a.call(e.API_URL + i.route, t.GET, i.config)
                },
                getDetailsData: function(i) {
                    return a.call(e.API_URL + i.route, t.GET, i.config)
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider", "_"], e.exports = i
    },
    "4hOt": function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = ["$scope", "$location", function(a, r) {
                a.apiData = JSON.parse(e.unescape(a.apiData));
                var o = JSON.parse(a.symbol);
                a.currentSymbol = o, a.currentURL = e.escape(r.url()).replace("?", "%3F"), a.quotesService = t, a.data = a.apiData.data, a.itemList = a.data.filter(function(e) {
                    return !i.filter_var(e.raw.isExternal, "BOOLEAN")
                }), a.filter_var = i.filter_var
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("RaUo"),
                controller: r
            }
        }
        i.$inject = ["_", "quotesService", "utils"], e.exports = i
    },
    "4hWf": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-add-my-chart"> <input type=hidden /> <div class=bc-modal-content-inner> <div class=modal-header> Copy Chart <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.close()></i> </div> <form class=bc-form name=chartForm data-ng-submit=$ctrl.save(chartForm) novalidate> <div class=bc-form__field-wrapper> <label>Symbol</label> <input type=text name=symbol required=required autocomplete=off class=js-interactive-chart-symbol-selector-input data-ng-model-options="{ debounce: 200 }" data-ng-change=$ctrl.useSearch() data-ng-focus=$ctrl.preSymbolEnter() data-ng-blur=$ctrl.pastSymbolEnter() data-ng-keydown=$ctrl.keyboardNavigation($event) data-ng-class="{\'error\': $ctrl.invalidSymbol || (addChartForm.symbol.$invalid && addChartForm.$submitted)}" data-ng-model=$ctrl.model.symbol placeholder="Enter symbol..."> <symbol-autocomplete data-ng-show=$ctrl.searchResultsVisible data-ng-class="{\'hide\': !$ctrl.searchResultsVisible}" data-model=$ctrl.model.symbol data-search-results=$ctrl.searchResults data-extented=true data-on-symbol-select=$ctrl.selectSymbol(symbol)> </symbol-autocomplete> </div> <div class=bc-form__field-wrapper> <label>Name</label> <input type=text name=name required=required data-ng-maxlength=30 data-ng-model=$ctrl.model.name placeholder="Enter a name..." data-bc-auto-focus=desktop> </div> <div class=bc-form__field-wrapper> <label>Group</label> <my-chart-groups-drop-down data-model=$ctrl.model.group></my-chart-groups-drop-down> <p class=tip>Chart Groups are Managed in the My Barchart tab.</p> </div> <div class=error-text data-ng-show="chartForm.name.$invalid && chartForm.$submitted"> <span data-ng-show=chartForm.name.$error.maxlength>Chart name cannot be longer than 30 characters.</span> <span data-ng-show=chartForm.name.$error.required>Fill the required fields.</span> </div> <div class=btn-actions> <button class="bc-button light-blue upper" type=submit data-ng-disabled=$ctrl.saving>Save</button> </div> </form> </div> </div>'
    },
    "4i5n": function(e, t) {
        e.exports = '<div class=technical-chart-buttons> <div class="row collapse"> <div class="column small-12 right-buttons-container" data-ng-class="{\'medium-6\': !fullScreen}"> <button class="bc-button light-blue upper technical-chart-draw-btn" type=submit>Draw Chart</button> </div> <div class="column small-12" data-ng-class="{\'medium-6\': !fullScreen}"> <a data-bc-modal-login=templates data-ng-show="chartSettings.currentSetting === technicalChartConfig.chartSettings.BASIC" class="bc-button white-with-border extra save-settings-btn" href="" data-ng-click=saveSettingAsTemplate()>Save as Template</a> <a class="bc-button white-with-border extra clear-settings-btn" href="" data-ng-click=clearSettings()>Reset</a> </div> </div> </div>'
    },
    "4iiL": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                restrict: "A",
                link: function(i, r, o) {
                    var n = angular.element(document.querySelector(".company-info-inner"));
                    r.on("click", function(i) {
                        if (i.preventDefault(), n.hasClass("velocity-animating")) return !1;
                        var o = n.hasClass("show-for-medium-up");
                        r.toggleClass("company-info-link-border"), o ? (t(n, "slideUp", {
                            duration: 500
                        }), n.removeClass("show-for-medium-up"), angular.element(document.querySelector(".js-company-info-icon")).addClass("bc-glyph-chevron-down").removeClass("bc-glyph-chevron-up")) : (t(n, "slideDown", {
                            duration: 500,
                            complete: function() {
                                n.addClass("show-for-medium-up")
                            }
                        }), angular.element(document.querySelector(".js-company-info-icon")).addClass("bc-glyph-chevron-up").removeClass("bc-glyph-chevron-down")), o || (e.closeElementByDocumentClick.state = !0, a(function() {
                            e.closeElementByDocumentClick.fn("company-info-inner", function() {
                                t(n, "slideUp", {
                                    duration: 500
                                }), e.closeElementByDocumentClick.state = !1, n.removeClass("show-for-medium-up"), angular.element(document.querySelector(".js-company-info-icon")).addClass("bc-glyph-chevron-down").removeClass("bc-glyph-chevron-up"), r.removeClass("company-info-link-border")
                            })
                        }, 10))
                    }), angular.element(document.querySelector(".company-info-close")).on("click", function(a) {
                        e.closeElementByDocumentClick.disable(), a.preventDefault(), a.stopPropagation(), n.hasClass("velocity-animating") || t(n, "slideUp", {
                            duration: 500
                        }), e.closeElementByDocumentClick.state = !1, n.removeClass("show-for-medium-up"), angular.element(document.querySelector(".company-info")).removeClass("company-info-link-border").find("i").toggleClass("bc-glyph-chevron-up bc-glyph-chevron-down")
                    })
                }
            }
        }
        i.$inject = ["eventHelpers", "Velocity", "$timeout", "$log"], e.exports = i
    },
    "4md1": function(e, t, a) {
        "use strict";
        var i = "DetailedQuote";
        angular.module(i, []).directive("detailedQuote", a("PCiX"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "4qZ0": function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    alertForm: "=",
                    alertModel: "=",
                    conditionModel: "="
                },
                link: function(a, o, n) {
                    a.props = e.props, a.links = t.config.routes;
                    var s = i.find(e.properties, {
                        property_id: e.props.LAST
                    });
                    a.setFocusInNotes = !r.isNotesFocused(), s.valid_operators = [2, 3], a.operators = e.operators.filter(function(e) {
                        return ~s.valid_operators.indexOf(e.operator_id)
                    }), a.conditionModel.operator.operator_id = a.conditionModel.operator.operator_id || a.operators[0].operator_id, a.conditionModel.property.property_id = a.conditionModel.property.property_id || e.props.LAST, a.frequency = a.conditionModel.property.property_id === e.props.LAST ? e.props.LAST : e.props.CLOSE, a.autoReset = a.alertModel.automatic_reset ? "1" : "0", a.changeFrequency = function() {
                        a.conditionModel.property.property_id = a.frequency
                    }
                },
                template: a("hX06")
            }
        }
        i.$inject = ["alertProperties", "$window", "_", "alertManagerService"], e.exports = i
    },
    "4vrj": function(e, t) {
        e.exports = '<div class="modal-content-wrapper account change-password-form"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <div class=inner-form> <form name=changePasswordForm novalidate data-ng-submit=changePassword(changePasswordForm)> <div class=input-inner-wrapper> <label for=current_password>Enter Current Password:</label> <input class=form-input required id=current_password type=password data-ng-model=current name=current /> <data-show-password password-id="\'current_password\'" class=peek-at-password></data-show-password> </div> <div class=input-inner-wrapper> <label for=new_password>New Password:</label> <input class=form-input required id=new_password type=password data-ng-model=new data-ng-minlength=5 name=new /> <data-show-password password-id="\'new_password\'" class=peek-at-password></data-show-password> </div> <div class=input-inner-wrapper> <label for=confirm_new_password>Confirm New Password:</label> <input class=form-input required id=confirm_new_password type=password data-ng-model=confirm_new data-ng-minlength=5 name=confirm_new /> <data-show-password password-id="\'confirm_new_password\'" class=peek-at-password></data-show-password> </div> <div class=form-buttons> <button type=submit class="bc-button light-blue upper">Change Password</button> <div class=forgot-link-wrapper> <a data-ng-click=openYellowModal()>Forgot Password?</a> </div> </div> <div class=form-item-errors> <span data-ng-if="(changePasswordForm.current.$error.required || changePasswordForm.new.$error.required ||\n\t\t\tchangePasswordForm.confirm_new.$error.required) && changePasswordForm.$submitted"> Complete required fields to continue. </span> <span data-ng-if="changePasswordForm.new.$error.minlength && changePasswordForm.$submitted"> Password must be at least 5 characters. </span> <span data-ng-if=changePasswordForm.error> Something went wrong. Check data and try again. </span> <span data-ng-if=changePasswordForm.incorrectPassword> Password does not match account. Please re-enter current password. </span> <span data-ng-if="(changePasswordForm.new || changePasswordForm.confirm_new) && (changePasswordForm.new.$$rawModelValue !== changePasswordForm.confirm_new.$$rawModelValue) && changePasswordForm.$submitted"> Passwords do not match. Please make sure you have entered the same new password. </span> </div> </form> </div> <div data-ng-if=forgotPasswordModal class=yellow-modal> <div class=inner-wrapper> <i data-ng-click=closeYellowModal() class="bc-glyph-times form-close"></i> <div class=content> Instructions on how to reset your password were sent to <span class=bold>[[ user.email ]]</span> </div> </div> </div> </div>'
    },
    "5+kq": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            e.user = a.getUserData(), e.emails_deliver = e.user.emails.map(function(e) {
                return e.email
            }), e.email_deliver = e.user.email, e.publishiers = {}, e.sms_deliver = e.user.phone || "", t.getPublisherTypeDefaults().then(function(t) {
                t.forEach(function(t) {
                    t.active_alert_types = t.active_alert_types || [], e.publishiers[t.transport] = t
                }), e.email_deliver = e.publishiers.email.default_recipient || e.email_deliver, e.publishiers.sms.allow_window_timezone = e.publishiers.sms.allow_window_timezone || r.defaultTimeZone, e.publishiers.sms.allow_window_start = e.publishiers.sms.allow_window_start || "0:00", e.publishiers.sms.allow_window_end = e.publishiers.sms.allow_window_end || "24:00", ~e.publishiers.sms.active_alert_types.indexOf("price") && (e.receivePriceTextNotifications = !0), ~e.publishiers.sms.active_alert_types.indexOf("news") && (e.receiveNewsTextNotifications = !0)
            }), e.saveSettings = function() {
                Object.keys(e.publishiers).forEach(function(a) {
                    "email" === a && (e.publishiers[a].default_recipient = e.email_deliver), t.assignPublisherTypeDefault(e.publishiers[a])
                }), i.location.href = i.config.routes["my.alerts"]
            }, e.applyType = function(t, a) {
                var i = e.publishiers[t].active_alert_types.indexOf(a);
                if (-1 !== i) e.publishiers[t].active_alert_types.splice(i, 1);
                else {
                    if ("sms" === t && !e.publishiers.sms.default_recipient_hmac) return e.priceTextAlert = !1, e.newsTextAlert = !1, void o.openModalVerificationNotification();
                    e.publishiers[t].active_alert_types.push(a)
                }
            }
        }
        i.$inject = ["$scope", "alertManagerService", "authService", "$window", "alertProperties", "alertsModalFactory"], e.exports = i
    },
    "5/KQ": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-add-my-chart"> <input type=hidden /> <div class=bc-modal-content-inner> <div class=modal-header> Add New Chart <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.close()></i> </div> <form class=bc-form name=addChartForm data-ng-submit=$ctrl.addChart(addChartForm) novalidate> <div class=bc-form__field-wrapper data-ng-if=!$ctrl.createOnTheFly> <label>Symbol</label> <input type=text name=symbol required=required class=disable data-ng-model=$ctrl.model.symbol disabled=disabled placeholder="Enter a name..."> </div> <div class=bc-form__field-wrapper data-ng-if=$ctrl.createOnTheFly> <label>Symbol</label> <input type=text name=symbol required=required autofocus data-bc-auto-focus-disable="[[ $ctrl.focusOnDescription ]]" data-bc-auto-focus=all autocomplete=off class=js-interactive-chart-symbol-selector-input data-ng-model-options="{ debounce: 200 }" data-ng-change=$ctrl.useSearch() data-ng-focus=$ctrl.preSymbolEnter() data-ng-blur=$ctrl.pastSymbolEnter() data-ng-keydown=$ctrl.keyboardNavigation($event) data-ng-class="{\'error\': $ctrl.invalidSymbol || (addChartForm.symbol.$invalid && addChartForm.$submitted)}" data-ng-model=$ctrl.model.symbol placeholder="Enter symbol..."> <symbol-autocomplete data-ng-show=$ctrl.searchResultsVisible data-ng-class="{\'hide\': !$ctrl.searchResultsVisible}" data-model=$ctrl.model.symbol data-search-results=$ctrl.searchResults data-extented=true data-on-symbol-select=$ctrl.selectSymbol(symbol)> </symbol-autocomplete> </div> <div class="bc-form__field-wrapper description"> <label>Chart Description</label> <input type=text name=name required=required data-ng-class="{\'error\': (addChartForm.name.$invalid && addChartForm.$submitted)}" data-ng-maxlength=30 data-ng-model=$ctrl.model.name placeholder="Short description of this chart..." data-bc-auto-focus-disable="[[ !$ctrl.focusOnDescription ]]" data-bc-auto-focus=desktop> </div> <div class="bc-form__field-wrapper chart-group"> <label class=bold>Chart Group</label> <my-chart-groups-drop-down data-ng-if=!$ctrl.newGroupState data-model=$ctrl.model.group allow-new=true data-change-group=$ctrl.change(group)></my-chart-groups-drop-down> <input data-ng-if=$ctrl.newGroupState type=text name=newGroup required=required data-ng-maxlength=20 data-ng-model=$ctrl.newGroup data-ng-class="{\'error\': (addChartForm.newGroup.$invalid && addChartForm.$submitted)}" placeholder="Enter New Group Name"> </div> <div class=error-text data-ng-show="addChartForm.$invalid && addChartForm.$submitted"> <span data-ng-show=addChartForm.name.$error.maxlength>Chart name cannot be longer than 30 characters.</span> <span data-ng-show="addChartForm.name.$error.required || addChartForm.newGroup.$error.required">Complete required fields to continue.</span> </div> <div class=error-text data-ng-show=$ctrl.invalidSymbol> <span>Symbol is invalid.</span> </div> <div class=btn-actions> <button class="bc-button light-blue upper" type=submit data-ng-disabled=$ctrl.saving>Save</button> </div> </form> </div> </div>'
    },
    "54Vg": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    searchResults: "=",
                    onSymbolSelect: "&",
                    model: "=",
                    extented: "="
                },
                controller: ["$filter", "$sce", "$scope", function(e, t, a) {
                    var i = this;
                    i.selectedItemIndex = null, a.$watchCollection(function() {
                        return i.searchResults
                    }, function() {
                        i.selectedItemIndex = null
                    }), i.setSelectedItem = function(e) {
                        i.selectedItemIndex = e
                    }, i.selectSymbol = function(e) {
                        i.onSymbolSelect({
                            symbol: e
                        })
                    }, i.addHighlightMarkup = function(a) {
                        var r = new RegExp(i.model, "gi");
                        return -1 !== (a = e("stripTag")(a)).search(r) && (a = a.replace(r, function(e) {
                            return '<span class="highlight">' + e + "</span>"
                        })), t.trustAsHtml(a)
                    }, a.$on("autoCompleteMoveToNextItem", function() {
                        i.searchResults && ("number" == typeof i.selectedItemIndex && i.selectedItemIndex < i.searchResults.length - 1 ? i.selectedItemIndex++ : i.selectedItemIndex = 0)
                    }), a.$on("autoCompleteMoveToPrevItem", function() {
                        i.searchResults && ("number" == typeof i.selectedItemIndex && i.selectedItemIndex > 0 ? i.selectedItemIndex-- : i.selectedItemIndex = i.searchResults.length - 1)
                    }), a.$on("autoCompleteUseSelectedItem", function() {
                        null !== i.selectedItemIndex && i.onSymbolSelect({
                            symbol: i.searchResults[i.selectedItemIndex]
                        })
                    })
                }],
                controllerAs: "$ctrl",
                template: a("Fvn1")
            }
        }
    },
    "5TNh": function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "_", "authService", "CustomChartTemplatesApiFactory", "MyBarchartModalService", "interactiveChartTemplateApiFactory", function(e, t, a, i, r, o) {
                e.pendingRemoveTemplate = null;
                var n, s, l = a.getUserData();
                l.preferences && l.preferences.interactive_charts_template && (n = parseInt(l.preferences.interactive_charts_template)), l.preferences && "interactive" === l.preferences.flipcharts_style && l.preferences.flipcharts_template_interactive && (s = parseInt(l.preferences.flipcharts_template_interactive)), e.treeOptions = {
                    dropped: function(a) {
                        setTimeout(function() {
                            var a = t.pluck(e.templates, "id");
                            o.updateChartTemplatesOrder(a).then(function(e) {
                                return e
                            }, function(e) {
                                console.warn("Update templates order fail: " + e)
                            })
                        })
                    }
                }, e.removeTemplate = function(t) {
                    t.id === n || t.id === s ? r.showError("defaultChartTemplate") : e.pendingRemoveTemplate = t
                }, e.confirmRemoveTemplate = function() {
                    var t = this.$index,
                        a = e.templates,
                        i = a[t];
                    o.deleteChartTemplate(i.id).then(function(i) {
                        a.splice(t, 1), e.pendingRemoveTemplate = null
                    })
                }, e.cancelRemoveTemplate = function() {
                    e.pendingRemoveTemplate = null
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    templates: "="
                },
                template: a("N1rJ"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    "5VzN": function(e, t) {
        e.exports = "<span data-ng-class=$ctrl.getCellColorizeClass()> [[ $ctrl.cellValue ]] </span>"
    },
    "5XQs": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.$on("onBarchartDataTableRendered", function(t, a) {
                a.data && a.data.Call && a.data.Call[0] && (e.tradeTime = a.data.Call[0].tradeTime)
            });
            window.location.pathname.indexOf("volatility-greeks")
        }
        i.$inject = ["$scope", "$rootScope", "$location", "optionsToolbarService"], e.exports = i
    },
    "5bpx": function(e, t) {
        e.exports = '<div class=technical-chart-quick-links-component> <div class=period-num> <span class=header>Quick Chart:</span> <ul> <li data-ng-repeat="(key, label) in ::$ctrl.periods track by key" data-ng-class="{\'active\': key == $ctrl.period}" data-ng-click=$ctrl.applyQuickSetting(key) data-ng-bind=label></li> </ul> </div> </div> '
    },
    "5koq": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = a.getUserData().preferences,
                o = angular.copy(a.getUserData().interactive_chart_templates);
            o.forEach(function(e) {
                e.id = e.id.toString()
            }), o.unshift({
                id: "None",
                name: "None"
            }), e.templatesList = o, e.formData = {
                savingMechanism: "every",
                template: r.interactive_charts_template || "None"
            }, r.interactive_charts_template && "None" !== r.interactive_charts_template && (e.formData.savingMechanism = "template"), e.apply = function() {
                e.applyingSettings = !0;
                var a = e.formData.savingMechanism;
                i.savePreferencesItem("interactive_charts_saving_mechanism", a).then(function() {
                    "template" === a && e.formData.template !== r.interactive_charts_template ? i.savePreferencesItem("interactive_charts_template", e.formData.template).then(function() {
                        t.close(a)
                    }, function(t) {
                        console.log("Could not apply new interactive_charts_template:", t), e.applyingSettings = !1
                    }) : t.close(a)
                }, function(t) {
                    console.log("Could not apply new interactive_charts_saving_mechanism:", t), e.applyingSettings = !1
                })
            }
        }
        i.$inject = ["$scope", "$modalInstance", "authService", "interactiveChartUserPreferencesApi"], e.exports = i
    },
    "5nEK": function(e, t) {
        e.exports = '<div class=bc-screener__filter-range-custom> <div class="bc-dropdown styled bc-screener__filter-range-custom-dropdown"> <select data-ng-model=filterData.default.field data-ng-options="item.key as item.value for item in filters.default.field"></select> </div> <screener-range data-form-data=filterData.default.value data-input-prefix=filters.default.prepend data-input-suffix=filters.default.append></screener-range> </div> '
    },
    "5o+i": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    userEmail: "@",
                    message: "@",
                    close: "&"
                },
                controller: ["$scope", function(a) {
                    a.hasErrors = !1, a.user = t.getData() || {}, a.isLoggedIn = i.isLoggedIn(), a.user.message = a.message || null, a.widgetId = !1, a.grecaptchaInvisibleKey = o.grecaptchaInvisibleKey, i.isLoggedIn() && (a.user.email = i.getUserData().primary_email), a.errors = {}, a.contact = function(e) {
                        if (a.hasErrors = !1, a.hasErrors = !!e.$invalid, a.hasErrors) return !1;
                        a.isLoggedIn ? a.onSuccess() : n.execute(a.widgetId)
                    }, a.onRender = function(e) {
                        a.widgetId = e
                    }, a.onSuccess = function() {
                        var i, o, n, s;
                        a.user.url = r.getPrevious() ? window.location.origin + r.getPrevious() : window.location.href, a.user.actualDimension = (i = window.innerWidth, o = window.innerHeight, i + "x" + o), a.user.availResolution = (n = window.screen.availWidth, s = window.screen.availHeight, n + "x" + s), e.contact(a.user).then(function(e) {
                            !0 === e.success && (a.success = !0, t.clear())
                        })
                    }, a.goToForgot = function() {
                        t.clearErrors(), t.setData(a.user), r.goToForgot(null)
                    }
                }],
                template: a("TJPE")
            }
        }
        i.$inject = ["authApiService", "userAuthFormData", "authService", "authRouteService", "appConfig", "vcRecaptchaService"], e.exports = i
    },
    "5rOw": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.isPremier = t.isLoggedIn() && t.getUserData().is_premier, e.tab = "last", e.changeTab = function(t) {
                e.isPremier ? e.tab = t : a.showPremier("seasonals")
            }
        }
        i.$inject = ["$scope", "authService", "bcModalLoginSrv"], e.exports = i
    },
    "5tMe": function(e, t) {
        e.exports = '<div class=bc-modal-content> <input type=hidden /> <div class=modal-header> <i class="bc-glyph-times form-close" data-ng-click=cancel()></i> </div> <form data-ng-submit=apply()> <div class=bc-modal-content-inner> <div class="modal-settings-row row-bar-type"> <div class="label bold">Bar Type</div> <div class="bc-dropdown styled"> <select data-ng-model=selectedBarType.model data-ng-options="type.value disable when (allowedBarTypes && allowedBarTypes.indexOf(type.key) === -1) for type in typeList" data-ng-change=changeBarType(selectedBarType)></select> </div> <bc-color-picker data-ng-if=formData.barType.colors[1] data-color-model=formData.barType.colors[1]></bc-color-picker> <bc-color-picker data-ng-if=formData.barType.colors[0] data-color-model=formData.barType.colors[0]></bc-color-picker> <bc-color-picker data-ng-if=formData.barType.colors[2] data-color-model=formData.barType.colors[2]></bc-color-picker> <bc-line-width-selector data-line-width-model=formData.barType.lineWidth></bc-line-width-selector> </div> </div> <div class="modal-controls-row text-center"> <button class="bc-button grey" data-ng-click=cancel()>Cancel</button> <button type=submit class="bc-button light-blue">Apply</button> </div> </form> </div> '
    },
    "5u4i": function(e, t, a) {
        "use strict";
        e.exports = {
            CCALL: "Covered Calls",
            NPUT: "Naked Puts",
            BEARC: "Bear Call",
            BEARP: "Bear Put",
            BULLC: "Bull Call",
            BULLP: "Bull Put",
            OPT: "Options",
            STK: "Stocks",
            FUT: "Futures",
            FOREX: "Forex",
            FUND: "Funds",
            ETF: "ETFs"
        }
    },
    "5zSd": function(e, t) {
        e.exports = '<div class=barchart-minitable-doublerow-wrapper> <table> <thead> <tr> <th data-ng-repeat="(columnKey, columnTitle) in barchartMinitableDoubleRowCtrl.content.meta.field.shortName track by $index"> <barchart-table-header-cell-template data-cell-key="{{ ::columnKey }}" data-cell-value="{{ ::columnTitle }}" data-sort-data=barchartMinitableDoubleRowCtrl.options.sort data-content=barchartMinitableDoubleRowCtrl.content> </barchart-table-header-cell-template> </th> </tr> </thead> <tbody data-ng-repeat="row in barchartMinitableDoubleRowCtrl.content.data"> <tr> <td data-ng-repeat="(columnKey, columnTitle) in barchartMinitableDoubleRowCtrl.content.meta.field.shortName track by $index"> <barchart-table-cell-template data-cell-key="{{ ::columnKey }}" data-cell-value=row[columnKey] data-cells-to-colorize=barchartMinitableDoubleRowCtrl.options.colorize data-links-open-new-tab=barchartMinitableDoubleRowCtrl.linksOpenNewTab> </barchart-table-cell-template> </td> </tr> <tr> <td class=text-left colspan="{{ barchartMinitableDoubleRowCtrl.getColumnsCount() }}"> <span>{{ row.symbolName }}</span> </td> </tr> </tbody> </table> </div>'
    },
    "60LD": function(e, t) {
        e.exports = '<div class=dashboard-grid-tools-panel> <div class=right> <dashboard-grid-apply-template-drop-down></dashboard-grid-apply-template-drop-down> <a class="bc-button white-with-border button-reset right-border-separator no-left-padding" data-ng-click=$ctrl.resetDialog()>Clear</a> </div> <div class="bc-interactive-chart__toolbar-wrapper separator hide-for-print show-for-medium-up clearfix"> <div class="bar-type-drop-down right-border-separator"> <dashboard-grid-bar-type-drop-down></dashboard-grid-bar-type-drop-down> </div> <div class=panel-separator></div> <div class=dashboard-grid-tools-panel__quick-aggregation> <dashboard-grid-quick-chart-aggregation data-period=P6M></dashboard-grid-quick-chart-aggregation> </div> <div class=panel-separator></div> <dashboard-grid-calendar></dashboard-grid-calendar> <div class=panel-separator></div> <div class=bc-dashboard__aggregation-panel> <dashboard-grid-aggregation-drop-down></dashboard-grid-aggregation-drop-down> <div class=panel-separator></div> <dashboard-grid-period-drop-down></dashboard-grid-period-drop-down> <dashboard-grid-intraday-field-minutes data-ng-show="$ctrl.aggregation.unit === \'Intraday\'"></dashboard-grid-intraday-field-minutes> </div> <div class=bc-dashboard__aggregation-panel> </div> </div> </div> '
    },
    "60bQ": function(e, t, a) {
        "use strict";
        var i = "OptionsQuotes";
        angular.module(i, []).controller(i + ".optionsQuotesCtrl", a("ZfM+")).directive("optionsQuotesSbs", a("HHSU")).factory("optionsQuotesApiFactory", a("Ox5F"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "63iX": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.dropdownOptions = {
                USD: "United States Dollar (USD)",
                AUD: "Australian Dollar (AUD)",
                CAD: "Canadian Dollar (CAD)",
                EUR: "European Union Euro (EUR)",
                GBP: "British Pound (GBP)",
                JPY: "Japanese Yen (JPY)",
                CHF: "Swiss Franc (CHF)",
                AED: "U.A.E. Dirham (AED)",
                ARS: "Argentine Peso (ARS)",
                BGN: "Bulgarian Lev (BGN)",
                BHD: "Bahrain Dinar (BHD)",
                CLP: "Chilean Peso (CLP)",
                CNY: "Chinese Yuan (CNY)",
                CRC: "Costa Rican Colon (CRC)",
                CZK: "Czech Koruna (CZK)",
                DKK: "Danish Krone (DKK)",
                DOP: "Dominican Peso (DOP)",
                EEK: "Estonian Kroon (EEK)",
                EGP: "Egyptian Pound (EGP)",
                FJD: "Fiji Dollar (FJD)",
                GTQ: "Guatemala Quetzal (GTQ)",
                HKD: "Hong Kong Dollar (HKD)",
                HNL: "Honduran Lempir (HNL)",
                HRK: "Croatian Kuna (HRK)",
                HTG: "Haiti Gourde (HTG)",
                HUF: "Hungarian Forint (HUF)",
                IDR: "Indonesian Rupiah (IDR)",
                ILS: "Israeli Shekel (ILS)",
                INR: "Indian Rupee (INR)",
                ISK: "Icelandic Krona (ISK)",
                KRW: "Korean Won (KRW)",
                KWD: "Kuwaiti Dinar (KWD)",
                LTL: "Lithuanian Litas (LTL)",
                LVL: "Latvian Lats (LVL)",
                MAD: "Moroccan Dirham (MAD)",
                MXN: "Mexican Peso (MXN)",
                MYR: "Malaysian Ringgit (MYR)",
                NGN: "Nigerian Naira (NGN)",
                NIO: "Nicaraguan Cordoba (NIO)",
                NOK: "Norwegian Krone (NOK)",
                NZD: "New Zealand Dollar (NZD)",
                OMR: "Omani Rial (OMR)",
                PEN: "Peruvian Nuevo Sol (PEN)",
                PHP: "Philippine Peso (PHP)",
                PLN: "Polish Zloty (PLN)",
                QAR: "Qatar Riyal (QAR)",
                RUB: "Russian Ruble (RUB)",
                SEK: "Swedish Krona (SEK)",
                SGD: "Singapore Dollar (SGD)",
                TND: "Tunisian Dinar (TND)",
                TWD: "Taiwan Dollar (TWD)",
                XPF: "French Pacific (XPF)",
                ZAR: "South African Rand (ZAR)"
            };
            var r = !1,
                o = 2;
            e.firstSelect = "USD", e.secondSelect = "EUR", e.firstValue = 1, e.secondValue = 0, e.dataLoading = !0, e.chartType = i.getChartLink(), e.updateRate = function() {
                var i = {
                        fields: "symbol,lastPrice,priceChange,percentChange",
                        raw: 1,
                        symbols: ""
                    },
                    n = "^" + e.firstSelect + e.secondSelect,
                    s = "^" + e.secondSelect + e.firstSelect;
                i.symbols = n + "," + s;
                t.call(a.buildUrl("/api/v1/quotes/get"), "GET", i, []).then(function(t) {
                    ! function(t) {
                        r = !1, e.firstRate = 0, e.secondRate = 0, e.firstEl = {}, e.secondEl = {};
                        var a = null;
                        t[0] && (t[0].symbol === n && "N/A" !== t[0].lastPrice ? (e.firstRate = t[0].raw.lastPrice, e.firstEl = t[0], a = "secondRate") : t[0].symbol === s && "N/A" !== t[0].lastPrice && (e.secondRate = t[0].raw.lastPrice, e.secondEl = t[0], a = "firstRate")), t[1] && "N/A" !== t[1].lastPrice ? (e.secondRate = t[1].raw.lastPrice, e.secondEl = t[1]) : t[0] && ((o = t[0].raw.lastPrice).toString().split(".") && (o = o.toString().split(".")[1].length), e[a] = (1 / t[0].raw.lastPrice).toFixed(o), r = !0)
                    }(t.data), e.changeValue("first", "second"), e.dataLoading = !1
                }, function(t) {
                    e.errors = t
                }), e.getChart("^" + e.firstSelect + e.secondSelect)
            }, e.changeValue = function(t, a) {
                o = (o = e[t + "Rate"]).toString().split(".")[1].length, e[a + "Value"] = (e[t + "Value"] * e[t + "Rate"]).toFixed(o)
            }, e.chartConfig = {
                backgroundColor: "#f3f3f3",
                chartHeight: 150,
                sectorFinder: !0
            }, e.setColor = function(e) {
                return (e = isNaN(+e) ? parseFloat(e) : +e) > 0 ? "up" : e < 0 ? "down" : "unch"
            };
            var n = {
                API_URL: "/api/v1",
                method: "/historical/get",
                symbol: "",
                range: 90,
                fields: "tradeTime,lastPrice",
                type: "eod",
                orderBy: "tradeTime",
                orderDir: "asc"
            };
            e.getChart = function(i) {
                a.isMobileAndTablet() || (n.symbol = i, t.call(a.buildUrl(n.API_URL + n.method, n), "GET").then(function(t) {
                    t.count > 1 && t.data[0] ? e.chart = t.data : e.chart = !1
                }))
            }, e.swap = function() {
                var t = e.firstRate,
                    a = e.firstSelect,
                    i = e.firstEl;
                e.firstRate = e.secondRate, e.secondRate = t, e.firstSelect = e.secondSelect, e.secondSelect = a, e.firstEl = e.secondEl, e.secondEl = i, e.getChart("^" + e.firstSelect + e.secondSelect), e.changeValue("first", "second"), r && (e.firstValue = 0, e.secondValue = "0.00")
            }, e.updateRate()
        }
        i.$inject = ["$scope", "dataProvider", "utils", "userPreferencesService"], e.exports = i
    },
    "672W": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            this.getConnectRoute = function(e) {
                return a.route(i.config.routes["auth.provider"], {
                    provider: e
                })
            }, this.disconnect = function(r) {
                var o = a.route(i.config.routes["auth.provider.remove"], {
                    provider: r
                });
                return e.call(o, t.GET)
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "$window"], e.exports = i
    },
    "684h": function(e, t) {
        e.exports = '<div class="bc-portfolio__edit-form-modal add-transaction-modal"> <input type=hidden> <div class=bc-portfolio__edit-form-modal-header> <a class="bc-portfolio__edit-form-modal-close bc-glyph-times" data-ng-click=$ctrl.close();></a> <div class=bc-portfolio__edit-form-modal-header-wrapper> <span data-ng-if=$ctrl.edit> Edit</span> <span data-ng-if=!$ctrl.edit> Add</span> Transaction </div> </div> <div class=bc-portfolio__edit-form-modal-content> <form class="bc-form find-symbol-form" name=findSymbolForm data-ng-submit=$ctrl.findSymbol() autocomplete=off data-ng-hide="$ctrl.edit || $ctrl.addedTransactionFromDatatable"> <div class="bc-form__add-symbol-fieldset bc-portfolio_edit-modal-symbol"> <div class="form-item name"> <label>Enter Symbol:</label> <div class="clear-button-wrapper input-wrapper"> <input type=search data-ng-model=$ctrl.transactionSymbolSearch data-barchart-clear-input autofocus data-bc-symbol-autocomplete data-autocomplete-callback=$ctrl.findSymbol() placeholder="Enter a symbol..." data-extended=true data-ng-keydown="symbolSearchErrorMessage=false" class="bc-form__add-symbol-input placeholder" name=transactionSymbolSearch /> </div> <input type=submit class="bc-button light-blue upper bc-portfolio_edit-modal-add-symbol" value=Search /> </div> </div> <div class="error-text text-center symbol-not-found" data-ng-show=$ctrl.symbolSearchErrorMessage>Symbol not found: [[ $ctrl.transactionSymbolSearch ]]</div> </form> <portfolio-edit-form data-ng-if="$ctrl.symbol && ($ctrl.transactionData || !$ctrl.edit)" data-symbol=$ctrl.symbol data-transaction-form=$ctrl.transactionForm data-transaction-data=$ctrl.transactionData data-is-note=$ctrl.isNote data-show-adjustment=$ctrl.showAdjustment data-cash=$ctrl.cash data-errors=$ctrl.errors></portfolio-edit-form> <bc-error-component data-errors=$ctrl.errors data-use-server-errors=true data-form-name=transactionForm></bc-error-component> <div class="bc-portfolio__edit-form-modal-buttons text-center"> <button class="bc-button red save" data-ng-if=$ctrl.edit data-ng-click=$ctrl.deleteTransaction();>Delete</button> <button class="bc-button grey save" data-ng-click=$ctrl.close();>Cancel</button> <button class="bc-button save light-blue" data-ng-disabled=!$ctrl.symbol data-ng-click=$ctrl.addTransaction();>Apply</button> </div> <div class=text-center data-ng-show=$ctrl.edit> <a class=move-to-another data-ng-click=$ctrl.moveToAnotherPortfolio()>Move to Another Portfolio</a> </div> </div> </div>'
    },
    "68vt": function(e, t, a) {
        "use strict";
        var i = "KeyRates";
        angular.module(i, []).controller(i + ".KeyRatesCtrl", a("fxHL"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "6BH7": function(e, t) {
        e.exports = "<i class=bc-typeahead-clear-input data-ng-show=bindModel data-ng-click=clearInput()>X</i> <dl data-ng-show=matches.length> <dt class=clearfix> <span class=left>Click to add:</span> <span class=right>(Greyed out fields have already been added)</span> </dt> <dd data-ng-repeat=\"item in matches\"> <a data-ng-class=\"{ 'grey': item.disabled, 'active': active === $index }\" data-ng-mouseenter=setActive($index) data-ng-click=selectItem(item)>[[ item.name ]]</a> </dd> </dl>"
    },
    "6D3h": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e, t, a) {
                if (void 0 !== e) {
                    if (e.length < t) return e;
                    if (a = a || !1)
                        for (; 0 !== e[t].search(/[\s.,]/);) t++;
                    e = e.substring(0, t) + "..."
                }
                return e
            }
        }
    },
    "6I2R": function(e, t, a) {
        "use strict";
        var i = "barchartEndOfDayMyCharts";
        angular.module(i, []).controller("barchartEodMyChartsEmailsCtrl", a("e04C"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "6JP8": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "CA",
                link: function(t, a, i) {
                    var r = angular.element(document.querySelector(".js-bc-extended-help-block"));
                    e.isMobileAndTablet() ? a.bind("touchstart", function() {
                        r.toggleClass("visible")
                    }) : a.bind("click", function() {
                        r.toggleClass("visible")
                    })
                }
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    "6KKI": function(e, t, a) {
        "use strict";

        function i(e) {
            var t = null,
                a = {};
            this.getGroups = function() {
                return t
            }, this.setGroups = function(e) {
                t = e
            }, this.addChart = function(e, t, i) {
                a.hasOwnProperty(e) && ("interactive" === i ? a[e].interactive.push(t) : a[e].technical.push(t))
            }, this.removeChart = function(t, i, r) {
                var o = a[i][r],
                    n = e.findIndex(o, function(e) {
                        return e.id === t
                    });
                a[i][r].splice(n, 1)
            }, this.replaceChart = function(t, i, r, o) {
                var n = a[i][r],
                    s = e.findIndex(n, function(e) {
                        return e.id === t
                    });
                a[i][r][s] = o
            }, this.getCharts = function(e, t) {
                return a.hasOwnProperty(e) ? "interactive" === t ? a[e].interactive || null : a[e].technical || null : null
            }, this.setCharts = function(e, t, i) {
                a.hasOwnProperty(e) || (a[e] = {
                    interactive: [],
                    technical: []
                }), a[e][t] = i
            }
        }
        i.$inject = ["_"], e.exports = i
    },
    "6NZv": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            return {
                restrict: "A",
                link: function(o, n, s) {
                    n.bind("click touchstart", function(n) {
                        if (!t.isLoggedIn()) return !1;
                        if (o.symbol) {
                            var s = JSON.parse(o.symbol);
                            a.setData(s)
                        }
                        i.retrieveAlerts().then(function(t) {
                            if (r.alerts(t.length)) return !1;
                            e.openModalSymbolAlertsList({}, !0).opened.then(function() {
                                i.subscribeAlerts()
                            })
                        })
                    })
                },
                controller: ["$scope", function(e) {
                    if (e.symbol) {
                        var t = JSON.parse(e.symbol);
                        a.setData(t)
                    }
                }],
                scope: {
                    symbol: "@"
                }
            }
        }
        i.$inject = ["alertsModalFactory", "authService", "alertsSymbolDataFactory", "alertManagerService", "limitsService"], e.exports = i
    },
    "6Oom": function(e, t, a) {
        "use strict";
        for (var i, r = (new Date).getFullYear() + 5, o = [], n = 0; n < 20; n++) {
            i = r.toString().substr(-2);
            var s = {};
            s.value = i, s.label = i + "-" + r, o.push(s), r--
        }
        e.exports = o
    },
    "6Pkv": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.template = i, e.existedNames = a.getExistedNames(e.template), e.save = function() {
                t.close(e.template)
            }, e.cancel = function() {
                t.dismiss("Cancelled")
            }
        }
        i.$inject = ["$scope", "$modalInstance", "CustomChartTemplatesService", "template"], e.exports = i
    },
    "6QTz": function(e, t) {
        e.exports = "<div class=\"barchart-symbol-widget widget-description\"> <div class=barchart-symbol-widget__title> Profile <a data-ng-href=\"[[  '/' + sector + '/quotes/'  + symbol + '/profile' ]]\" class=\"bc-button small white-with-border right\" target=_blank> Full Profile </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href=\"[[  '/' + sector + '/quotes/' + symbol + '/profile' ]]\" target=_blank> <div class=\"barchart-symbol-widget__title uppercase\"> Description: </div> <div class=widget-description__sectors> <div class=widget-description__sectors-label> Sector: </div> <div class=widget-description__sectors-list> <span data-ng-repeat=\"sector in data.sectors\"> [[ sector.description ]][[ $last ? '' : ', ' ]] </span> </div> </div> <div class=widget-description__description> [[ data.symbolDescription ]] </div> </a> </div> "
    },
    "6Qfp": function(e, t, a) {
        "use strict";
        angular.module("PriceHistory", []).directive("datesPeriodForm", a("KYGC")).directive("priceHistoryCheckboxes", a("B6fh")).directive("corporateActions", a("NiAe")).factory("corporateActionsApiFactory", a("Plls"));
        e.exports = {
            enable: !0,
            name: "PriceHistory"
        }
    },
    "6YH7": function(e, t, a) {
        "use strict";

        function i(e, t) {
            this.showError = function(e) {
                return function(e) {
                    return t.open({
                        template: a("xD5U"),
                        controller: "MyBarchart.MyBarchartModalErrorCtrl",
                        windowClass: "bc-light-modal error",
                        resolve: {
                            error: function() {
                                return e.errorType
                            }
                        }
                    }).result
                }({
                    errorType: e
                })
            }
        }
        i.$inject = ["_", "$modal"], e.exports = i
    },
    "6d2Q": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u) {
            e.agreementDate = r, e.loginMe = function() {
                a.call("/first-login", i.POST).then(function(t) {
                    t.data && (o.setLoggedIn(t.data), null !== n.getRedirectPath() ? s.location.href = n.getRedirectPath() : s.location.reload(), e.close())
                }, function(e) {
                    console.log(e)
                })
            }, e.agreedToTerms = function() {
                if (!o.getUserData().is_premier) {
                    var e = {
                        email: o.getUserData().email,
                        lists: ["barchartExclusiveOffers"]
                    };
                    l.subscribe(e)
                }
                a.call(c.API_URL + "/preferences", i.PUT, {
                    name: "annual_agreement_date",
                    value: Math.floor(Date.now() / 1e3)
                }).then(function() {
                    if (window.config.showWelcomeNotification) {
                        var e = 'Welcome to Barchart.com. Thanks for signing up! <a target="_self" href="' + window.config.routes["my.sitePreferences"] + '">Click here to set Site Preferences.</a>';
                        d.success({
                            message: e,
                            delay: 5e3
                        }), u.savePreference("welcomeNotificationShown", 1)
                    }
                }), t.close()
            }, e.close = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "dataProvider", "httpVerbs", "agreementDate", "authService", "authRedirectService", "$window", "barchartEmailsApiFactory", "apiConfig", "Notification", "bcSavePreferencesService"], e.exports = i
    },
    "6d9V": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            e.loading = !0, e.period = "P3M", e.init = function(i, r, o) {
                e.data = i, 2 === e.data.symbolType && (e.data.symbolName = e.data.contractName), e.apiConfig = r;
                var s = n.getSector(e.data.symbolType);
                e.path = t.route(a.config.routes["quotes.sectors"], {
                    sector: s,
                    symbol: e.data.symbol
                }), e.tab = o, e.loading = !1
            }, e.setColor = t.setColor, e.changeTab = function(r) {
                if (r === e.tab) return !1;
                r && (e.tab = r), e.loading = !0, e.apiConfig.symbol = e.tab, o.makeRequest({
                    api: e.apiConfig
                }).then(function(r) {
                    e.data = r[0].data[0], 2 === e.data.symbolType && (e.data.symbolName = e.data.contractName);
                    var o = n.getSector(e.data.symbolType);
                    e.path = t.route(a.config.routes["quotes.sectors"], {
                        sector: o,
                        symbol: e.data.symbol
                    }), i.addInlineDataForSymbols([e.data.symbol]).then(function() {
                        e.loading = !1
                    })
                })
            }, e.isActive = function(t) {
                return t === e.tab ? "active" : ""
            }, e.periodChanged = function(t) {
                e.period = t.period
            }
        }
        i.$inject = ["$scope", "utils", "$window", "bcInlineData", "$q", "apiFactory", "quotesService"], e.exports = i
    },
    "6dG3": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-delete-my-chart"> <input type=hidden /> <div class=bc-modal-content-inner> <form> <p class=text>Are you sure you want to delete this symbol from the Watchlist?</p> <div class=btn-actions> <button class="bc-button grey upper" data-ng-click=$ctrl.cancel() type=button>Cancel</button> <button class="bc-button light-blue upper" data-ng-click=$ctrl.ok() data-ng-disabled=$ctrl.disable type=submit>Ok</button> </div> </form> </div> </div>'
    },
    "6j/C": function(e, t) {
        e.exports = '<div class=interactive-chart-share-component> <a href="" data-ng-click=$ctrl.openShareModal()> <i data-ng-show=!$ctrl.displayType class=bc-glyph-share-square></i> <i data-ng-show="$ctrl.displayType === \'icon\'" class=bc-glyph-share></i> <span data-ng-show=!$ctrl.displayType>[[ ::$ctrl.label ]]</span> </a> </div>'
    },
    "6jH6": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            var l, c, d, u;

            function p() {
                e.recaptchaConfirmed = !0
            }
            e.feedback = {
                url: window.location.href,
                actualDimension: (d = window.innerWidth, u = window.innerHeight, d + "x" + u),
                availResolution: (l = window.screen.availWidth, c = window.screen.availHeight, l + "x" + c)
            }, o.isLoggedIn() && (e.feedback.email = o.getUserData().primary_email), e.formSubmitted = !1, e.formCompleted = !1, e.recaptchaConfirmed = !0, e.badRequestError = !1, o.isLoggedIn() || (e.recaptchaConfirmed = !1, i(function() {
                s.for("grecaptcha").then(function() {
                    a.grecaptcha.render("g-recapcha-feedback", {
                        sitekey: n.grecaptchaKey,
                        callback: p
                    })
                })
            }, 0)), e.sendFeedback = function(t) {
                e.formSubmitted = !0, e.badRequestError = !1, t.email.$$rawModelValue && t.email.$setValidity("invalidEmail", !0), e.recaptchaConfirmed && t.$valid && r.giveFeedback(e.feedback).then(function(t) {
                    !0 === t.success && (e.formCompleted = !0)
                }, function(t) {
                    t.error && t.error.message && (e.badRequestError = t.error.message)
                })
            }, e.cancel = function() {
                t.dismiss("cancel")
            }, e.close = function() {
                t.close("completed")
            }
        }
        i.$inject = ["$scope", "$modalInstance", "$window", "$timeout", "authApiService", "authService", "appConfig", "waitService"], e.exports = i
    },
    "6rGY": function(e, t) {
        e.exports = '<div class=bc-screener__filter-range-expiration> <screener-range data-form-data=filterData.days.value data-input-prefix=filters.days.prepend data-input-suffix=filters.days.append></screener-range> <div class=bc-screener__filter-range-expiration-helper-wrapper data-ng-if="filters.days.options && filters.days.options.length > 0"> <screener-range-helper data-form-data-model=filterData.days data-helper-data=filters.days.options></screener-range-helper> </div> <div> <div class=input-checkbox data-ng-repeat="checkboxItem in filters.type.value track by $index"> <input id="cb-filter-checkboxes-[[ $index ]]" data-ng-checked="filterData.type.value.indexOf(checkboxItem.key) > -1" data-ng-click="toggleSelection(checkboxItem.key, $event)" type=checkbox> <label for="cb-filter-checkboxes-[[ $index ]]"> <i class=bc-glyph-check></i> <span data-ng-bind=checkboxItem.value></span> </label> </div> </div> </div>'
    },
    "6vsw": function(e, t) {
        e.exports = "<div data-ng-if=symbol class=bc-alerts__symbol-info> <span data-ng-show=showName data-ng-bind=::symbol.symbolName></span> <span class=bc-alerts__symbol-info-symbol>(<span data-ng-bind=::symbol.symbol></span>)</span> <span class=bc-alerts__symbol-info-last-price data-ng-bind=::symbol.lastPrice></span> <span data-ng-class=setColor(symbol.priceChange) data-ng-bind=::symbol.priceChange></span> <span data-ng-class=setColor(symbol.percentChange)>(<span data-ng-bind=::symbol.percentChange></span>)</span> </div>"
    },
    "6xmb": function(e, t, a) {
        "use strict";

        function i() {
            return {
                getPortfolioDatatableData: function(e, t) {
                    var a = [{
                        count: e.item_count,
                        total: e.item_count,
                        data: [],
                        meta: {
                            field: {
                                shortName: {},
                                description: e.meta.field.description,
                                type: e.meta.field.type
                            }
                        }
                    }];
                    return e.meta.field.display.forEach(function(t) {
                        a[0].meta.field.shortName[t] = e.meta.field.shortName[t]
                    }), e.items.forEach(function(i) {
                        var r;
                        "~" === i.symbol ? r = {
                            blankRow: !0
                        } : (r = {
                            symbolType: i.symbolType,
                            symbolCode: i.symbolCode,
                            raw: {
                                symbolType: i.raw.symbolType,
                                symbolCode: i.raw.symbolCode,
                                transactionId: i.id
                            }
                        }, "portfolio" !== t && "detailed" !== t || (r.raw.exit_price = i.raw.exit_price), r.raw.high_alert = i.raw.high_alert, r.raw.low_alert = i.raw.low_alert, r.raw.action = i.raw.action, r.raw.lastPrice = i.raw.lastPrice || i.raw.dailyLastPrice, r.raw.tooltip = [], ["quantity", "action", "entry_date", "entry_price", "exit_date", "exit_price", "high_alert", "low_alert", "notes", "commission"].forEach(function(e) {
                            i[e] && (r.raw.tooltip[e] = i[e])
                        }), ["high_alert", "low_alert"].forEach(function(e) {
                            i[e] && (r.raw.tooltip["raw_" + e] = i.raw[e])
                        }), r.raw.tooltip.raw_lastPrice = i.raw.lastPrice || i.raw.dailyLastPrice, r.raw.download = [], e.meta.field.display.forEach(function(e) {
                            r[e] = i[e], r.raw[e] = i.raw[e] instanceof Array ? i.raw[e][0] : i.raw[e], r.raw.download[e] = i.raw[e]
                        }), r.hasOptions || (r.hasOptions = i.hasOptions, r.raw.hasOptions = i.raw.hasOptions)), a[0].data.push(r)
                    }), a
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    "73Hv": function(e, t) {
        e.exports = '<a class="bc-screener__new-screener-button bc-button white-with-border extra" data-ng-click=$ctrl.warnScreenerReset()> Reset </a>'
    },
    7910: function(e, t, a) {
        "use strict";

        function i(e) {
            function t(t, a) {
                return e.makeRequest(t, a).then(function(e) {
                    return e
                })
            }
            return {
                makeRequest: t,
                loadPage: function(e, a) {
                    return e.api && (e.api.page = a), t(e)
                }
            }
        }
        i.$inject = ["apiFactory"], e.exports = i
    },
    "7Bul": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                restrict: "A",
                scope: {},
                link: function(i, r) {
                    r.bind("click", function(i) {
                        e.getUserData().subscription === t.SUBSCRIPTIONS.SIMPLE_USER && (a.showPremier("signals"), i.preventDefault())
                    })
                }
            }
        }
        i.$inject = ["authService", "appConfig", "bcModalLoginSrv"], e.exports = i
    },
    "7CWe": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {},
                controller: ["appConfig", "$window", "$scope", "barchartEmailsApiFactory", "Notification", function(e, t, a, i, r) {
                    var o = this;
                    o.recaptchaKey = e.grecaptchaInvisibleKey, o.email = null, o.invalidEmail = !1, o.successNotification = !1, o.loading = !1, t.submitNewsletters = function() {
                        t.grecaptcha.reset(), a.subscribeForm.email.$invalid ? o.invalidEmail = !0 : (o.invalidEmail = !1, o.loading = !0, i.getLinkForSubscription(o.email).then(function() {
                            o.successNotification = !0
                        }, function() {
                            r.error("Something went wrong. Please try again")
                        }).finally(function() {
                            o.loading = !1
                        }))
                    }
                }],
                controllerAs: "$ctrl",
                template: a("c2xY")
            }
        }
    },
    "7F6x": function(e, t) {
        e.exports = '<ul class=bc-line-width-selector> <li data-ng-repeat="option in options track by $index" data-ng-style="{\'border-bottom-width\': option.width}" data-ng-class="{\'active\': option.width === lineWidthModel}" data-ng-click=setLineWidth(option.width)> [[ ::option.label ]] </li> </ul>'
    },
    "7HUG": function(e, t) {
        e.exports = '<div class="bc-datatable-toolbar bc-options-toolbar" data-ng-show=daysToExpiration> <div class=bc-options-toolbar__second-row> <div> <strong>[[ daysToExpiration ]] Day<span data-ng-show="daysToExpiration != 1">s</span></strong> to expiration on <strong>[[ expirationDate ]]</strong> </div> </div> </div>'
    },
    "7I5B": function(e, t, a) {
        "use strict";

        function i(e) {
            function t(e, t, a) {
                var i = {};
                return Object.keys(e).forEach(function(r) {
                    "raw" !== r && r !== a && (i[r + t] = e[r])
                }), i
            }

            function a(a, i) {
                var r = {};
                return e.merge(r, t(a, "_left", i)), r[i] = a[i], e.merge(r, t(a, "_right", i)), r
            }
            return {
                processData: function(i, r) {
                    var o = [{
                        count: i.count,
                        data: [],
                        meta: {
                            field: {
                                description: {},
                                shortName: {}
                            }
                        }
                    }];
                    return Object.keys(i.data).forEach(function(a) {
                        if (i.data[a].length < 2 && i.data[a][0] && !i.data[a][0].optionType) console.log("Not Enough data to create merged row (grouped array must have at least 2 elements): ", i.data[a]);
                        else {
                            var n = {},
                                s = i.data[a][0][r],
                                l = i.data[a][0].raw[r];
                            if (1 === i.data[a].length) {
                                var c = {};
                                switch (Object.keys(i.data[a][0]).forEach(function(e) {
                                    c[e] = "raw" === e ? {} : ""
                                }), i.data[a][0].optionType) {
                                    case "Call":
                                        i.data[a].push(c);
                                        break;
                                    case "Put":
                                        i.data[a].unshift(c);
                                        break;
                                    default:
                                        i.data[a].push(c)
                                }
                            }
                            e.merge(n, t(i.data[a][0], "_left", r)), n[r] = s, e.merge(n, t(i.data[a][1], "_right", r)), i.data[a][0].raw && i.data[a][1].raw && (n.raw = {}, e.merge(n.raw, t(i.data[a][0].raw, "_left", r)), n.raw[r] = l, e.merge(n.raw, t(i.data[a][1].raw, "_right", r))), o[0].data.push(n)
                        }
                    }), o[0].meta.field.description = a(i.meta.field.description, r), o[0].meta.field.shortName = a(i.meta.field.shortName, r), o
                }
            }
        }
        i.$inject = ["_"], e.exports = i
    },
    "7MCi": function(e, t) {
        e.exports = {}
    },
    "7Pdw": function(e, t) {
        e.exports = '<div class=bc-form> <div class="template-form-container borders clearfix"> <div class="template-form-block edit"> <form class=bc-form name=templateForm novalidate> <div class=form-items> <div class="form-item name"> <label>Name:</label> <div class=pencil-icon-wrapper> <input type=text name=templateName data-ng-model=templateModel.name data-unique-name=existingTemplates data-ng-maxlength=30 placeholder="Enter a name..." required> <i class=bc-glyph-pencil></i> </div> </div> <div class=form-item-errors> <span class=ng-hide data-ng-show=templateForm.templateName.$error.uniqueName> A Template already exists with that name. Please enter a new name. </span> <span class=ng-hide data-ng-show=templateForm.templateName.$error.maxlength> Template name cannot be longer than 30 characters. </span> </div> <div class="form-item description"> <label>Description:</label> <input type=text name=templateDescription data-ng-model=templateModel.description data-ng-maxlength=80 placeholder=(Optional)> </div> <div class=form-item-errors> <span class=ng-hide data-ng-show=templateForm.templateDescription.$error.maxlength> Template description cannot be longer than 80 characters. </span> </div> </div> <div class=form-buttons> <input type=button class="bc-button save grey" data-ng-click=cancel() value=Cancel> <input type=submit class="bc-button save light-blue" data-ng-click=saveTemplate(templateForm) data-ng-disabled=templateForm.$invalid value=Save> </div> </form> </div> </div> <div class=template-settings-container> <form novalidate name=settingsForm class=bc-form> <div class=bc-technical-chart> <div class=chart-form> <div class=technical-chart-basic-settings> <div class="chart-form-section border-bottom clearfix"> <label class=section-label>Display:</label> <div class=chart-form-subsection> <div class="bc-dropdown styled bc-interactive-chart-template__select-bar-type"> <select name=templateBarType data-ng-model=selectedBarType.model data-ng-options="type.value for type in barTypes" data-ng-change=changeBarType(selectedBarType)> </select> </div> <bc-color-picker data-ng-if=templateModel.template.settings.barType.colors[1] data-color-model=templateModel.template.settings.barType.colors[1]></bc-color-picker> <bc-color-picker data-ng-if=templateModel.template.settings.barType.colors[0] data-use-rgba=useRgba data-color-model=templateModel.template.settings.barType.colors[0]></bc-color-picker> </div> <div class=chart-form-subsection> <bc-checkbox data-cb-model=templateModel.template.settings.tooltip data-cb-id="\'interactive-chart-template__checkbox-price-box\'" data-cb-label="\'Floating Price Box\'"></bc-checkbox> </div> <div class=form-mobile-row> <bc-checkbox data-cb-model=templateModel.template.settings.batsData data-cb-id="\'interactive-chart-template__checkbox-bats-data\'" data-cb-label="\'Use Real-time Cboe BZX data when available (U.S. equities only)\'"></bc-checkbox> </div> <div class="group-labeled group-display-size bc-interactive-chart-template__select-chart-size"> <label for=bc-technical-chart__select-chart-size>Chart Size:</label> <div id=bc-technical-chart__select-chart-size class="bc-dropdown styled"> <select name=templateChartSize data-ng-model=templateModel.template.settings.dimensions.chartHeight data-ng-options="size.value as size.label for size in chartSizes"> </select> </div> </div> <div class=chart-form-section__new-row> <div class="modal-settings-row row-scale-type"> <div class="label section-label">Navigator:</div> <div class=input-radio> <input type=radio id=interactive-chart__radio-navigator-show data-ng-model=templateModel.template.settings.navigator data-ng-value=true> <label for=interactive-chart__radio-navigator-show> <span></span> Show </label> </div> <div class=input-radio> <input type=radio id=interactive-chart__radio-navigator-hide data-ng-model=templateModel.template.settings.navigator data-ng-value=false> <label for=interactive-chart__radio-navigator-hide> <span></span> Hide </label> </div> </div> </div> </div> <div class="chart-form-section border-bottom clearfix"> <div> <label class=section-label>Scale:</label> <div class=chart-form-subsection> <div class=input-radio> <input type=radio name=templateLinearScale id=interactive-chart-template__radio-linear-scale data-ng-change=changeScaleType(templateModel.template.settings.scaleType) data-ng-model=templateModel.template.settings.scaleType value=Linear> <label for=interactive-chart-template__radio-linear-scale> <span></span> Linear Scale </label> </div> <div class=input-radio> <input type=radio name=templateLinearScale id=interactive-chart-template__radio-logarithmic-scale data-ng-change=changeScaleType(templateModel.template.settings.scaleType) data-ng-model=templateModel.template.settings.scaleType value=Logarithmic> <label for=interactive-chart-template__radio-logarithmic-scale> <span></span> Logarithmic Scale </label> </div> </div> <div class=chart-form-subsection> <div> <div class=input-radio> <input type=radio name=templatePriceScale id=interactive-chart-template__radio-price-scale data-ng-change=changeScaleValue(templateModel.template.settings.scaleValue) data-ng-model=templateModel.template.settings.scaleValue value=price> <label for=interactive-chart-template__radio-price-scale> <span></span> Price Scale </label> </div> <div class=input-radio> <input type=radio name=templatePriceScale id=interactive-chart-template__radio-change-scale data-ng-change=changeScaleValue(templateModel.template.settings.scaleValue) data-ng-model=templateModel.template.settings.scaleValue value=percent> <label for=interactive-chart-template__radio-change-scale> <span></span> % Change Scale </label> </div> </div> </div> </div> <div class=margin-top-10> <div class=chart-margin-selector> <div class=label>Right Margin</div> <div class=bc-dropdown-suffix-label> <div class=bc-dropdown__suffix-label>Bars</div> <input type=number class=bc-interactive-chart-template__input-margin-bars data-ng-model=templateModel.template.settings.marginBars max=25 min=0 required=required> </div> </div> <bc-checkbox data-cb-model=templateModel.template.settings.minorGridLines data-cb-id="\'interactive-chart-template__checkbox-minor-grids\'" data-cb-label="\'Minor Grids\'"></bc-checkbox> <bc-checkbox data-cb-model=templateModel.template.settings.preventLabelOverlap data-cb-id="\'interactive-chart-template__checkbox-prevent-label-overlap\'" data-cb-label="\'Overlapping Price Labels\'"></bc-checkbox> </div> </div> <div class="chart-form-section border-bottom"> <div> <label class=section-label>Adjustments:</label> <div class="chart-form-subsection subsection-checkboxes"> <bc-checkbox data-cb-model=templateModel.template.settings.events.dividends data-cb-id="\'interactive-chart-template__checkbox-dividends\'" data-cb-label="\'Dividends\'"></bc-checkbox> <bc-checkbox data-cb-model=templateModel.template.settings.events.earnings data-cb-id="\'interactive-chart-template__checkbox-earnings\'" data-cb-label="\'Earnings\'"></bc-checkbox> <bc-checkbox data-cb-model=templateModel.template.settings.events.splits data-cb-id="\'interactive-chart-template__checkbox-splits\'" data-cb-label="\'Splits\'"></bc-checkbox> </div> <div class=chart-form-subsection> <bc-checkbox data-cb-model=templateModel.template.settings.dividendsAdjust data-cb-id="\'interactive-chart-template__checkbox-dividends-back-adjust\'" data-cb-label="\'Dividends Back Adjust\'"></bc-checkbox> </div> <div class=chart-form-subsection> <bc-checkbox data-cb-model=templateModel.template.settings.extendedHours data-cb-id="\'interactive-chart-template__checkbox-extended-hours\'" data-cb-label="\'Extended Hours\'"></bc-checkbox> </div> </div> <div class=margin-top-10> <div class=bc-interactive-chart-template__help-text>Determine how Futures Contracts roll on Nearby and Continuous charts:</div> <div class="chart-form-subsection bc-interactive-chart-template__subsection-contract-roll"> <label for=bc-interactive-chart-template__select-contract-roll>Contract Roll:</label> <div class="group-labeled bc-interactive-chart-template__group-contract-roll"> <div class="bc-dropdown styled bc-interactive-chart-template__select-contract-roll"> <select id=bc-interactive-chart-template__select-contract-roll name=templateChartContractRoll data-ng-model=templateModel.template.settings.contractRoll> <option value=combined>Volume / Open Interest</option> <option value=expiration>Days to Expiration</option> </select> </div> <div class="bc-dropdown styled bc-interactive-chart-template__select-days-to-expiration" data-ng-hide="templateModel.template.settings.contractRoll !== \'expiration\'"> <select id=bc-interactive-chart-template__select-days-to-expiration name=templateChartDaysToExpiration data-ng-model=templateModel.template.settings.daysToExpiration data-ng-options="day.value as day.label for day in expirationDays" data-ng-disabled="templateModel.template.settings.contractRoll !== \'expiration\'"> </select> </div> <input class=bc-interactive-chart-template__input-days-to-expiration type=text data-ng-show="templateModel.template.settings.contractRoll !== \'expiration\'" disabled=disabled> </div> </div> <div class=chart-form-subsection> <bc-checkbox data-cb-model=templateModel.template.settings.backAdjust data-cb-id="\'interactive-chart-template__checkbox-futures-back-adjust\'" data-cb-label="\'Back Adjust History\'"></bc-checkbox> </div> <div class=chart-form-subsection> <div class=input-checkbox> <input id=interactive-chart-template__checkbox-futures-aggregation-spec data-ng-model=templateModel.template.aggregation.spec data-ng-true-value="\'Continue\'" data-ng-false-value="\'None\'" data-ng-disabled="templateModel.template.aggregation.spec === \'Nearest\'" type=checkbox> <label for=interactive-chart-template__checkbox-futures-aggregation-spec> <span class=bc-glyph-check></span> Build "Continuation" Chart </label> </div> </div> </div> </div> <div class="chart-form-section border-bottom"> <div class=third-group> <label class=section-label>Period:</label> <div class=periods-wrapper> <div class="row collapse"> <div class="column small-4 medium-5"> <div class="bc-dropdown styled"> <select name=templateChartAggregation data-ng-model=selectedAggregation.model data-ng-change=changeAggregation(selectedAggregation.model) data-ng-options="item.label disable when templateModel.template.aggregation.spec === \'Continue\' && item.spec === \'Nearest\' for item in aggregations"> </select> </div> </div> <div class="column small-4 medium-4"> <div class="bc-dropdown styled"> <select name=templateChartPeriod data-ng-model=templateModel.template.period data-ng-change=changePeriod(templateModel.template.period) data-ng-options="item.period as item.label for item in periods[selectedAggregation.model.unit]"> </select> </div> </div> <div class="column small-4 medium-3"> <div class=period-time-label>Mins.</div> <div class=input-third-period-wrapper> <input name=templateChartSize type=number data-ng-model=templateModel.template.aggregation.size class=bc-interactive-chart-template__input-aggregation-size min=1 max=480 data-ng-disabled="templateModel.template.aggregation.unit !== \'Intraday\'" data-ng-show="templateModel.template.aggregation.unit === \'Intraday\'"/> <input type=number disabled=disabled data-ng-show="templateModel.template.aggregation.unit !== \'Intraday\'" class=bc-interactive-chart-template__input-aggregation-size /> </div> </div> </div> </div> <div class=date-range-wrapper> <div class=chart-date-range> <div class=date-wrapper> <div class=bc-datepicker-item> <input type=text name=dateFrom class=bc-datepicker-control data-ng-model=templateModel.template.range.from placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-ng-disabled="templateModel.template.period !== \'CUSTOM\'"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> <span class=date-separator>-</span> <div class=date-wrapper> <div class=bc-datepicker-item> <input type=text name=dateTo class=bc-datepicker-control data-ng-model=templateModel.template.range.to placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-placement=bottom-right data-ng-disabled="templateModel.template.period !== \'CUSTOM\' || !templateModel.template.range.from"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> </div> </div> </div> </div> <div class="chart-form-section border-bottom"> <div class=study-items-block> <label class=section-label>Study:</label> <div class="bc-dropdown styled"> <select id=bc-technical-chart__select-study data-ng-change=addStudyOrFundamental() name=templateChartStudyFundamental data-ng-options="taxonomy.name group by taxonomy.group for taxonomy in chartTaxonomies" data-ng-model=selectedTaxonomy> <option value="">Select a study...</option> <option value="[[ ::item.code ]]" data-ng-repeat="item in ::studies track by $index" data-ng-bind-html=item.name></option> </select> </div> <div class=studies-items data-bc-drag-sortable data-items=templateModel.template.taxonomies.studies data-ng-show=templateModel.template.taxonomies.studies.length> <div class=study-item data-ng-repeat="study in templateModel.template.taxonomies.studies track by $index"> <div> <div class=item-delete-button-block> <i data-ng-click=removeStudy($index) class="bc-glyph-minus-circle red"></i> </div> <span data-ng-click="changeStudy(study, $index)" data-ng-bind-html=study.name class=study-text></span> </div> </div> </div> <div class=studies-items data-bc-drag-sortable data-items=templateModel.template.taxonomies.fundamentals data-ng-show=templateModel.template.taxonomies.fundamentals.length> <div class=study-item data-ng-repeat="fundamental in templateModel.template.taxonomies.fundamentals track by $index"> <div class=item-delete-button-block> <i data-ng-click=removeFundamental($index) class="bc-glyph-minus-circle red"></i> </div> <span data-ng-click="changeFundamental(fundamental, $index)" data-ng-bind-html=fundamental.name class=study-text></span> </div> </div> </div> </div> </div> </div> </div> </form> </div> </div>'
    },
    "7Qr+": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <div class=modal-header> 50% Line <i class="bc-glyph-times form-close right" data-ng-click=close()></i> </div> <form class="bc-modal-content-inner bc-form" novalidate> <div class=calc-tools-form__rows-section> <div class=calc-tools-form__fields-row> <div class="row collapse"> <div class="column small-6"> <label for=calc-tools-form__input-price1 class=calc-tools-form__input-label>Price 1:</label> <input type=text id=calc-tools-form__input-price1 class=calc-tools-form__input data-ng-show=!formData.use52WeekPrices data-ng-model=formData.price1 data-ng-keypress=unsubscribePickListener() data-ng-focus="listenForChartClick(\'price1\')"> <input type=text class=calc-tools-form__input data-ng-hide=!formData.use52WeekPrices data-ng-model=yearPrices.low disabled=disabled> </div> <div class="column small-6"> <label for=calc-tools-form__input-price2 class=calc-tools-form__input-label>Price 2:</label> <input type=text id=calc-tools-form__input-price2 class=calc-tools-form__input data-ng-show=!formData.use52WeekPrices data-ng-model=formData.price2 data-ng-keypress=unsubscribePickListener() data-ng-focus="listenForChartClick(\'price2\')"> <input type=text class=calc-tools-form__input data-ng-hide=!formData.use52WeekPrices data-ng-model=yearPrices.high disabled=disabled> </div> </div> </div> <div class=calc-tools-form__fields-row> <bc-checkbox data-cb-model=formData.use52WeekPrices data-cb-click=changeYearPricesSelection(formData.use52WeekPrices) data-cb-label="\'Use 52-Week High/Low Prices\'"></bc-checkbox> </div> <div class=calc-tools-form__fields-row> <div class=calc-tools-form__results-box> 50% line: <span class=right data-ng-show="!formData.use52WeekPrices && formData.price1 && formData.price2">[[ calculateMiddleLine() ]]</span> <span class=right data-ng-show="formData.use52WeekPrices && yearPrices">[[ calculateMiddleLine() ]]</span> </div> </div> </div> <div class=calc-tools-form__rows-section> <div class=calc-tools-form__fields-row> <span class=annotation-modal__color-selector-label>Price Lines:</span> <bc-color-picker data-color-model=formData.lines.color></bc-color-picker> <bc-line-width-selector data-line-width-model=formData.lines.width></bc-line-width-selector> </div> <div class=calc-tools-form__fields-row> <div class="bc-dropdown styled"> <select data-ng-options="line.value as line.label for line in lineTypes" data-ng-model=formData.lines.dashStyle></select> </div> </div> <div class=calc-tools-form__fields-row> <bc-checkbox data-cb-model=formData.showPrices data-cb-label="\'Show Prices\'"></bc-checkbox> </div> </div> <div class=calc-tools-form__rows-section> <div class=calc-tools-form__fields-row> <span class=annotation-modal__color-selector-label>50% Line:</span> <bc-color-picker data-color-model=formData.middleLine.color></bc-color-picker> <bc-line-width-selector data-line-width-model=formData.middleLine.width></bc-line-width-selector> </div> <div class=calc-tools-form__fields-row> <div class="bc-dropdown styled"> <select data-ng-options="line.value as line.label for line in lineTypes" data-ng-model=formData.middleLine.dashStyle></select> </div> </div> <button class="bc-button just-grey-border" data-ng-click=resetConfigToDefault()>Reset</button> </div> <div class="button-block text-center"> <a class="bc-button red" data-ng-if=annotationEditMode data-ng-click=removeAnnotation()>Delete</a> <button class="bc-button ok light-blue" data-ng-click=confirm()>[[ annotationEditMode ? \'Apply\' : \'Add\' ]]</button> </div> </form> </div>'
    },
    "7SND": function(e, t, a) {
        "use strict";
        e.exports = function() {
            this.beforeSave = function(e) {
                var t = angular.copy(e);
                return t.conditions.forEach(function(e) {
                    var t;
                    e.operator.operand = "." === (t = e.operator.operand).toString()[0] ? "string" == typeof t ? "0" + t : +t : t
                }), t
            }
        }
    },
    "7WTe": function(e, t, a) {
        "use strict";

        function i(e) {}
        i.$inject = ["$scope"], e.exports = i
    },
    "7bcZ": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                scope: {
                    title: "@",
                    description: "@",
                    redirectUrl: "=",
                    convertType: "@",
                    chartType: "@",
                    tChartData: "=",
                    loading: "=",
                    setChartPageUrl: "=",
                    dynamicTitle: "=",
                    symbol: "="
                },
                require: "^bcSocialChartShare",
                link: function(t, a, i, r) {
                    function o() {
                        var a, i = Object.create(e.gplus.win);
                        t.loading = !0, a = t.dynamicTitle || t.title, r.getImageChart(a, t.description, t.chartType, t.convertType, i, t.tChartData ? t.tChartData.image : null).then(function(e) {
                            r.getRedirectUrl(t.redirectUrl, t.chartType, e, t.setChartPageUrl, t.symbol).then(function(o) {
                                var n = r.getShareLinkPartialEncoded({
                                        title: a,
                                        description: t.description,
                                        image: e,
                                        redirectUrl: o
                                    }),
                                    s = {
                                        winUrl: i.url,
                                        url: n
                                    };
                                i.url = r.getLink(s), window.dataLayer.push({
                                    event: "socialInteraction",
                                    socialNetwork: "Google+",
                                    socialAction: "Share",
                                    socialTarget: o
                                }), r.share(i), t.loading = !1
                            })
                        })
                    }
                    a.on("click", o), t.$on("$destroy", function() {
                        a.off("click", o)
                    })
                }
            }
        }
        i.$inject = ["bcShareConfig"], e.exports = i
    },
    "7bz8": function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };
        e.exports = function() {
            this.types = {
                STRING: "string",
                NUMBER: "number",
                NULL: "NULL",
                ARRAY: "array",
                OBJECT: "object"
            }, this.checkType = function(e, t, a) {
                if (a = a || function(e, t) {
                        return "value " + e + " has wrong type. It must be " + t + " but it is " + (void 0 === e ? "undefined" : r(e))
                    }(e, t), "NULL" === t) {
                    if (! function(e) {
                            return null !== e
                        }(e)) throw new InvalidTypeError(a);
                    return !0
                }
                if ("array" === t) {
                    if (! function(e) {
                            return Array.isArray(e)
                        }(e)) throw new InvalidTypeError(a);
                    return !0
                }
                if ((void 0 === e ? "undefined" : r(e)) !== t) throw new InvalidTypeError(a)
            }
        }
    },
    "7dna": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class=modal-header> Compare Symbols <i class="bc-glyph-times form-close right" data-ng-click=modalDismiss();></i> </div> <div class="bc-dropdown styled compare-symbol-correlated"> <select data-ng-model=additionalConfig.symbol data-ng-change=applySelectedCorrelatedSymbol() data-ng-options="symbolData.symbol as symbolData.name for symbolData in correlatedSymbols"> <option value="">Add an index to compare</option> </select> </div> <div class=compare-symbol-correlated-error data-ng-show=additionalConfig.error> Only 5 symbols can be compared at a time. </div> <form class="bc-form compare-symbol-form" data-ng-submit=compare()> <div class="compare-symbol__fieldset-row row-header"> <div class=compare-symbol__field-scale> Left Scale </div> <div class=compare-symbol__field-curve> Active Symbols </div> </div> <div class=compare-symbol__fieldset-row data-ng-repeat="comparisonSymbol in settingsCompareSymbols"> <div class=compare-symbol__field-scale> <div class=checkbox-wrapper> <input type=checkbox id="interactive-chart-modal-comparison-cb-[[ $index ]]" data-ng-model=comparisonSymbol.leftScale data-ng-disabled="additionalConfig.forceLine || !comparisonSymbol.symbol"> </div> </div> <div class=compare-symbol__field-curve> <bc-color-picker data-color-model=comparisonSymbol.color></bc-color-picker> <div class=clear-button-wrapper> <input type=text placeholder=Symbol data-ng-class="{\'error\': invalidSymbols && invalidSymbols.indexOf(comparisonSymbol.symbol) > -1}" data-ng-model=comparisonSymbol.symbol data-ng-change=comparisonSymbolChanged(comparisonSymbol) data-barchart-clear-input/> </div> <div class="text-center text-red" data-ng-show="invalidSymbols && invalidSymbols.indexOf(comparisonSymbol.symbol.toUpperCase()) > -1"> Invalid symbol </div> </div> </div> <div class=compare-symbol__checkbox-force-line> <div class=checkbox-wrapper> <input type=checkbox id=interactive-chart-modal-comparison-cb-force-line data-ng-model=additionalConfig.forceLine data-ng-change=clearLeftScaleSettings()> <label for=interactive-chart-modal-comparison-cb-force-line>Use %Chg Scale</label> </div> </div> <div class=text-center> <button type=submit class="bc-button ok light-blue">Apply</button> </div> </form> </div>'
    },
    "7g+z": function(e, t, a) {
        "use strict";
        e.exports = ["interactiveChartModals", "$window", "Notification", "$rootScope", "$location", "$httpParamSerializer", function(e, t, i, r, o, n) {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    title: "@"
                },
                controller: [function() {
                    var a = this.title;
                    r.$on("pageTitleChanged", function(e, t) {
                        a = t
                    }), this.openEmailModal = function() {
                        var r = 'Page Help for "' + a + '"',
                            s = 'Please click the link to see Page Help for "' + a + '"',
                            l = o.search();
                        l.help = !0;
                        var c = t.location.origin + t.location.pathname + "?" + n(l);
                        e.openShareChartThoughMailModal({
                            imageUrl: null,
                            link: c,
                            subject: r,
                            systemBody: s
                        }, "Email Help Topic", t.config.routes["share.help"], {
                            hideLink: !0
                        }).then(function(e) {
                            "OK" === e && i.success("Email has been sent.")
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("B/pI")
            }
        }]
    },
    "7gi1": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l) {
            n = n || {};
            var c = angular.copy(r.traits),
                d = null,
                u = 2,
                p = a.getSymbolData().lastPrice,
                m = -1 !== p.toString().indexOf("-");
            try {
                u = p.substring(-1 !== p.indexOf(".") ? p.indexOf(".") + 1 : p.length).length
            } catch (e) {
                console.error("interactive-chart-modal-tool-profit-loss-ctrl.js: [Can not get lastPrice of symbol]"), u = 2
            }
            try {
                d = l.getInlineDataForSymbol(a.getSymbolData().symbol).instrument.unitCode
            } catch (e) {
                console.error("interactive-chart-modal-tool-profit-loss-ctrl.js: [Can not get baseCode of symbol]"), console.warn(e.message)
            }
            var h = a.getSymbolData().raw.pointValue || 1;
            "forex" === window.config.symbols.mapping[a.getSymbolData().symbolType] && (h = Math.pow(10, Barchart.Utilities.convert.unitCodeToBaseCode(d))), e.lineTypes = r.lineTypes, e.numOfDecimal = u, e.formData = {
                entryPrice: null,
                exitPrice: null,
                contracts: 1,
                direction: "Long",
                showPrices: n.drawLines || !1,
                result: null,
                line: angular.copy(n.traits ? y(n.traits.line) : y(c.line))
            }, e.annotationEditMode = !!n.uid;
            var g = {
                entryPrice: {},
                exitPrice: {}
            };
            n.uid && setTimeout(function() {
                ! function() {
                    e.formData = {
                        entryPrice: n.extras.prices[0],
                        exitPrice: n.extras.prices[1],
                        contracts: n.extras.numContracts,
                        direction: n.extras.pos,
                        showPrices: n.extras.drawLines,
                        result: null,
                        line: angular.copy(n.traits.line)
                    }, 4 === n.points.length ? (g.entryPrice.time = n.points[2].time, g.exitPrice.time = n.points[3].time) : console.error("interactive-chart-modal-tool-profit-loss-ctrl.js: [Annotation data has been changed.]");
                    e.calculateResult()
                }()
            }, 0);
            var f = null,
                b = Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_ANNPOINTPICKED, function(t, a) {
                    var i, r = a.point.price;
                    m && (r = Barchart.Utilities.priceFormatter("-").format(r, d)), f && (g[f] = a.point), i = m ? r : v(r, u), f && (e.formData[f] = i, e.calculateResult(), "entryPrice" === f ? (f = null, angular.element("#calc-tools-form__input-exit-price").focus()) : (angular.element("#calc-tools-form__input-exit-price").blur(), f = null))
                });

            function v(e, t) {
                return +(Math.round(e + "e+" + t) + "e-" + t)
            }

            function y(e) {
                var t = angular.copy(e);
                return t.color || (t.color = "#000"), t.dashStyle || (t.dashStyle = "Solid"), t.width || (t.width = 1), t
            }
            e.listenEntryPrice = function() {
                f = "entryPrice", a.useTool("PickPoint")
            }, e.listenExitPrice = function() {
                f = "exitPrice", a.useTool("PickPoint")
            }, e.unsubscribePickListener = function() {
                a.useTool(null)
            }, e.calculateResult = function() {
                if (e.formData.entryPrice && e.formData.exitPrice && e.formData.contracts >= 0) {
                    var t = e.formData.entryPrice,
                        a = e.formData.exitPrice;
                    m && (t = s.string2Decimal(t, d)), m && (a = s.string2Decimal(a, d));
                    var i = t - a;
                    e.formData.result = ("Short" === e.formData.direction ? i : -i) * e.formData.contracts * h
                } else e.formData.result = null
            }, e.close = function() {
                Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(b), o.dismiss()
            }, e.removeAnnotation = function() {
                a.deleteTool({
                    uid: n.uid
                }), e.close()
            }, e.confirm = function() {
                var r = {
                    line: angular.copy(e.formData.line)
                };
                u > 0 && (e.formData.entryPrice = v(e.formData.entryPrice, u), e.formData.exitPrice = v(e.formData.exitPrice, u)), g.entryPrice.price || (g.entryPrice.price = e.formData.entryPrice, -1 !== e.formData.entryPrice.toString().indexOf("-") ? g.entryPrice.price = s.string2Decimal(e.formData.entryPrice, d) : 0 === u && (g.entryPrice.price = parseInt(e.formData.entryPrice))), g.entryPrice.time || (g.entryPrice.time = +new Date), g.exitPrice.price || (g.exitPrice.price = e.formData.exitPrice, -1 !== e.formData.exitPrice.toString().indexOf("-") ? g.exitPrice.price = s.string2Decimal(e.formData.exitPrice, d) : 0 === u && (g.exitPrice.price = parseInt(e.formData.exitPrice))), g.exitPrice.time || (g.exitPrice.time = +new Date);
                var o = {
                    prices: [e.formData.entryPrice, e.formData.exitPrice],
                    points: [g.entryPrice, g.exitPrice],
                    drawLines: e.formData.showPrices,
                    textLines: ["Entry price: " + e.formData.entryPrice, "Exit price: " + e.formData.exitPrice, "# Contracts: " + e.formData.contracts, e.formData.direction, (e.formData.result >= 0 ? "Profit: " : "Loss: ") + "$" + v(e.formData.result, 2).toFixed(2)],
                    kind: "ProfitLoss",
                    numContracts: e.formData.contracts,
                    pos: e.formData.direction
                };
                if (t.isLoggedIn() && i.saveAnnotationConfig("CalculateProfitLoss", JSON.stringify(r)), n.uid) {
                    var l = [];
                    4 === n.points.length ? l = [n.points[0], n.points[1], g.entryPrice, g.exitPrice] : (console.error("Something went wrong with profit/loss annotation points. Make fallback to origin values", n), l = n.points), a.updateTool({
                        uid: n.uid,
                        traits: r,
                        extras: o,
                        points: l
                    })
                } else a.useTool("ComputedText", r, o);
                i.saveAnnotationConfig("CalculateProfitLoss", JSON.stringify({
                    drawLines: e.formData.showPrices,
                    traits: r
                })), e.close()
            }
        }
        i.$inject = ["$scope", "authService", "interactiveChartApi", "interactiveChartUserPreferencesApi", "interactiveChartAnnotationsConfig", "$modalInstance", "annotationData", "utils", "bcInlineData"], e.exports = i
    },
    "7nuQ": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c) {
            var d = this;
            d.transactionForm = {}, d.isNote = c, d.showAdjustment = !1, d.cash = i.raw ? i.raw.cash : i.cash, d.close = function() {
                o.dismiss()
            }, d.cash || (d.cash = 0), d.deleteTransaction = function() {
                var e = angular.element(document.getElementsByClassName("js-delete-confirmation")[0]);
                e.removeClass("in"), l.deletePortfolioConfirm().result.then(function() {
                    a.deleteTransaction(i.id, r.id).then(function() {
                        t.$broadcast("portfolioTransactionUpdated"), o.dismiss()
                    })
                }, function() {
                    e.addClass("in")
                })
            }, d.findSymbol = function() {
                d.symbolSearchErrorMessage = !1, d.transactionSymbolSearch && a.getSymbol(d.transactionSymbolSearch).then(function(e) {
                    e && e.data && e.data[0] ? (d.symbol = e.data[0], d.showAdjustment = -1 === [2, 10, 12, 13, 14].indexOf(d.symbol.symbolType)) : (d.symbol = null, d.symbolSearchErrorMessage = !0)
                }, function() {
                    d.symbol = null, d.symbolSearchErrorMessage = !0
                })
            }, d.addTransaction = function() {
                return d.errors = {}, !d.loading && (d.loading = !0, d.transactionForm.$invalid ? (Object.keys(d.transactionForm.$error).forEach(function(e) {
                    d.errors[e] = "date" !== e || "Please make sure the date ranged entered uses the format MM/DD/YYYY."
                }), d.loading = !1, !1) : (d.transactionForm.symbol = d.symbol.symbol, void(d.edit ? a.updateTransaction(i.id, r.id, d.transactionForm).then(function(e) {
                    e && e.data && e.data[0] && (t.$broadcast("portfolioTransactionUpdated"), o.close())
                }, function(e) {
                    return u(e), d.loading = !1, !1
                }) : a.createTransaction(i.id, d.transactionForm).then(function(e) {
                    e && e.data && e.data[0] && (d.addedTransactionFromDatatable && r.portfolioCaption ? s.success(r.symbol + ' has been added to: <a target="_self" href="' + window.config.routes["my.portfolio"] + "?portfolio=" + i.id + '">' + r.portfolioCaption + "</a>.") : s.success(d.symbol.symbol + " has been added to the bottom of the portfolio."), t.$broadcast("portfolioTransactionUpdated"), o.close())
                }, function(e) {
                    return u(e), d.loading = !1, !1
                }))))
            }, r && (d.transactionSymbolSearch = r.symbol, d.findSymbol(), r.id ? (d.edit = !0, a.getTransaction(i.id, r.id).then(function(e) {
                d.transactionData = e
            })) : d.addedTransactionFromDatatable = !0), d.moveToAnotherPortfolio = function() {
                var e = angular.element(document.getElementsByClassName("js-delete-confirmation")[0]);
                e.removeClass("in"), l.showPortfolioListForTransaction(i.id, r.id).result.then(function() {
                    t.$broadcast("portfolioTransactionUpdated"), o.dismiss()
                }, function() {
                    e.addClass("in")
                })
            };
            var u = function(e) {
                console.warn("reason", e), e.error && e.error.message ? angular.isObject(e.error.message) ? (Object.keys(e.error.message).forEach(function(t) {
                    e.error.message[t] && Array.isArray(e.error.message[t]) && (e.error.message[t] = e.error.message[t].toString())
                }), d.errors.server = Object.values(e.error.message).join(",")) : d.errors.server = e.error.message : d.errors.bad_request = !0
            };
            e.$watch(function() {
                return d.transactionSymbolSearch
            }, function(e) {
                d.symbol = null
            }), n.scrollTo(0, 0)
        }
        i.$inject = ["$scope", "$rootScope", "portfolioApiFactory", "portfolio", "transactionData", "$modalInstance", "$window", "Notification", "portfolioModalFactory", "isNote"], e.exports = i
    },
    "7p8Q": function(e, t) {
        e.exports = '<div class=bc-portfolio-total-row data-ng-show="portfolioCashValue || portfolioTotals.portfolio_cash_value || portfolioTotals.stock_cost"> <div class=row> <div class="column small-12 large-12"> <div class="row print-50"> <div class="column small-12 medium-6"> <div class="total-item clearfix"> <div class=total-item-label>[[ labels.CASH_VALUE ]]:</div>&nbsp; <span class=total-item-value>[[ portfolioCashValue || portfolioTotals.portfolio_cash_value ]]</span> </div> <div class="total-item clearfix"> <div class=total-item-label>[[ labels.ENTRY_VALUE ]]:</div>&nbsp; <span class=total-item-value>[[ portfolioTotals.stock_cost ]]</span> </div> <div class="total-item clearfix"> <div class=total-item-label>[[ labels.ACTIVE_PL ]]:</div>&nbsp; <span class=total-item-value data-ng-class="{\'up\': portfolioTotals.raw.active_return > 0, \'down\': portfolioTotals.raw.active_return < 0, \'unch\': portfolioTotals.raw.active_return === 0,}"> [[ portfolioTotals.active_return ]] ([[ portfolioTotals.active_return_percent ]]) </span> </div> <div class="total-item clearfix"> <div class=total-item-label>[[ labels.CLOSED_PL ]]:</div>&nbsp; <span class=total-item-value data-ng-class="{\'up\': portfolioTotals.raw.closed_return > 0, \'down\': portfolioTotals.raw.closed_return < 0, \'unch\': portfolioTotals.raw.closed_return === 0,}"> [[ portfolioTotals.closed_return ]] ([[ portfolioTotals.closed_return_percent ]]) </span> </div> </div> <div class="column small-12 medium-6"> <div class="total-item clearfix"> <div class=total-item-label>[[ labels.TOTAL_FEES ]]:</div>&nbsp; <span class=total-item-value>[[ portfolioTotals.commission ]]</span> </div> <div class="total-item clearfix"> <div class=total-item-label>[[ labels.CURRENT_VALUE ]]:</div>&nbsp; <span class=total-item-value>[[ portfolioTotals.stock_value ]]</span> </div> <div class="total-item clearfix"> <div class=total-item-label>[[ labels.TODAYS_RETURN ]]:</div>&nbsp; <span class=total-item-value data-ng-class="{\'up\': portfolioTotals.raw.daily_net_return > 0, \'down\': portfolioTotals.raw.daily_net_return < 0, \'unch\': portfolioTotals.raw.daily_net_return === 0,}"> [[ portfolioTotals.daily_net_return ]] ([[ portfolioTotals.daily_net_return_percent ]]) </span> </div> <div class="total-item clearfix"> <div class=total-item-label>[[ labels.TOTAL_PL ]]:</div>&nbsp; <span class=total-item-value data-ng-class="{\'up\': portfolioTotals.raw.net_return > 0, \'down\': portfolioTotals.raw.net_return < 0, \'unch\': portfolioTotals.raw.net_return === 0,}"> [[ portfolioTotals.net_return ]] ([[ portfolioTotals.net_return_percent ]]) </span> </div> </div> </div> </div> </div> </div>'
    },
    "7sKt": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l) {
            var c = this;
            c.disable = !1;
            var d = s.getUserData() || {},
                u = d.preferences ? d.preferences.charts_style : "interactive";
            c.cancel = function() {
                i.dismiss()
            }, c.ok = function() {
                c.disable = !0, a.removeChart(e.id).then(function() {
                    var a = o.htmlEntities(e.name);
                    n.removeChart(e.id, t.id, u);
                    var s = n.getCharts(t.id, u);
                    r.success("Chart " + a + " has been removed."), i.close(), 0 === s.length ? (l.$broadcast("dashboardForceSelectTab", {
                        tab: "markets"
                    }), l.$broadcast("myChartsEmpty")) : l.$broadcast("chartTabHasBeenRemoved", {
                        chart: e
                    })
                }).catch(function() {
                    r.success("Something went wrong. Please try again."), c.disable = !1
                })
            }
        }
        i.$inject = ["chart", "group", "myChartsApiService", "$modalInstance", "Notification", "utils", "userMyChartStorageService", "authService", "$rootScope"], e.exports = i
    },
    "7sYl": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    tableData: "@"
                },
                link: function(a, i) {
                    a.table = JSON.parse(a.tableData), a.isPremier = o.isLoggedIn() && o.getUserData().is_premier, a.toggleDescription = function(o, n) {
                        var s = r.findIndex(a.table.rows, {
                            visible: !0
                        }); - 1 !== s && s !== n && function(t) {
                            var r = angular.element(i.find("tbody")[t]).children()[1],
                                o = angular.element(r).children().children()[0];
                            e(o, "slideUp", {
                                duration: 200,
                                complete: function() {
                                    a.$evalAsync(function() {
                                        a.table.rows[t].visible = !1
                                    })
                                }
                            })
                        }(s);
                        var l = angular.element(i.find("tbody")[n]).children()[1],
                            c = angular.element(l).children().children()[0];
                        o.visible ? e(c, "slideUp", {
                            duration: 200,
                            complete: function() {
                                a.$evalAsync(function() {
                                    o.visible = !1
                                })
                            }
                        }) : (o.visible = !0, t(function() {
                            e(c, "slideDown", {
                                duration: 200
                            })
                        }, 0))
                    }
                },
                template: a("MsKD")
            }
        }
        i.$inject = ["Velocity", "$timeout", "$anchorScroll", "_", "authService"], e.exports = i
    },
    "7wS6": function(e, t, a) {
        "use strict";

        function i(e) {
            this.openWarningModal = function() {
                return e.open({
                    template: a("nchd"),
                    controller: "myChartPreferenceWarningModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "my-chart-warning-modal"
                }).result
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    "8/3x": function(e, t, a) {
        "use strict";
        e.exports = {
            types: [{
                key: "OHLC",
                value: "OHLC Bars",
                defaultColors: ["#000000"]
            }, {
                key: "OHLC",
                attr: "ChangeBased",
                value: "Colored OHLC Bars",
                defaultColors: ["#EF4226", "#00B04B"]
            }, {
                key: "HLC",
                value: "HLC Bars",
                defaultColors: ["#EF4226", "#00B04B"]
            }, {
                key: "HollowCandles",
                value: "Candlestick Hollow",
                defaultColors: ["#EF4226", "#000000"]
            }, {
                key: "Candlestick",
                value: "Candlestick Open-to-Close",
                defaultColors: ["#EF4226", "#00B04B"]
            }, {
                key: "Candlestick",
                attr: "ChangeBased",
                value: "Candlestick Close-to-Close",
                defaultColors: ["#EF4226", "#00B04B"]
            }, {
                key: "HeikinAshi",
                value: "Heikin-Ashi",
                defaultColors: ["#EF4226", "#00B04B"]
            }, {
                key: "ElderImpulseSystem",
                value: "Elder-Impulse-System",
                defaultColors: ["#EF4226", "#00B04B", "#0040ff"]
            }, {
                key: "Line",
                value: "Line Chart",
                defaultColors: ["#000000"]
            }, {
                key: "Area",
                value: "Area Chart",
                defaultColors: ["#4f97c1"]
            }]
        }
    },
    "8/DM": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    selectedChart: "="
                },
                controller: ["$rootScope", "myChartsApiService", "dashboardSettingsService", "_", "authService", "userMyChartStorageService", "interactiveChartValidation", "Notification", "userChartTabService", "$scope", "dashboardSymbolStorage", function(e, t, a, i, r, o, n, s, l, c, d) {
                    var u = this,
                        p = r.getUserData() || {},
                        m = p.preferences ? p.preferences.charts_style : "interactive",
                        h = r.getUserPreferences(),
                        g = h.interactive_charts_saving_mechanism,
                        f = !1;

                    function b(a) {
                        n.validateSymbol(a.symbol).then(function(i) {
                            var o = i.data[0];
                            t.getChart(a.id).then(function(t) {
                                console.log("[My Charts Table]: Load chart", a), l.setChartTab(t.data), e.$broadcast("setMyCharts", {
                                    charts: u.myCharts,
                                    currentChart: angular.copy(a),
                                    currentSymbol: angular.copy(d.getSymbolData()),
                                    chartType: m
                                }), h.isTab = !0, r.setUserPreferences(h), "technical" === m && e.$broadcast("dashboardApplyTechnicalState", JSON.parse(t.data.state)), d.getSymbolData() && a.symbol === d.getSymbolData().symbol ? (e.$broadcast("dashboardHeaderSymbolChanged", o), e.$broadcast("dashboardTabChanged", o)) : d.getSymbolData() && a.symbol !== d.getSymbolData().symbol && "technical" === m ? e.$broadcast("dashboardHeaderSymbolChanged", o) : (e.$broadcast("chartCurrentSymbolChanged", o.symbol), e.$broadcast("dashboardCurrentSymbolChanged", o))
                            })
                        }).catch(function() {
                            s.error("Invalid symbol. Please try again")
                        })
                    }
                    u.currentSymbol = !1, u.currentMyChart = {}, u.myCharts = [], u.loading = !0, u.currentIndex = 0, u.currentGroup = null, u.closePanel = function() {
                        e.$broadcast("closeRightPanel")
                    }, u.groupsLoaded = function(r) {
                        var n = a.getParameter("chartGroupId");
                        if (n && null === u.selectedChart ? (u.currentGroup = i.find(r, function(e) {
                                return e.id === n
                            }), r.length > 0 && !u.currentGroup && (u.currentGroup = r[0])) : null !== u.selectedChart ? u.currentGroup = i.find(r, function(e) {
                                return e.id === u.selectedChart.group_id
                            }) : u.loading = !1, r.length > 0 && !u.currentGroup && (u.currentGroup = r[0]), u.currentGroup) {
                            var s = o.getCharts(u.currentGroup.id, m);
                            null === s ? t.getGroupCharts(u.currentGroup.id, m).then(function(t) {
                                if (u.myCharts = t.data.charts, o.setCharts(u.currentGroup.id, m, t.data.charts), u.myCharts.length > 0) null !== u.selectedChart && u.currentGroup.id === u.selectedChart.group_id && (u.currentIndex = i.findIndex(u.myCharts, function(e) {
                                    return e.id === u.selectedChart.id
                                })), b(u.myCharts[u.currentIndex]);
                                else if (null === d.getSymbolData()) return void e.$broadcast("dashboardForceSelectTab", {
                                    tab: "markets"
                                });
                                u.loading = !1
                            }).catch(function() {
                                u.loading = !1
                            }) : (u.myCharts = s, c.$broadcast("setMyCharts", u.myCharts), u.myCharts.length > 0 && (null !== u.selectedChart && u.currentGroup.id === u.selectedChart.group_id && (u.currentIndex = i.findIndex(u.myCharts, function(e) {
                                return e.id === u.selectedChart.id
                            })), b(u.myCharts[u.currentIndex])), u.loading = !1)
                        } else u.loading = !1
                    }, u.changeGroup = function(e) {
                        u.loading = !0, u.currentGroup = e, u.currentIndex = 0, a.updateParameter("chartGroupId", e ? e.id : null), t.getGroupCharts(e.id, m).then(function(t) {
                            u.myCharts = t.data.charts, u.loading = !1, o.setCharts(e.id, m, u.myCharts), u.myCharts.length > 0 && (f && (u.currentIndex = u.myCharts.length - 1, f = !1), b(u.myCharts[u.currentIndex]))
                        }).catch(function() {
                            u.loading = !1
                        })
                    }, u.loadChart = function(e, t) {
                        u.currentIndex = t, b(e)
                    }, c.$on("$destroy", function() {
                        var e = r.getUserPreferences();
                        e.interactive_charts_saving_mechanism = g, r.setUserPreferences(e), l.setChartTab(null)
                    }), c.$on("chartTabHasBeenRemoved", function() {
                        var e = u.myCharts[0];
                        u.currentIndex = 0, b(e)
                    }), c.$on("chartChangedFromFlipcharts", function(e, t) {
                        var a = t.chart;
                        u.currentIndex = i.findIndex(u.myCharts, function(e) {
                            return e.id === a.id
                        }), b(a)
                    }), c.$on("myChartMovedToAnotherGroup", function(t, a) {
                        f = !0, e.$broadcast("myGroupChangeTrigger", {
                            group: a.newGroup
                        })
                    }), c.$on("myChartCopied", function(e, t) {
                        var a = o.getCharts(t.chart.group_id, m);
                        u.currentIndex = a.length - 1, b(t.chart)
                    }), c.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        u.currentSymbol = t && t.newSymbol ? {} : t
                    }), c.$on("dashboardSymbolChangedFromSelector", function(e, t) {
                        u.currentIndex = null
                    }), c.$on("myChartCreated", function(t, a) {
                        a.chart.group_id !== u.currentGroup.id ? (f = !0, e.$broadcast("myGroupChangeTrigger", {
                            group: {
                                id: a.chart.group_id
                            }
                        })) : u.currentIndex = u.myCharts.length - 1
                    })
                }],
                controllerAs: "$ctrl",
                template: a("NON8")
            }
        }
    },
    8321: function(e, t) {
        e.exports = {
            default: {
                requiredFields: "Fill the required fields.",
                required: "Fill the required fields.",
                bad_request: "Something went wrong. Check all fields and try again.",
                alertNewsEmpty: "Please select at least one news source.",
                operandInvalidInPremierAlert: "Complete required fields to continue.",
                operandInvalidAlert: "Value is invalid."
            },
            editPortfolioForm: {
                maxlength: "Portfolio name cannot be longer than 50 characters.",
                uniqueName: "Portfolio name must be unique."
            },
            transactionForm: {
                required: "Complete required fields to continue.",
                maxlength: "Notes cannot be longer than 200 characters."
            }
        }
    },
    "87Up": function(e, t, a) {
        "use strict";
        angular.module("IndexQuote", []).directive("indexQuote", a("fNdL"));
        e.exports = {
            enable: !0,
            name: "IndexQuote"
        }
    },
    "8BqT": function(e, t) {
        e.exports = '<div class="bc-screener__toolbar top-toolbar clearfix"> <span class=bc-screener__toolbar-title> LOAD A SCREENER: </span> <screener-saved-screeners data-saved-screener=savedScreener data-popular-screener=popularScreener data-type="[[ ::type ]]"></screener-saved-screeners> <div class="bc-dropdown filter bc-screener__toolbar-select"> <select name=screenerPopularPresets data-ng-model=popularScreener data-ng-options="item as item.name for item in popularScreeners"> <option value="">Barchart Screeners</option> </select> </div> <div class=screener-buttons-wrapper> <screener-reset-screeeners></screener-reset-screeeners> </div> </div>'
    },
    "8CUx": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "A",
                require: "ngModel",
                link: function(e, t, a, i) {
                    var r = !0;
                    i.$parsers.unshift(function(e) {
                        var t;
                        return r = !e || (t = e) && function(e) {
                            for (var t = 0, a = !1, i = e.length - 1; i >= 0; i--) {
                                var r = +e[i];
                                a && (r *= 2) > 9 && (r -= 9), t += r, a = !a
                            }
                            return t % 10 == 0
                        }(t) && 16 == t.length && (4 == t[0] || 5 == t[0] && t[1] >= 1 && t[1] <= 5 || 2 == t[0] && t[1] >= 2 && t[1] <= 7 || 0 == t.indexOf("6011") || 0 == t.indexOf("65")) || 15 == t.length && (0 == t.indexOf("34") || 0 == t.indexOf("37")) || 13 == t.length && 4 == t[0], i.$setValidity("invalidCreditCard", r), r ? e : void 0
                    })
                }
            }
        }
    },
    "8HkX": function(e, t) {
        e.exports = '<div class="barchart-symbol-widget widget-per-share-info"> <div class=barchart-symbol-widget__title> Per-Share Information <a data-ng-href="[[  \'/\' + sector + \'/quotes/\' + symbol + \'/profile\' ]]" class="bc-button small white-with-border right" target=_blank> Full Profile </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href="[[ \'/stocks/quotes/\' + symbol + \'/profile\' ]]" target=_blank> <div class=barchart-symbol-widget__columns> <div class=barchart-symbol-widget__left-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.left | filter:filterEmptyRows"> <span class=right data-ng-class="{\'highlight\': item.colorize}"> [[ ::data[item.field] ]] </span> [[ ::item.label ]] </li> </ul> </div> <div class=barchart-symbol-widget__right-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.right | filter:filterEmptyRows"> <span class=right data-ng-class="{\'highlight\': item.colorize}"> [[ ::data[item.field] ]] </span> [[ ::item.label ]] </li> </ul> </div> </div> </a> </div>'
    },
    "8KPT": function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$compile", "$window", "$location", "$timeout", "$scope", "bcNewsFeedsSrv", "BarchartMediaOverlayApiFactory", "BarchartMediaOverlayApiConfig", "quotesService", "utils", "$rootScope", function(e, t, a, i, r, o, n, s, l, c, d) {
                r.compactModal = !!r.compactModal, r.currentURL = d.currentURL, c.isMobileAndTablet() && (delete t.Hammer.defaults.behavior.userSelect, t.Hammer(document.querySelector(".js-modal-overlay-news")).on("swiperight", f), t.Hammer(document.querySelector(".js-modal-overlay-news")).on("swipeleft", g), r.$on("$destroy", function() {
                    t.Hammer(document.querySelector(".js-modal-overlay-news")).off("swiperight", f), t.Hammer(document.querySelector(".js-modal-overlay-news")).off("swipeleft", g)
                })), r.item = null, r.relatedSymbols = null, r.videoPlayerInstance = null, r.nextItemMeta = null, r.nextItem = null, r.prevItem = null, r.dataLoading = !1;
                var u = angular.element(document.querySelector(".bc-overlay-modal-wrapper .modal-content")),
                    p = angular.element(document.querySelector(".bc-overlay-modal-wrapper .bc-article"));

                function m(e) {
                    null !== e && (r.compactModal || h())
                }

                function h() {
                    i(function() {
                        angular.element("#news_modal_ads .magic-wrapper") && angular.element("#news_modal_ads .magic-wrapper").remove(), angular.element("#news_modal_ads").html(e(r.adsContent)(r)), window.dispatchEvent(new Event("resize"))
                    })
                }

                function g() {
                    r.goToNextItem(r.nextItem)
                }

                function f() {
                    r.goToPrevItem(r.prevItem)
                }
                r.compactModal || (u.css("min-height", window.innerHeight + 10 + "px"), p.css("min-height", window.innerHeight + 10 + "px"), window.addEventListener("resize", function() {
                    var e = window.innerHeight + 10 + "px";
                    u.css("min-height", e), p.css("min-height", e)
                }, !0)), r.$watch("itemId", function() {
                    var e;
                    e = r.itemId, r.dataLoading = !0, n.getItem(s.getApiConfigNews(e)).then(function(e) {
                        var a, i, n, s;
                        r.item = null, e.count > 0 && e.data[0] && (r.item = e.data[0], r.item.content = r.item.content.replace(/&amp;/g, "&"), "video" === r.item.media && r.item.sourceId && (r.videoPlayerInstance || function(e) {
                                var t = {
                                    id: 1921523,
                                    width: 640,
                                    height: 360
                                };
                                e && (t.content = e), com && (r.videoPlayerInstance = new com.grabnetworks.Player(t), c.isMobile() ? r.videoPlayerInstance.stopVideo() : r.videoPlayerInstance.playVideo())
                            }(r.item.sourceId), s = r.item.sourceId, r.videoPlayerInstance.loadNewVideo(s), c.isMobile() ? r.videoPlayerInstance.stopVideo() : r.videoPlayerInstance.playVideo()), r.item.symbols.length > 0 ? (a = r.item.symbols, i = {
                                content: {
                                    data: [],
                                    meta: {
                                        field: {
                                            shortName: {
                                                symbol: "Symbol",
                                                lastPrice: "Last",
                                                priceChange: "Chg",
                                                percentChange: "%Chg"
                                            }
                                        }
                                    }
                                },
                                options: {
                                    sort: {
                                        dir: "",
                                        column: "",
                                        columns: []
                                    },
                                    colorize: ["priceChange", "percentChange"]
                                }
                            }, (n = angular.copy(a)).forEach(function(e) {
                                e.symbolSector = l.getSector(e.symbolType)
                            }), i.content.data = n, r.relatedSymbols = i) : r.relatedSymbols = null, r.shareLink = t.location.origin + "/share/news/" + r.item.id, document.querySelector("title").text = c.usworlds(r.item.title)),
                            function() {
                                var e = o.getPrevItem(r.itemId);
                                r.prevItem = e ? "/story/" + r.currentURL + "/" + e.id + "/" + e.slug : null;
                                var t = o.getNextItem(r.itemId);
                                t ? (r.nextItem = "/story/" + r.currentURL + "/" + t.id + "/" + t.slug, r.nextItemMeta = {
                                    title: t.title,
                                    feed: t.feedName,
                                    published: t.published
                                }) : (r.nextItem = null, r.nextItemMeta = null)
                            }(), t.scroll(0, 0), r.dataLoading = !1
                    }, function() {
                        console.log("ERROR: Item could not be loaded."), r.dataLoading = !1
                    })
                }), r.goToNextItem = function(e) {
                    m(e)
                }, r.goToPrevItem = function(e) {
                    m(e)
                }, r.compactModal || h()
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    itemId: "=",
                    compactModal: "=",
                    adsContent: "@",
                    hideOverlayModal: "&"
                },
                template: a("Mdt2"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    "8RMR": function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    content: "="
                },
                controller: ["$scope", function(a) {
                    var r = angular.copy(t.default);
                    i.isMobileOnly() && (r.series[1].dataLabels.distance = 5, r.series[1].size = "55%"), a.config = r, a.$watch("content", function(t) {
                        t && function() {
                            var t = [],
                                i = [];
                            e.ready(function() {
                                var e = Highcharts.getOptions().colors,
                                    o = 0;
                                Object.keys(a.content).forEach(function(r) {
                                    if (a.content[r]) {
                                        t.push({
                                            name: r,
                                            y: a.content[r].percent,
                                            value: a.content[r].value,
                                            color: e[o]
                                        });
                                        var n, s = Object.keys(a.content[r].symbols).length,
                                            l = 0;
                                        Object.keys(a.content[r].symbols).forEach(function(t) {
                                            n = .25 - ++l / s / 5, i.push({
                                                name: t,
                                                y: a.content[r].symbols[t].percent,
                                                value: a.content[r].symbols[t].value,
                                                color: Highcharts.Color(e[o]).brighten(n).get()
                                            })
                                        })
                                    }
                                    o++
                                }), r.series[0].data = t, r.series[1].data = i
                            }, this)
                        }()
                    })
                }],
                template: a("SZXs")
            }
        }
        i.$inject = ["highchartsNG", "chartsSettings", "utils"], e.exports = i
    },
    "8cr2": function(e, t) {
        e.exports = '<div class=bc-screener__common-filter-value> <div class="bc-dropdown filter bc-screener__common-filter-value-field"> <select data-ng-model=formData.operator data-ng-options="item.key as item.value for item in operator"></select> </div> <span data-ng-bind=label></span> <div class="bc-dropdown filter bc-screener__common-filter-value-field"> <select data-ng-model=formData.value data-ng-options="item.key as item.value for item in value"></select> </div> </div>'
    },
    "8hFR": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = !1,
                r = "advOptions",
                o = "",
                n = this,
                s = [];
            this.checkPermissions = function(n) {
                var l = !0;
                return o && !t.isLoggedIn() && (l = !1, a.goToLogin(o)), i && -1 === s.indexOf(n) && (t.isLoggedIn() && 2 === t.getUserData().subscription || (l = !1, e.showPremier(r))), l
            }, this.checkPermissionsForList = function(a) {
                var i = !0;
                return t.isLoggedIn() && 2 === t.getUserData().subscription || (i = !1, e.showPremier(a || "wlScreen")), i
            }, this.enableOptionPermissionCheck = function() {
                return i = !0, n
            }, this.disableOptionPermissionCheck = function() {
                return i = !1, n
            }, this.setPremierRef = function(e) {
                return r = e, n
            }, this.setAuthRef = function(e) {
                return o = e, n
            }, this.getAuthRef = function() {
                return o
            }, this.setIgnore = function(e) {
                return s = e, n
            }
        }
        i.$inject = ["bcModalLoginSrv", "authService", "authRouteService"], e.exports = i
    },
    "8qNZ": function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["$rootScope", "$location", "$window", function(e, t, a) {
            e.$on("$locationChangeSuccess", function() {
                "/" === t.path() && a.config.reRunAutoRefresh && (a.config.autoRefresh = !0, a.config.runAutoRefreshPage())
            })
        }])
    },
    "8x9n": function(e, t) {
        e.exports = '<div class=bc-error-component> <div class=bc-error-component__error data-ng-repeat="(key, val) in $ctrl.errors" data-ng-bind-html="($ctrl.useServerErrors && val !== true) ? val : $ctrl.errorTemplates[key]" data-ng-hide=!val></div> </div>'
    },
    "8z5t": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                restrict: "E",
                scope: {
                    email: "@",
                    title: "@",
                    content: "@"
                },
                replace: !0,
                link: function(i) {
                    i.resend = function() {
                        e.call("/users/email/resend", t.POST, {
                            email: i.email,
                            activate: !0
                        }).then(function(e) {
                            !0 === e.success && a.success("A verification email has been sent to " + i.email + ".")
                        }, function(e) {
                            a.success("Sorry, something went wrong. Please try again")
                        })
                    }
                },
                template: '<span>[[ content ]] <a data-ng-click="resend()"> [[ title ]]</a></span>'
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "Notification"], e.exports = i
    },
    "8zng": function(e, t, a) {
        "use strict";
        var i = "HighestImpliedVolatility";
        angular.module(i, []).controller(i + ".HighestImpliedVolatilityCtrl", a("pFJq"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "9Cpe": function(e, t, a) {
        "use strict";

        function i(e, t) {
            var a = null,
                i = [];
            return {
                updateInlineDataForMainChart: function(r) {
                    var o = e.defer(),
                        n = a = r;
                    return n += i.length ? "," + i.join(",") : "", t.updateInlineDataForSymbol(n).then(function() {
                        o.resolve()
                    }, function(e) {
                        o.reject(e)
                    }), o.promise
                },
                updateInlineDataForMiniCharts: function(r) {
                    var o = e.defer(),
                        n = (i = angular.copy(r)).join(",");
                    return n += a ? "," + a : "", t.updateInlineDataForSymbol(n).then(function() {
                        o.resolve()
                    }), o.promise
                }
            }
        }
        i.$inject = ["$q", "bcInlineData"], e.exports = i
    },
    "9E0I": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterData.default = e.filterData.default || {}, e.meta = e.filterData.default.meta || {}
                }],
                template: a("BvA5")
            }
        }
        i.$inject = [], e.exports = i
    },
    "9FZc": function(e, t, a) {
        "use strict";
        var i = "Portfolio";
        angular.module(i, []).constant("portfolioSettings", a("KvFE")).constant("chartsSettings", a("2BWD")).controller(i + ".portfolioViewCtrl", a("vZYo")).controller(i + ".portfolioViewAllCtrl", a("sajq")).controller(i + ".portfolioCreateEditCtrl", a("V6Rw")).controller(i + ".portfoliosEditAllCtrl", a("lbrI")).controller(i + ".portfoliosEodEmailSettingsCtrl", a("GLMi")).controller(i + ".addTransactionModalCtrl", a("7nuQ")).controller(i + ".deleteConfirmModalCtrl", a("X3Rc")).controller(i + ".showPortfolioListModalCtrl", a("ee7B")).controller(i + ".publicPortfolioListCtrl", a("jBI9")).controller(i + ".moveTransactionModalCtrl", a("x+SF")).filter("replaceSymbolsTagsFilter", a("UNVz")).factory("portfolioApiFactory", a("o/vu")).factory("portfolioDataProcessor", a("6xmb")).factory("portfolioGrandTotalsDataProcessor", a("sTEs")).factory("portfolioModalFactory", a("P9Vo")).directive("portfolioTotalRow", a("UOD9")).directive("portfolioInstance", a("nmde")).directive("compileTemplate", a("F5E7")).directive("portfolioCommentsTab", a("rCjt")).directive("portfolioCommentRow", a("+k7j")).directive("portfolioTransactionRow", a("qks2")).directive("portfolioEditForm", a("08c9")).directive("portfolioShowNotes", a("vlJL")).directive("portfolioEditTransactions", a("odIh")).directive("portfolioVisualizationView", a("z2Co")).directive("portfolioVisualizationMarketCapPie", a("8RMR")).directive("portfolioVisualizationInvestmentWeights", a("cUp1")).directive("portfolioVisualizationSectorWeights", a("0Rk1")).directive("portfolioVisualizationOpinionPie", a("kntP"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "9Gxp": function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    rawData: "=",
                    options: "="
                },
                link: function(o) {
                    o.periods = t.config.earningsHistorySurprises.periods, o.rows = t.config.earningsHistorySurprises.rows;
                    var n, s = ["reportedEarnings", "estimatedEarnings", "earningsDifference", "earningsSurprise"],
                        l = [];
                    o.tab = window.currentTab, o.close = function() {
                        n.dismiss()
                    }, o.showDetails = function() {
                        o.link = r.route(t.config.routes["quotes.earningsEstimates"], {
                            sector: t.config.symbols.mapping[o.rawData.symbolType],
                            symbol: o.rawData.symbol
                        });
                        var c = "earnings" === o.tab ? (o.periods.forEach(function(e) {
                            l.push("earningsDate" + e.key + ".format(m/y)"), s.forEach(function(t) {
                                l.push(t + e.key)
                            })
                        }), {
                            route: "/quotes/get",
                            config: {
                                symbol: o.rawData.symbol,
                                fields: l.join(",")
                            }
                        }) : {
                            route: "/corporateActions",
                            config: {
                                symbol: o.rawData.symbol,
                                field: "date,eventType,value",
                                orderBy: "date",
                                orderDir: "desc",
                                startDate: window.moment(new Date).add(-2, "years").format("YYYY-MM-DD")
                            }
                        };
                        i.getHistoryData(c).then(function(t) {
                            o.data = "earnings" === o.tab ? t.data[0] : t.data, n = e.open({
                                template: a("yEQ8"),
                                scope: o,
                                windowClass: "reveal-modal bc-earnings-dividends-details"
                            })
                        })
                    }, o.getClass = function(e, t) {
                        if (e.colorize && "N/A" !== t) return r.setColor(t)
                    }
                },
                template: a("0WH3")
            }
        }
        i.$inject = ["$modal", "$window", "earningsDividendsApiFactory", "utils"], e.exports = i
    },
    "9OLN": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    gridView: "="
                },
                bindToController: {},
                controller: ["$scope", "$rootScope", "_", "dashboardGridSettings", "authService", "dashboardSettingsService", "Notification", function(e, t, a, i, r, o, n) {
                    var s = this;
                    s.symbols = [], s.currentSymbol = null;
                    var l = o.getParameter("showRibbon");
                    s.visible = l, s.allowGrid = !1, s.symbolFromList = !1, s.isGridView = e.gridView, s.selectedSymbols = [], s.activeTab = o.getParameter("activeTab");
                    var c = r.getUserData() || {};

                    function d(e) {
                        switch (s.selectedSymbols = [], e) {
                            case 1:
                                break;
                            case 2:
                            case 3:
                                u(1);
                                break;
                            case 4:
                                u(3);
                                break;
                            case 5:
                                u(5);
                                break;
                            case 6:
                                u(7)
                        }
                        t.$broadcast("renderGridCharts", {
                            gridView: e,
                            symbols: angular.copy(s.selectedSymbols)
                        })
                    }

                    function u(e) {
                        var t = a.findIndex(s.symbols, {
                            symbol: s.currentSymbol.symbol
                        });
                        for (s.selectedSymbols.push(s.symbols[t].symbol); e;) t++, s.symbols[t] && s.selectedSymbols.push(s.symbols[t].symbol), e--
                    }
                    s.chartStyle = c.preferences ? c.preferences.charts_style : "interactive", s.loadChartForSymbol = function(e) {
                        s.currentSymbol = e, d(i.getView()), t.$broadcast("dashboardCurrentSymbolChanged", angular.copy(e)), setTimeout(function() {
                            t.$broadcast("bc-scrollbar-scroll-to-item", e.symbol)
                        }, 500)
                    }, s.closeRibbonMenu = function() {
                        o.updateParameter("showRibbon", !1), t.$broadcast("dashboardHideRibbon")
                    }, s.openRibbonMenu = function() {
                        s.activeTab = o.getParameter("activeTab"), o.updateParameter("showRibbon", !0), t.$broadcast("dashboardShowRibbon")
                    }, e.$on("dashboardSymbolsListLoaded", function(e, i) {
                        s.symbols = angular.copy(i), s.symbols = a.uniq(s.symbols, "symbol"), setTimeout(function() {
                            t.$broadcast("bc-scrollbar-refresh")
                        }, 100)
                    }), e.$on("dashboardCurrentSymbolChanged", function(e, r) {
                        if (s.visible) {
                            console.log("[Dashboard Ribbon Controller]: event <dashboardCurrentSymbolChanged>", r);
                            var o = a.find(s.symbols, {
                                symbol: r.symbol
                            });
                            o ? (s.currentSymbol = o, setTimeout(function() {
                                t.$broadcast("bc-scrollbar-scroll-to-item", r.symbol)
                            }, 500), s.allowGrid = !0, s.symbolFromList = !0, d(i.getView())) : (s.symbolFromList = !1, s.allowGrid = !1)
                        }
                    }), e.$on("dashboardSymbolChangedFromSelector", function() {
                        s.visible = !1, s.currentSymbol = null, s.selectedSymbols = [], s.allowGrid = !1
                    }), e.$on("dashboardHideRibbon", function() {
                        l = o.getParameter("showRibbon"), s.visible = !1, s.selectedSymbols = [], s.allowGrid = !1, s.currentSymbol = null, s.isGridView && t.$broadcast("renderGridCharts", {
                            gridView: 1,
                            symbols: angular.copy(s.selectedSymbols)
                        })
                    }), e.$on("dashboardShowRibbon", function() {
                        s.activeTab = o.getParameter("activeTab"), l = o.getParameter("showRibbon"), s.visible = !0, setTimeout(function() {
                            t.$broadcast("bc-scrollbar-refresh")
                        }, 0)
                    }), e.$on("dashboardChangeTab", function() {
                        s.activeTab = o.getParameter("activeTab"), !0 === l && (s.visible = !0), angular.element(document.querySelector("body")).addClass("dashboard-ribbon-visible")
                    }), e.$on("closeRightPanel", function() {
                        angular.element(document.querySelector("body")).removeClass("dashboard-ribbon-visible")
                    }), e.$on("closeRightMenu", function() {
                        angular.element(document.querySelector("body")).removeClass("dashboard-ribbon-visible")
                    }), e.$on("changeGridView", function(e, t) {
                        d(t.gridView)
                    }), e.$on("setMyCharts", function(e, t) {
                        s.myCharts = t.charts, s.chartsData = t
                    }), s.loadSavedChart = function(e, a) {
                        t.$broadcast("chartChangedFromFlipcharts", {
                            chart: e,
                            i: a
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("JN7L")
            }
        }
    },
    "9OXA": function(e, t) {
        e.exports = "<tr> <th>&nbsp;</th> <th class=text-left colspan=6>Total Volume and Daily Open Interest</th> <th>[[ totalVolume | number ]]</th> <th>[[ totalOpenInterest | number ]]</th> <th></th> <th class=hide-for-small></th> </tr>"
    },
    "9Pt1": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.isEquity = a.getIsEquitySymbol(), e.currentTab = i || "studies", e.modalInstance = t, e.modalDismiss = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "interactiveChartSettings", "initialState"], e.exports = i
    },
    "9S+e": function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };

        function o(e, t, i, o, n, s, l, c, d, u, p, m, h, g, f) {
            var b = ["$scope", function(a) {
                a.options = a.options || {}, a.content = a.content ? P(a.content) : [], a.dataLoading = void 0 === a.dataLoading || a.dataLoading, a.processing = !1, a.apiIsRunning = !1, a.options.class = a.options.class || "", a.options.emptyText = a.options.emptyText || "", a.options.defaultSector = a.options.defaultSector || "", a.options.exclude = a.options.exclude || [], a.options.sort = a.options.sort || {}, a.options.sort.blacklist = a.options.sort.blacklist || [], a.error = !1, a.pageSector = a.pageSector || "", a.orderHasBeenATriggered = !1;
                var b = a.options.simpleLink || !1;
                a.symbolsSequences = a.useBlankRow ? angular.copy(a.apiConfig.api.symbols) : null;
                var v = !!a.excludeLastPrice,
                    y = ["symbol", "symbolName", "contractName", "etfName", "baseSymbol", "sicIndustry", "industry", "symbolShortName", "contractSymbol", "exchange", "assetClass", "leverage", "fundFamily", "industryGroup"];
                a.page = 1, a.guid = s.guid(), a.currentIndex = !1, a.inMoneyNearest = [], a.throbberTop = "20px", a.timeFrame = f.search().timeFrame || "", f.search().timeframe && (a.timeFrame = f.search().timeframe), a.$on("filterChange", function(e, t) {
                    "timeFrame" === t.name && (a.timeFrame = t.value)
                }), a.$on("excludeLastPrice", function() {
                    v = !0
                }), a.$on("removeFromExcludeLastPrice", function() {
                    v = !1
                }), a.$on("getNewPageData", function(e, t) {
                    a.paginationParams.currentPage = t, a.page = t, D()
                }), E(), a.initializePaginationOptions = function() {
                    a.options.currentPage && (a.page = a.options.currentPage), a.paginationParams = {
                        currentPage: a.page
                    }
                }, a.content.length > 0 && !a.options.disabledRealtime && (a.content[0].data ? c.realtimeListener(a.content[0].data, a.pageSector) : c.realtimeListener(a.content, a.pageSector));
                var w = a.$watch("content", function() {
                    if (a.content && a.content[0]) {
                        if (a.options.itm && a.options.itm.onlyNearest && a.content[0].data.length) {
                            var e = "daily" === f.search().futuresOptionsTime ? a.options.itm.dailyLastPrice : a.options.itm.lastPrice;
                            a.inMoneyNearest = _(a.content[0].data, a.options.itm.compareWith, e)
                        }
                        w()
                    }
                });
                "string" == typeof a.apiConfig && (a.apiConfig = JSON.parse(a.apiConfig)), a.excludedFields = ["raw", "symbolCode", "updatedFields", "hasOptions", "lastPriceDirection", "customLinks"], a.realtimeFields = ["lastPrice", "openPrice", "highPrice", "lowPrice", "volume", "percentChange", "priceChange", "priceVolume", "tradeTime"], a.options && a.options.showSymbolType || void 0 !== a.apiConfig && void 0 !== a.apiConfig.api && "options" === a.apiConfig.api.method || a.excludedFields.push("symbolType"), void 0 !== a.options.exclude && (a.excludedFields = a.excludedFields.concat(a.options.exclude)), a.receivedExcludedFields = angular.copy(a.excludedFields), a.initRemoveExcludedFields && a.initRemoveExcludedFields.length && (a.excludedFields = l.difference(a.excludedFields, a.initRemoveExcludedFields)), a.$watchCollection(function() {
                    return a.options.exclude
                }, function(e) {
                    void 0 !== e && (~a.excludedFields.indexOf(e) || (a.excludedFields = a.excludedFields.concat(e))), a.excludedFields = l.uniq(a.excludedFields)
                });
                var C = a.$on("tableSorted", function() {
                    a.orderHasBeenATriggered = !0, C()
                });

                function S() {
                    a.options.quickLinks && (void 0 === a.apiConfig || l.isEmpty(a.apiConfig) || (a.apiConfig.api.hasOptions = !0))
                }

                function x() {
                    a.orderBy = g.getLocationPathObject().orderBy || null, a.orderDir = g.getLocationPathObject().orderDir || null, a.pathOrderParams = g.getLocationPathObject().orderBy && g.getLocationPathObject().orderDir || !1, a.apiConfig && a.apiConfig.api && a.orderBy && a.orderDir && (a.apiConfig.api.orderBy = a.orderBy, a.apiConfig.api.orderDir = a.orderDir), a.receivedApiConfig = angular.copy(a.apiConfig), a.receivedOptions = angular.copy(a.options), a.receivedApiConfig && a.receivedApiConfig.api ? (a.orderBy = a.receivedApiConfig.api.orderBy || null, a.orderDir = a.receivedApiConfig.api.orderDir || null) : a.options && a.options.order && (a.orderBy = a.options.order.orderBy || null, a.orderDir = a.options.order.orderDir || null)
                }

                function k() {
                    if (a.dataLoading = !0, void 0 === a.apiConfig || l.isEmpty(a.apiConfig.api)) {
                        if (a.content && a.content[0] && a.content[0].data) {
                            if (a.dataLoading = !1, void 0 !== a.options.callback && n.hasOwnProperty(a.options.callback) && (n[a.options.callback].call(a, a.content), "worldMarketMapWorld" !== a.options.callback && "changeTimeHeader" !== a.options.callback && "changeMetalIndexes" !== a.options.callback)) return void(a.dataLoading = !1);
                            u.$broadcast("onBarchartDataTableRendered", {
                                api: a.apiConfig,
                                data: a.content[0].data,
                                middleware: !1,
                                meta: a.content[0].meta,
                                total: a.content[0].total,
                                options: a.options,
                                excluded: a.options.resetExclude || a.excludedFields
                            })
                        }
                        o(function() {
                            a.visibleDatatableColumns = document.querySelectorAll(".table-guid-" + a.guid + " table thead tr th").length - 1
                        }, 0)
                    } else a.apiConfig.api.limit ? 0 === a.watchWait && e.makeRequest(a.apiConfig).then(function(e) {
                        a.processData(e), o(function() {
                            a.visibleDatatableColumns = document.querySelectorAll(".table-guid-" + a.guid + " table thead tr th").length - 1
                        }, 0)
                    }, function(e) {
                        a.apiIsRunning = !1, a.dataLoading = !1, void 0 !== e.error && (a.error = "Sorry, something went wrong. Try again.")
                    }) : (E(), u.$broadcast("setDownloadConfig", angular.copy(a.apiConfig.api)), 0 === a.watchWait && D()), u.$broadcast("setDownloadConfig", angular.copy(a.apiConfig.api))
                }

                function D() {
                    E(), e.loadPage(a.apiConfig, a.paginationParams.currentPage).then(function(e) {
                        a.processData(e)
                    })
                }

                function T() {
                    a.options.activeSymbol && angular.element(document.querySelector('[data-current-symbol="' + a.options.activeSymbol + '"]')).addClass("active-row")
                }

                function _(e, t, a, i) {
                    var r = e[0].raw[t],
                        o = e[e.length - 1].raw[t],
                        n = 0,
                        s = e.length - 1;
                    return e.forEach(function(e, i) {
                        var l = e.raw[t]; + l >= r && +l < a && (r = l, n = i), +l < o && +l >= a && (o = l, s = i)
                    }), i ? [n, s] : [r, o]
                }

                function P(e) {
                    if (e && a.options.handleContent && m.hasOwnProperty(a.options.handleContent)) switch (a.sourceContent = angular.copy(e), a.options.handleContent) {
                        case "processContentInMoney":
                            if (a.options.itm && e[0] && e[0].data.length && "allRows" !== f.search().moneyness) {
                                var t = "daily" === f.search().futuresOptionsTime ? a.options.itm.dailyLastPrice : a.options.itm.lastPrice,
                                    i = _(e[0].data, a.options.itm.compareWith, t, !0);
                                return m[a.options.handleContent].call(a, e, i, a.groupingKey)
                            }
                            break;
                        default:
                            return m[a.options.handleContent].call(a, e, [], a.groupingKey)
                    }
                    return e
                }

                function E() {
                    a.page = f.search().page && "all" !== f.search().page ? parseInt(f.search().page) : 1, !a.apiConfig || !a.apiConfig.api || a.apiConfig.api.limit || a.options.noPagination || a.page && "all" === f.search().page || (s.isMobileOnly() ? a.options.pagination = p.config.pagination.mobile || 25 : s.isTabletOnly() ? a.options.pagination = p.config.pagination.tablet || 50 : a.options.pagination = p.config.pagination.desktop || 100, a.receivedOptions && (a.receivedOptions.pagination = a.options.pagination), a.page = parseInt(a.page), a.apiConfig.api.page = a.page || 1, a.apiConfig.api.limit = a.options.pagination)
                }
                a.options.activeSymbol && a.$on("tableHasBeenSorted", function() {
                    angular.element(document.querySelectorAll(".bc-datatable tr.active-row")).removeClass("active-row"), T()
                }), o(function() {
                    S()
                }, 0), x(), a.initializePaginationOptions(), a.tabs = "string" == typeof a.tabs ? JSON.parse(a.tabs) : a.tabs, a.watch = "string" == typeof a.watchFor ? JSON.parse(a.watchFor) : a.watchFor, a.watch = a.watchFor || [], a.watchWait = a.watch.length, a.watchStates = {}, a.customHandlers = a.customHandlers || {}, o(function() {
                    i.observe.call(a)
                }, 0), k(), a.$on("renderBarchartDataTable", function() {
                    a.initializePaginationOptions(), S(), x(), k()
                }), a.processData = function(e) {
                    if (a.totalItems = e[0].total, a.receivedOptions.pagination && (a.options.pagination = a.receivedOptions.pagination), a.options.pagination && a.totalItems > a.options.pagination && u.$broadcast("paginationEnabled"), void 0 !== a.options.callback && n.hasOwnProperty(a.options.callback) && (n[a.options.callback].call(a, e), "worldMarketMapWorld" !== a.options.callback && "changeTimeHeader" !== a.options.callback && "changeMetalIndexes" !== a.options.callback)) a.dataLoading = !1;
                    else {
                        if (a.options.disabledRealtime || c.realtimeListener(e[0].data, a.pageSector), a.content = P(e), a.useBlankRow && a.symbolsSequences && function() {
                                var e = a.symbolsSequences.split(",");
                                if (a.paginationParams.currentPage && "all" !== f.search().page) {
                                    var t = a.options.pagination * (a.paginationParams.currentPage - 1),
                                        i = t + a.options.pagination,
                                        r = 0,
                                        o = 0,
                                        n = 0;
                                    a.content[0].total <= i && (i = a.content[0].total, n = e.length), a.symbolsSequences.split(",").every(function(s, l) {
                                        return "~" !== s && r++, 0 === o && r > t && (o = 1 === a.paginationParams.currentPage ? 0 : l, n) ? (e = e.slice(o), !1) : !(r >= i) || (e = e.slice(o, l), !1)
                                    })
                                }
                                a.content.forEach(function(t) {
                                    e.forEach(function(e, a) {
                                        "~" === e && t.data.splice(a, 0, {
                                            blankRow: !0
                                        })
                                    })
                                })
                            }(), a.dataLoading = !1, a.processing = !1, u.$broadcast("onBarchartDataTableRendered", {
                                api: a.apiConfig,
                                data: e[0].data,
                                middleware: !1,
                                meta: e[0].meta,
                                total: e[0].total,
                                options: a.options,
                                excluded: a.options.resetExclude || a.excludedFields
                            }), a.options.itm && a.options.itm.onlyNearest && e[0].data.length) {
                            var t = "daily" === f.search().futuresOptionsTime ? a.options.itm.dailyLastPrice : a.options.itm.lastPrice;
                            a.inMoneyNearest = _(e[0].data, a.options.itm.compareWith, t)
                        }
                        a.orderBy = a.apiConfig.api.orderBy || null, a.orderDir = a.apiConfig.api.orderDir || null, o(function() {
                            T()
                        }, 0)
                    }
                }, a.loadAllData = function() {
                    var t = document.getElementsByClassName("bc-datatable")[0];
                    t.style.minHeight = t.getBoundingClientRect().height + "px", a.dataLoading = !0, delete a.apiConfig.api.page, delete a.apiConfig.api.limit, e.makeRequest(a.apiConfig).then(function(e) {
                        a.processData(e)
                    }, function(e) {
                        a.dataLoading = !1, a.content = []
                    })
                }, a.loadPage = function() {
                    a.dataLoading = !0, D()
                }, a.filterExclude = function(e) {
                    var t = {},
                        i = a.options.resetExclude || a.excludedFields;
                    if (a.watchStates.viewName && -1 === ["main", "technical", "performance"].indexOf(a.watchStates.viewName)) {
                        var r = i.indexOf("symbol"); - 1 !== r && delete i[r]
                    }
                    return angular.forEach(e, function(e, a) {
                        ~i.indexOf(a) || ("lastPrice" === a || "dailyLastPrice" === a) && v || (t[a] = e)
                    }), t
                }, a.metaFilterExclude = function(e, t) {
                    if (t.length) {
                        var a = l.find(t, function(e) {
                            return !e.blankRow
                        });
                        if (a) {
                            var i = {};
                            return Object.keys(e).forEach(function(t) {
                                void 0 !== a[t] && (i[t] = e[t])
                            }), i
                        }
                    }
                    return e
                }, a.exclude = function(e) {
                    return !~(a.options.resetExclude || a.excludedFields).indexOf(e) && ("lastPrice" !== e && "dailyLastPrice" !== e || !v)
                }, a.setLink = function(e, i) {
                    if (e.customLinks && e.customLinks[i]) return e.customLinks[i];
                    if (e.baseSymbol) return a.options.defaultSector ? "/" + a.options.defaultSector + "/quotes/" + e.baseSymbol : "/quotes/" + e.baseSymbol;
                    var r = e.symbol || "";
                    if (e.symbol || (r = b ? e[i].substr(0, -1 !== e[i].indexOf("|") ? e[i].indexOf("|") : e[i].length) : e[i]), a.options.symbolRoute && (!a.options.specRouteKey || -1 !== a.options.specRouteKey.indexOf(i))) {
                        var o = a.options.symbolRoute;
                        if ("quotes.allFutures" === o && 2 !== e.symbolType && (o = "quotes.sectors"), a.options.specRouteParams) {
                            var n = angular.copy(a.options.specRouteParams);
                            return Object.keys(n).forEach(function(t) {
                                !n[t] && e[t] && (e.raw[t] ? n[t] = e[t] : n[t] = "")
                            }), s.route(p.config.routes[o], n)
                        }
                        return "crypto.coinGroupings" === o ? s.route(p.config.routes[o], {
                            coin: r
                        }) : s.route(p.config.routes[o], {
                            symbol: r,
                            sector: e.symbolType ? t.getSector(e.symbolType) : "stocks"
                        })
                    }
                    return e.symbolType ? "/" + t.getSector(e.symbolType) + "/quotes/" + r : "/quotes/" + r
                }, a.isElementLink, a.isLink = function(e, t) {
                    a.isElementLink = "symbol" === e || void 0 !== a.options.link && ~a.options.link.indexOf(e), "-" === t.symbol && (a.isElementLink = !1), ("." === t.symbol || "" === t.symbol || t.symbolType && "N/A" === t.symbolType) && (a.isElementLink = !1, t.symbol = ""), void 0 !== a.options.link && 0 === a.options.link.length && (a.isElementLink = !1);
                    return void 0 !== a.options.symbolRoute && "crypto.coinGroupings" === a.options.symbolRoute && -1 === ["BTC", "BCH", "ADA", "DASH", "EOS", "ETH", "ETC", "ICX", "IOTA", "LSK", "LTC", "XMR", "XEM", "NEO", "XRP", "XLM", "USDT", "QTUM", "VERI", "ZEC"].indexOf(t.symbol) && (a.isElementLink = !1), a.isElementLink
                }, a.setDataClasses = function(e, t, i, r) {
                    var o = ""; - 1 !== y.indexOf(e) && (o = " text-left"), -1 !== ["lastPrice", "tradeTime", "exit_date"].indexOf(e) && (r.raw.exit_date || r.raw.tooltip && r.raw.tooltip.exit_date) && (o += " liquidated"), r.updatedFields && ~["lastPrice", "highPrice", "lowPrice", "openPrice", "percentChange", "priceChange", "volume", "priceVolume"].indexOf(e) && ~r.updatedFields.indexOf(e) && ("volume" === e || "priceVolume" === e ? o += " up-highlight" : r.lastPriceDirection && (o += " " + r.lastPriceDirection + "-highlight"));
                    var n = h.applyMovingAverageColor(e, r);
                    if (null !== n) return n + o;
                    if (a.options.colorize && a.options.colorize.indexOf(e) > -1) {
                        var s = h.applyColorBasedOnValue(e, t, r);
                        if (null !== s) return s + o
                    }
                    if (a.options.opinion && ~a.options.opinion.indexOf(e)) {
                        var l = h.applyDefaultOpinionColor(t);
                        if (null !== l) return l + o
                    }
                    return a.options.strike && ~a.options.strike.indexOf(e) && (o += " strikePrice"), o
                }, a.handleContent = P, a.setTriggeredClass = function(e) {
                    var t = "";
                    if (e) {
                        var i = e.raw && e.raw.lastPrice ? e.raw.lastPrice : parseFloat(e.lastPrice);
                        if (e.raw && e.raw.high_alert && e.raw.high_alert < i && (t = 1 === e.raw.action ? "triggered-up" : "triggered-down"), e.raw && e.raw.low_alert && e.raw.low_alert > i && (t = 1 === e.raw.action ? "triggered-down" : "triggered-up"), a.options.watchlist && a.options.watchlistFlags && a.options.watchlistFlags[e.symbol]) {
                            var r = a.options.watchlistFlags[e.symbol];
                            i || (i = e.raw && e.raw.dailyLastPrice ? e.raw.dailyLastPrice : parseFloat(e.dailyLastPrice)), r.raw.high_flag && r.raw.high_flag < i && (t = "triggered-up"), r.raw.low_flag && r.raw.low_flag > i && (t = "triggered-down")
                        }
                        t && (t += " blink")
                    }
                    return t
                }, a.setHitClass = function(e, t) {
                    var i = "";
                    if (void 0 !== a.options.hit) {
                        var r = ["Date", "Percent", "Price"];
                        return ["high", "low"].forEach(function(o) {
                            t.raw[a.options.hit[o]] && r.forEach(function(t) {
                                if (-1 !== e.indexOf(o + t)) return i += "hit"
                            })
                        }), i
                    }
                }, a.realtimeUpdate = function(e) {
                    if ("daily" !== a.timeFrame) {
                        var t = void 0 !== a.content[0] ? a.content[0].data : [],
                            i = "",
                            r = a.realtimeFields;
                        Object.keys(t).forEach(function(a) {
                            if (t[a].updatedFields = [], i = t[a].symbol, e[i] && e[i].symbol === i) {
                                var o = d.profile[i];
                                Object.keys(r).forEach(function(n) {
                                    if (e[i][r[n]] && t[a][r[n]] && t[a].raw[r[n]] !== e[i][r[n]] && (t[a].updatedFields.push(r[n]), t[a].raw && (t[a].raw[r[n]] = e[i][r[n]]), ~["highPrice", "lowPrice", "openPrice"].indexOf(r[n]) && o && (t[a][r[n]] = o.formatPrice(e[i][r[n]])), "priceChange" === r[n] && o && (t[a][r[n]] = o.formatPriceChange(e[i][r[n]], !0)), "percentChange" === r[n] && o && (t[a][r[n]] = o.formatPercentChange(e[i][r[n]], !0))), e[i].lastPrice) {
                                        var s = o.formatPrice(e[i].lastPrice);
                                        "s" !== e[i].flag && "p" !== e[i].flag || e[i].lastPrice !== e[i].settlementPrice || (s = o.formatPriceForSettlement(e[i].lastPrice)), t[a].lastPrice && "lastPrice" === r[n] && o && t[a].lastPrice !== s && (t[a].updatedFields.push("lastPrice"), t[a].lastPrice = s)
                                    }
                                    "priceVolume" === r[n] && o && t[a].priceVolume && e[i].priceVol && t[a].priceVolume !== o.formatVolume(e[i].priceVol, 1e3) && (t[a].updatedFields.push("priceVolume"), t[a].priceVolume = o.formatVolume(e[i].priceVol, 1e3))
                                }), t[a].raw.volume && (t[a].volume = o.formatVolume(t[a].raw.volume)), t[a].tradeTime && e[i].timeDisplay && (t[a].tradeTime !== e[i].timeDisplay && (t[a].tradeTime = e[i].timeDisplay), t[a].raw.tradeTime = e[i].timeDisplay), t[a].lastPriceDirection = e[i].lastPriceDirection
                            }
                        })
                    }
                }, a.$on("realtimeUpdate", function() {
                    l.isEmpty(d.symbols) || a.realtimeUpdate(d.symbols)
                }), a.$on("realtimeDeleteClasses", function() {
                    var e = void 0 !== a.content[0] && "object" === r(a.content[0]) ? a.content[0].data : [];
                    Object.keys(e).forEach(function(t) {
                        e[t].updatedFields = []
                    })
                }), a.quotesService = t, a.inMoney = function(e, t) {
                    if (void 0 !== a.options.itm && !a.options.itm.onlyNearest) {
                        if ("Calls" === a.groupingKey && +a.options.itm.lastPrice > +e.raw[a.options.itm.compareWith]) return !0;
                        if ("Puts" === a.groupingKey && +a.options.itm.lastPrice <= +e.raw[a.options.itm.compareWith]) return !0
                    }
                    return void 0 !== a.options.itm && -1 !== a.inMoneyNearest.indexOf(e.raw[a.options.itm.compareWith])
                }, a.isLeftAligned = function(e, t) {
                    return 0 === t || -1 !== y.indexOf(e)
                }, a.shouldBindOnce = function(e) {
                    return -1 === a.realtimeFields.indexOf(e) && a.options.pagination && a.content[0].total > a.options.pagination
                }, a.$on("setHoverIndex", function(e, t) {
                    a.currentIndex = t
                }), a.options.gtNumberOfStocks && a.$on("filterByNumberOfStocks", function(e, t) {
                    t ? (a.receivedApiConfig.api[a.options.gtNumberOfStocks] = "", a.apiConfig.api[a.options.gtNumberOfStocks] = "") : (delete a.receivedApiConfig.api[a.options.gtNumberOfStocks], delete a.apiConfig.api[a.options.gtNumberOfStocks]), f.search().page && "all" !== f.search().page && f.search("page", null), a.apiConfig.api.page = 1, a.page = 1, a.initializePaginationOptions(), k()
                })
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    tabs: "=",
                    content: "=",
                    options: "=",
                    sticky: "=",
                    symbolDetails: "@",
                    apiConfig: "=",
                    dataLoading: "=",
                    stickyWidth: "@",
                    route: "@",
                    watchFor: "=",
                    applyHandlers: "=",
                    customHandlers: "=",
                    pageSector: "@",
                    useBlankRow: "=",
                    excludeLastPrice: "=",
                    sharedSorting: "@",
                    groupingKey: "=",
                    initRemoveExcludedFields: "="
                },
                template: a("zK4F"),
                controller: b
            }
        }
        o.$inject = ["datatableApiFactory", "quotesService", "barchartDatatableService", "$timeout", "barchartDatatableCallbackHandlers", "utils", "_", "barchartDatatableRealtime", "realtimeConnectService", "$rootScope", "$window", "barchartDatatableContentHandlers", "barchartDatatableColorize", "locationService", "$location"], e.exports = o
    },
    "9TZC": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    ref: "@",
                    user: "=",
                    close: "&"
                },
                controller: ["$scope", function(a) {
                    a.hasErrors = !1, a.errors = {}, a.user = a.user || {}, a.widgetId = !1, a.grecaptchaInvisibleKey = o.grecaptchaInvisibleKey, a.sendPass = function(e) {
                        if (a.hasErrors = e.$invalid, a.hasErrors) return !1;
                        n.execute(a.widgetId)
                    }, a.onRender = function(e) {
                        a.widgetId = e
                    }, a.onSuccess = function() {
                        e.sendPass(a.user.email.toLowerCase()).then(function() {
                            a.success = !0
                        }, function(e) {
                            a.success = !1, a.errors = e.error.message, a.hasErrors = !0
                        })
                    }, a.goToBack = function() {
                        t.clearErrors(), t.setData(a.user), r.history.back()
                    }, a.backToLogin = function() {
                        t.clearErrors(), t.setData(a.user), s.search().ref ? i.goToLogin(s.search().ref) : i.goToLogin(null)
                    }, a.goToContact = function() {
                        t.clearErrors(), t.setData(a.user), i.goToContact(null)
                    }
                }],
                template: a("RrvE")
            }
        }
        i.$inject = ["authApiService", "userAuthFormData", "authRouteService", "$window", "appConfig", "vcRecaptchaService", "$location"], e.exports = i
    },
    "9V2S": function(e, t, a) {
        "use strict";
        e.exports = function() {
            function e(e) {
                this.form = e, this.errors = {}
            }
            return e.prototype.validate = function() {
                var e = this;
                return Object.keys(this.form.$error).forEach(function(t) {
                    switch (t) {
                        case "required":
                            e.errors.required = "Please fill out all fields and try again.";
                            break;
                        case "invalidEmail":
                            e.errors.invalidEmail = "Please enter a valid, non-disposable email and try again."
                    }
                }), this
            }, e.prototype.fails = function() {
                return Object.keys(this.errors).length > 0
            }, e.prototype.getErrors = function() {
                return this.errors
            }, e
        }
    },
    "9Ybc": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                scope: {
                    formData: "=",
                    inputPrefix: "=",
                    inputSuffix: "="
                },
                link: function(t) {
                    var a;
                    t.notifyAboutFieldChange = function() {
                        e.checkPermissions() ? t.$emit("screenerRangeInputChanged") : t.formData = angular.copy(a)
                    }, t.formData = t.formData && t.formData.length > 0 ? t.formData : ["", ""];
                    var i = t.$watch(function() {
                        return t.formData
                    }, function() {
                        t.formData.length && (a = angular.copy(t.formData), i())
                    })
                },
                template: a("j2qC")
            }
        }
        i.$inject = ["screenerPermissionService"], e.exports = i
    },
    "9cW9": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {},
                controller: ["interactiveChartModals", "$rootScope", "dashboardGridSettings", "$scope", function(e, t, a, i) {
                    var r = this;
                    r.aggregation = a.getChartSettings().aggregation, r.resetDialog = function() {
                        e.resetDialog().then(function() {
                            a.setTemplate(null), a.setState(null), a.rasetChartSettings(null), t.$broadcast("dashboardTemplateGridReset"), t.$broadcast("dashboardGridHardReset"), r.aggregation = a.getChartSettings().aggregation
                        })
                    }, i.$on("gridChartChanged", function() {
                        r.aggregation = a.getChartSettings().aggregation
                    })
                }],
                controllerAs: "$ctrl",
                template: a("60LD")
            }
        }
    },
    "9fVm": function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                transclude: !0,
                template: a("1ETt"),
                link: function(a, i, r) {
                    var o = i.children()[0];

                    function n() {
                        var e;
                        (e = o).scrollWidth - 1 > e.clientWidth && e.scrollLeft + e.clientWidth < e.scrollWidth - 1 ? i.addClass("scrollable-left") : i.removeClass("scrollable-left"),
                            function(e) {
                                return e.scrollWidth - 1 > e.clientWidth && e.scrollLeft > 0
                            }(o) ? i.addClass("scrollable-right") : i.removeClass("scrollable-right")
                    }
                    e(function() {
                        n()
                    }), o.onscroll = function() {
                        n()
                    }, angular.element(t).bind("resize", function() {
                        n()
                    }), i.find("table").length && a.$watch(function() {
                        return i.find("table")[0].offsetWidth
                    }, function() {
                        n()
                    })
                }
            }
        }
        i.$inject = ["$timeout", "$window"], e.exports = i
    },
    "9fmJ": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <form class=bc-form name=dashboardGridAggregationModalForm novalidate> <div class=modal-settings-row> <div class=label>Custom Period</div> </div> <div class=modal-settings-row> <div class="row collapse"> <div class="column small-6"> <div class="bc-dropdown styled"> <select data-ng-model=$ctrl.selectedAggregation.aggregation data-ng-options="item.label disable when $ctrl.currentChartConfig.aggregation.spec === \'Continue\' && item.spec === \'Nearest\' for item in $ctrl.aggregations" data-ng-change=$ctrl.changeAggregation()></select> </div> </div> <div class="column small-3"> <div class=interactive-chart-field-period> <div class="bc-dropdown styled"> <select data-ng-model=$ctrl.selectedAggregation.period data-ng-options="period.labelShort for period in $ctrl.periods[$ctrl.selectedAggregation.aggregation.unit]" data-ng-change=$ctrl.changePeriod()></select> </div> </div> </div> <div class="column small-3"> <div class="interactive-chart-field-minutes bc-form" data-ng-show="$ctrl.selectedAggregation.aggregation.unit === \'Intraday\'"> <label class=interactive-chart-field-minutes__label>Mins.</label> <div class=interactive-chart-field-minutes__fieldset> <input type=number data-ng-model=$ctrl.selectedAggregation.aggregation.size min=1 max=999 data-ng-disabled="$ctrl.selectedAggregation.aggregation.unit !== \'Intraday\'" data-ng-show="$ctrl.selectedAggregation.aggregation.unit === \'Intraday\'"/> </div> </div> </div> </div> </div> <div class="show-for-medium-up for-tablet-and-desktop" data-ng-if=$ctrl.selectedAggregation.range data-ng-hide="$ctrl.selectedAggregation.period.period !== \'CUSTOM\'"> <div class="interactive-chart-date-range bc-form"> <div class=bc-datepicker-item> <input type=text data-ng-model=$ctrl.selectedAggregation.range.from data-ng-change=$ctrl.changeRange() placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-ng-disabled="$ctrl.selectedAggregation.period.period !== \'CUSTOM\'"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> <span>-</span> <div class="interactive-chart-date-range bc-form"> <div class=bc-datepicker-item> <input type=text data-ng-model=$ctrl.selectedAggregation.range.to data-ng-change=$ctrl.changeRange() placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-ng-disabled="$ctrl.selectedAggregation.period.period !== \'CUSTOM\' || !$ctrl.selectedAggregation.range.from"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> </div> <div class="modal-settings-row show-for-small-down" data-ng-if=$ctrl.selectedAggregation.range data-ng-hide="$ctrl.selectedAggregation.period.period !== \'CUSTOM\'"> <div class="interactive-chart-date-range bc-form"> <label for=interactive-chart-date-range-from-selector>Start Date:</label> <div class=bc-datepicker-item> <input type=text id=interactive-chart-date-range-from-selector data-ng-model=$ctrl.selectedAggregation.range.from data-ng-change=$ctrl.changeRange() placeholder=MM/DD/YY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-ng-disabled="$ctrl.selectedAggregation.period.period !== \'CUSTOM\'"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> </div> <div class="modal-settings-row show-for-small-down" data-ng-if=$ctrl.selectedAggregation.range data-ng-hide="$ctrl.selectedAggregation.period.period !== \'CUSTOM\'"> <div class="interactive-chart-date-range bc-form"> <label for=interactive-chart-date-range-to-selector>End Date:</label> <div class=bc-datepicker-item> <input type=text id=interactive-chart-date-range-to-selector data-ng-model=$ctrl.selectedAggregation.range.to data-ng-change=$ctrl.changeRange() placeholder=MM/DD/YY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-ng-disabled="$ctrl.selectedAggregation.period.period !== \'CUSTOM\' || !$ctrl.selectedAggregation.range.from"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> </div> </form> <div class="modal-settings-row text-center"> <button class="bc-button grey" data-ng-click=$ctrl.modalDismiss()> Cancel </button> <button class="bc-button light-blue" data-ng-click=$ctrl.modalConfirm() data-ng-disabled=dashboardGridAggregationModalForm.$invalid> Apply </button> </div> </div>'
    },
    "9fvB": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <form class=bc-form name=interactiveChartAggregationModalForm novalidate> <div class=modal-settings-row> <div class=label>Custom Period</div> </div> <div class=modal-settings-row> <div class="row collapse"> <div class="column small-6"> <div class="bc-dropdown styled"> <select data-ng-model=selectedAggregation.aggregation data-ng-options="item.label disable when currentChartConfig.aggregation.spec === \'Continue\' && item.spec === \'Nearest\' for item in aggregations" data-ng-change=changeAggregation()></select> </div> </div> <div class="column small-3"> <div class=interactive-chart-field-period> <div class="bc-dropdown styled"> <select data-ng-model=selectedAggregation.period data-ng-options="period.labelShort for period in periods[selectedAggregation.aggregation.unit]" data-ng-change=changePeriod()></select> </div> </div> </div> <div class="column small-3"> <div class="interactive-chart-field-minutes bc-form" data-ng-show="selectedAggregation.aggregation.unit === \'Intraday\'"> <label class=interactive-chart-field-minutes__label>Mins.</label> <div class=interactive-chart-field-minutes__fieldset> <input type=number data-ng-model=selectedAggregation.aggregation.size min=1 max=999 data-ng-disabled="selectedAggregation.aggregation.unit !== \'Intraday\'" data-ng-show="selectedAggregation.aggregation.unit === \'Intraday\'"/> </div> </div> </div> </div> </div> <div class="show-for-medium-up for-tablet-and-desktop" data-ng-if=selectedAggregation.range data-ng-hide="selectedAggregation.period.period !== \'CUSTOM\'"> <div class="interactive-chart-date-range bc-form"> <div class=bc-datepicker-item> <input type=text data-ng-model=selectedAggregation.range.from data-ng-change=changeRange() placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-ng-disabled="selectedAggregation.period.period !== \'CUSTOM\'"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> <span>-</span> <div class="interactive-chart-date-range bc-form"> <div class=bc-datepicker-item> <input type=text data-ng-model=selectedAggregation.range.to data-ng-change=changeRange() placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-ng-disabled="selectedAggregation.period.period !== \'CUSTOM\' || !selectedAggregation.range.from"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> </div> <div class="modal-settings-row show-for-small-down" data-ng-if=selectedAggregation.range data-ng-hide="selectedAggregation.period.period !== \'CUSTOM\'"> <div class="interactive-chart-date-range bc-form"> <label for=interactive-chart-date-range-from-selector>Start Date:</label> <div class=bc-datepicker-item> <input type=text id=interactive-chart-date-range-from-selector data-ng-model=selectedAggregation.range.from data-ng-change=changeRange() placeholder=MM/DD/YY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-ng-disabled="selectedAggregation.period.period !== \'CUSTOM\'"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> </div> <div class="modal-settings-row show-for-small-down" data-ng-if=selectedAggregation.range data-ng-hide="selectedAggregation.period.period !== \'CUSTOM\'"> <div class="interactive-chart-date-range bc-form"> <label for=interactive-chart-date-range-to-selector>End Date:</label> <div class=bc-datepicker-item> <input type=text id=interactive-chart-date-range-to-selector data-ng-model=selectedAggregation.range.to data-ng-change=changeRange() placeholder=MM/DD/YY data-date-format=MM/dd/yyyy data-bs-datepicker autocomplete=off data-ng-disabled="selectedAggregation.period.period !== \'CUSTOM\' || !selectedAggregation.range.from"> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> </div> </form> <p class=form-error-row data-ng-show=error data-ng-bind=error></p> <div class="modal-settings-row text-center"> <button class="bc-button grey" data-ng-click=modalDismiss()>Cancel</button> <button class="bc-button light-blue" data-ng-click=modalConfirm() data-ng-disabled=interactiveChartAggregationModalForm.$invalid>Apply</button> </div> </div>'
    },
    "9gY/": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    charts: "=",
                    groupId: "@",
                    groupName: "@"
                },
                controller: ["_", "myChartsApiService", "Notification", "utils", "authService", "$window", "textFactory", function(e, t, a, i, r, o, n) {
                    var s = this;
                    s.treeCharts = angular.copy(s.charts), s.errors = {}, s.pendingChartDelete = null;
                    var l = r.getCharts();
                    s.removeChart = function(e) {
                        s.pendingChartDelete = e
                    }, s.removeChartCancel = function() {
                        s.pendingChartDelete = null
                    }, s.removeChartConfirm = function(r, o) {
                        var n = o.id,
                            l = i.htmlEntities(o.name),
                            c = e.findIndex(s.charts, function(e) {
                                return e.id === n
                            });
                        t.removeChart(n).then(function() {
                            a.success("Chart " + l + " has been deleted."), s.treeCharts.splice(r, 1), s.charts.splice(c, 1)
                        }).catch(function() {
                            a.error("Something went wrong. Please try again."), s.pendingChartDelete = null
                        })
                    };
                    var c = !1;

                    function d() {
                        var i = e.pluck(s.treeCharts, "id"),
                            r = e.pluck(s.charts, "id");
                        JSON.stringify(i) !== JSON.stringify(r) && t.orderChart(s.groupId, {
                            ids: i
                        }).then(function() {
                            s.charts = angular.copy(s.treeCharts), a.success("The changes were saved.")
                        })
                    }
                    s.isNewDisabled = r.getEodReportsNumber("charts", "email") >= o.config.limits.reportsLimit, s.showMessage = function(e) {
                        !c && e && a.warning({
                            message: n("MAX_EOD_REPORTS_CHARTS"),
                            delay: 8e3
                        }), c = !0, setTimeout(function() {
                            c = !1
                        })
                    }, s.sendEmail = function(i) {
                        t.updateChart(i.id, {
                            email: i.email
                        }).then(function(t) {
                            var n = e.findIndex(l, {
                                id: i.id
                            });
                            l[n] = angular.copy(t.data), r.setCharts(l), s.isNewDisabled = r.getEodReportsNumber("charts", "email") >= o.config.limits.reportsLimit, a.success("End of Day Email preferences have been saved.")
                        })
                    }, s.save = function(i, r) {
                        s.errors = {};
                        var o = e.pluck(s.treeCharts, "name"),
                            n = e.filter(o, function(t, a, i) {
                                return e.includes(i, t, a + 1)
                            });
                        Object.keys(s.treeCharts).forEach(function(e) {
                            var t = i["name" + s.treeCharts[e].id];
                            n.length && -1 !== n.indexOf(s.treeCharts[e].name) ? t.$setValidity("uniqueName", !1) : t.$setValidity("uniqueName", !0)
                        }), i.$invalid ? Object.keys(i.$error).forEach(function(e) {
                            "uniqueName" !== e && "maxlength" !== e && "required" !== e && (s.errors[e] = !0)
                        }) : t.updateChart(r.id, {
                            name: r.name
                        }).then(function() {
                            a.success("Chart name has been changed.")
                        })
                    }, s.moveSymbolTop = function(e) {
                        s.treeCharts.splice(0, 0, s.treeCharts.splice(e, 1)[0]), d()
                    }, s.sortOptions = {
                        dropped: function() {
                            setTimeout(d)
                        }
                    }, s.sortRows = function() {
                        switch (s.sortOrder) {
                            case "name":
                                s.treeCharts = e.sortBy(s.treeCharts, function(e) {
                                    return e.name.toLowerCase()
                                }, ["asc"]);
                                break;
                            case "symbol":
                                s.treeCharts = e.sortBy(s.treeCharts, function(e) {
                                    return e.symbol.toLowerCase()
                                }, ["asc"])
                        }
                        d(), s.sortOrder = ""
                    }
                }],
                controllerAs: "$ctrl",
                template: a("pmun")
            }
        }
    },
    "9hnt": function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    parentModalInstance: "="
                },
                link: function(a, r, o) {
                    var n = [];
                    a.studiesOverlay = [], a.studiesIndicators = [], a.currentStudies = [], a.groupedStudies = {}, t.getChartTaxonomy().then(function(i) {
                        n = angular.copy(i.studies), i.studies.forEach(function(e) {
                            e.name = e.meta.title, "CSHO" !== e.id && "CSHB" !== e.id && (e.meta.overlay ? a.studiesOverlay.push(e) : a.studiesIndicators.push(e))
                        }), a.groupedStudies = e.groupBy(n, "id"), a.currentStudies = t.getTechnicalStudies()
                    }), a.addStudy = function(e) {
                        var t = i.studyModal(e);
                        a.parentModalInstance.close({
                            type: "add",
                            taxonomyModalPromise: t
                        })
                    }, a.updateStudy = function(t, r) {
                        var o = e.find(n, {
                            id: t.studyId
                        });
                        if (o) {
                            o.defaults.inputs = t.inputs ? t.inputs : o.defaults.inputs, o.defaults.curves = t.curves ? t.curves : o.defaults.curves, o.defaults.levels = t.levels ? t.levels : o.defaults.levels, o.defaults.bands = t.bands ? t.bands : o.defaults.bands, o.defaults.placement = t.placement || "";
                            var s = i.studyModal(o, r, !0, !1);
                            a.parentModalInstance.close({
                                type: "update",
                                taxonomyModalPromise: s
                            })
                        }
                    }, a.removeStudy = function(e) {
                        t.removeTechnicalStudy(e), a.parentModalInstance.close()
                    }, a.modalDismiss = function() {
                        a.parentModalInstance.dismiss()
                    }
                },
                template: a("Rw3y")
            }
        }
        i.$inject = ["_", "interactiveChartApi", "interactiveChartModals"], e.exports = i
    },
    "9iHu": function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {
                    title: "@",
                    description: "@",
                    redirectUrl: "=",
                    convertType: "@",
                    chartType: "@",
                    tChartData: "=",
                    loading: "=",
                    setChartPageUrl: "=",
                    dynamicTitle: "=",
                    symbol: "="
                },
                require: "^bcSocialChartShare",
                link: function(a, i, r, o) {
                    function n() {
                        var i, r = Object.create(e.linkedin.win);
                        a.loading = !0, i = a.dynamicTitle || a.title, o.getImageChart(i, a.description, a.chartType, a.convertType, r, a.tChartData ? a.tChartData.image : null).then(function(e) {
                            o.getRedirectUrl(a.redirectUrl, a.chartType, e, a.setChartPageUrl, a.symbol).then(function(n) {
                                "technical" === a.chartType && (n = encodeURIComponent(t.location.pathname + t.location.hash));
                                var s = o.getShareLinkPartialEncoded({
                                        disableUrl: !0,
                                        title: i,
                                        description: a.description,
                                        image: e,
                                        redirectUrl: n
                                    }),
                                    l = {
                                        winUrl: r.url,
                                        url: s,
                                        title: i,
                                        description: a.description
                                    };
                                r.url = o.getLink(l), window.dataLayer.push({
                                    event: "socialInteraction",
                                    socialNetwork: "Linkedin",
                                    socialAction: "Share",
                                    socialTarget: s
                                }), o.share(r), a.loading = !1
                            })
                        })
                    }
                    i.on("click", n), a.$on("$destroy", function() {
                        i.off("click", n)
                    })
                }
            }
        }
        i.$inject = ["bcShareConfig", "$window"], e.exports = i
    },
    "9j6B": function(e, t, a) {
        "use strict";
        var i = "MyAccount";
        angular.module(i, []).controller(i + ".myAccountCtrl", a("T63w")).factory("accountEditApiFactory", a("VJsW")).directive("linkSocialAccounts", a("Kcaa")).service("providerConnectApiService", a("672W"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "9j6n": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.fundamental = a, e.fundamental.frequency || (e.fundamental.frequency = "Year"), e.fundamental.curves = a.curves || [{
                colors: ["#000"],
                lineWidth: 1
            }], e.addFundamentalConfirm = function() {
                var a = {
                    name: e.fundamental.name + " " + ("Year" === e.fundamental.frequency ? "(Y)" : "(Q)"),
                    item: e.fundamental
                };
                t.close(a)
            }, e.modalDismiss = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "fundamentalData"], e.exports = i
    },
    "9kXl": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                controller: ["$scope", "$window", function(e, t) {
                    var a = this;
                    a.childrenHeights = [], a.allocateMe = function() {
                        return a.childrenHeights.push(0), a.childrenHeights.length - 1
                    }, a.updateMyHeight = function(e, t) {
                        a.childrenHeights[e] = t
                    }, a.getTallestHeight = function() {
                        for (var e = 0, t = 0; t < a.childrenHeights.length; t++) e = Math.max(e, a.childrenHeights[t]);
                        return e
                    }, angular.element(t).bind("resize", function() {
                        return e.$apply()
                    })
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    "9lqw": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            return {
                getRelatedEtfsData: function() {
                    var a = s,
                        o = a.api.method || "/quotes/get";
                    return delete a.api.method, e.call(i.buildUrl(r.API_URL + o, a.api), t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "_", "utils", "apiConfig", "ApiConverter", "$q", "RelatedEtfsApiConfig"], e.exports = i
    },
    "9mD1": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                scope: {
                    sectorSymbol: "@"
                },
                template: a("Ek6K"),
                controller: ["$scope", "symbolCompetitorsApiFactory", "utils", function(e, t, a) {
                    e.rowChart = {}, e.$on("filterChange", function(a, i) {
                        "quoteSectors" === i.name && (e.sectorSymbol = i.value, t.getSectorData(e.sectorSymbol).then(function(t) {
                            ! function(t, a) {
                                e.rowChart.lowLabel = a.lowPrice1y, e.rowChart.highLabel = a.highPrice1y, e.rowChart.lowValue = t.lowPrice1y, e.rowChart.highValue = t.highPrice1y, e.rowChart.lastPrice = t.lastPrice, e.rowChart.priceChange = t.priceChange;
                                var i = t.raw,
                                    r = i.highPrice1y - i.lowPrice1y;
                                e.rowChart.width = 0 === r ? 100 : (i.lastPrice - i.lowPrice1y) / r * 100, t.raw.openPrice && (e.rowChart.markValue = t.openPrice, e.rowChart.mark = 0, e.rowChart.mark = (i.openPrice - i.lowPrice1y) / r * 100, e.rowChart.mark < 0 && (e.rowChart.mark = 0), e.rowChart.mark > 100 && (e.rowChart.mark = 100))
                            }(t.data[0], t.meta.field.name)
                        }))
                    }), e.setColor = a.setColor
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    "9oRc": function(e, t) {
        e.exports = '<div class=interactive-chart__mobile-tab-studies> <div class=study-mobile-modal__study-data> <div data-ng-if="currentFundamentals && (currentFundamentals.BalanceSheet.length || currentFundamentals.IncomeStatement.length)"> <div class=label>Current Fundamentals</div> <ul class="study-mobile-modal__studies-list current-studies-list"> <li class=study-mobile-modal__studies-list-item data-ng-if=currentFundamentals.BalanceSheet.length data-ng-repeat="fundamental in currentFundamentals.BalanceSheet track by $index"> <i class=bc-glyph-times data-ng-click="removeFundamental($index, \'BalanceSheet\')"></i> <a data-ng-click="updateFundamental(fundamental, \'BalanceSheet\', $index)">[[ fundamental.title ]]</a> </li> <li class=study-mobile-modal__studies-list-item data-ng-if=currentFundamentals.IncomeStatement.length data-ng-repeat="fundamental in currentFundamentals.IncomeStatement track by $index"> <i class=bc-glyph-times data-ng-click="removeFundamental($index, \'IncomeStatement\')"></i> <a data-ng-click="updateFundamental(fundamental, \'IncomeStatement\', $index)">[[ fundamental.title ]]</a> </li> </ul> <div class=separator></div> </div> <div class=clear-button-wrapper> <input type=text data-bc-auto-focus=desktop placeholder="Search for fundamentals..." data-ng-model=searchItem.name data-barchart-clear-input> </div> <div class=bc-interactive-chart__fundamentals-list> <div class=label data-ng-hide=!filteredBalanceSheet.length>Balance Sheet</div> <ul class=study-mobile-modal__studies-list data-ng-show=balanceSheets.length> <li class=study-mobile-modal__studies-list-item data-ng-repeat="fundamentalItem in balanceSheets | filter:searchItem as filteredBalanceSheet track by $index"> <div data-ng-click="addFundamental(fundamentalItem, \'BalanceSheet\')">[[ fundamentalItem.name ]]</div> </li> </ul> <div class=separator data-ng-hide=!filteredIncomeStatement.length></div> <div class=label data-ng-hide=!filteredIncomeStatement.length>Income Statement</div> <ul class=study-mobile-modal__studies-list data-ng-show=incomeStatements.length> <li class=study-mobile-modal__studies-list-item data-ng-repeat="fundamentalItem in incomeStatements | filter:searchItem as filteredIncomeStatement track by $index"> <div data-ng-click="addFundamental(fundamentalItem, \'IncomeStatement\')">[[ fundamentalItem.name ]]</div> </li> </ul> </div> </div> </div> '
    },
    "9r1Y": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            var n = ["$scope", "WatchlistEditBlockApiFactory", function(a, n) {
                a.watchlist = JSON.parse(a.watchlistData), a.userEnteredSymbols = "", a.watchlistLimitReached = !1, a.invalidSymbolsAlreadyInList = [], a.invalidSymbolsInRequest = null;
                var s = 1e3;
                a.addSymbolsToWatchlist = function() {
                    a.watchlistLimitReached = !1;
                    var l = a.userEnteredSymbols.trim().replace(/\s/g, ",").replace(/(,+)/g, ",").toUpperCase().split(",");
                    s = 1e3, a.watchlist.symbols.length >= 1e3 ? a.watchlistLimitReached = "Watchlist has reached its maximum of 1000 symbols/rows." : (s -= a.watchlist.symbols.length, function(l) {
                        t.validateWatchlistSymbols(l).then(function(t) {
                            a.invalidSymbolsAlreadyInList = [], a.invalidSymbolsNotFound = t.invalidSymbols;
                            var l = o.find(r.getWatchlists(), {
                                    id: a.watchlist.id
                                }),
                                c = [];
                            Object.keys(t.validSymbols).forEach(function(e) {
                                -1 !== l.symbols.indexOf(e) ? a.invalidSymbolsAlreadyInList.push(e) : c.length < s ? c.push(e) : a.watchlistLimitReached = "Watchlist has reached its maximum of 1000 symbols."
                            }), c.length > 0 && n.saveWatchlistSymbols(a.watchlist.id, c).then(function(t) {
                                var n = r.getWatchlists(),
                                    s = o.findKey(n, {
                                        id: a.watchlist.id
                                    });
                                n[s].symbols = t.data[0].symbols, r.setWatchlists(n), a.watchlist.symbols = t.data[0].symbols, e.$broadcast("symbolAddedToWatchlist", {
                                    symbols: t.data[0].symbols
                                });
                                var l = 1 === c.length ? "Symbol " : "Symbols ";
                                l += c.join(", ") + " added to the bottom of the list.", i.success(l), a.userEnteredSymbols = ""
                            }, function(e) {
                                var t = e.error && e.error.message ? e.error.message : {};
                                t.symbol && t.symbol[0] && (a.invalidSymbolsInRequest = t.symbol[0]), console.warn("Could not save symbols to watchlist:", e)
                            })
                        })
                    }(l))
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    watchlistData: "@"
                },
                template: a("LfMQ"),
                controller: n
            }
        }
        i.$inject = ["$rootScope", "watchlistEditApiFactory", "Notification", "authService", "_"], e.exports = i
    },
    "9sS7": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.dataLoading = !0, e.type = "corn";
            var i = {
                    corn: "ZCPAUS.CM",
                    wheat_soft: "ZWPAUS.CM",
                    wheat_hard: "KEPAUS.CM",
                    wheat_state: "MWPAUS.CM",
                    soybean: "ZSPAUS.CM"
                },
                r = {
                    corn: {
                        "ZCPAIA.CM": "Iowa",
                        "ZCPAIL.CM": "Illinois",
                        "ZCPAIN.CM": "Indiana",
                        "ZCPAKS.CM": "Kansas",
                        "ZCPAMI.CM": "Michigan",
                        "ZCPAMN.CM": "Minnesota",
                        "ZCPAMO.CM": "Missouri",
                        "ZCPANC.CM": "North Carolina",
                        "ZCPAND.CM": "North Dakota",
                        "ZCPANE.CM": "Nebraska",
                        "ZCPAOH.CM": "Ohio",
                        "ZCPAOK.CM": "Oklahoma",
                        "ZCPASD.CM": "South Dakota",
                        "ZCPATX.CM": "Texas",
                        "ZCPAWI.CM": "Wisconsin"
                    },
                    wheat_soft: {
                        "ZWPAIL.CM": "Illinois",
                        "ZWPAIN.CM": "Indiana",
                        "ZWPAMI.CM": "Michigan",
                        "ZWPAMO.CM": "Missouri",
                        "ZWPAOH.CM": "Ohio",
                        "ZWPAWI.CM": "Wisconsin"
                    },
                    wheat_hard: {
                        "KEPAKS.CM": "Kansas",
                        "KEPANE.CM": "Nebraska",
                        "KEPAOK.CM": "Oklahoma",
                        "KEPASD.CM": "South Dakota",
                        "KEPATX.CM": "Texas"
                    },
                    wheat_state: {
                        "MWPAMN.CM": "Minnesota",
                        "MWPAND.CM": "North Dakota"
                    },
                    soybean: {
                        "ZSPAIA.CM": "Iowa",
                        "ZSPAIL.CM": "Illinois",
                        "ZSPAIN.CM": "Indiana",
                        "ZSPAKS.CM": "Kansas",
                        "ZSPAMI.CM": "Michigan",
                        "ZSPAMN.CM": "Minnesota",
                        "ZSPAMO.CM": "Missouri",
                        "ZSPAND.CM": "North Dakota",
                        "ZSPANE.CM": "Nebraska",
                        "ZSPAOH.CM": "Ohio",
                        "ZSPAOK.CM": "Oklahoma",
                        "ZSPASD.CM": "South Dakota",
                        "ZSPAWI.CM": "Wisconsin"
                    }
                };
            e.init = function(a) {
                var i = {
                    list: a,
                    fields: "symbol,stateName,lastPrice",
                    raw: 1
                };
                t.getRates(i).then(function(t) {
                    e.items = t.data, e.dataLoading = !1
                })
            }, e.initGrains = function(o) {
                e.type = o;
                var n = "";
                ("wheat" === e.type ? ["wheat_soft", "wheat_hard", "wheat_state"] : [e.type]).forEach(function(e) {
                    n += i[e] + "," + Object.keys(r[e]) + ","
                });
                var s = {
                    symbols: n,
                    fields: "symbol,stateName,lastPrice",
                    raw: 1
                };
                t.getRates(s).then(function(t) {
                    e.items = [], ("wheat" === e.type ? ["wheat_soft", "wheat_hard", "wheat_state"] : [e.type]).forEach(function(o) {
                        var n = angular.copy(a.find(t.data, "symbol", i[o]));
                        t.data.forEach(function(t) {
                            r[o] && r[o][t.symbol] && t.symbol !== n.symbol && (t.stateName = r[o][t.symbol], t.raw.lastPrice = (t.raw.lastPrice - n.raw.lastPrice) / n.raw.lastPrice, t.lastPrice = (100 * t.raw.lastPrice).toFixed(2), e.items.push(t))
                        })
                    }), e.dataLoading = !1
                })
            }
        }
        i.$inject = ["$scope", "RatesMapApiFactory", "_"], e.exports = i
    },
    "9tPm": function(e, t, a) {
        "use strict";

        function i(e) {
            this.getValueClass = function(e) {
                var t = "";
                return e && "N/A" !== e ? "0" === e || "unch" === e ? t = "unch" : 0 === e.toString().indexOf("-") ? t = "down" : 0 === e.toString().indexOf("+") && (t = "up") : t = "", t
            }
        }
        i.$inject = ["_"], e.exports = i
    },
    "9vIg": function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                getHref: function(a) {
                    var i = "/change-market/" + a;
                    return e.call(i, t.POST).then(function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs"], e.exports = i
    },
    "9wO9": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login technical-chart-display-settings-content study-modal"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=$ctrl.close()></i> </div> </div> <div class=settings> <div class=title> Share Chart With: </div> <div class=social-component> <ul class=social-list bc-social-chart-share> <li class="social-icon icon-facebook" title="Share on Facebook"> <a data-bc-facebook-share-chart data-ng-class="{\'social-loading\': $ctrl.facebookLoading}" data-title="[[ ::$ctrl.title ]]" data-description="[[ ::$ctrl.specificDesc ]]" data-convert-type=base64 data-chart-type=technical data-loading=$ctrl.facebookLoading data-redirect-url=$ctrl.redirectUrl data-symbol=$ctrl.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-facebook></i> </a> </li> <li class="social-icon icon-google-plus" title="Share on Google+"> <a data-bc-gplus-share-chart data-title="[[ ::$ctrl.title ]]" data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type=base64 data-chart-type=technical data-redirect-url=$ctrl.redirectUrl data-ng-class="{\'social-loading\': $ctrl.gplusLoading}" data-loading=$ctrl.gplusLoading data-symbol=$ctrl.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-google-plus></i> </a> </li> <li class="social-icon icon-linkedin" title="Share on LinkedIn"> <a data-bc-linkedin-share-chart data-title="[[ ::$ctrl.title ]]" data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type=base64 data-chart-type=technical data-redirect-url=$ctrl.redirectUrl data-ng-class="{\'social-loading\': $ctrl.linkedinLoading}" data-loading=$ctrl.linkedinLoading data-symbol=$ctrl.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-linkedin></i> </a> </li> <li class="social-icon icon-twitter" title="Share on Twitter"> <a data-bc-twitter-share-chart data-text="[[ ::$ctrl.twitterTitle ]]" data-title="[[ ::$ctrl.title ]]" data-description="[[ ::$ctrl.specificDesc ]]" data-convert-type=base64 data-chart-type=technical data-redirect-url=$ctrl.redirectUrl data-ng-class="{\'social-loading\': $ctrl.twitterLoading}" data-loading=$ctrl.twitterLoading data-symbol=$ctrl.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-twitter></i> </a> </li> <li class="social-icon email" title="Share via Email"> <a data-bc-mail-share-chart data-title="[[ ::$ctrl.title ]]" data-convert-type=base64 data-chart-type=technical data-t-chart-data=$ctrl.chartData data-on-shared=$ctrl.close() data-link="[[ ::$ctrl.redirectUrl ]]" class=emailShare> <i class=bc-glyph-envelope-o></i> </a> </li> </ul> </div> </div> </div>'
    },
    A4RV: function(e, t, a) {
        "use strict";
        e.exports = {
            apiConfig: {},
            options: {
                class: "no-top-border",
                colorize: ["priceChange", "percentChange", "breakEvenPercent", "maxProfit", "maxProfitPercent"],
                symbolDetails: !0,
                quickLinks: !0,
                tableName: "default",
                paginationHideShowAll: !0,
                disabledRealtime: !0,
                callback: "changeTimeHeader",
                emptyText: "No symbols found that match the requirements."
            }
        }
    },
    A7nj: function(e, t) {
        e.exports = '<div class=bc-screener> <div class="in-page-nav clearfix"> <ul class=clearfix> <li data-ng-class="{\'active\': state === STATE_FILTERS }"> <a href="" data-ng-click=backToFilter()>Set Filters</a> </li> <li data-ng-class="{\'active\': state === STATE_RESULTS }"> <a href="" data-ng-click=applyFilters()>Results</a> </li> </ul> <div data-ng-show="state === STATE_FILTERS" class=bc-screener__organize-button-wrapper> <a target=_self href="[[ ::myScreenerLink ]]" class="bc-button small dark-blue" title="Organize Saved Screeners">Organize Saved Screeners</a> </div> </div> <div data-ng-show="state === STATE_FILTERS"> <screener-options-set-filters data-default-filter="[[ ::defaultFilter ]]" data-filter-display-fields=filterDisplayFields data-form-data=formData data-type="[[ ::type ]]"></screener-options-set-filters> <div class=bc-screener__footer> <a class="bc-screener__see-results-button bc-button upper light-blue" data-ng-click=applyFilters()> See Results </a> </div> </div> <div data-ng-show="state === STATE_RESULTS && init === true"> <screener-total-match data-api-config=dataTable.apiConfig data-saved-screener=savedScreener data-type="[[ ::type ]]" data-filters=formData.filters data-hide-watchlist=hideWatchlist></screener-total-match> <div class="bc-screener__toolbar bc-screener__result-toolbar bc-datatable-toolbar clearfix"> <div class=toolbar-group> <span class="bc-screener__toolbar-title text-uppercase">Load a screener:</span> <screener-saved-screeners data-saved-screener=savedScreener data-type="[[ ::type ]]"></screener-saved-screeners> <div class="bc-dropdown filter view-name"> <select data-disable-broadcast=true data-ng-model=tableView data-change-filter name=viewName> <option value=main>Main View</option> <option value=dividends_earnings>Dividends & Earnings</option> <option value=filter_view>Filter View</option> </select> </div> </div> <div class="toolbar-group clearfix"> <div class="buttons right"> <a data-ng-show=videoTutorialData class="toolbar-button video" data-bc-video-tutorial-modal data-title="[[ ::videoTutorialData.title ]]" data-link-mp4="[[ ::videoTutorialData.linkMp4 ]]"> <i class=bc-glyph-film></i> <span>tutorial</span> </a> <a class="toolbar-button flipcharts" title="View charts for all symbols" data-bc-flipcharts=flipcharts data-symbol-key=baseSymbol><i class=bc-glyph-flipcharts></i> flipcharts</a> <a class="toolbar-button download" title="Download page to .csv file" data-bc-download-button data-download-limit=1000><i class=bc-glyph-download></i> download</a> </div> </div> </div> <barchart-datatable data-ng-hide=dataLoading data-sticky=true data-api-config=dataTable.apiConfig data-custom-handlers="{\'filterChange\': \'screenerChangeView\'}" data-options=dataTable.options> </barchart-datatable> </div> </div>'
    },
    ABlA: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c) {
            if (this.facebookLoading = !1, this.gplusLoading = !1, this.linkedinLoading = !1, this.twitterLoading = !1, this.title = r.config.meta.title, this.socialDesctiprion = r.config.meta.description, this.chartData = o.getChartData(), this.redirectUrl = i.absUrl(), r.config.currentSymbol) {
                if (this.symbol = r.config.currentSymbol.symbol, n) {
                    var d = a.getSector(r.config.currentSymbol.symbolType);
                    if (this.redirectUrl = t.route(r.config.routes["quotes.sectors.technicalChart"], {
                            sector: d,
                            symbol: r.config.currentSymbol.symbol
                        }), s) {
                        var u = l.getUrlBySettings(c.getApiSettings());
                        this.redirectUrl = this.redirectUrl + "?" + u
                    } else this.redirectUrl = this.redirectUrl + "#" + i.url()
                }
                this.title = r.config.currentSymbol.symbol + " | Custom Technical Chart for " + r.config.currentSymbol.symbolName;
                var p = r.config.symbols.mapping[r.config.currentSymbol.symbolType],
                    m = "forex" === p ? r.config.currentSymbol.symbol.replace("^", "") : r.config.currentSymbol.symbol;
                "futures" !== p && 9 !== r.config.currentSymbol.symbolType && (m = "$" + m), this.twitterTitle = m + " | Check Out My Customized Technical Chart #" + p, "futures" === p && r.config.currentSymbol.hasOwnProperty("symbolRoot") && (this.twitterTitle += " #" + r.config.currentSymbol.symbolRoot + "_F")
            }
            this.specificDesc = "Build and share your own charts with sophisticated technical studies and indicators for equities, futures, and more.", this.close = function() {
                e.close()
            }
        }
        i.$inject = ["$modalInstance", "utils", "quotesService", "$location", "$window", "technicalChartImageStorage", "useDefaultPageLink", "dashboardMode", "technicalChartUrlService", "chartApiService"], e.exports = i
    },
    ADiV: function(e, t, a) {
        "use strict";

        function i(e) {
            return function(t) {
                return e.trustAsHtml(t)
            }
        }
        i.$inject = ["$sce"], e.exports = i
    },
    AEeU: function(e, t) {
        e.exports = '<div class=interactive-chart-my-chart-feature-ads data-ng-hide=$ctrl.hideContent> <div class=modal-close-wrapper data-ng-click=$ctrl.close()> <i class=bc-glyph-times></i> </div> <p> New "My Charts" allows you to save personalized charts to your My Charts folder. Click the Chart Menu <i class="icon-glypth bc-glyph-bars"></i> to access this feature. <span data-ng-show=$ctrl.isNotPremier>Available with <a data-ng-click=$ctrl.showPremierModal() href="">Barchart Premier</a> </span> </p> </div>'
    },
    AIVR: function(e, t) {
        e.exports = '<div> <a target=_self data-ng-href="/[[ ::$ctrl.quotesService.getSector($ctrl.currentSymbol.symbolType) ]]/quotes/[[ ::$ctrl.currentSymbol.symbol ]]/balance-sheet/annual"> <div class="module balance-sheet-module"> <h4>Balance Sheet</h4> <div class=items> <div data-ng-repeat="(key, value) in ::$ctrl.meta track by $index"> <span>[[ ::value ]]</span> <span>[[ ::$ctrl.data[key] | addSymbol:"$":"before" ]]</span> </div> </div> </div> </a> </div> '
    },
    AKGV: function(e, t) {
        e.exports = '<div class=bc-portfolio-visualization-view> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class="row first-row" data-ng-hide=dataLoading> <div class="column small-12 large-6 chart-item"> <h5>Investment Weights</h5> <portfolio-visualization-investment-weights data-ng-if=portfolioData.symbols data-content=portfolioData.symbols></portfolio-visualization-investment-weights> </div> <div class="column small-12 large-6 chart-item"> <h5>Market Cap</h5> <portfolio-visualization-market-cap-pie data-ng-if=portfolioData.marketCap data-content=portfolioData.marketCap></portfolio-visualization-market-cap-pie> </div> </div> <div class=row data-ng-hide=dataLoading> <div class="column small-12 large-6 chart-item"> <h5>Barchart Opinion</h5> <portfolio-visualization-opinion-pie data-ng-if=portfolioData.opinion data-content=portfolioData.opinion></portfolio-visualization-opinion-pie> </div> <div class="column small-12 large-6 chart-item"> <h5>Sector Weights</h5> <portfolio-visualization-sector-weights data-ng-if=portfolioData.sector data-content=portfolioData.sector></portfolio-visualization-sector-weights> </div> </div> </div>'
    },
    ALgY: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("SlVd"),
                controller: ["$scope", function(e) {
                    e.lists = {
                        left: [{
                            field: "alpha"
                        }, {
                            field: "beta"
                        }, {
                            field: "standardDeviation"
                        }, {
                            field: "sharesOutstanding"
                        }, {
                            field: "managedAssets",
                            label: "Managed Assets, $K"
                        }, {
                            field: "netAssetValue"
                        }, {
                            field: "firstTradePrice"
                        }],
                        right: [{
                            field: "peRatio",
                            label: "P/E Ratio"
                        }, {
                            field: "managementFee"
                        }, {
                            field: "hasOptions",
                            label: "Options"
                        }, {
                            field: "dividend",
                            label: "Latest Dividend"
                        }, {
                            field: "dividendDate"
                        }, {
                            field: "dividendRateForward",
                            label: "Annual Dividend"
                        }, {
                            field: "dividendYieldForward"
                        }]
                    }, e.data = e.widgetData.data[0], e.meta = e.widgetData.meta.field.name, e.filterEmptyRows = function(t) {
                        return null !== e.data.raw[t.field]
                    }
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    AM4E: function(e, t, a) {
        "use strict";
        e.exports = {
            chartSettings: {
                BASIC: "basic",
                SPREAD: "spread",
                COMPARISON: "comparison"
            },
            minutesRange: {
                min: 1,
                max: 999
            }
        }
    },
    AMZz: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                scope: {},
                link: function(t, i) {
                    function r() {
                        return e.open({
                            template: a("eL4Q"),
                            controller: "myChartsAddNewGroupModalCtrl",
                            controllerAs: "$ctrl",
                            windowClass: "my-charts-add-new-group",
                            resolve: {}
                        }).result
                    }
                    i.on("click", r), t.$on("$destroy", function() {
                        i.off("click", r)
                    })
                }
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    ANsi: function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["authService", function(e) {
            window.sessionStorage && ("true" === window.sessionStorage.getItem("showHelp") && e.isLoggedIn() ? (angular.element(document.querySelector(".js-bc-extended-help-block")).toggleClass("visible"), sessionStorage.removeItem("showHelp")) : "true" !== window.sessionStorage.getItem("showHelp") || e.isLoggedIn() || sessionStorage.removeItem("showHelp"))
        }])
    },
    Amye: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            var l;
            e.phone = {
                phone: n.phone
            }, i && i.default_recipient && (e.phone.phone = +i.default_recipient), e.showActivationFiled = !1, e.disableGetCode = !1, e.disableResendCode = !1, e.invalidPhone = !1, e.error = !1, e.resendCode = function() {
                if (!e.phone.phone) return !1;
                e.disableResendCode = !0;
                var t = (new Date).getTime();
                a.createValidation(l).then(function(t) {
                    !0 === t.success && (e.showActivationFiled = !1)
                }).finally(function() {
                    (new Date).getTime() - t < 500 ? s(function() {
                        e.disableResendCode = !1
                    }, 500) : e.disableResendCode = !1
                })
            }, e.updatePhoneStorage = function() {
                n.phone = e.phone.phone
            }, e.verifyPhone = function(t) {
                if (e.invalidPhone = !1, e.error = !1, t.phone.$invalid) return e.invalidPhone = !0, !1;
                a.lookupPhone(e.phone.phone.toString()).then(function(t) {
                    !0 === t.success && (l = t.e164, e.disableGetCode = !0, i.default_recipient_hmac && i.default_recipient && (i.default_recipient_hmac = null), i.default_recipient = l, a.createValidation(l).then(function(t) {
                        !0 === t.success && (e.showActivationFiled = !0), !1 === t.success && (e.invalidPhone = !0, i.default_recipient = null)
                    }).finally(function() {
                        e.disableGetCode = !1
                    }))
                }).catch(function() {
                    e.invalidPhone = !0
                })
            }, e.activateCode = function(s) {
                if (e.error = !1, s.$invalid) return s.code.$error.required && !s.code.$dirty && (s.code.$dirty = !0), !1;
                var c = angular.copy(e.phone);
                c.phone = l, a.confirmValidation(c).then(function(a) {
                    "VALIDATION_SUCCESS" === a.result ? (i.default_recipient = a.phone, i.default_recipient_hmac = a.hmac, i.active_alert_types.push("price"), r.assignPublisherTypeDefault(i).then(function() {
                        n.phone = null, t.close(), o.openModalSmSTextSetting(i)
                    })) : e.error = a.result
                }, function(e) {})
            }, e.close = function() {
                t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "smsValidationManagerService", "smsPublishier", "alertManagerService", "alertsModalFactory", "alertsPhoneStorage", "$timeout"], e.exports = i
    },
    Aned: function(e, t, a) {
        "use strict";
        var i = "OpinionTradingPerformance";
        angular.module(i, []).controller(i + ".OpinionTradingPerformanceCtrl", a("B/91"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    Aqnj: function(e, t) {
        e.exports = "<div class=\"barchart-symbol-widget widget-performance\"> <div class=barchart-symbol-widget__title> Performance Report <a data-ng-href=\"[[  '/' + sector + '/quotes/'  + symbol + '/performance' ]]\" class=\"bc-button small white-with-border right\" target=_blank> All Performance </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href=\"[[  '/' + sector + '/quotes/'  + symbol + '/performance' ]]\" target=_blank> <div class=\"barchart-symbol-widget__title uppercase\"> <div class=\"row collapse\"> <div class=\"column small-2\">Period</div> <div class=\"column small-3 text-right\">Change / %Chg</div> <div class=\"column small-6 text-center\">Range</div> </div> </div> <ul class=barchart-symbol-widget__list> <li data-ng-repeat=\"item in list\"> <div class=\"row collapse\"> <div class=\"column small-2\">[[ ::item.label ]]</div> <div class=\"column small-3 text-right\" data-ng-class=\"{'up': data.raw['priceChange' + item.suffix] > 0, 'down': data.raw['priceChange' + item.suffix] < 0, 'unch': data.raw['priceChange' + item.suffix] === 0}\"> [[ data['priceChange' + item.suffix] ]] ([[ data['percentChange' + item.suffix] ]]) </div> <div class=\"column small-6 text-center column-row-chart\"> <barchart-row-chart data-approach=\"data['chartWidth' + item.suffix]\" data-colored=true></barchart-row-chart> <div class=left> [[ data['lowPrice' + item.suffix] ]] </div> <div class=right> [[ data['highPrice' + item.suffix] ]] </div> </div> </div> </li> </ul> </a> </div>"
    },
    At1M: function(e, t) {
        e.exports = '<a href=javascript:void(0); data-ng-click=$ctrl.configureTextAlerts() class="bc-alerts__alerts-page-settings-button bc-button extra dark-blue">Text Alerts</a>'
    },
    Avqy: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = {
                    "1d": {
                        data: "I",
                        density: "L",
                        im: "5",
                        startDate: null,
                        endDate: null
                    },
                    "5d": {
                        data: "I",
                        density: "X",
                        im: "30",
                        startDate: null,
                        endDate: null
                    },
                    "1m": {
                        data: "I",
                        density: "H120",
                        im: "120",
                        startDate: null,
                        endDate: null
                    },
                    "3m": {
                        data: "DO",
                        density: "ML",
                        im: null,
                        startDate: null,
                        endDate: null
                    },
                    "6m": {
                        data: "DO",
                        density: "M",
                        im: null,
                        startDate: null,
                        endDate: null
                    },
                    "1y": {
                        data: "DO",
                        density: "X",
                        im: null,
                        startDate: null,
                        endDate: null
                    },
                    "3y": {
                        data: "WN",
                        density: "M",
                        im: null,
                        startDate: null,
                        endDate: null
                    },
                    "5y": {
                        data: "WO",
                        density: "X",
                        im: null,
                        startDate: null,
                        endDate: null
                    },
                    "25y": {
                        data: "MN",
                        density: "X",
                        im: null,
                        startDate: null,
                        endDate: null
                    }
                },
                a = {
                    "1m": {
                        im: "240"
                    },
                    "1y": {
                        data: "WO",
                        density: "L"
                    },
                    "5y": {
                        data: "MO",
                        density: "L"
                    }
                },
                i = {
                    "1d": {
                        im: 5
                    },
                    "5y": {
                        data: "WN"
                    },
                    "25y": {
                        data: "MN"
                    }
                },
                r = {
                    "5y": {
                        data: "MN"
                    }
                };
            this.getByPeriod = function(o, n, s) {
                if (t.hasOwnProperty(o)) {
                    var l = angular.copy(t[o]);
                    return e.isMobileOnly() && a.hasOwnProperty(o) && angular.merge(l, a[o]), n && (l = function(t, a, o) {
                        if ("futures" === a) {
                            var n = e.isMobileOnly() ? r : i;
                            return n.hasOwnProperty(o) ? angular.merge(t, n[o]) : t
                        }
                    }(l, n, o)), s && (c = l, d = {}, Object.keys(c).forEach(function(e) {
                        null !== c[e] && (d[e] = c[e])
                    }), l = d), l
                }
                throw new Error("Requested period does not exists in config. Check your code, as this can not be triggered from outside");
                var c, d
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    AxA9: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c) {
            e.$modalInstance = t, e.subscriptionWarning = !1, e.alerts = [], e.loading = !0, e.isSymbolPage = c, e.premierLink = n.config.routes["my.barchartPremier"], e.expired = !1;
            var d = r.getData().symbol;
            e.symbol = d, e.showNews = r.symbolEquitityValidate(), e.events = s || {}, e.alertServerUnavailable = !1, a.checkSymbol(d).then(function() {
                a.retreiveAlertsSymbol(d).then(function(t) {
                    r.setSymbolAlerts(d, t), e.alerts = t, e.loading = !1
                })
            }, function() {
                e.loading = !1, e.expired = !0
            });
            var u = e.events.onClear || function() {};
            e.events.onClear = function() {
                u(), e.subscriptionWarning = !1
            }, e.addAlert = function() {
                if (1 === o.getUserData().subscription && (e.alerts.length >= 2 || 1 === e.alerts.length && !1 === e.showNews)) e.subscriptionWarning = !0;
                else {
                    t.close();
                    var a = l.$on("getSymbolData", function() {
                        l.$broadcast("setSymbolData", r.getData()), a()
                    });
                    i.openModalSymbolAlertsCreate(s)
                }
            }, e.done = function() {
                e.$broadcast("applyAlertChanges"), "function" == typeof e.events.onDone && s.onDone(e.alerts), t.close()
            }, void 0 !== s && "function" == typeof s.onOpen && s.onOpen(e);
            var p = e.$on("onAlertServerUnavailable", function(t, a) {
                e.alertServerUnavailable = a, e.$digest(), p()
            })
        }
        i.$inject = ["$scope", "$modalInstance", "alertManagerService", "alertsModalFactory", "alertsSymbolDataFactory", "authService", "$window", "events", "$rootScope", "isSymbolPage"], e.exports = i
    },
    AxOv: function(e, t, a) {
        "use strict";
        e.exports = {
            options: ["CCALL", "NPUT", "BEARC", "BEARP", "BULLC", "BULLP", "OPT"]
        }
    },
    "B/91": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.currentView = "opinion", e.setTechicalLink = function(e, r, o) {
                var n = t.FLIPCHART_MAPPING[o],
                    s = t.FLIPCHART_SETTINGS[n];
                return i.merge(s, {
                    indicators: r
                }, {
                    volume: 0
                }), a.buildUrl(e + "#/technical-chart", s)
            }
        }
        i.$inject = ["$scope", "flipchartDefaultSettings", "utils", "_"], e.exports = i
    },
    "B/pI": function(e, t) {
        e.exports = '<div class=share-help-via-email-component> <a href="" data-ng-click=$ctrl.openEmailModal()> <i class=bc-glyph-share-square></i> <span>Email Help Topic</span> </a> </div>'
    },
    B2X6: function(e, t) {
        e.exports = "<div class=bc-semi-circle-chart> <highchart data-config=config></highchart> </div>"
    },
    B36u: function(e, t) {
        e.exports = '<div> <screener-range data-ng-hide="filters.default.inputBoxes !== undefined && !filters.default.inputBoxes" data-form-data=filterData.default.value data-input-prefix=filters.default.prepend data-input-suffix=filters.default.append></screener-range> <div data-ng-if="filters.default.options && filters.default.options.length > 0"> <screener-range-helper data-form-data-model=filterData.default data-helper-data=filters.default.options></screener-range-helper> </div> </div>'
    },
    B6fh: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                template: a("oN6J"),
                controller: ["$rootScope", "$scope", "authService", "authRouteService", function(e, t, a, i) {
                    t.loggedIn = a.isLoggedIn(), t.adjustment = !1, t.updateAdjust = function() {
                        t.loggedIn ? e.$broadcast("priceHistoryAdjusted", t.adjustment) : (t.adjustment = !1, i.goToLogin("historical"))
                    }
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    BAaH: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    customClass: "="
                },
                link: function(a) {
                    a.hideContent = !!e("bcCmdtyAdsBlock"), a.close = function() {
                        e("bcCmdtyAdsBlock", !0, {
                            expires: 7,
                            path: "/"
                        }), a.hideContent = !0
                    }, a.gotoLink = function() {
                        a.close(), t.open("/solutions/cmdty/solutions/insights/exchange", "_blank")
                    }
                },
                template: a("PVyy")
            }
        }
        i.$inject = ["ipCookie", "$window"], e.exports = i
    },
    BFrR: function(e, t) {
        e.exports = '<div> <a target=_self data-ng-href="/[[ ::KeyStatisticsCtrl.quotesService.getSector(KeyStatisticsCtrl.currentSymbol.symbolType) ]]/quotes/[[ ::KeyStatisticsCtrl.currentSymbol.symbol ]]/profile"> <div class="module key-statistics-module"> <h4>Key statistics</h4> <div class=description> <div class=row-100> <span> Market Capitalization, $K </span><span class=value>[[ ::KeyStatisticsCtrl.marketCap ]]</span> </div> <div class=data data-ng-repeat="(key, value) in ::KeyStatisticsCtrl.meta track by $index" data-ng-class-odd="\'odd\'"> <span>[[ ::value ]]</span> <span class=value data-ng-if="::key !== \'growth1y\' && key !== \'growth5y\'">[[ ::KeyStatisticsCtrl.data[key] ]]</span> <span class=value data-ng-class=::KeyStatisticsCtrl.utils.setColor(KeyStatisticsCtrl.data[key]) data-ng-if="::key === \'growth1y\' || key === \'growth5y\'"> [[ ::KeyStatisticsCtrl.data[key] ]] </span> </div> </div> </div> </a> </div>'
    },
    BIzg: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@",
                    filterIndex: "@"
                },
                controller: ["$scope", function(a) {
                    a.filterData.monthly = a.filterData.monthly || {}, a.filterData.weekly = a.filterData.weekly || {}, a.filterData.monthly.value = a.filterData.monthly.value || [], a.filterData.weekly.value = a.filterData.weekly.value || [], 0 === a.filterData.monthly.value.length && a.filterData.monthly.value.push(a.filters.monthly.value[0].key), a.isPremier = e.isLoggedIn() && 2 === e.getUserData().subscription, a.toggleSelection = function(e, i, r) {
                        if (!t.checkPermissions()) return r.target.checked = !1, !1;
                        var o = a.filterData[i].value.indexOf(e);
                        o > -1 ? a.filterData[i].value.splice(o, 1) : a.filterData[i].value.push(e)
                    }, a.toggleSelectionAll = function(e, i) {
                        if (!t.checkPermissions()) return i.target.checked = !i.target.checked, !1;
                        a.ifAllSelected(e) ? a.filterData[e].value = [] : a.filters[e].value.forEach(function(t) {
                            -1 === a.filterData[e].value.indexOf(t.key) && a.filterData[e].value.push(t.key)
                        })
                    }, a.ifAllSelected = function(e) {
                        var t = !0;
                        return a.filters[e].value.forEach(function(i) {
                            -1 === a.filterData[e].value.indexOf(i.key) && (t = !1)
                        }), t
                    }
                }],
                template: a("eZGj")
            }
        }
        i.$inject = ["authService", "screenerPermissionService"], e.exports = i
    },
    BNlM: function(e, t, a) {
        "use strict";
        var i = "PercentOfStocksAboveMovAvg";
        angular.module(i, []).controller(i + ".PercentOfStocksAboveMovAvgCtrl", a("cdia")).factory("PercentOfStocksAboveMovAvgApiFactory", a("bJsW"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    BPAT: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(a) {
                    var i = this,
                        r = e.getScreenerType();
                    i.filterData.default = i.filterData.default || {}, i.filterData.default.operator = i.filterData.default.operator || i.filters.default.operator[0].key, i.filterData.default.type = i.filterData.default.type || i.filters.default.operator[0].type, i.filters.default.compares && i.filters.default.compares.length && i.filters.default.compares.forEach(function(e, t) {
                        r && e.customKey && e.customKey[r] && (e.key === i.filters.default.default && (i.filters.default.default = e.customKey[r]), i.filters.default.compares[t].key = e.customKey[r])
                    });
                    var o = !1;
                    a.$watch(function() {
                        return i.filterData.default.operator
                    }, function(e, a) {
                        if (!o && a && a !== e && !t.checkPermissions()) return i.filterData.default.operator = a, o = !0, !1;
                        o = !1, "between" === i.filterData.default.operator ? i.filterData.default.value = Array.isArray(i.filterData.default.value) ? i.filterData.default.value : ["", ""] : -1 !== ["gt", "lt"].indexOf(i.filterData.default.operator) ? i.filterData.default.value = Array.isArray(i.filterData.default.value) || "number" != typeof i.filterData.default.value ? null : i.filterData.default.value : -1 !== ["gtField", "geField", "ltField"].indexOf(i.filterData.default.operator) && (i.filterData.default.value && i.filterData.default.value[0] || "geField" !== i.filterData.default.operator ? i.filterData.default.value = Array.isArray(i.filterData.default.value) ? null : i.filterData.default.value : i.filterData.default.value = i.filters.default.default || null)
                    })
                }],
                controllerAs: "$ctrl",
                template: a("KV1w")
            }
        }
        i.$inject = ["screenerFilterService", "screenerPermissionService"], e.exports = i
    },
    BSFd: function(e, t, a) {
        "use strict";
        var i = "TradingSignalsNewRecommendations";
        angular.module(i, []).directive("tradingSignalsNewRecommendations", a("trsO"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    BUZo: function(e, t) {
        e.exports = '<div class="modal-content-wrapper change-password-form deactivate-account account"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <div data-ng-if=!newEmailSuccess class="inner-form bc-form"> <form name=deactivateForm novalidate data-ng-submit=addNewEmail(deactivateForm)> <h4>Add Email to Your Account</h4> <p>You must enter your password to add a new email.</p> <div class=input-inner-wrapper> <input class=form-input placeholder="Enter password" required id=current_password type=password data-ng-model=password name=password /> <data-show-password password-id="\'current_password\'" class=peek-at-password></data-show-password> </div> <div class=form-buttons> <button type=submit class="bc-button light-blue ok enter">Enter</button> <div class=forgot-link-wrapper> <a data-ng-click=openYellowModal()>Forgot Password?</a> </div> </div> <div class=form-item-errors> <span data-ng-if="deactivateForm.password.$error.required && deactivateForm.$submitted"> Complete required fields to continue. </span> <span data-ng-if=deactivateForm.error> [[ deactivateForm.error ]] </span> <span data-ng-if=deactivateForm.incorrectPassword> Password does not match account. Please re-enter current password. </span> </div> </form> </div> <div data-ng-if=newEmailSuccess class=info> <p>Instructions on how to verify your new email were sent to <span class=bold> [[ newEmailSuccess ]] </span></p> <div class=form-buttons> <a data-ng-click=close(); class="bc-button light-blue ok">Ok</a> </div> </div> <div data-ng-if=forgotPasswordModal class=yellow-modal> <div class=inner-wrapper> <i data-ng-click=closeYellowModal() class="bc-glyph-times form-close"></i> <div class=content> Instructions on how to reset your password were sent to <span class=bold>[[ user.email ]]</span> </div> </div> </div> </div>'
    },
    Bc27: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = '<div style="text-align:center;font-family:\'Noto Sans\';color:#000000"><span style="color:#2284DD;font-size:13px;font-weight:bold">Top<br/>1%</span><br/><br/><span style="font-size:14px;font-weight:normal">{point.name}</span></div>',
                a = {
                    options: {
                        chart: {
                            type: "solidgauge"
                        },
                        colors: ["#555555"],
                        pane: {
                            center: ["50%", "85%"],
                            size: "140%",
                            startAngle: -90,
                            endAngle: 90,
                            background: {
                                backgroundColor: "#fff",
                                innerRadius: "60%",
                                outerRadius: "100%",
                                shape: "arc"
                            }
                        },
                        tooltip: {
                            enabled: !1
                        },
                        plotOptions: {
                            solidgauge: {
                                dataLabels: {
                                    y: 25,
                                    borderWidth: 0,
                                    useHTML: !0
                                }
                            }
                        }
                    },
                    series: [{
                        dataLabels: {
                            format: '<div style="text-align:center;color:#000000"><br/><br/><br/><span style="font-size:14px;font-weight:normal;font-family:\'Noto Sans\'">{point.name}</span></div>'
                        }
                    }],
                    title: {
                        y: 30,
                        useHTML: !0,
                        style: {
                            fontSize: "14px",
                            fontWeight: "bold",
                            fontFamily: "Noto Sans",
                            color: "#000000"
                        }
                    },
                    yAxis: {
                        currentMin: 0,
                        currentMax: 100,
                        title: {
                            y: 10
                        },
                        lineWidth: 0,
                        minorTickInterval: null,
                        tickInterval: 100,
                        tickPixelInterval: 100,
                        tickWidth: 0,
                        labels: {
                            y: 15,
                            style: {
                                color: "#000000"
                            },
                            align: "center"
                        }
                    }
                };

            function i(e, a) {
                a.series[0].data = [e], a.title.text = e.title, e.isTop && (a.series[0].dataLabels.format = t, a.options.colors = ["#2284DD"])
            }
            e.init = function(t) {
                e.strengthConfig = angular.copy(a), e.directionConfig = angular.copy(a), t.strength && i(t.strength, e.strengthConfig), t.direction && i(t.direction, e.directionConfig)
            }
        }
        i.$inject = ["$scope"], e.exports = i
    },
    BcMg: function(e, t, a) {
        "use strict";

        function i(e) {
            e.put("bc-tooltip-portfolio.html", a("JHDo")), e.put("bc-tooltip-watchlist.html", a("QO0c"))
        }
        i.$inject = ["$templateCache"], e.exports = i
    },
    BjbU: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                $attrs: {
                    sector: "@",
                    symbol: "@",
                    hrefByClick: "@",
                    defaultChart: "@"
                },
                link: function(a, i, r) {
                    var o = "/" + r.sector + "/quotes/" + r.symbol + "/";

                    function n() {
                        t.location.href = i.attr("href")
                    }
                    r.$set("href", o + e.getChartLink(r.defaultChart)), "true" === r.hrefByClick && (i.on("click", n), a.$on("$destroy", function() {
                        i.off("click", n)
                    }))
                }
            }
        }
        i.$inject = ["userPreferencesService", "$window"], e.exports = i
    },
    Bk80: function(e, t) {
        e.exports = '<div class=bc-screener__filter-symbol> <div class=clear-button-wrapper> <input type=text autocomplete=off autocorrect=off autocapitalize=off class=bc-screener__filter-symbol-input placeholder="Enter symbols separated by commas..." data-ng-model=filterValue data-ng-change=updateDataModel(filterValue) data-barchart-clear-input> </div> </div>'
    },
    "Bp9+": function(e, t) {
        e.exports = '<div class=chart-wrapper> <div class="chart-header clearfix"> Average weighted alpha of all stocks in this sector: <span class=bold data-ng-class=setColor(weightedAlpha)>[[ weightedAlpha ]]</span> <span class=right> 52 WK High <span class=up>[[ highPrice1y ]]</span> 52 WK Low <span class=down>[[ lowPrice1y ]]</span> </span> </div> <div class=chart-content data-ng-if=sectorSymbol> <a target=_self data-bc-full-chart-link data-href-by-click=true data-sector="[[ symbolSector ]]" data-symbol="[[ symbol ]]" data-default-chart=interactive> <simple-chart class=symbol-competitors-chart-canvas data-symbol="[[ sectorSymbol ]]" data-period=P1Y data-aggregation-unit=Day data-aggregation-size=1 data-x-axis-tick-pixel-interval=100 data-x-axis-gridlines-visible=false data-x-axis-crosshair-enabled=true data-y-axis-crosshair-enabled=true data-y-axis-visible=true data-y-axis-show-last=true data-show-previous=false data-style=Area data-primary-color=rgba(79,151,193,0.30) data-y-axis-gridlines-visible=true></simple-chart> </a> </div> </div>'
    },
    BqMO: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: !0,
                controller: ["$scope", "technicalChartModalsService", "authService", "$rootScope", "Notification", "CustomChartTemplatesApiFactory", "_", "technicalChartSettingsService", "technicalChartDefaultSettings", "technicalChartFields", "technicalChartUrlService", "events", "technicalChartConfig", "textFactory", "utils", "technicalChartMappingService", "limitsService", function(e, t, a, i, r, o, n, s, l, c, d, u, p, m, h, g, f) {
                    function b() {
                        e.initializeFormData(), e.formData.forms.basic = n.merge(e.formData.forms.basic, l(e.symbolTypeName, c)), e.chartSettings.currentSetting === p.chartSettings.COMPARISON && (e.formData.forms.comparison = Object.create(s.comparison)), e.formData.forms.basic[c.STUDYHEIGHT] = "150", e.formData.forms.basic[c.HEIGHT] = "500", h.isMobileOnly() && (e.formData.forms.basic[c.VOLUME] = "0"), g.prepareChartHeightBeforeRequest(e.formData.forms.basic), d.applySettings(e.formData.forms.basic, e.ignoreFields, e.chartSettings.currentSetting === p.chartSettings.SPREAD), i.$broadcast("clearSettings", {
                            defaultData: e.formData.forms.basic
                        }), e.changedState = e.changedStates.CLEAR_SETTINGS;
                        var t = angular.copy(e.formData.forms.basic);
                        h.isMobileOnly() && (e.formData.forms.basic[c.STUDYHEIGHT] = "150", e.formData.forms.basic[c.HEIGHT] = "500"), e.drawTechnicalChart(t), e.resetState()
                    }
                    e.saveSettingAsTemplate = function() {
                        var l;
                        if (a.isLoggedIn()) {
                            if (f.chartTemplates()) return !1;
                            l = s.getChartSettings(e.formData.forms, e.chartSettings.currentSetting), g.convertChartHeightToModel(l), l.id || t.openCreateTemplateModal(l).result.then(function(t) {
                                return o.saveChartTemplate(t).then(function(a) {
                                    var o = angular.copy(a[0]);
                                    n.merge(o, e.formData.forms.basic), n.merge(t, o), i.$broadcast("templateSaved", a), r.success(m("TECHNICAL_CHART_SAVE_TEMPLATE", {
                                        name: a[0].name
                                    }))
                                })
                            })
                        }
                    }, e.clearSettings = function() {
                        t.openClearSettingsModal().result.then(function(e) {
                            "OK" === e && b()
                        })
                    }, e.$on(u.ON_TECHNICAL_CHART_DEFAULT_TEMPLATE_SET, function() {
                        b()
                    })
                }],
                template: a("4i5n")
            }
        }
    },
    BvA5: function(e, t) {
        e.exports = "<div class=screener-static-filter> <span>[[ meta.title ]]</span> </div>"
    },
    C0mA: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            e.type = !1, e.show = !1, window.config.showMarketOnboardingCard && !t.get("marketOnboardingCardDisabled") && (e.type = "market", e.show = !0), e.$on("showOnboardingCard", function(t, a) {
                e.type = a
            }), e.$on("showContextMenuCard", function() {
                e.type = "contextMenu", e.show = !0
            }), e.$on("drawChartHasBeenCalledViaButton", function() {
                i.isLoggedIn() || function() {
                    if (!t.get("chartOnboardingCardDisabled")) {
                        var i = null !== t.get("drawChart") ? t.get("drawChart") : 0;
                        i > 3 ? (e.type = "chart", a(function() {
                            e.show = !0
                        }, 1e3)) : (i++, t.set("drawChart", i))
                    }
                }()
            }), e.$on("onBarchartDataTableRendered", function() {
                "datatable" === e.type && a(function() {
                    e.show = !0
                }, 1e3)
            }), e.$on("onDashboardTechnicalChartPreference", function() {
                e.type = "dashboard", t.get("dashboardOnboardingCardDisabled") || (e.show = !0)
            }), e.$on("closeMarketOnboardingCard", function() {
                e.show = !1, t.set("marketOnboardingCardDisabled", !0)
            }), e.close = function() {
                if (window.config.showChangeModal) n.savePreference(window.config.showChangeModal + "ChangedSettings", 1);
                else {
                    var a = e.type + "OnboardingCardDisabled";
                    t.set(a, !0), i.isLoggedIn() && -1 !== ["contextMenu"].indexOf(e.type) && n.savePreference(a, !0)
                }
                e.show = !1
            }, e.loginLink = function(t) {
                e.close(), r.goToLogin(t)
            }, e.goToSitePreferences = function() {
                window.open(config.routes["my.sitePreferences"]), window.close()
            }, window.config.showChangeModal && (e.type = "changes", e.show = !0), e.upcomingChanges = function() {
                o.showChangesModal(), e.show = !1, n.savePreference(window.config.showChangeModal + "ChangedSettings", 1)
            }
        }
        i.$inject = ["$scope", "localStorageService", "$timeout", "authService", "authRouteService", "bcCustomModalService", "bcSavePreferencesService"], e.exports = i
    },
    C2OI: function(e, t) {
        e.exports = "<div></div>"
    },
    C3eh: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login study-modal"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=modal-header> <i class="bc-glyph-times form-close right" data-ng-click=modalDismiss()></i> </div> <div class=study-modal__study-data> <div class=study-modal__study-name>[[ ::studyName ]]</div> <form class=bc-form data-ng-submit=addStudyConfirm()> <div class="row collapse"> <div class=study-modal__select-apply-study-to> <label for=study-modal__select-apply-to>Apply to:</label> <div class="bc-dropdown styled"> <select id=study-modal__select-apply-to data-ng-model=studyApplyTo.placement> <option data-ng-show=isClone value=clone>Existing Pane</option> <option data-ng-show=isClone value="[[ mainAxisPlacement ]]">Main Chart Window</option> <option data-ng-show=!isClone value="[[ mainAxisPlacement ]]">Main Window</option> <option value=standalone>New Pane</option> </select> </div> </div> </div> <div class="row collapse"> <div class=column data-ng-if="studyCurves && studyCurves.length" data-ng-class="{\'curves-and-fields small-7\': studyInputs && studyInputs.length}"> <div class=study-modal__study-form-fieldset data-ng-repeat="curve in studyCurves track by $index"> <div data-ng-if="studyId === \'VOL\'"> <div class=curve-visibility-toggle data-ng-click=toggleCurveVisibility(curve)> <i class=bc-glyph-eye data-ng-show=curve.visible></i> <i class=bc-glyph-eye-slash data-ng-show=!curve.visible></i> <span data-ng-bind=labels[curve.fields[0]]></span> </div> <div data-ng-if="curve.colors.length === 3"> <div class=study-modal__color-box> <span>Up</span> <bc-color-picker data-color-model=curve.colors[1]></bc-color-picker> </div> <div class="study-modal__color-box margin-left-20"> <span>Down</span> <bc-color-picker data-color-model=curve.colors[0]></bc-color-picker> </div> <div class="study-modal__color-box margin-left-20"> <span>Unch</span> <bc-color-picker data-color-model=curve.colors[2]></bc-color-picker> </div> </div> <div data-ng-if="curve.colors.length !== 3"> <bc-color-picker data-color-model=curve.colors[0]></bc-color-picker> <bc-line-width-selector data-ng-if="curve.style !== \'Ribbon\'" data-line-width-model=curve.lineWidth></bc-line-width-selector> </div> </div> <div data-ng-if="studyId === \'MAVOL\'"> <div class=curve-visibility-toggle data-ng-click=toggleCurveVisibility(curve)> <i class=bc-glyph-eye data-ng-show=curve.visible></i> <i class=bc-glyph-eye-slash data-ng-show=!curve.visible></i> <span data-ng-bind=labels[curve.fields[0]]></span> </div> <div data-ng-if="curve.colors.length === 3"> <bc-color-picker data-label="\'Up\'" data-color-model=curve.colors[1]></bc-color-picker> <div class="study-modal__color-box margin-left-10"> <bc-color-picker data-label="\'Down\'" data-color-model=curve.colors[0]></bc-color-picker> </div> <bc-color-picker data-label="\'Unch\'" data-color-model=curve.colors[2]></bc-color-picker> </div> <div data-ng-if="curve.colors.length !== 3"> <bc-color-picker data-color-model=curve.colors[0]></bc-color-picker> <bc-line-width-selector data-ng-if="curve.style !== \'Ribbon\'" data-line-width-model=curve.lineWidth></bc-line-width-selector> </div> </div> <div data-ng-if="studyId === \'FI\'"> <div class=curve-visibility-toggle data-ng-click=toggleCurveVisibility(curve)> <i class=bc-glyph-eye data-ng-show=curve.visible></i> <i class=bc-glyph-eye-slash data-ng-show=!curve.visible></i> <span data-ng-bind=labels[curve.fields[0]]></span> </div> <bc-line-width-selector data-ng-if="curve.style !== \'Ribbon\'" data-line-width-model=curve.lineWidth></bc-line-width-selector> <div class=margin-top-5> <div>Above</div> <bc-color-picker data-color-model=curve.colors[1]></bc-color-picker> </div> <div class=margin-top-5> <div>Below</div> <bc-color-picker data-color-model=curve.colors[0]></bc-color-picker> </div> </div> <div data-ng-if="studyId === \'DEMARK\'"> <div class=curve-visibility-toggle data-ng-click=toggleCurveVisibility(curve)> <i class=bc-glyph-eye data-ng-show=curve.visible></i> <i class=bc-glyph-eye-slash data-ng-show=!curve.visible></i> <span data-ng-bind=labels[curve.fields[0]]></span> </div> <bc-color-picker data-color-model=curve.colors[0]></bc-color-picker> <bc-line-width-selector data-line-width-model=curve.lineWidth></bc-line-width-selector> </div> <div data-ng-if="[\'VOL\', \'FI\', \'MAVOL\', \'DEMARK\'].indexOf(studyId) === -1"> <div class=curve-visibility-toggle data-ng-click=toggleCurveVisibility(curve)> <i class=bc-glyph-eye data-ng-show=curve.visible></i> <i class=bc-glyph-eye-slash data-ng-show=!curve.visible></i> <span data-ng-show="curve.style !== \'Ribbon\'" data-ng-bind=labels[curve.fields[0]]></span> <span data-ng-show="curve.style === \'Ribbon\'" data-ng-bind=labels[curve.fields.join()]></span> </div> <bc-color-picker data-ng-if=studyBands data-color-model=curve.colors[0]></bc-color-picker> <bc-color-picker data-ng-if="!studyLevels && !studyBands && curve.colors.length === 2" data-color-model=curve.colors[1]></bc-color-picker> <bc-color-picker data-ng-if="!studyLevels && !studyBands" data-color-model=curve.colors[0]></bc-color-picker> <bc-color-picker data-ng-if="studyCurves.length > 1 && studyLevels.length > 0" data-color-model=curve.colors[0]></bc-color-picker> <bc-color-picker data-ng-if="studyLevels.length > 0 && studyCurves.length === 1 && !studyBands" data-color-model=curve.colors[2]></bc-color-picker> <bc-line-width-selector data-ng-if="curve.style !== \'Ribbon\'" data-line-width-model=curve.lineWidth></bc-line-width-selector> </div> </div> </div> <div class="column small-5" data-ng-if="studyInputs && studyInputs.length"> <div class=study-modal__study-form-fieldset data-ng-class="{\'offset-top-to-second-param\': studyId === \'ADWM\'}" data-ng-repeat="item in studyInputs track by $index"> <div>[[ ::item.name ]]:</div> <div data-ng-if=!enumerations[item.name]> <input type=number step=any onclick=this.select(),this.setSelectionRange(0,this.value.length) data-ng-model=item.value> </div> <div data-ng-if=enumerations[item.name] class=study-modal__select-smoothing> <div class="bc-dropdown styled" data-ng-class="{\'wider-dropdown\': item.name.toLowerCase() === \'range\'}"> <select data-ng-options="smooth as smooth for smooth in enumerations[item.name]" id=study-modal__select-smoothing data-ng-model=item.value></select> </div> </div> </div> </div> </div> <div data-ng-if="studyLevels && !studyBands" class="study-modal__study-levels study-modal__form-row"> <div class="row collapse"> <div class="column small-7"> <div>Overbought</div> <bc-color-picker data-ng-if="studyId === \'DEMARK\'" data-color-model=studyLevels[1].line.color></bc-color-picker> <div class="bc-dropdown styled" data-ng-if="studyId === \'DEMARK\' && !isEditMode"> <select data-ng-options="fill.value as fill.label for fill in fillTransparencies" data-ng-model=levelsOptions.overBoughtOpacity></select> </div> <bc-color-picker data-ng-if="studyCurves.length === 1 && studyId !== \'DEMARK\'" data-color-model=studyCurves[0].colors[3]></bc-color-picker> <bc-color-picker data-ng-if="studyCurves.length > 1 && studyId !== \'DEMARK\'" data-color-model=studyLevels[overBoughtIndex].line.color></bc-color-picker> <div class="bc-dropdown styled" data-ng-if="studyCurves.length === 1 && studyId !== \'DEMARK\'"> <select data-ng-options="fill.value as fill.label for fill in fillTransparencies" data-ng-model=levelsOptions.overBoughtOpacity></select> </div> </div> <div class="column small-5" data-ng-class="{\'offset-top-level-values\': studyId === \'DEMARK\'}"> <div class=study-modal__study-form-fieldset> <label>Value:</label> <input type=number step=any data-ng-model=overBought.value> </div> </div> </div> <div class="row collapse"> <div class="column small-7"> <div>Oversold</div> <bc-color-picker data-ng-if="studyId === \'DEMARK\'" data-color-model=studyLevels[0].line.color></bc-color-picker> <div class="bc-dropdown styled" data-ng-if="studyId === \'DEMARK\' && !isEditMode"> <select data-ng-options="fill.value as fill.label for fill in fillTransparencies" data-ng-model=levelsOptions.overSoldOpacity></select> </div> <bc-color-picker data-ng-if="studyCurves.length === 1 && studyId !== \'DEMARK\'" data-color-model=studyCurves[overSoldIndex].colors[0]></bc-color-picker> <bc-color-picker data-ng-if="studyCurves.length > 1 && studyId !== \'DEMARK\'" data-color-model=studyLevels[overSoldIndex].line.color></bc-color-picker> <div class="bc-dropdown styled" data-ng-if="studyCurves.length === 1 && studyId !== \'DEMARK\'"> <select data-ng-options="fill.value as fill.label for fill in fillTransparencies" data-ng-model=levelsOptions.overSoldOpacity></select> </div> </div> <div class="column small-5" data-ng-class="{\'offset-top-level-values\': studyId === \'DEMARK\'}"> <div class=study-modal__study-form-fieldset> <label>Value:</label> <input type=number step=any data-ng-model=overSold.value> </div> </div> </div> </div> <div data-ng-if=studyBands class="study-modal__study-levels study-modal__form-row"> <div class="row collapse"> <div class="column small-7"> <span>Overbought</span> </div> <div class="column small-5"> <div class=study-modal__study-form-fieldset> <label>Value:</label> <input type=number step=any data-ng-model=studyBands[0].range.to> </div> </div> </div> <div class="row collapse"> <div class="column small-7"> <span>Oversold</span> </div> <div class="column small-5"> <div class=study-modal__study-form-fieldset> <label>Value:</label> <input type=number step=any data-ng-model=studyBands[0].range.from> </div> </div> </div> </div> <div data-ng-show="studyId === \'VOL\' && isFuture" class="study-modal__study-levels study-modal__form-row"> <div class="bc-dropdown study-modal__volume-dropdown styled"> <select data-ng-model=volume.type> <option value=total>Total Volume</option> <option value=contract>Contract Volume</option> </select> </div> </div> <div class=study-modal__form-row> <button type=button class="bc-button just-grey-border upper" data-ng-if="isEditMode && isClone === false" data-ng-click=cloneStudy()>Clone Study </button> <button type=button class="bc-button just-grey-border upper" data-ng-click=resetStudyConfig()> Reset </button> </div> <div class=study-modal__study-form-buttons> <button type=button class="bc-button red ng-click-active" data-ng-if="isEditMode && !isClone" data-ng-click=removeConfirm()>Delete </button> <button type=submit data-ng-disabled=!studyReady class="bc-button ok light-blue">[[ ::submitText ]]</button> </div> </form> </div> </div> </div>'
    },
    C4ho: function(e, t, a) {
        "use strict";

        function i(e) {
            this.openCreateTemplateModal = function(t) {
                return e.open({
                    templateUrl: "bc-technical-chart-set-template-name.html",
                    controller: "TechnicalChart.TechnicalChartModalTemplateNameCtrl",
                    windowClass: "bc-light-modal",
                    resolve: {
                        template: function() {
                            return t
                        }
                    }
                })
            }, this.openClearSettingsModal = function(t) {
                return e.open({
                    templateUrl: "bc-technical-chart-clear-settings.html",
                    controller: "TechnicalChart.TechnicalChartClearSettingsModalCtrl",
                    scope: t,
                    windowClass: "technical-chart-clear-settings"
                })
            }, this.openShareModal = function(t, i) {
                return e.open({
                    template: a("9wO9"),
                    controller: "TechnicalChart.ShareModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "technical-chart-clear-settings technical-chart-share-modal",
                    resolve: {
                        useDefaultPageLink: function() {
                            return t
                        },
                        dashboardMode: function() {
                            return i
                        }
                    }
                }).result
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    CEbq: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                cancelSubscriptionModal: function(t) {
                    return e.open({
                        template: a("hHeP"),
                        controller: "barchartPremierModalCancelSubscription",
                        windowClass: "premier-unsubscribe-modal",
                        resolve: {
                            contactData: function() {
                                return t
                            }
                        }
                    })
                },
                successSubscriptionModal: function() {
                    var t = e.open({
                        template: a("TWCX"),
                        controller: ["$scope", function(e) {
                            e.close = function() {
                                t.close()
                            }
                        }],
                        windowClass: "no-focus-border"
                    })
                }
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    "CIU/": function(e, t, a) {
        "use strict";
        var i = "bugReport";
        angular.module(i, []).directive("bcShowReportBugModal", a("wT2o")).controller(i + ".BugReportForm", a("K+W3"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    CO79: function(e, t, a) {
        "use strict";
        var i = "MutualFundYtdPerformanceLeaders";
        angular.module(i, []).controller(i + ".MutualFundYtdPerformanceLeadersCtrl", a("htIh"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    CPBu: function(e, t, a) {
        "use strict";

        function i(e) {
            var t, a = !1;
            return {
                restrict: "A",
                link: function(i, r, o) {
                    e.isMobileAndTablet() && r.bind("click", function(e) {
                        a ? (a = !1, (new Date).getTime() - t < 300 && i.$apply(o.tabletDblclick)) : (t = (new Date).getTime(), a = !0, setTimeout(function() {
                            a = !1
                        }, 300))
                    })
                }
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    CSAf: function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["$rootScope", "localStorageService", "utils", function(e, t, a) {
            var i, r = {
                    Explorer: 9,
                    Opera: 30,
                    Chrome: 45,
                    Safari: 8,
                    Firefox: 45,
                    Android: 5
                },
                o = navigator.userAgent,
                n = o.match(/(android|opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
            if (/trident/i.test(n[1])) return "IE " + ((i = /\brv[ :]+(\d+)/g.exec(o) || [])[1] || "");
            if ("Chrome" === n[1] && null != (i = o.match(/\b(OPR|Edge)\/(\d+)/))) return i.slice(1).join(" ").replace("OPR", "Opera");
            if (n = n[2] ? [n[1], n[2]] : [navigator.appName, navigator.appVersion, "-?"], null != (i = o.match(/version\/(\d+)/i)) && n.splice(1, 1, i[1]), r[n[0]] && n[1] < r[n[0]] && !t.get("disabledOldBrowserReminder") && (e.oldBrowser = !0, e.disableOldBrowserReminder = function() {
                    t.set("disabledOldBrowserReminder", !0), e.oldBrowser = !1
                }), a.isMobile() && document.querySelector(".bc-mobile-ads-block")) {
                var s = window.config.sector;
                "stocks" === s && (s = "equities"), "etfs-funds" === s && (s = "etf");
                var l = document.createElement("script");
                l.setAttribute("src", "//ads.investingchannel.com/adtags/BarChart/" + s + "/1x1.js"), l.setAttribute("charset", "utf-8"), document.querySelector(".bc-mobile-ads-block").appendChild(l)
            }
        }])
    },
    CVpJ: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "$filter", "$q", "_", "MyBarchartModalService", "CustomViewsService", "CustomViewsApiFactory", "authService", "$timeout", "limitsService", function(e, t, i, r, o, n, s, l, c, d) {
                var u = JSON.parse(e.mandatoryColumns),
                    p = l.getUserData();

                function m() {
                    return e.view.fields.length >= e.columnsLimit
                }

                function h(e) {
                    var t = angular.element(e.target).parents("li");
                    m() && t && t.hasClass("js-unchecked") && o.showError("viewColumnLimitReached")
                }

                function g() {
                    window.location.href = e.returnUrl
                }
                e.view = JSON.parse(e.viewData), p.preferences && p.preferences.default_view && (e.defaultView = parseInt(p.preferences.default_view) === e.view.id), e.columns = JSON.parse(e.columnsData), e.searchColumnTemplate = a("6BH7"), e.pendingRemoveColumn = null, e.removeColumn = function(t) {
                    "symbol" === t.field ? o.showError("viewMandatoryColumnAbsent") : e.pendingRemoveColumn = t
                }, e.confirmRemoveColumn = function(t) {
                    e.view.fields.splice(t, 1), e.pendingRemoveColumn = null
                }, e.cancelRemoveColumn = function() {
                    e.pendingRemoveColumn = null
                }, e.saveView = function() {
                    var t, a = e.view;
                    return !(!e.view.id && d.customViews()) && (e.view.fields.length > e.columnsLimit ? (o.showError("viewColumnLimitReached"), !1) : void(t = a, i.all([n.checkNameLength(t), n.checkDescriptionLength(t), n.checkIsMandatoryColumnExists(t, u)])).then(function(t) {
                        var i;
                        (i = angular.copy(a)).fields = r.pluck(i.fields, "field"), i.defaultView = e.defaultView, (i.id ? function(e) {
                            return s.updateView(e).then(function(e) {
                                return e
                            }, function(e) {
                                console.warn("Update view error: " + e)
                            })
                        }(i) : function(e) {
                            return s.saveView(e).then(function(e) {
                                return e
                            }, function(e) {
                                console.warn("Save view error: " + e)
                            })
                        }(i)).then(function(e) {
                            e.error ? o.showError() : g()
                        })
                    }, function(e) {
                        o.showError(e)
                    }))
                }, e.searchColumns = function() {
                    if (!e.view.id && d.customViews()) return !1;
                    var a = e.qColumn,
                        i = [];
                    return r.forEach(e.columns, function(e) {
                        r.forEach(e, function(e) {
                            i = i.concat(t("filter")(e.fields, {
                                name: a
                            }))
                        })
                    }), r.forEach(i, function(t) {
                        t.disabled = e.isColumnInView(t)
                    }), i
                }, e.isColumnInView = function(t) {
                    return !!r.findWhere(e.view.fields, {
                        field: t.field
                    })
                }, e.addColumnToView = function(t) {
                    if (!e.isColumnInView(t)) {
                        if (m()) return o.showError("viewColumnLimitReached"), !1;
                        e.view.fields.push(t)
                    }
                }, e.cancel = function() {
                    g()
                }, e.isChecked = function(t) {
                    return -1 === r.findIndex(e.view.fields, {
                        field: t.field
                    }) ? "js-unchecked" : ""
                }, angular.element(document.querySelector(".js-available-fields")).on("click", h), e.$on("$destroy", function() {
                    angular.element(document.querySelector(".js-available-fields")).off("click", h)
                }), e.view.fields = r.map(e.view.fields, function(t) {
                    return {
                        name: function(t) {
                            var a;
                            return r.forEach(e.columns, function(e) {
                                a || r.forEach(e, function(e) {
                                    a || (a = r.result(r.findWhere(e.fields, {
                                        field: t
                                    }), "name"))
                                })
                            }), a || t
                        }(t),
                        field: t
                    }
                })
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    viewData: "@",
                    columnsData: "@",
                    columnsLimit: "@",
                    mandatoryColumns: "@",
                    returnUrl: "@"
                },
                template: a("Epyw"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    Cdd9: function(e, t) {
        e.exports = '<div> <div class=clearfix> <a class="right clear-default-view" data-ng-click=clearDefault()>Clear Default</a> </div> <div class=views-list ui-tree=treeOptions> <div class="head-custom-views clearfix"> <div class="column-name left"> Name </div> <div class="column-description left"> Description </div> <div class="column-order right"> Order </div> <div class="default-view right"> Default </div> </div> <ol class=tree-custom-views ui-tree-nodes data-ng-model=views> <li class=view-item ui-tree-node data-ng-repeat="view in views"> <div class=clearfix ui-tree-handle> <div class=item-left-block data-nodrag> <div class=item-name-container data-ng-hide="pendingRemoveView === view"> <div class=item-delete-button-block> <i class="bc-glyph-minus-circle red" data-ng-click=removeView(view)></i> </div> <div class=item-name-block> <a target=_self href="[[ view.link ]]" title="Edit columns in the custom view"> [[ view.name ]] </a> </div> </div> <div class=item-delete-block data-ng-show="pendingRemoveView === view"> <span class=block-title>Delete View?</span> <a class="bc-button small light-blue" data-ng-click=confirmRemoveView()>Yes</a> <a class="bc-button small grey" data-ng-click=cancelRemoveView()>No</a> </div> </div> <div class="item-right-block clearfix"> <div class="item-description-block desktop"> <span>[[ view.description ]]</span> </div> <div class="item-description-block tablet" data-nodrag> <span>[[ view.description ]]</span> </div> <div class=item-bars-block> <i class=bc-glyph-bars></i> </div> <div class="input-radio item-input-block" data-nodrag> <input type=radio data-ng-disabled=updatingView id="default-view-[[ view.id ]]" name=defaultView data-ng-model=defaultView.value value="[[ view.id ]]" data-ng-click=changeDefaultView(view); /> <label for="default-view-[[ view.id ]]"><span></span></label> </div> </div> </div> </li> </ol> </div> </div>'
    },
    CkTE: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u) {
            return {
                restrict: "E",
                controller: ["$scope", function(a) {
                    a.states = t.states;
                    var p = "true" === a.confirm,
                        m = {};
                    a.processingAlerts = {}, a.symbol = o.hasData() ? o.getData() : a.symbol, a.alertsState = {}, a.events = a.events || {};
                    c.getUserData().subscription, d.SUBSCRIPTIONS.PREMIUM_USER;

                    function h() {
                        Object.keys(m).forEach(function(i) {
                            var r;
                            a.processingAlerts[i] = !0, m[i].newState === t.states.ACTIVE ? (m[i].alert.alert_state = t.states.STARTING, r = m[i].alert, e.enableAlert(r, a.symbol.symbol).then(function(e) {
                                e.alert_state === t.states.ACTIVE && (r.alert_state = t.states.ACTIVE, r.last_trigger_date = null), a.alertsState[r.alert_id] = e.alert_state === t.states.ACTIVE, n.$broadcast("symbolAlertActivation", {
                                    symbol: a.symbol.symbol,
                                    alert: e
                                }), g(r)
                            }, function() {
                                a.processingAlerts[r.alert_id] = !1
                            })) : (m[i].alert.alert_state = t.states.STOPPING, function(i) {
                                e.disableAlert(i, a.symbol.symbol).then(function(e) {
                                    e.alert_state === t.states.INACTIVE && (i.alert_state = t.states.INACTIVE), a.alertsState[i.alert_id] = e.alert_state === t.states.INACTIVE, n.$broadcast("symbolAlertActivation", {
                                        symbol: a.symbol.symbol,
                                        alert: e
                                    }), g(i)
                                }, function() {
                                    a.processingAlerts[i.alert_id] = !1
                                })
                            }(m[i].alert))
                        })
                    }

                    function g(e) {
                        a.processingAlerts[e.alert_id] = !1
                    }
                    a.$on("onAlertStartedEnabling", function(e, t) {
                        a.processingAlerts[t.alert.alert_id] = !0, a.alertsState[t.alert.alert_id] = !0
                    }), a.$on("onAlertCompletedEnabling", function(e, t) {
                        a.processingAlerts[t.alert.alert_id] = !1, a.$digest()
                    }), a.$watchCollection("alerts", function() {
                        a.alerts.forEach(function(e, t) {
                            a.alerts[t].alert_state === a.states.ACTIVE || a.alerts[t].alert_state === a.states.STARTING ? a.alertsState[a.alerts[t].alert_id] = !0 : a.alertsState[a.alerts[t].alert_id] = !1
                        })
                    }), a.$on(l.ON_ALERT_CHANGED, function(e, t) {
                        var i = t.conditions[0].property.target.identifier,
                            r = !1;
                        a.alerts.forEach(function(e, i) {
                            t.alert_id === e.alert_id && (r = !0, a.alerts[i] = t, a.alerts[i].alert_state === a.states.ACTIVE || a.alerts[i].alert_state === a.states.STARTING ? a.alertsState[a.alerts[i].alert_id] = !0 : a.alertsState[a.alerts[i].alert_id] = !1)
                        }), !1 === r && a.symbol && i === a.symbol.symbol && a.alerts.push(t), a.$digest()
                    }), a.$on(l.ON_ALERT_DELETED, function(e, t) {
                        a.alerts.forEach(function(e, i) {
                            t.alert_id === e.alert_id && (o.removeSymbolAlert(a.symbol.symbol, e), a.events && "function" == typeof a.events.onDelete && a.events.onDelete(e), a.alerts.splice(i, 1))
                        }), 0 === a.alerts.length && a.events && "function" == typeof a.events.onClear && a.events.onClear(a.symbol), a.$evalAsync()
                    }), a.$on(l.ON_ALERT_CREATED, function(e, t) {}), a.deleteAlert = function(t) {
                        e.deleteAlert(t).then(function() {
                            a.pendingAlertRemoval = null
                        })
                    }, a.getAlertName = function(e) {
                        if (e.notes && e.notes.level && "basic" === e.notes.level) {
                            var a = e.conditions[0].property.property_id === t.props.LAST ? "Intraday" : "EOD";
                            return u.createAlertName(e, a)
                        }
                        return u.createAlertName(e)
                    }, a.pendingAlertRemoval = null, a.showAlertRemovalDialog = function(e) {
                        a.pendingAlertRemoval = e
                    }, a.cancelAlertRemoval = function() {
                        a.pendingAlertRemoval = null
                    }, a.changeActive = function(e, a) {
                        var i = !0 === a ? t.states.ACTIVE : t.states.INACTIVE;
                        p ? m.hasOwnProperty(e.alert_id) ? delete m[e.alert_id] : m[e.alert_id] = {
                            alert: e,
                            newState: i
                        } : (m[e.alert_id] = {
                            alert: e,
                            newState: i
                        }, h(), delete m[e.alert_id])
                    }, a.$on("symbolAlertActivation", function(e, i) {
                        if (i.symbol === a.symbol.symbol)
                            if (i.alert.alert_state === t.states.ACTIVE) {
                                a.alertsState[i.alert.alert_id] = !0;
                                var r = s.findIndex(a.alerts, {
                                    alert_id: i.alert.alert_id
                                });
                                a.alerts[r].last_trigger_date = null
                            } else a.alertsState[i.alert.alert_id] = !1
                    }), a.events.onEdit = function(e) {
                        a.alertsState[e.alert_id] = e.alert_state === t.states.ACTIVE
                    }, a.editAlert = function(t, s) {
                        o.setData(a.symbol), s && e.setFocusNotes(!0), i.setAlert(t);
                        var l = n.$on("getSymbolData", function() {
                            n.$broadcast("setSymbolData", o.getData()), l()
                        });
                        a.close(), r.openModalSymbolAlertsCreate(a.events)
                    }, p && a.$on("applyAlertChanges", function() {
                        h()
                    })
                }],
                template: a("OLIK"),
                scope: {
                    alerts: "=",
                    close: "&",
                    symbol: "=",
                    confirm: "@",
                    events: "="
                }
            }
        }
        i.$inject = ["alertManagerService", "alertProperties", "alertsCurrentAlertService", "alertsModalFactory", "alertsSymbolDataFactory", "$rootScope", "_", "events", "authService", "appConfig", "alertsUtilsService"], e.exports = i
    },
    Cl9Z: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    itemData: "=",
                    symbolTitle: "@",
                    type: "@"
                },
                controller: ["$scope", function(a) {
                    a.symbolTitle = a.symbolTitle || a.itemData.symbolName, a.setColorClass = e.setColor, a.quotesService = t, a.setColor = function(e) {
                        return (e = isNaN(+e) ? parseFloat(e) : +e) > 0 ? "up" : e < 0 ? "down" : "unch"
                    }, a.chartParams = {}, a.chartParams.period = "P1D", a.chartParams.aggregationUnit = "Intraday", a.chartParams.format = "%l", "scrapMetals" === a.type && (a.chartParams.period = "P1M", a.chartParams.aggregationUnit = "Day", a.chartParams.format = "%e")
                }],
                template: a("bfi0")
            }
        }
        i.$inject = ["utils", "quotesService"], e.exports = i
    },
    CovQ: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r, o = !1;
            return {
                restrict: "A",
                link: function(i, n, s) {
                    i.success = !1, i.close = function() {
                        r.close()
                    }, t.isLoggedIn() && (o = t.getUserData(), i.email = o.primary_email || ""), n.on("click", function() {
                        i.list = s.list, i.data = window.config.newsletters[i.list], r = e.open({
                            template: a("4E15"),
                            scope: i,
                            windowClass: "bc-custom-subscription-wrapper"
                        })
                    })
                }
            }
        }
        i.$inject = ["$modal", "authService", "barchartEmailsApiFactory"], e.exports = i
    },
    Cr7S: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "A",
                require: "ngModel",
                link: function(e, t, a, i) {
                    var r = "";

                    function o(e) {
                        return 8 === e.keyCode || (r = e.target.value, isNaN(String.fromCharCode(e.keyCode)) && "keyup" === e.type && r.length > 10 ? (r = r.substr(0, r.length - 1), i.$setViewValue(r), void(e.target.value = r)) : (r.length > 10 && (r = r.substr(0, 10), i.$setViewValue(r), e.target.value = r), void(2 !== r.length && 5 !== r.length || (r += "/", i.$setViewValue(r), e.target.value = r))))
                    }
                    t.on("keyup", o), e.$on("$destory", function() {
                        t.off("keyup", o)
                    })
                }
            }
        }
    },
    Cuoc: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o = !1,
                n = a.getUserData();
            e.caption = {}, e.watchlists = n.watchlists, e.treeItems = angular.copy(e.watchlists), e.removeItem = function(t) {
                e.pendingItemDelete = t
            }, e.removeItemCancel = function() {
                e.pendingItemDelete = null
            }, e.removeItemConfirm = function(t) {
                var a = e.treeItems.splice(t, 1);
                a && (o = a[0].name), e.save()
            }, e.save = function(a) {
                e.errors = {};
                var n = r.pluck(e.treeItems, "name"),
                    s = r.filter(n, function(e, t, a) {
                        return r.includes(a, e, t + 1)
                    });
                if (Object.keys(e.treeItems).forEach(function(t) {
                        var a = e.organiseWatchlistsForm["name" + e.treeItems[t].id];
                        s.length && -1 !== s.indexOf(e.treeItems[t].caption) ? a.$setValidity("uniqueName", !1) : a.$setValidity("uniqueName", !0)
                    }), e.organiseWatchlistsForm.$invalid) Object.keys(e.organiseWatchlistsForm.$error).forEach(function(t) {
                    "uniqueName" !== t && "maxlength" !== t && "required" !== t && (e.errors[t] = !0)
                });
                else {
                    var l, c = r.pluck(e.treeItems, "id"),
                        d = r.pluck(e.watchlists, "id"),
                        u = {};
                    e.treeItems.forEach(function(e) {
                        u[e.id] = e.name
                    }), l = r.difference(d, c), t.organiseWatchlists(c, l, u).then(function(t) {
                        t.data && t.data && t.data.success ? a ? i.success("Watchlist name has been changed.") : o && (i.success("Watchlist " + o + " has been deleted."), o = !1) : e.errors.bad_request = !0, e.watchlists = angular.copy(e.treeItems)
                    }, function(t) {
                        t && t.error && t.error.message ? e.errors.bad_request = t.error.message : e.errors.bad_request = !0
                    })
                }
            }, e.moveSymbolTop = function(t) {
                e.treeItems.splice(0, 0, e.treeItems.splice(t, 1)[0]), e.save()
            }, e.sortOptions = {
                dragStop: function() {
                    setTimeout(function() {
                        e.save()
                    })
                }
            }, e.sortRows = function() {
                e.treeItems = r.sortBy(e.treeItems, function(e) {
                    return e.name.toLowerCase()
                }, ["asc"]), e.save(), e.sortOrder = ""
            }
        }
        i.$inject = ["$scope", "watchlistOrganiseApiFactory", "authService", "Notification", "_"], e.exports = i
    },
    "D/ng": function(e, t) {
        e.exports = '<div> <div class=input-checkbox> <input type=checkbox data-ng-true-value=1 data-ng-false-value=0 id=bc-watchlist-show-notes name=showWatchlistNotes data-ng-change=showNotesTrigger() data-ng-model=showWatchlistNotes> <label class=checkbox for=bc-watchlist-show-notes title="Edit the Watchlist to Modify Notes"> <span class=bc-glyph-check></span> Show Notes </label> </div> </div>'
    },
    D0dW: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c) {
            var d, u = this;
            u.hasErrors = !1, u.errors = {}, u.loading = !1, u.hideLink = !!r.hideLink, u.grecaptchaInvisibleKey = s.grecaptchaInvisibleKey, u.modalTitle = a, u.mail = angular.merge({}, {
                to: null,
                from: null,
                body: null,
                systemBody: null
            }, t), u.isLoggedIn = o.isLoggedIn(), o.isLoggedIn() && (u.mail.from = o.getUserData().primary_email), u.submitForm = function(e) {
                if (e.$invalid) return u.hasErrors = !0, !1;
                u.errors.default = !1, u.hasErrors = !1, u.loading || (u.isLoggedIn ? u.onSuccess() : n.execute(u.widgetId))
            }, u.close = function() {
                e.close("CLOSE")
            }, u.tagAdding = function(e) {
                return !!/^[_a-zA-Z0-9]+(.[_a-zA-Z0-9]+)*@[a-zA-Z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/.test(e.text) && (d = angular.element(document.activeElement), e)
            }, u.tagAdded = function(e) {
                return setTimeout(function() {
                    d.focus()
                }, 5), e
            }, u.onSuccess = function() {
                u.loading = !0, u.mail.to = c.map(u.mail.to, "text"), l.call(i, "POST", c.omit(u.mail, c.isNull)).then(function(t) {
                    !0 === t.success && e.close("OK")
                }, function(e) {
                    u.hasErrors = !0, e.error && 400 === e.error.code ? (console.log(e), e.error.message.errors && e.error.message.errors.to && (u.errors.default = e.error.message.errors.to)) : u.errors.default = e.errors
                }).finally(function() {
                    u.loading = !1
                })
            }, u.onRender = function(e) {
                u.widgetId = e
            }
        }
        i.$inject = ["$modalInstance", "mailData", "modalTitle", "endPoint", "extraOptions", "authService", "vcRecaptchaService", "appConfig", "dataProvider", "_"], e.exports = i
    },
    D1rL: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            e.formData = a.getChartSettings(), e.formData.barType && "Hollow" === e.formData.barType.curveAttribute && (e.formData.barType.curveStyle = "HollowCandles", delete e.formData.barType.curveAttribute);
            var l = i.getMainPlot()[0].curves[0];
            if (e.typeList = n.types, e.selectedBarType = {
                    model: {}
                }, e.formData.barType) {
                var c = {
                    key: e.formData.barType.curveStyle
                };
                e.formData.barType.curveAttribute && (c.attr = e.formData.barType.curveAttribute), "Line" === l.style && (e.formData.barType.curveStyle = "Line"), e.selectedBarType.model = o.find(e.typeList, function(t) {
                    return t.key === e.formData.barType.curveStyle && t.attr === e.formData.barType.curveAttribute
                })
            }
            if (e.formData.barType.colors = [l.colors[0]], (-1 === ["Line", "Area", "OHLC"].indexOf(l.style) || "OHLC" === l.style && !0 === l.varyColorPerBar) && (l.colors.length > 1 ? (e.formData.barType.colors.push(l.colors[1]), 3 === l.colors.length && e.formData.barType.colors.push(l.colors[2])) : e.formData.barType.colors = ["#EF4226", "#00B04B"]), r.type && r.type.length) {
                var d = [];
                r.type.forEach(function(t) {
                    var a = o.find(e.typeList, function(e) {
                        return e.key === t
                    });
                    a && d.push(a)
                }), d.length && i.getChartTaxonomy().then(function() {
                    var t = o.find(d, function(t) {
                        return t.key === e.formData.barType.curveStyle
                    });
                    t ? (e.selectedBarType.model = t, e.selectedBarType.model.defaultColors = angular.copy(e.formData.barType.colors)) : e.selectedBarType.model = d[0], e.changeBarType(e.selectedBarType), e.allowedBarTypes = r.type, e.batTypeConfigurable = d.length > 1
                })
            }
            e.batTypeConfigurable = !0, e.changeBarType = function(t) {
                e.batTypeConfigurable && (e.formData.barType.curveStyle = t.model.key, t.model.attr ? e.formData.barType.curveAttribute = t.model.attr : delete e.formData.barType.curveAttribute, -1 === ["Line", "Area"].indexOf(t.model.key) && (e.formData.scaleValue = "price"), e.formData.barType.colors = angular.copy(t.model.defaultColors))
            }, e.cancel = function() {
                t.close()
            }, e.apply = function() {
                var r = !1,
                    n = a.getChartGlobalConfig();
                n.settings.barType.curveStyle = l.style, n.settings.barType.lineWidth = l.lineWidth, n.settings.barType.colors = [l.colors[0]], (-1 === ["Line", "Area", "OHLC"].indexOf(l.style) || "OHLC" === l.style && !0 === l.varyColorPerBar) && l.colors.length > 1 && n.settings.barType.colors.push(l.colors[1]), e.formData.barType.curveStyle === n.settings.barType.curveStyle && e.formData.barType.lineWidth === n.settings.barType.lineWidth && e.formData.barType.curveAttribute === n.settings.barType.curveAttribute && o.isEqual(e.formData.barType.colors, n.settings.barType.colors) || (i.changeCurveStyle(e.formData.barType), r = !0), r && (a.setChartSettings(e.formData), i.render(), s.$broadcast("chartChanged")), t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "interactiveChartSettings", "interactiveChartApi", "interactiveChartFixedBarType", "_", "interactiveChartSettingsConfig", "$rootScope"], e.exports = i
    },
    D2le: function(e, t) {
        e.exports = '<div class="module technical-analysis"> <a target=_self data-ng-href="/[[ ::TechnicalAnalysisCtrl.quotesService.getSector(TechnicalAnalysisCtrl.currentSymbol.symbolType) ]]/quotes/[[ ::TechnicalAnalysisCtrl.currentSymbol.symbol ]]/technical-analysis"> <h4>Technical Analysis</h4> <div class=module-table> <div class="module-row header"> <div>Period</div> <div>Moving AVG</div> <div>%CHG</div> </div> <div class=module-row data-ng-repeat="item in ::TechnicalAnalysisCtrl.data track by $index"> <div> [[ ::item.title ]]</div> <div> [[ ::item.movingAverage ]]</div> <div data-ng-class=::TechnicalAnalysisCtrl.utils.setColor(item.percentChange)> [[ ::item.percentChange ]]</div> </div> </div> </a> </div>'
    },
    D8Yk: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = [function() {
                var a = this;
                a.apiData = JSON.parse(e.unescape(a.apiData));
                var r = JSON.parse(a.symbol);
                a.currentSymbol = r, a.quotesService = i, a.data = a.apiData.data, a.utils = t
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("D2le"),
                controller: r,
                controllerAs: "TechnicalAnalysisCtrl"
            }
        }
        i.$inject = ["_", "utils", "quotesService"], e.exports = i
    },
    DOC5: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    disableRemoving: "=",
                    condition: "=",
                    removeCondition: "&"
                },
                link: function(o) {
                    o.removeDialogOpen = !1, o.baseCondition = null, o.conditionOperator = null, o.conditionOperatorsList = [], o.conditionOperand = null, o.skipConditionOperator = !1, o.useRightDropDown = !1, o.rightModel = null, o.useItemsDropDown = !1, o.itemsDropDownList = [], o.invalidOperand = !1, o.withModifier = !1, o.modifierModel = null, o.modifierInvalid = null;
                    var n = {},
                        s = !!o.condition.condition_id;

                    function l() {
                        if (void 0 === o.baseCondition.items) {
                            o.itemsDropDownList = [], o.useItemsDropDown = !1, o.useRightDropDown = !1, o.type = o.baseCondition.property.type, o.condition.property = o.baseCondition.property, o.condition.property.target.identifier = o.symbol;
                            var a = o.baseCondition.valid_operators || o.baseCondition.property.valid_operators;
                            if (o.conditionOperatorsList = angular.copy(a.map(function(a) {
                                    return t.find(e.operators, {
                                        operator_id: a
                                    })
                                })), o.skipConditionOperator = o.baseCondition.operator_id || !1, o.useRightDropDown = o.baseCondition.useOptions || !1, void 0 !== o.baseCondition.skipConditionOperator && (o.skipConditionOperator = o.baseCondition.skipConditionOperator), o.conditionOperator = null, o.conditionOperand = null, o.useRightDropDown && o.skipConditionOperator && o.baseCondition.useOptions) {
                                var i = angular.copy(t.find(e.operators, {
                                    operator_id: o.baseCondition.operator_id
                                }));
                                if (i.operand = null, !s) {
                                    if (i.modifiers && i.modifiers.length > 0) {
                                        var n = i.modifiers[0];
                                        i.modifiers = [{
                                            modifier_id: n,
                                            value: null
                                        }]
                                    }
                                    o.condition.operator = angular.copy(i)
                                }
                                o.rightDropDownList = i.operand_options, o.baseCondition.useDefaultRightModel && (o.rightModel = s ? o.condition.operator.operand : o.rightDropDownList[0], o.condition.operator.operand = o.rightModel), r.debug("RIGHT DROP_DOWN:", o.rightDropDownList)
                            }
                            o.baseCondition.withModifier && (o.withModifier = !0)
                        } else o.conditionOperator = null, o.conditionOperand = null, o.itemModel = null, o.conditionOperatorsList = [], o.useItemsDropDown = !0, o.itemsDropDownList = o.baseCondition.items;
                        r.debug("BASE CONDITION CHANGED: ", o.baseCondition)
                    }
                    o.setModifier = function() {
                        if ("number" == typeof o.condition.operator.modifiers[0]) {
                            var e = {
                                modifier_id: o.condition.operator.modifiers[0],
                                value: null
                            };
                            o.condition.operator.modifiers = [e]
                        }
                        o.condition.operator.modifiers[0].value = o.modifierModel
                    }, e.properties.forEach(function(e) {
                        n[e.property_id] = angular.copy(e)
                    }), r.debug("ORDERED PROPERTIES: ", n), o.conditionDropDown = angular.copy(a("OqDd")(n)), r.debug("DROP DOWN: ", o.conditionDropDown), o.$on(i.ON_CONDITION_VALIDATE, function() {
                        switch (o.invalidOperand = !1, o.condition.validate()) {
                            case "operandError":
                            case "operandInvalid":
                                o.invalidOperand = !0;
                                break;
                            case "modifierInvalid":
                                o.modifierInvalid = !0
                        }
                    }), o.changeItem = function() {
                        if (o.itemModel)
                            if (r.debug("CHANGE ITEM: ", o.itemModel), o.condition.property = o.itemModel.property, o.type = o.itemModel.property.type, o.condition.property.target.identifier = o.symbol, o.baseCondition.changeOnHold && "hold" === o.itemModel.key) {
                                o.conditionOperator = "Hold", o.conditionOperatorsList = [], o.skipConditionOperator = !0;
                                var a = o.itemModel.property.valid_operators[0];
                                o.conditionOperator = angular.copy(t.find(e.operators, {
                                    operator_id: a
                                })), o.condition.operator = o.conditionOperator
                            } else {
                                o.skipConditionOperator = !1;
                                var i = o.itemModel.property.valid_operators,
                                    n = !!o.conditionOperator;
                                o.conditionOperatorsList = angular.copy(i.map(function(a) {
                                    return t.find(e.operators, {
                                        operator_id: a
                                    })
                                })), n && (o.conditionOperator = t.find(o.conditionOperatorsList, function(e) {
                                    return e.operator_id === o.condition.operator.operator_id
                                }))
                            }
                    }, o.askToRemoveRowFilter = function() {
                        o.removeDialogOpen = !0
                    }, o.confirmFilterRemove = function() {
                        o.removeCondition()
                    }, o.cancelFilterRemove = function() {
                        o.removeDialogOpen = !1
                    }, o.changeConditionOperator = function() {
                        var e = o.condition.operator ? o.condition.operator.operand : null;
                        o.condition.operator = o.conditionOperator, e && (o.condition.operator.operand = e), r.debug("CHANGE CONDITION OPERATOR: ", o.conditionOperator), r.debug("OPERATOR TYPE:", o.conditionOperator.operand_type)
                    }, o.changeOperand = function(e) {
                        o.condition.operator.operand = null !== e && void 0 !== e ? e.toString() : null
                    }, o.changeRightModel = function() {
                        o.baseCondition.useOptions && (r.debug("RIGHT MODEL IS CHANGED: ", o.rightModel), o.condition.operator.operand = o.rightModel)
                    }, s ? (r.debug("EDIT CONDITION: ", o.condition), o.baseCondition = t.find(o.conditionDropDown, function(e) {
                        return !e.isNull && (void 0 !== e.items ? t.find(e.items, function(e) {
                            return e.property.property_id === o.condition.property.property_id
                        }) : void 0 !== e.operator_id ? e.property.property_id === o.condition.property.property_id && e.operator_id === o.condition.operator.operator_id : e.property.property_id === o.condition.property.property_id)
                    }), r.debug("BASE FOUND IN EDIT CONDITION:", o.baseCondition), o.baseCondition.withModifier && (o.modifierModel = 100 * o.condition.operator.modifiers[0].value, o.modifierModel.toString().length > 10 && (o.modifierModel = o.modifierModel.toFixed(0))), l(), void 0 !== o.baseCondition.items && (o.itemModel = t.find(o.itemsDropDownList, function(e) {
                        return e.property.property_id === o.condition.property.property_id
                    }), o.changeItem(), r.debug("FOUND ITEM MODEL:", o.itemModel)), o.conditionOperator = t.find(o.conditionOperatorsList, function(e) {
                        return e.operator_id === o.condition.operator.operator_id
                    }), "number" === o.condition.operator.operand_type ? o.conditionOperand = +o.condition.operator.operand : o.conditionOperand = o.condition.operator.operand, o.condition.operator.operand_display && "NaN" !== o.condition.operator.operand_display && (o.conditionOperand = o.condition.operator.operand_display), o.useRightDropDown && (r.debug("RIGHT DROP DOWN:", o.rightDropDownList), o.rightModel = t.find(o.rightDropDownList, function(e) {
                        return e === o.condition.operator.operand
                    }), r.debug("RIGHT MODEL: ", o.rightModel)), "percent" === o.condition.property.type && (o.conditionOperand = 100 * o.conditionOperand, o.conditionOperand.toString().length > 10 && (o.conditionOperand = o.conditionOperand.toFixed(0)), o.condition.operator.operand = o.conditionOperand)) : (o.baseCondition = o.conditionDropDown[0], l(), o.conditionOperator = o.conditionOperatorsList[0], o.changeConditionOperator()), o.changeBaseCondition = function() {
                        if (o.conditionOperator = null, o.conditionOperand = null, o.itemModel = null, o.conditionOperatorsList = [], o.itemsDropDownList = [], o.useItemsDropDown = !1, o.useRightDropDown = !1, o.rightModel = null, o.withModifier = !1, o.modifierModel = null, o.modifierInvalid = null, !o.baseCondition.isNull)
                            if (o.invalidOperand = !1, l(), o.condition.operator.operand = null, "Technical" === o.baseCondition.group || "Today's Opinion" === o.baseCondition.group) o.itemModel = o.itemsDropDownList[0], o.changeItem(), o.conditionOperator = o.conditionOperatorsList[0], o.changeConditionOperator();
                            else if ("Opinion Indicators" === o.baseCondition.group) o.rightModel = "Buy", o.changeRightModel();
                        else if ("Highs/Lows" === o.baseCondition.group) {
                            if (o.conditionOperator = o.conditionOperatorsList[0], o.baseCondition.withModifier) {
                                var e = o.conditionOperator.modifiers[0];
                                o.conditionOperator.modifiers = [{
                                    modifier_id: e,
                                    value: null
                                }]
                            }
                            o.condition.operator.operand = o.conditionOperator.operand_options[0], o.changeConditionOperator()
                        } else o.conditionOperator = o.conditionOperatorsList[0], o.changeConditionOperator()
                    }
                },
                template: a("v+Qg")
            }
        }
        i.$inject = ["alertProperties", "_", "events", "$log"], e.exports = i
    },
    DOGw: function(e, t, a) {
        "use strict";
        e.exports = [{
            title: "Today",
            name: "today",
            fields: "lastPrice,percentChange,lowPrice,highPrice",
            default: !0,
            postfix: "",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChange: "Today",
                        priceRange: "Today's Price Range"
                    }
                }
            }
        }, {
            title: "5-Day",
            name: "5d",
            fields: "lastPrice,percentChange5d,lowPrice5d,highPrice5d",
            postfix: "5d",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChange5d: "5 Day",
                        priceRange: "5 Day Price Range"
                    }
                }
            }
        }, {
            title: "1-Month",
            name: "1m",
            fields: "lastPrice,percentChange1m,lowPrice1m,highPrice1m",
            postfix: "1m",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChange1m: "1 Month",
                        priceRange: "1 Month Price Range"
                    }
                }
            }
        }, {
            title: "3-Month",
            name: "3month",
            fields: "lastPrice,percentChange3m,lowPrice3m,highPrice3m",
            postfix: "3m",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChange3m: "3 Month",
                        priceRange: "3 Month Price Range"
                    }
                }
            }
        }, {
            title: "6-Month",
            name: "6m",
            fields: "lastPrice,percentChange6m,lowPrice6m,highPrice6m",
            postfix: "6m",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChange6m: "6 Month",
                        priceRange: "6 Month Price Range"
                    }
                }
            }
        }, {
            title: "Year-to-Date",
            name: "ytd",
            fields: "lastPrice,percentChangeYtd,lowPriceYtd,highPriceYtd",
            postfix: "Ytd",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChangeYtd: "YTD",
                        priceRange: "Year to Date Price Range"
                    }
                }
            }
        }, {
            title: "1-Year",
            name: "1year",
            fields: "lastPrice,percentChange1y,lowPrice1y,highPrice1y",
            postfix: "1y",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChange1y: "1 Year",
                        priceRange: "1 Year Price Range"
                    }
                }
            }
        }, {
            title: "5-Year",
            name: "5year",
            fields: "lastPrice,percentChange5y,lowPrice5y,highPrice5y",
            postfix: "5y",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChange5y: "5 Year",
                        priceRange: "5 Year Price Range"
                    }
                }
            }
        }, {
            title: "10-Year",
            name: "10year",
            fields: "lastPrice,percentChange10y,lowPrice10y,highPrice10y",
            postfix: "10y",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChange10y: "10 Year",
                        priceRange: "10 Year Price Range"
                    }
                }
            }
        }, {
            title: "Matrix",
            name: "matrix",
            fields: "lastPrice,percentChange,percentChange1y,percentChange5y,percentChange10y",
            meta: {
                field: {
                    name: {
                        symbolName: "Sector",
                        lastPrice: "Last",
                        percentChange: "Today",
                        percentChange1y: "1 Year",
                        percentChange5y: "5 Year",
                        percentChange10y: "10 Year"
                    }
                }
            }
        }]
    },
    DXVM: function(e, t) {
        e.exports = '<div class=bc-alerts__premier-condition> <div class=bc-alerts__premier-condition-title> <div class=bc-alerts__condition-title data-ng-show=!removeDialogOpen data-ng-class="{\'extra-padding\': disableRemoving}"> <i class="bc-glyph-minus-circle bc-alerts__remove-condition" data-ng-if=!disableRemoving data-ng-click=askToRemoveRowFilter()></i> <span class=bc-alerts__condition-name>Select a Condition:</span> </div> <div class="bc-alerts__delete-condition-dialog ng-hide" data-ng-if=!disableRemoving data-ng-show=removeDialogOpen> <span class=block-title>Delete?</span> <a class="bc-button small light-blue" data-ng-click=confirmFilterRemove()>Yes</a> <a class="bc-button small grey" data-ng-click=cancelFilterRemove()>No</a> </div> </div> <div class=bc-alerts__premier-condition-form> <div class="bc-alerts__condition-fields-row clearfix"> <div class="bc-dropdown styled arrow-black rounded"> <select data-ng-model=baseProperty data-ng-change=changeBaseProperty() data-ng-options="val as key for (key, val) in ::properties"> <option value=""></option> </select> </div> <div class="bc-dropdown styled arrow-black rounded"> <select data-ng-hide=quoteCategory data-ng-model=specificProperty data-ng-change=changeSpecificProperty() data-ng-class="{\'disable\': _.isEmpty(specificPropertiesList)}" data-ng-disabled=_.isEmpty(specificPropertiesList) data-ng-options="val as key for (key, val)  in specificPropertiesList"></select> <select data-ng-show=quoteCategory data-ng-model=specificProperty data-ng-change=changeSpecificProperty() data-ng-class="{\'disable\': _.isEmpty(specificPropertiesList)}" data-ng-disabled=_.isEmpty(specificPropertiesList) data-ng-options="item as item.description[0] group by item.category for item in specificPropertiesList"></select> </div> </div> <div class="bc-alerts__condition-fields-row clearfix"> <div class="bc-dropdown styled arrow-black rounded bc-alerts__condition-small-dropdown" data-ng-show=extendDropDown> <select data-ng-model=extendProperty data-ng-change=changeExtendProperty() data-ng-class="{\'disable\': !extendPropertiesList || extendPropertiesList.length === 0}" data-ng-disabled="!extendPropertiesList || extendPropertiesList.length === 0" data-ng-options="item as item.description[1] for item in extendPropertiesList"></select> </div> </div> <div class="bc-alerts__condition-fields-row clearfix"> <div class="bc-dropdown styled arrow-black rounded"> <select data-ng-model=operator data-ng-change=changeOperator() data-ng-class="{\'disable\': !operatorsList || operatorsList.length === 0}" data-ng-disabled="!operatorsList || operatorsList.length === 0" data-ng-options="item as item.display.long for item in operatorsList"></select> </div> <div class=input-wrapper data-ng-if="operator.operand_type === \'number\'"> <div class=bc-alerts__input-group data-ng-class="{\'suffix\': condition.property.type === \'percent\'}"> <input type=number class=rounded data-ng-class="{\'error\' : operator.invalidOperand}" data-ng-change=changeOperand(operand) data-ng-model=operand /> <span data-ng-show="condition.property.type === \'percent\'" class=bc-alerts__input-group-suffix>%</span> </div> </div> <input type=text class=rounded data-ng-class="{\'error\' : operator.invalidOperand}" data-ng-if="operator.operand_type === \'null\' || (operator.operand_type === \'string\' && operator.operand_options.length === 0)" data-ng-change=changeOperand(operand) data-ng-model=operand /> <div class="bc-dropdown styled arrow-black rounded" data-ng-if="operator.operand_options.length > 0"> <select data-ng-change=changeOperand(operand) data-ng-model=operand data-ng-class="{\'error\' : operator.invalidOperand}" data-ng-options="item as item for item in operator.operand_options"></select> </div> </div> </div> </div> '
    },
    DY2s: function(e, t) {
        e.exports = '<div class="modal-content-wrapper move-to-another"> <div class=bc-tools__modal-with-header-header> <div class="bc-tools__modal-with-header-close bc-glyph-times" data-ng-click=cancel();></div> <div class=bc-tools__modal-with-header-wrapper> Move transaction to another portfolio: <div class="form-fieldset stacked fieldset-dropdown adjustment"> <label>Adjustment</label> <div class="bc-dropdown styled arrow-black"> <select name=adjust_cash data-ng-model=adjust_cash data-ng-change=change(adjust_cash)> <option value=0>No Cash Adjustment</option> <option value=1>Cash ([[ cash | currency:\'$\' ]])</option> </select> </div> </div> </div> </div> <div class=bc-tools__modal-with-header-content data-ng-show=!loading> <div data-ng-show=!portfolios.length class=no-portfolios> <div class=error-text> You have no Portfolios. <a target=_self data-ng-href="[[ portfolioRoute ]]">Create one here</a>. </div> </div> <div data-ng-show=portfolios.length class=portfolios-list> <div class="input-radio change-portfolio-block" data-ng-repeat="portfolio in portfolios"> <input type=radio data-ng-disabled=updatingPortfolio id="default-view-[[ portfolio.id ]]" data-ng-click=changeCash(portfolio) name=newPortfolio data-ng-model=newPortfolio value="[[ portfolio.id ]]"> <label for="default-view-[[ portfolio.id ]]"><span></span>[[ portfolio.caption ]]</label> </div> </div> <div data-ng-if=error class="error-text text-center"> <div class="fieldset error">[[ error ]]</div> </div> <div class="text-center move-to-another__buttons"> <button class="bc-button save light-blue ng-click-active" data-ng-disabled=updatingPortfolio data-ng-click=moveTo(portfolio.id);>Ok</button> </div> </div> </div>'
    },
    Da4v: function(e, t) {
        e.exports = '<div class=bc-screener__market-selector> <div class="row collapse"> <div class="column small-12 medium-4"> <div> <span>Select a Market - </span> <a> <span data-ng-click=hideMarketSelector() data-ng-show=marketSelectorVisible>Hide</span> <span data-ng-click=showMarketSelector() data-ng-show=!marketSelectorVisible>Show</span> </a> </div> </div> <div class="column small-12 medium-8 js-bc-screener__market-selector"> <div class="row collapse bc-screener__market-selector-checkboxes"> <div class="column small-12 medium-4" data-ng-repeat="marketCategory in marketsList"> <div class=bc-screener__checkbox-list-group-selector> <bc-checkbox data-cb-model=marketCategory.groupSelected data-cb-label=marketCategory.groupLabel data-cb-click=groupBatchUpdate(marketCategory)></bc-checkbox> </div> <ul class=bc-screener__checkbox-list> <li class=bc-screener__checkbox-list-item data-ng-repeat="market in marketCategory.groupMarkets"> <div class=input-checkbox> <input id="cb-market-[[ market.id ]]" data-checklist-model=selectedMarkets[marketCategory.groupName] data-checklist-value=market type=checkbox> <label for="cb-market-[[ market.id ]]"> <span class=bc-glyph-check></span> <span data-ng-bind=market.label></span> </label> </div> </li> </ul> </div> </div> </div> </div> </div>'
    },
    DcdD: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    newsFeedsCheckboxes: "=",
                    allSelected: "="
                },
                link: function(e, t, a) {
                    e.allFeedsSelected = {
                        selected: e.allSelected
                    }, e.feedsBatchUpdate = function() {
                        e.newsFeedsCheckboxes.forEach(function(t) {
                            t.feeds.forEach(function(t) {
                                t.forEach(function(t) {
                                    t.selected = e.allFeedsSelected.selected
                                })
                            })
                        })
                    }, e.checkNewsFeedSelection = function() {
                        var t = !0;
                        e.newsFeedsCheckboxes.forEach(function(e) {
                            e.feeds.forEach(function(e) {
                                e.forEach(function(e) {
                                    e.selected || (t = !1)
                                })
                            })
                        }), e.allFeedsSelected.selected = t
                    }
                },
                template: a("3vJn")
            }
        }
    },
    Dm0l: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = {
                fields: "symbol,lastPrice,contractMonth,contractShortYear,baseCode",
                lists: "futures.spreads",
                baseSymbol: "ZCN16",
                type: "synthetic",
                raw: 1,
                limit: 10
            };
            this.getSpreads = function(o) {
                var n = angular.merge({}, r, o);
                return e.call(i.buildUrl(a.API_URL + "/quotes/get", n), t.GET).then(function(e) {
                    return e
                }).catch(function(e) {
                    console.error(e)
                })
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "apiConfig", "utils"], e.exports = i
    },
    E2iH: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                subscribe: function(a) {
                    return t.call(e.API_URL + "/mailing-lists", "POST", a, {})
                }
            }
        }
        i.$inject = ["apiConfig", "dataProvider", "_"], e.exports = i
    },
    E4mO: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=$ctrl.close();></i> </div> <div class=modal-inner-wrapper> <contact-support-component data-user-email="[[ ::$ctrl.email ]]" data-message="[[ ::$ctrl.message ]]" data-close=$ctrl.close()></contact-support-component> </div> </div> </div> '
    },
    E9a5: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "A",
                scope: {
                    leftFn: "&",
                    rightFn: "&",
                    closeFn: "&"
                },
                link: function(e) {
                    var t = angular.element(window);

                    function a(t) {
                        switch (t.which) {
                            case 37:
                                e.leftFn();
                                break;
                            case 39:
                                e.rightFn();
                                break;
                            case 27:
                                e.closeFn();
                                break;
                            default:
                                return
                        }
                    }
                    t.on("keydown", a), e.$on("$destroy", function() {
                        t.off("keydown", a)
                    })
                }
            }
        }
    },
    EGrj: function(e, t, a) {
        "use strict";
        e.exports = {
            quickChartPeriods: [{
                period: "P1D",
                aggregation: {
                    unit: "Intraday",
                    size: 5,
                    spec: "None"
                },
                label: {
                    desktop: "1D",
                    mobile: "1D"
                }
            }, {
                period: "P5D",
                aggregation: {
                    unit: "Intraday",
                    size: 30,
                    spec: "None"
                },
                label: {
                    desktop: "5D",
                    mobile: "5D"
                }
            }, {
                period: "P1M",
                aggregation: {
                    unit: "Intraday",
                    size: 60,
                    spec: "None"
                },
                label: {
                    desktop: "1M",
                    mobile: "1M"
                }
            }, {
                period: "P3M",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "3M",
                    mobile: "3M"
                }
            }, {
                period: "P6M",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "6M",
                    mobile: "6M"
                }
            }, {
                period: "P1Y",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "1Y",
                    mobile: "1Y"
                }
            }, {
                period: "P5Y",
                aggregation: {
                    unit: "Week",
                    size: 1,
                    spec: "Nearest"
                },
                label: {
                    desktop: "5Y",
                    mobile: "5Y"
                }
            }, {
                period: "P20Y",
                aggregation: {
                    unit: "Month",
                    size: 1,
                    spec: "Nearest"
                },
                label: {
                    desktop: "20Y",
                    mobile: "20Y"
                }
            }],
            cryptoQuickChartPeriods: [{
                period: "P1D",
                aggregation: {
                    unit: "Intraday",
                    size: 5,
                    spec: "None"
                },
                label: {
                    desktop: "1D",
                    mobile: "1D"
                }
            }, {
                period: "P5D",
                aggregation: {
                    unit: "Intraday",
                    size: 30,
                    spec: "None"
                },
                label: {
                    desktop: "5D",
                    mobile: "5D"
                }
            }, {
                period: "P1M",
                aggregation: {
                    unit: "Intraday",
                    size: 60,
                    spec: "None"
                },
                label: {
                    desktop: "1M",
                    mobile: "1M"
                }
            }, {
                period: "P3M",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "3M",
                    mobile: "3M"
                }
            }, {
                period: "P6M",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "6M",
                    mobile: "6M"
                }
            }, {
                period: "P1Y",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "1Y",
                    mobile: "1Y"
                }
            }]
        }
    },
    EN4S: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                advRequest: function(t) {
                    return e.call("/mailinglists/advertise", "POST", t)
                }
            }
        }
        i.$inject = ["dataProvider"], e.exports = i
    },
    ENQ2: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-premier-modal"> <data-bc-premier-form data-ref="[[ ref ]]" data-instance=instance></data-bc-premier-form> </div> '
    },
    EQgj: function(e, t) {
        e.exports = '<div class=input-checkbox> <input checked=checked id="cb-[[ cbId ]]" data-ng-model=cbModel data-ng-disabled=cbDisabled data-ng-click=cbClick() type=checkbox> <label for="cb-[[ cbId ]]" data-ng-class="{\'no-label\': !cbLabel}"> <span class=bc-glyph-check></span> [[ cbLabel ]] </label> </div>'
    },
    EQnp: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "quotesService", function(e, t) {
                e.list = [{
                    label: "1-Month",
                    suffix: "1m"
                }, {
                    label: "3-Month",
                    suffix: "3m"
                }, {
                    label: "6-Month",
                    suffix: "6m"
                }, {
                    label: "1-Year",
                    suffix: "Ytd"
                }, {
                    label: "3-Year",
                    suffix: "3y"
                }, {
                    label: "5-Year",
                    suffix: "5y"
                }];
                var a = angular.copy(e.widgetData.data[0]);
                e.sector = t.getSector(a.symbolType), e.list.forEach(function(e) {
                    var t = a.raw["highPrice" + e.suffix] - a.raw["lowPrice" + e.suffix] || 1;
                    a["chartWidth" + e.suffix] = (a.raw.lastPrice - a.raw["lowPrice" + e.suffix]) / t * 100
                }), e.data = a
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("Aqnj"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    Eb3Y: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                template: a("WOh9"),
                controller: ["$scope", function(e) {
                    e.getPriceRange = function() {
                        var t, a, i, r;
                        return t = e.timeFrame.postfix, a = e.item.raw["highPrice" + t] - e.item.raw["lowPrice" + t], i = e.item.raw.lastPrice - e.item.raw["lowPrice" + t], r = (r = a ? i / a * 100 : 0) ? r + "%" : "3px"
                    }
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    Ei0W: function(e, t) {
        e.exports = '<div class=dashboard-grid-calendar> <button class="bc-button white-with-border small" data-ng-click=$ctrl.showAggregationModal()> <i class="bc-glyph-calendar calendar-icon"></i> </button> </div> '
    },
    Ej22: function(e, t, a) {
        "use strict";
        var i = {
                api: {
                    symbols: "AAPL"
                },
                usd: {},
                cad: {}
            },
            r = angular.copy(i),
            o = angular.copy(i),
            n = angular.copy(i);
        r.api.fields = "date1dAgo,open1dAgo,high1dAgo,low1dAgo,lastPrice1dAgo,priceChange1dAgo,percentChange1dAgo,volume1dAgo,date2dAgo,open2dAgo,high2dAgo,low2dAgo,lastPrice2dAgo,priceChange2dAgo,percentChange2dAgo,volume2dAgo,date3dAgo,open3dAgo,high3dAgo,low3dAgo,lastPrice3dAgo,priceChange3dAgo,percentChange3dAgo,volume3dAgo,date4dAgo,open4dAgo,high4dAgo,low4dAgo,lastPrice4dAgo,priceChange4dAgo,percentChange4dAgo,volume4dAgo,date5dAgo,open5dAgo,high5dAgo,low5dAgo,lastPrice5dAgo,priceChange5dAgo,percentChange5dAgo,volume5dAgo", o.api.fields = "weeklyDate1wAgo,weeklyOpen1wAgo,weeklyHigh1wAgo,weeklyLow1wAgo,weeklyLastPrice1wAgo,weeklyPriceChange1wAgo,weeklyPercentChange1wAgo,weeklyVolume1wAgo,weeklyDate2wAgo,weeklyOpen2wAgo,weeklyHigh2wAgo,weeklyLow2wAgo,weeklyLastPrice2wAgo,weeklyPriceChange2wAgo,weeklyPercentChange2wAgo,weeklyVolume2wAgo,weeklyDate3wAgo,weeklyOpen3wAgo,weeklyHigh3wAgo,weeklyLow3wAgo,weeklyLastPrice3wAgo,weeklyPriceChange3wAgo,weeklyPercentChange3wAgo,weeklyVolume3wAgo,weeklyDate4wAgo,weeklyOpen4wAgo,weeklyHigh4wAgo,weeklyLow4wAgo,weeklyLastPrice4wAgo,weeklyPriceChange4wAgo,weeklyPercentChange4wAgo,weeklyVolume4wAgo,weeklyDate5wAgo,weeklyOpen5wAgo,weeklyHigh5wAgo,weeklyLow5wAgo,weeklyLastPrice5wAgo,weeklyPriceChange5wAgo,weeklyPercentChange5wAgo,weeklyVolume5wAgo", n.api.fields = "monthlyDate1mAgo,monthlyOpen1mAgo,monthlyHigh1mAgo,monthlyLow1mAgo,monthlyLastPrice1mAgo,monthlyPriceChange1mAgo,monthlyPercentChange1mAgo,monthlyVolume1mAgo,monthlyDate2mAgo,monthlyOpen2mAgo,monthlyHigh2mAgo,monthlyLow2mAgo,monthlyLastPrice2mAgo,monthlyPriceChange2mAgo,monthlyPercentChange2mAgo,monthlyVolume2mAgo,monthlyDate3mAgo,monthlyOpen3mAgo,monthlyHigh3mAgo,monthlyLow3mAgo,monthlyLastPrice3mAgo,monthlyPriceChange3mAgo,monthlyPercentChange3mAgo,monthlyVolume3mAgo,monthlyDate4mAgo,monthlyOpen4mAgo,monthlyHigh4mAgo,monthlyLow4mAgo,monthlyLastPrice4mAgo,monthlyPriceChange4mAgo,monthlyPercentChange4mAgo,monthlyVolume4mAgo,monthlyDate5mAgo,monthlyOpen5mAgo,monthlyHigh5mAgo,monthlyLow5mAgo,monthlyLastPrice5mAgo,monthlyPriceChange5mAgo,monthlyPercentChange5mAgo,monthlyVolume5mAgo";
        var s = {
            daily: {
                api: r,
                header: "Past 5 Days"
            },
            weekly: {
                api: o,
                header: "Past 5 Weeks"
            },
            monthly: {
                api: n,
                header: "Past 5 Months"
            }
        };
        e.exports = s
    },
    Ek6K: function(e, t) {
        e.exports = '<div class=bc-symbol-competitors-sector-data> <div class=sector-last-price-change> <span class=sector-last-price>[[ rowChart.lastPrice ]]</span> <span class=sector-price-change data-ng-class=setColor(rowChart.priceChange)>[[ rowChart.priceChange ]]</span> </div> <div class=row> <div class="small-6 column"> <div>[[ rowChart.lowLabel ]]</div> <div>[[ rowChart.lowValue ]]</div> </div> <div class="small-6 column text-right"> <div>[[ rowChart.highLabel ]]</div> <div>[[ rowChart.highValue ]]</div> </div> </div> <barchart-row-chart data-approach=rowChart.width data-mark=rowChart.mark data-mark-value=rowChart.markValue data-mark-text="\'Open\'" data-colored=true></barchart-row-chart> </div>'
    },
    ElQn: function(e, t) {
        e.exports = '<div class="bc-form__add-symbol-fieldset bc-portfolio_edit-modal-symbol"> <form novalidate name=groupForm data-ng-submit=$ctrl.save()> <div class="form-item name"> <label>Enter Name:</label> <div class="clear-button-wrapper input-wrapper"> <input type=search data-ng-maxlength=20 data-ng-model=$ctrl.name autofocus data-ng-class="{\'invalid\': groupForm.name.$invalid && groupForm.$submitted}" required class="bc-form__add-symbol-input close-button" name=name /> </div> <input type=submit class="bc-button light-blue upper bc-portfolio_edit-modal-add-symbol" data-ng-disabled=$ctrl.saving value=Create /> </div> <div class=error-text data-ng-show="groupForm.name.$invalid && groupForm.$submitted"> <span data-ng-show=groupForm.name.$error.maxlength>Group name cannot be longer than 20 characters.</span> <span data-ng-show=groupForm.name.$error.required>Fill the required fields.</span> </div> </form> </div> '
    },
    Em3m: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {
                    preserveAnchor: "@"
                },
                link: function(a, i) {
                    i.on("change", function(i) {
                        var r = angular.element(i.target);
                        if (r.val() && "" !== r.val().replace(/\s/g, "")) {
                            var o = r.val();
                            a.preserveAnchor && t.path() && (o += "#" + t.path()), e.location.href = o
                        }
                    })
                }
            }
        }
        i.$inject = ["$window", "$location"], e.exports = i
    },
    EpqY: function(e, t) {
        e.exports = '<div class=bc-media-overlay-video> <div class="modal-mobile-navigation hide-for-medium-up"> <div class=modal-close> <span data-ng-click=$ctrl.hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class="modal-sidebar-right show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-close> <span data-ng-click=$ctrl.hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class=modal-share-group> <p>Share</p> <barchart-social-share data-url="[[ ::$ctrl.flipChartSharingUrl ]]" data-title="[[ ::$ctrl.flipChartSharingTitle ]]" data-container-id=bcModalVideoContent></barchart-social-share> </div> <div class=modal-inner> <div class=modal-content> <div class=bc-media-overlay-video__content> <div class=wrapper> <div id=bcModalVideoContent class="content videocontent"> <div class=article-header-wrapper> <h1 class=article-title>[[ ::$ctrl.title ]]</h1> <div id=bc-videocontent> </div> </div> <script type=text/html id=bc-video-template> <video id="bc-video" class="video-js vjs-default-skin vjs-16-9" controls preload="auto" data-setup=\'{}\'>\n                                <source src="%linkMp4%" type="video/mp4">\n                                <p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>\n                            </video> <\/script> </div> </div> </div> </div> </div> </div> '
    },
    Epyw: function(e, t) {
        e.exports = '<div> <div class="manage-view clearfix"> <div class="view-form edit"> <form class=bc-form name=viewForm> <div class=row> <div class="small-12 column"> <div class="form-item name"> <label class=label-text>Name:</label> <div class=pencil-icon-wrapper> <input type=text data-ng-model=view.name required placeholder="Enter a name..."> <i class=bc-glyph-pencil></i> </div> </div> <div class="form-item checkbox"> <bc-checkbox data-cb-model=defaultView data-cb-label="\'Use as site-wide default table view\'" data-value=0></bc-checkbox> </div> </div> </div> <div class="row second-wrapper"> <div class="small-12 medium-8 column"> <div class="form-item description"> <label class=label-text>Description:</label> <input type=text data-ng-model=view.description required placeholder=(Optional)> </div> </div> <div class="small-12 medium-4 column"> <div class=form-buttons> <a class="bc-button save grey ctxt" data-ng-click=cancel()>Cancel</a> <a class="bc-button save light-blue ctxt" data-ng-click=saveView()>Save</a> </div> </div> </div> </form> </div> </div> <div class="manage-columns clearfix"> <div class=view-wrapper> <h4>Selected Columns</h4> <div class=view-columns data-ng-if=view.fields.length> <div class=columns-list ui-tree> <ol class=tree-view-columns ui-tree-nodes data-ng-model=view.fields> <li class=column-item data-ng-repeat="field in view.fields" data-ng-if="field.field === \'symbol\'"> <div class=clearfix data-nodrag> <div class=item-left-block> <div class=item-name-container> <div class=item-delete-button-block> <i class="bc-glyph-minus-circle red" data-ng-click=removeColumn(field)></i> </div> <div class=item-name-block> <span>[[ field.name ]]</span> </div> </div> </div> </div> </li> <li class=column-item ui-tree-node data-ng-repeat="field in view.fields" data-ng-if="field.field !== \'symbol\'"> <div class=clearfix ui-tree-handle> <div class=item-left-block data-nodrag> <div class=item-name-container data-ng-hide="pendingRemoveColumn === field"> <div class=item-delete-button-block> <i class="bc-glyph-minus-circle red" data-ng-click=removeColumn(field)></i> </div> <div class=item-name-block> <span>[[ field.name ]]</span> </div> </div> <div class=item-delete-block data-ng-show="pendingRemoveColumn === field"> <span class=block-title>Delete?</span> <a class="bc-button small light-blue" data-ng-click=confirmRemoveColumn($index)>Yes</a> <a class="bc-button small grey" data-ng-click=cancelRemoveColumn()>No</a> </div> </div> <div class="item-right-block clearfix"> <div class=item-bars-block> <i class=bc-glyph-bars></i> </div> </div> </div> </li> </ol> </div> </div> </div> <div class=columns-wrapper> <h4>Available Columns</h4> <div class=search-column> <label>Search for available columns to add, or expand a group to view all.</label> <div class=bc-typeahead-wrapper> <i class=bc-glyph-search-plus></i> <input type=text class=column-name autocomplete=false data-bc-typeahead=searchColumns data-bc-typeahead-template=searchColumnTemplate data-bc-typeahead-item-click=addColumnToView data-ng-model=qColumn placeholder="Add a column..."> </div> </div> <div class="available-columns js-available-fields"> <accordion close-others=true> <accordion-group data-ng-repeat="(groupName, group) in columns"> <accordion-heading> <i class=bc-glyph-plus></i> <i class=bc-glyph-minus></i> <span>[[ groupName ]]</span> </accordion-heading> <dl data-ng-repeat="category in group"> <dt>[[ category.name ]] <span class=description> [[ category.description ]]</span></dt> <dd> <ul> <li data-ng-repeat="column in category.fields" data-ng-class=isChecked(column)> <div class=input-checkbox style=width:initial> <input checked=checked id="cb-[[ column.field ]]" data-ng-disabled="field.field === \'symbol\' || (view.fields.length >= columnsLimit && !checked)" data-checklist-model=view.fields data-checklist-value=column type=checkbox> <label for="cb-[[ column.field ]]"> <span class=bc-glyph-check></span> [[ column.name ]] </label> </div> </li> </ul> </dd> </dl> </accordion-group> </accordion> </div> </div> </div> </div>'
    },
    Esl3: function(e, t, a) {
        "use strict";
        var i = "BarchartDashboard";
        angular.module(i, []).constant("defaultGridChartState", a("L6yU")).controller(i + ".dashboardCtrl", a("ZBxF")).controller("dashboardSaveMyChartModalCtrl", a("0kKB")).controller("dashboardDeleteMyChartModalCtrl", a("7sKt")).controller("deleteSymbolFromWatchlistModalCtrl", a("r/yK")).controller("dashboardRenameMyChartModalCtrl", a("Hkcv")).controller("dashboardCopyMyChartModalCtrl", a("qy0q")).controller("dashboardChartTabQuickLinkModalCtrl", a("rzjB")).controller("dashboardAggregationModalCtrl", a("I7d2")).controller("dashboardControllerModalCtrl", a("F2V/")).constant("controlWidgetConfig", a("U/9D")).directive("bcControlWidget", a("urLz")).directive("bcChangeSymbol", a("iYEH")).directive("bcRightMenuToggle", a("Yoh4")).directive("bcMarketsTable", a("Kh0T")).directive("bcWatchlistsTable", a("sLV8")).directive("bcPortfoliosTable", a("ZVke")).directive("bcInfinityScroll", a("PHMS")).directive("myChartsTable", a("8/DM")).directive("dashboardChart", a("29SJ")).directive("dashboardVerticalScroll", a("Ufqc")).directive("dashboardRightMenu", a("2QoM")).directive("myChartGroupsDropDown", a("jrUo")).directive("myChartSavedChartsDropDown", a("H8pH")).directive("myChartQuickLinks", a("sOBz")).directive("dashboardRibbonController", a("9OLN")).directive("dashboardGridViewControl", a("aqet")).directive("dashboardGridToolsPanel", a("9cW9")).directive("dashboardSimpleChart", a("MJXX")).directive("dashboardGridBarTypeDropDown", a("NKA2")).directive("dashboardGridQuickChartAggregation", a("sZ6t")).directive("dashboardGridApplyTemplateDropDown", a("jllh")).directive("dashboardGridCalendar", a("Zx+u")).directive("dashboardGridAggregationDropDown", a("UTMm")).directive("dashboardGridPeriodDropDown", a("OdX4")).directive("dashboardGridIntradayFieldMinutes", a("Homj")).factory("dashboardApiFactory", a("VWEr")).factory("dashboardVerticalScroll", a("VWEr")).service("dashboardDataService", a("nb0o")).service("dashboardInlineDataService", a("9Cpe")).service("dashboardSettingsService", a("sY/5")).service("myChartsApiService", a("nE01")).service("userMyChartStorageService", a("6KKI")).service("dashboardSymbolStorage", a("2EOV")).service("userChartTabService", a("KHoG")).service("dashboardGridSettings", a("au8E")).service("dashboardGridChartApi", a("FDb0")).service("dashboardModalsService", a("aIrt"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    Ew1D: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            function o() {
                i.getSubscription(e.subscription).then(function(t) {
                    e.disableBillingFormBtn = !1, t.success ? t.approved ? window.location = t.redirect_to : (! function(t) {
                        e.subscription.billing.customerid = t.customer_id, e.subscription.billing.orderid = t.order_id
                    }(t), e.billingFormError.ccard = !0) : function(t) {
                        e.billingFormError.address = t.error_message
                    }(t)
                }, function() {
                    e.disableBillingFormBtn = !1
                })
            }

            function n() {
                var a, i;
                return (a = t.find(e.countries, {
                    code: e.subscription.billing.bacountry
                })) && a.states ? (e.hideStatesChoice = !1, i = a.states) : (e.hideStatesChoice = !0, i = []), i
            }

            function s() {
                var e = (new Date).getMonth() + 1;
                return e = e < 10 ? "0" + e : "" + e
            }

            function l() {
                var e = (new Date).getFullYear();
                return e = e.toString().substr(2, 2)
            }
            e.BILLITERMIDS = {
                    MONTHLY: "11179",
                    ANNUAL: "11210"
                }, e.subscription = {
                    user: {},
                    billing: {
                        bacountry: "USA"
                    },
                    data: {
                        country: "USA",
                        state: ""
                    },
                    billtermid: e.BILLITERMIDS.ANNUAL
                }, e.hideStatesChoice = !0, e.disableBillingFormBtn = !1, e.userAlreadyExist = !1, e.registerFormErrors = [], e.billingFormError = {
                    address: "",
                    ccard: !1
                }, r.onLogin.push(function() {
                    if (window.sessionStorage) {
                        var t = {
                            billing: angular.copy(e.subscription.billing),
                            data: angular.copy(e.subscription.data),
                            billtermid: e.subscription.billtermid
                        };
                        t.billing.ccnum = "", t.billing.ccvercode = "", t.data.ccexpMonth = "", t.data.ccexpYear = "", sessionStorage.setItem("barchart.premierFormData", JSON.stringify(t))
                    }
                }), e.premierSubscriptionFormSubmit = function() {
                    e.bcPremierSubscriptionForm.$valid && (e.disableBillingFormBtn = !0, e.userAlreadyExist = !1, e.invalidPassword = !1, e.alreadyPremier = !1, e.registerFormErrors = [], e.billingFormError.address = "", e.billingFormError.ccard = !1, e.subscription.billing.fname = e.subscription.user.first_name, e.subscription.billing.lname = e.subscription.user.last_name, e.subscription.billing.source = "PM_" + e.subscription.user.refcode || "PM_premier", e.subscription.billing.ccexp = e.subscription.data.ccexpMonth + e.subscription.data.ccexpYear, a.isLoggedIn() ? i.authAttempt(e.subscription.user.email, e.subscription.user.password).then(function(t) {
                        t.data ? o() : (t.error.message.alreadyPremier ? e.alreadyPremier = !0 : e.invalidPassword = !0, e.disableBillingFormBtn = !1)
                    }) : (e.subscription.billing.email = e.subscription.user.email, i.checkIfEmailExists(e.subscription.user.email).then(function(a) {
                        a.success ? o() : (! function(a) {
                            t.forEach(a.errors, function(a) {
                                t.forEach(a, function(t) {
                                    -1 !== t.indexOf("Account already exists") ? e.userAlreadyExist = !0 : e.registerFormErrors.push(t)
                                })
                            })
                        }(a), e.userAlreadyExist && !e.registerFormErrors.length ? i.authAttempt(e.subscription.user.email, e.subscription.user.password).then(function(t) {
                            t.data ? o() : (t.error.message.alreadyPremier ? e.alreadyPremier = !0 : e.invalidPassword = !0, e.disableBillingFormBtn = !1)
                        }) : e.disableBillingFormBtn = !1)
                    })))
                }, e.changeSubscriptionType = function(t) {
                    e.subscription.billtermid = t
                }, e.onCountryChange = function() {
                    var a;
                    e.subscription.billing.bastate = "", e.subscription.data.state = "", a = t.find(e.countries, {
                        code: e.subscription.billing.bacountry
                    }), e.subscription.data.country = a.description
                }, e.onStateChange = function() {
                    var a, i;
                    a = n(), i = t.find(a, {
                        code: e.subscription.billing.bastate
                    }), e.subscription.data.state = i.description
                }, e.getStates = function() {
                    return n()
                }, e.isMonthDisabled = function(t) {
                    var a = s(),
                        i = l(),
                        r = e.subscription.data.ccexpMonth,
                        o = e.subscription.data.ccexpYear;
                    return !!(o && o === i && (r && r < a && (e.subscription.data.ccexpMonth = ""), t < a))
                }, e.isYearDisabled = function(t) {
                    var a = s(),
                        i = l(),
                        r = e.subscription.data.ccexpMonth,
                        o = e.subscription.data.ccexpYear;
                    return !!(r && r < a && (o && o === i && (e.subscription.data.ccexpYear = ""), t === +i))
                }, e.showTaxes = function() {
                    return e.subscription.billing && e.subscription.billing.bazip && 0 === e.subscription.billing.bazip.lastIndexOf("606", 0)
                },
                function() {
                    var t;
                    if (e.subscription.user.chartOfTheDay = !0, a.isLoggedIn()) {
                        if (window.sessionStorage) {
                            var i = JSON.parse(window.sessionStorage.getItem("barchart.premierFormData"));
                            i && (e.subscription.billing = i.billing, e.subscription.data = i.data, e.subscription.billtermid = i.billtermid, sessionStorage.removeItem("barchart.premierFormData"))
                        }(t = a.getUserData()).fname && t.lname && (e.subscription.billing.fname = t.fname, e.subscription.billing.lname = t.lname, e.subscription.user.first_name = t.fname, e.subscription.user.last_name = t.lname, e.subscription.billing.ccname || (e.subscription.billing.ccname = t.fname + " " + t.lname)), e.subscription.user.email = t.email, e.subscription.billing.email = t.email
                    }
                }()
        }
        i.$inject = ["$scope", "_", "authService", "barchartPremierService", "authCallbacks"], e.exports = i
    },
    Ew2Y: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    selectedChart: "="
                },
                controller: ["dashboardSettingsService", "_", "userMyChartStorageService", "authService", "myChartsApiService", "interactiveChartValidation", "userChartTabService", "Notification", "$scope", "dashboardModalsService", "dashboardSymbolStorage", "$rootScope", "$window", "textFactory", function(e, t, a, i, r, o, n, s, l, c, d, u, p, m) {
                    var h = this,
                        g = i.getUserData() || {},
                        f = g.preferences ? g.preferences.charts_style : "interactive",
                        b = !1,
                        v = i.getUserPreferences(),
                        y = v.interactive_charts_saving_mechanism,
                        w = null;
                    h.currentSymbol = !1, h.currentIndex = 0, h.currentGroup = null, h.currentChart = null, h.myCharts = [], h.groupsLoaded = function(i) {
                        var o = e.getParameter("chartGroupId");
                        if (o && !h.selectedChart ? (h.currentGroup = t.find(i, function(e) {
                                return e.id === o
                            }), i.length > 0 && !h.currentGroup && (h.currentGroup = i[0])) : h.selectedChart && (h.currentGroup = t.find(i, function(e) {
                                return e.id === h.selectedChart.group_id
                            })), i.length > 0 && !h.currentGroup && (h.currentGroup = i[0]), h.currentGroup) {
                            var n = a.getCharts(h.currentGroup.id, f);
                            null === n ? r.getGroupCharts(h.currentGroup.id, f).then(function(e) {
                                h.myCharts = e.data.charts, a.setCharts(h.currentGroup.id, f, e.data.charts), h.myCharts.length > 0 && S(h.myCharts[0])
                            }) : (h.myCharts = n, h.myCharts.length > 0 && S(h.myCharts[0]))
                        }
                    }, h.changeGroup = function(t) {
                        h.currentGroup = t;
                        var i = !1;
                        e.updateParameter("chartGroupId", t ? t.id : null), r.getGroupCharts(t.id, f).then(function(e) {
                            if (h.myCharts = e.data.charts, w && h.myCharts.length > 0) h.myCharts.forEach(function(e, t) {
                                e.id === w && (h.currentChart = h.myCharts[t], n.setChartTab(h.currentChart))
                            }), w = null, i = !0;
                            else if (!0 === b && h.myCharts.length > 0) {
                                var r = h.myCharts.length - 1;
                                h.currentChart = h.myCharts[r], n.setChartTab(h.currentChart)
                            } else h.myCharts.length > 0 ? S(h.myCharts[0]) : h.currentChart && 0 === h.myCharts.length && (h.currentChart = null, u.$broadcast("myChartGroupHasNoCharts"));
                            b = !1, a.setCharts(t.id, f, h.myCharts), i && (i = !1, S(h.currentChart))
                        })
                    }, h.AddNewChart = function() {
                        c.openSaveMyChartModal(!0, f, h.currentGroup)
                    }, h.loadChart = function(e) {
                        e && S(e)
                    }, h.showMenu = function() {
                        c.openQuickLinksModal(h.currentChart, h.currentGroup, h.currentSymbol, "tab", {}, !0)
                    }, h.showFlipchart = function() {
                        u.$broadcast("myChartHideChart"), u.$broadcast("showFlipchartForMyChart"), u.$broadcast("bc-modal-show-my-chart-flipchart", {
                            charts: h.myCharts,
                            currentChart: angular.copy(h.currentChart),
                            currentSymbol: angular.copy(h.currentSymbol),
                            chartType: f
                        })
                    };
                    var C = i.getCharts();

                    function S(e) {
                        o.validateSymbol(e.symbol).then(function(t) {
                            var a = t.data[0];
                            r.getChart(e.id).then(function(t) {
                                console.log("[My Charts Toolbar]: Load chart", e), n.setChartTab(t.data), v.isTab = !0, i.setUserPreferences(v), h.myCharts.forEach(function(t, a) {
                                    t.id === e.id && (h.currentChart = h.myCharts[a])
                                });
                                var r = !1;
                                "technical" === f && (u.$broadcast("dashboardApplyTechnicalState", JSON.parse(t.data.state)), r = !0), d.getSymbolData() && e.symbol === d.getSymbolData().symbol ? u.$broadcast("dashboardTabChanged", a) : u.$broadcast("dashboardCurrentSymbolChanged", a, r), "technical" === f && d.setSymbolData(a)
                            })
                        }).catch(function() {
                            s.error("Invalid symbol. Please try again")
                        })
                    }
                    h.isNewDisabled = i.getEodReportsNumber("charts", "email") >= p.config.limits.reportsLimit, h.updateEodSettings = function() {
                        if (h.isNewDisabled && h.currentChart.email) return h.currentChart.email = 0, void s.warning({
                            message: m("MAX_EOD_REPORTS_CHARTS"),
                            delay: 8e3
                        });
                        r.updateChart(h.currentChart.id, {
                            email: h.currentChart.email
                        }).then(function(e) {
                            var a = t.findIndex(C, {
                                id: h.currentChart.id
                            });
                            C[a] = angular.copy(e.data), i.setCharts(C), h.isNewDisabled = i.getEodReportsNumber("charts", "email") >= p.config.limits.reportsLimit, s.success("End-of-Day Email preferences have been saved.")
                        }).catch(function() {
                            s.success("Something went wrong. Please try again.")
                        })
                    }, l.$on("$destroy", function() {
                        var e = i.getUserPreferences();
                        e.interactive_charts_saving_mechanism = y, i.setUserPreferences(e), n.setChartTab(null)
                    }), l.$on("myChartStateHasBeenUpdated", function(e, a) {
                        var i = t.findIndex(h.myCharts, function(e) {
                            return e.id === a.id
                        }); - 1 !== i && (h.myCharts[i] = a, h.currentChart = a, n.setChartTab(a))
                    }), l.$on("myChartTechnicalUpdated", function(e, a) {
                        var i = t.findIndex(h.myCharts, function(e) {
                            return e.id === a.id
                        }); - 1 !== i && (h.myCharts[i] = a, h.currentChart = a, n.setChartTab(a))
                    }), l.$on("mediaOverlayClosed", function() {
                        var e = n.getChartTab(),
                            a = t.findIndex(h.myCharts, function(t) {
                                return t.id === e.id
                            });
                        h.currentChart = h.myCharts[a], S(h.currentChart)
                    }), l.$on("chartTabHasBeenRemoved", function() {
                        var e = h.myCharts[0];
                        h.currentChart = e, S(e)
                    }), l.$on("myChartsEmpty", function() {
                        h.currentSymbol = null, h.currentChart = null, d.setSymbolData(null), u.$broadcast("myChartClearChart")
                    }), l.$on("myChartMovedToAnotherGroup", function(e, t) {
                        b = !0, w = t.chart ? t.chart.id : null, u.$broadcast("myGroupChangeTrigger", {
                            group: t.newGroup
                        })
                    }), l.$on("myChartRenamed", function(e, t) {
                        h.myCharts.forEach(function(e, a) {
                            e.id === t.chart.id && (h.currentChart = h.myCharts[a])
                        })
                    }), l.$on("myChartCopied", function(e, t) {
                        S(t.chart)
                    }), l.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        h.currentSymbol = t && t.newSymbol ? {} : t, d.setSymbolData(h.currentSymbol)
                    }), l.$on("dashboardSymbolChangedFromSelector", function(e, t) {
                        "technical" === f && (h.currentSymbol = t, d.setSymbolData(h.currentSymbol))
                    }), l.$on("myChartCreated", function(e, t) {
                        h.currentGroup && t.chart.group_id === h.currentGroup.id ? h.myCharts.forEach(function(e, a) {
                            e.id === t.chart.id && (h.currentChart = h.myCharts[a])
                        }) : (b = !0, u.$broadcast("myGroupChangeTrigger", {
                            group: {
                                id: t.chart.group_id
                            }
                        })), n.setChartTab(t.chart), v.isTab = !0
                    })
                }],
                controllerAs: "$ctrl",
                template: a("O3eK")
            }
        }
    },
    EwMr: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            return {
                watchlistUpdate: function(e) {
                    this.apiConfig.api.symbols = e.symbols.join(), this.symbolsSequences = angular.copy(this.apiConfig.api.symbols)
                },
                advancedSymbolSearch: function(e) {
                    this.apiConfig.api.q = e.q, this.apiConfig.api.searchType = e.searchType, this.apiConfig.api.symbolCodes = e.symbolCodes.join()
                },
                priceHistoryDailyPriceUpdate: function(e) {
                    this.apiConfig.api.startDate = e.dateFrom, this.apiConfig.api.endDate = e.dateTo, this.receivedApiConfig.api.limit && (this.apiConfig.api.limit = this.receivedApiConfig.api.limit, this.apiConfig.api.page = 1, this.initializePaginationOptions())
                },
                priceHistoryAdjustedUpdate: function(e) {
                    this.apiConfig.api.splitAdjustment && delete this.apiConfig.api.splitAdjustment, this.apiConfig.api.dividendAdjustment && delete this.apiConfig.api.dividendAdjustment, "dividendAdjustment" === e ? this.apiConfig.api.dividendAdjustment = !0 : "splitAdjustment" === e && (this.apiConfig.api.splitAdjustment = !0), this.receivedApiConfig.api.limit && (this.apiConfig.api.limit = this.receivedApiConfig.api.limit, this.apiConfig.api.page = 1, this.initializePaginationOptions())
                },
                etfsAssetClasses: function(e) {
                    this.apiConfig.api.lists = "etfs.byAsset(" + e + ")"
                },
                etfsLeverage: function(e) {
                    var t = i.findKey(this.apiConfig.api, function(e, t) {
                        return -1 !== t.indexOf("in(leverage")
                    });
                    t && delete this.apiConfig.api[t], e.leverages ? this.apiConfig.api["in(leverage,(" + e.leverages.join(",") + "))"] = "" : "undefined" !== e.onlyLong && (this.apiConfig.api["in(leverage,(1x))"] = "")
                },
                updateExpirationDate: function(e) {
                    e.data && (this.apiConfig.api.expirationDate = e.data)
                },
                beforeExpirationDate: function(e) {
                    this.apiConfig.api.page = 1, this.page = 1, this.initializePaginationOptions(), this.receivedApiConfig.api && this.receivedApiConfig.api.limit && (this.apiConfig.api.limit = this.receivedApiConfig.api.limit);
                    var t = i.findKey(this.apiConfig.api, function(e, t) {
                        return -1 !== t.indexOf("le(expirationDate")
                    });
                    t && delete this.apiConfig.api[t], e.data && (this.apiConfig.api["le(expirationDate," + e.data + ")"] = "")
                },
                updateEarningsDividendsConfig: function(e) {
                    this.apiConfig.api = e, this.apiConfig.api.page = 1, this.page = 1, this.initializePaginationOptions(), this.receivedApiConfig.api && this.receivedApiConfig.api.limit && (this.apiConfig.api.limit = this.receivedApiConfig.api.limit)
                },
                screenerChangeView: function(e) {
                    var o = t.getUserData(),
                        n = null,
                        s = null,
                        l = null;
                    if ("filter_view" === e.value) {
                        if (!this.options.hasOwnProperty("screenerFields")) throw new PropertyRequiredError("We have to specify screener fileds in screener.js directive");
                        this.options.screenerFields.length > 0 ? this.apiConfig.api.fields = "symbol,symbolCode,hasOptions," + this.options.screenerFields.join(",") : this.apiConfig.api.fields = "symbol,symbolCode,hasOptions", l = r.colorizeFields(angular.copy(a.default_options.options), this.options.screenerFields, !0)
                    }
                    if (this.excludedFields = angular.copy(this.receivedExcludedFields), o && void 0 !== o.custom_views && !a.hasOwnProperty(e.value)) {
                        var c = Number(e.value);
                        if (n = i.find(o.custom_views, function(e) {
                                return e.id === c
                            }), s = angular.copy(n)) {
                            if (l = angular.copy(a.default_options.options), ~s.fields.indexOf("symbol") || (s.fields.push("symbol"), this.excludedFields.push("symbol")), -1 !== s.fields.indexOf("hasOptions")) {
                                var d = this.excludedFields.indexOf("hasOptions");
                                this.excludedFields.splice(d, 1)
                            }
                            this.apiConfig.api.fields = s.fields.join(","), l = r.colorizeFields(l, s.fields)
                        }
                    }
                    n || (a.hasOwnProperty(e.value) && (this.apiConfig.api.fields = a[e.value].api.fields), a.hasOwnProperty(e.value) && (l = a[e.value].options));
                    var u = angular.copy(this.receivedOptions);
                    u.screenerFields = this.options.screenerFields, this.options = i.merge(u, l, function(e, t) {
                        if (i.isArray(e)) return e.concat(t)
                    }), this.receivedApiConfig.api.orderBy && (this.apiConfig.api.orderBy = this.receivedApiConfig.api.orderBy, this.apiConfig.api.orderDir = this.receivedApiConfig.api.orderDir), this.options.pagination && (this.apiConfig.api.limit = this.options.pagination)
                },
                setInTheMoneyContentHandler: function(e) {
                    "inTheMoney" === e.data ? (this.options.handleContent = "processContentInMoney", "function" == typeof this.handleContent && (this.content = this.handleContent(this.content))) : (this.options.handleContent = "", "function" == typeof this.handleContent && (this.content = angular.copy(this.sourceContent), !n.search().view || "sbs" !== n.search().view && "sbs_ohl" !== n.search().view || o.$broadcast("customHandlerUpdate", {
                        tableName: "sidebyside",
                        data: this.content[0].data
                    })))
                },
                updateCryptoCurrency: function(e) {
                    this.apiConfig.api.rate = e.data, this.receivedApiConfig.api.limit && (this.apiConfig.api.limit = this.receivedApiConfig.api.limit)
                },
                freightMarketSectorChanged: function(e) {
                    if ("suppliers" === e || "trucking" === e || "ltl" === e || "3pl" === e || "other-transport" === e) this.apiConfig.api.symbols = this.options.freightMarketMapping[e], delete this.apiConfig.api.lists;
                    else {
                        var t = this.options.freightMarketMapping[e] || "-TRRA";
                        this.apiConfig.api.lists = "stocks.inSector.all(" + t + ")", delete this.apiConfig.api.symbols
                    }
                }
            }
        }
        i.$inject = ["viewsConstants", "authService", "viewApiConfig", "_", "barchartDatatableColorize", "$rootScope", "$location"], e.exports = i
    },
    EznM: function(e, t, a) {
        "use strict";
        e.exports = {
            periods: [{
                label: "Intraday",
                unit: "Intraday",
                size: 5
            }, {
                label: "Daily",
                unit: "Day",
                size: 1
            }, {
                label: "Weekly",
                unit: "Week",
                size: 1
            }, {
                label: "Monthly",
                unit: "Month",
                size: 1
            }, {
                label: "Quarterly",
                unit: "Quarter",
                size: 1
            }],
            periodsFutures: [{
                label: "Intraday",
                unit: "Intraday",
                size: 5,
                spec: "None",
                isContractVolume: !0
            }, {
                label: "Daily",
                unit: "Day",
                size: 1,
                spec: "None",
                isContractVolume: !0
            }, {
                label: "Daily Nearby",
                unit: "Day",
                size: 1,
                spec: "Nearest",
                isContractVolume: !1
            }, {
                label: "Weekly",
                unit: "Week",
                size: 1,
                spec: "None",
                isContractVolume: !0
            }, {
                label: "Weekly Nearby",
                unit: "Week",
                size: 1,
                spec: "Nearest",
                isContractVolume: !1
            }, {
                label: "Monthly",
                unit: "Month",
                size: 1,
                spec: "None",
                isContractVolume: !0
            }, {
                label: "Monthly Nearby",
                unit: "Month",
                size: 1,
                spec: "Nearest",
                isContractVolume: !1
            }, {
                label: "Quarterly",
                unit: "Quarter",
                size: 1,
                spec: "None",
                isContractVolume: !0
            }, {
                label: "Quarterly Nearby",
                unit: "Quarter",
                size: 1,
                spec: "Nearest",
                isContractVolume: !1
            }],
            labelsUnit: {
                Intraday: "Intra",
                Day: "Daily",
                Week: "Wk",
                Month: "Mth",
                Quarter: "Qtr"
            },
            labelsSpec: {
                None: "Cnt",
                Nearest: "Near",
                Continue: "Contin"
            }
        }
    },
    "F/G7": function(e, t) {
        e.exports = '<div class="quick-settings right-border-separator"> <ul class=quick-settings-list data-ng-show="!asSelectList && !myChartsMode"> <li data-ng-repeat="periodData in quickPeriods" data-ng-class="{\'active\': periodData.period === settingsPeriod && periodData.aggregation.unit === settingsAggregation.unit && periodData.aggregation.size === settingsAggregation.size}" data-ng-click=applyQuickSettings(periodData) data-ng-bind="isMobile ? periodData.label.mobile : periodData.label.desktop"> </li> <li class=show-for-medium-down data-ng-hide="dashboardMode && !myChartsMode" data-ng-click=showAggregationModal()> + </li> </ul> <div class="bc-dropdown styled interactive-chart__apply-period-drop-down" data-ng-show="asSelectList && !myChartsMode"> <select data-ng-model=period data-ng-change=applyQuickSettings(period) data-ng-options="item as item.label.desktop for item in quickPeriods"> </select> </div> </div> '
    },
    "F2V/": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = this;
            r.controllerViews = [{
                label: "Main",
                key: "main"
            }, {
                label: "Technical",
                key: "technical"
            }, {
                label: "Performance",
                key: "performance"
            }];
            var o = a.getParameter("controllerView") || "main";
            r.view = i.find(r.controllerViews, function(e) {
                return e.key === o
            });
            var n = a.getParameter("showRibbon");
            r.showRibbon = a.getParameter("showRibbon"), r.closeModal = function() {
                e.dismiss()
            }, r.apply = function() {
                n !== r.showRibbon && (a.updateParameter("showRibbon", r.showRibbon), !1 === r.showRibbon ? t.$broadcast("dashboardHideRibbon") : t.$broadcast("dashboardShowRibbon")), o !== r.view.key && (a.updateParameter("controllerView", r.view.key), t.$broadcast("updateControllerListData")), e.close()
            }
        }
        i.$inject = ["$modalInstance", "$rootScope", "dashboardSettingsService", "_"], e.exports = i
    },
    F2dA: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i, r) {
                    var o = angular.element(i[0].querySelector('optgroup[label="--By Volume--"]')),
                        n = ["vol_lt_500", "vol_gt_500", "vol_lt_500_can", "vol_gt_500_can"];
                    a.$on("filterChange", function(s, l) {
                        if ("timeFrame" === l.name && ("today" !== l.value || i[0].querySelector('optgroup[label="--By Volume--"]') || i.append(o), "today" !== l.value)) {
                            if (~n.indexOf(i.val())) {
                                var c = i[0].querySelector("option").value;
                                i[0].value = c, a.$evalAsync(function() {
                                    t.filterName(r.name, c)
                                }), e.$broadcast("filterChange", {
                                    name: r.name,
                                    value: c,
                                    avoidRequest: !0
                                })
                            }
                            o.remove()
                        }
                    })
                }
            }
        }
        i.$inject = ["$rootScope", "barchartDatatableFilterUrl"], e.exports = i
    },
    F3bZ: function(e, t, a) {
        "use strict";
        e.exports = {
            studies: [{
                name: "Bollinger BandÂ®",
                code: "BBANDS",
                parameters: [{
                    name: "Period",
                    default: 20
                }, {
                    name: "Width",
                    default: 2
                }]
            }, {
                name: "Dashed Line",
                code: "DASH",
                parameters: [{
                    name: "Price",
                    default: 0
                }, {
                    name: "Label",
                    default: null
                }]
            }, {
                name: "Donchian Channel",
                code: "DON",
                parameters: [{
                    name: "Period",
                    default: 20
                }]
            }, {
                name: "Keltner Channel",
                code: "KELT",
                parameters: [{
                    name: "Period",
                    default: 20
                }]
            }, {
                name: "Line",
                code: "LINE",
                parameters: [{
                    name: "Price",
                    default: 0
                }, {
                    name: "Label",
                    default: null
                }]
            }, {
                name: "Moving Average, Exponential",
                code: "EXPMA",
                parameters: [{
                    name: "Period",
                    default: 9
                }]
            }, {
                name: "Moving Average, High/Low",
                code: "HLMA",
                parameters: [{
                    name: "Period1",
                    default: 10
                }, {
                    name: "Period2",
                    default: 8
                }]
            }, {
                name: "Moving Average, Simple",
                code: "SMA",
                parameters: [{
                    name: "Period",
                    default: 20
                }]
            }, {
                name: "Moving Average, Triangular",
                code: "TMA",
                parameters: [{
                    name: "Period",
                    default: 20
                }]
            }, {
                name: "Moving Average, Weighted",
                code: "WMA",
                parameters: [{
                    name: "Period",
                    default: 20
                }]
            }, {
                name: "Parabolic Time Price",
                code: "PTP",
                parameters: [{
                    name: "Step",
                    default: 50
                }]
            }, {
                name: "Price Envelope",
                code: "PCT",
                parameters: [{
                    name: "Period",
                    default: 20
                }, {
                    name: "Range",
                    default: .01
                }]
            }, {
                name: "Price Range",
                code: "RANGE",
                parameters: [{
                    name: "Price 1",
                    default: 0
                }, {
                    name: "Price 2",
                    default: 0
                }, {
                    name: "Label",
                    default: "Range"
                }]
            }, {
                name: "TrendSpotter",
                code: "TREND",
                parameters: []
            }, {
                name: "",
                code: ""
            }, {
                name: "--- Add Technical Study ---",
                code: ""
            }, {
                name: "Accumulation/Distribution",
                code: "ACCUM",
                parameters: []
            }, {
                name: "Aroon Oscillator",
                code: "AROONOSC",
                parameters: [{
                    name: "Period",
                    default: 25
                }]
            }, {
                name: "Aroon Up/Down",
                code: "AROON",
                parameters: [{
                    name: "Period",
                    default: 25
                }]
            }, {
                name: "Average Directional Index",
                code: "ADX",
                parameters: [{
                    name: "Period",
                    default: 14
                }]
            }, {
                name: "Average Directional Modified Index",
                code: "ADXMOD",
                parameters: [{
                    name: "Period",
                    default: 14
                }]
            }, {
                name: "Average True Range",
                code: "ATR",
                parameters: [{
                    name: "Period",
                    default: 14
                }]
            }, {
                name: "Bollinger Width",
                code: "BOLLW",
                parameters: [{
                    name: "Period",
                    default: 20
                }, {
                    name: "Width",
                    default: 2
                }]
            }, {
                name: "Chaikin Money Flow",
                code: "CHKMF",
                parameters: [{
                    name: "Period",
                    default: 20
                }]
            }, {
                name: "Chaikin Oscillator",
                code: "CHKOSC",
                parameters: []
            }, {
                name: "Chaikin Volatility",
                code: "CHKVOL",
                parameters: [{
                    name: "Period 1",
                    default: 10
                }, {
                    name: "Period 2",
                    default: 10
                }]
            }, {
                name: "Close Location Value",
                code: "CLV",
                parameters: []
            }, {
                name: "Commitment Of Traders Disaggregated",
                code: "COTDLC",
                parameters: []
            }, {
                name: "Commitment Of Traders Financial Traders Report",
                code: "COTFIN",
                parameters: []
            }, {
                name: "Commitment Of Traders",
                code: "COTLC",
                parameters: []
            }, {
                name: "Commodity Channel Index",
                code: "CCI",
                parameters: [{
                    name: "Period",
                    default: 20
                }, {
                    name: "Range",
                    default: 100
                }]
            }, {
                name: "Donchian Width",
                code: "DONW",
                parameters: [{
                    name: "Period",
                    default: 20
                }]
            }, {
                name: "Ease Of Movement",
                code: "EMV",
                parameters: [{
                    name: "Period",
                    default: 20
                }]
            }, {
                name: "Elder Ray",
                code: "ERI",
                parameters: [{
                    name: "Period",
                    default: 13
                }]
            }, {
                name: "Fast Stochastic",
                code: "STOFA",
                parameters: [{
                    name: "Period 1",
                    default: 14
                }, {
                    name: "Period 2",
                    default: 3
                }]
            }, {
                name: "Implied Volatility (Futures)",
                code: "IV",
                parameters: []
            }, {
                name: "Mass Index",
                code: "MI",
                parameters: []
            }, {
                name: "Momentum",
                code: "MOMENT",
                parameters: [{
                    name: "Period",
                    default: 20
                }]
            }, {
                name: "Money Flow Index",
                code: "MFI",
                parameters: [{
                    name: "Period",
                    default: 14
                }, {
                    name: "Range",
                    default: 100
                }]
            }, {
                name: "MACD Oscillator Exponential",
                code: "MACD",
                parameters: [{
                    name: "Period 1",
                    default: 12
                }, {
                    name: "Period 2",
                    default: 26
                }, {
                    name: "Period 3",
                    default: "9"
                }]
            }, {
                name: "MACD Oscillator",
                code: "SMACD",
                parameters: [{
                    name: "Period 1",
                    default: 12
                }, {
                    name: "Period 2",
                    default: 26
                }, {
                    name: "Period 3",
                    default: "9"
                }]
            }, {
                name: "Moving Standard Deviation",
                code: "STDDEV",
                parameters: [{
                    name: "Period",
                    default: 10
                }]
            }, {
                name: "Negative Volume Index",
                code: "NVI",
                parameters: [{
                    name: "Period",
                    default: 255
                }]
            }, {
                name: "On Balance Volume",
                code: "OBV",
                parameters: []
            }, {
                name: "Open Interest",
                code: "OI",
                parameters: []
            }, {
                name: "Percent R",
                code: "WILLR",
                parameters: [{
                    name: "Period",
                    default: 14
                }, {
                    name: "Range",
                    default: 40
                }]
            }, {
                name: "Percentage Price Oscillator",
                code: "PPO",
                parameters: [{
                    name: "Period 1",
                    default: 12
                }, {
                    name: "Period 2",
                    default: 26
                }, {
                    name: "Period 3",
                    default: "9"
                }]
            }, {
                name: "Percentage Volume Oscillator",
                code: "PVO",
                parameters: [{
                    name: "Period 1",
                    default: 12
                }, {
                    name: "Period 2",
                    default: 26
                }, {
                    name: "Period 3",
                    default: "9"
                }]
            }, {
                name: "Performance",
                code: "PERF",
                parameters: []
            }, {
                name: "Positive Volume Index",
                code: "PVI",
                parameters: [{
                    name: "Period",
                    default: 255
                }]
            }, {
                name: "Price Volume Trend",
                code: "PVT",
                parameters: []
            }, {
                name: "Rate Of Change",
                code: "ROC",
                parameters: [{
                    name: "Period",
                    default: 10
                }]
            }, {
                name: "Relative Strength Index",
                code: "RSI",
                parameters: [{
                    name: "Period",
                    default: 14
                }, {
                    name: "Range",
                    default: 100
                }]
            }, {
                name: "Slow Stochastic",
                code: "STOSL",
                parameters: [{
                    name: "Period 1",
                    default: 14
                }, {
                    name: "Period 2",
                    default: 3
                }]
            }, {
                name: "Stochastic RSI",
                code: "SRSI",
                parameters: [{
                    name: "Period",
                    default: 14
                }, {
                    name: "Range",
                    default: 20
                }]
            }, {
                name: "TRIX",
                code: "TRIX",
                parameters: [{
                    name: "Period",
                    default: 15
                }]
            }, {
                name: "Volume",
                code: "Volume",
                parameters: []
            }]
        }
    },
    F5E7: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i, r) {
                    var o = t(r.ngBindHtml);
                    a.$watch(function() {
                        return (o(a) || "").toString()
                    }, function() {
                        e(i, null, -9999)(a)
                    })
                }
            }
        }
        i.$inject = ["$compile", "$parse"], e.exports = i
    },
    F7Us: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login tools-dropdown tools-dropdown-tools"> <form class="bc-form bc-modal-content-inner" name=interactiveChartSettingsForm novalidate> <div class=modal-header> Settings <i class="bc-glyph-times form-close right" data-ng-click=closeModal()></i> </div> <div class=bc-tabs> <div class=bc-tabs__tab data-ng-class="{\'active\': currentTab === \'display\'}" data-ng-click="currentTab = \'display\'">Display</div> <div class=bc-tabs__tab data-ng-class="{\'active\': currentTab === \'scale\'}" data-ng-click="currentTab = \'scale\'">Scale</div> <div class=bc-tabs__tab data-ng-show="equityEtfMutual || isFutureSymbol" data-ng-class="{\'active\': currentTab === \'adjustments\'}" data-ng-click="currentTab = \'adjustments\'">Adjustments</div> </div> <div data-ng-show="currentTab === \'display\'"> <div class="modal-settings-row row-bar-type"> <div class=label>Bar Type</div> <div class="bc-dropdown styled"> <select data-ng-model=selectedBarType.model data-ng-options="type.value disable when (allowedBarTypes && allowedBarTypes.indexOf(type.key) === -1) for type in typeList" data-ng-change=changeBarType(selectedBarType)></select> </div> <bc-color-picker data-ng-if=formData.barType.colors[1] data-color-model=formData.barType.colors[1]></bc-color-picker> <bc-color-picker data-ng-if=formData.barType.colors[0] data-color-model=formData.barType.colors[0]></bc-color-picker> <bc-color-picker data-ng-if=formData.barType.colors[2] data-color-model=formData.barType.colors[2]></bc-color-picker> <bc-line-width-selector data-line-width-model=formData.barType.lineWidth></bc-line-width-selector> </div> <div class="modal-settings-row row-chart-size" data-ng-if=!fullScreen> <div class=label>Chart Size</div> <div class="bc-dropdown styled"> <select data-ng-options="size.value as size.label for size in chartSizes" data-ng-model=formData.dimensions.chartHeight></select> </div> </div> <div class="modal-settings-row row-scale-type"> <div class=label>Navigator</div> <div class=input-radio> <input type=radio id=interactive-chart__radio-navigator-show data-ng-model=formData.navigator data-ng-value=true> <label for=interactive-chart__radio-navigator-show> <span></span> Show </label> </div> <div class=input-radio> <input type=radio id=interactive-chart__radio-navigator-hide data-ng-model=formData.navigator data-ng-value=false> <label for=interactive-chart__radio-navigator-hide> <span></span> Hide </label> </div> </div> <div class=modal-settings-row> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-price-box-checkbox data-ng-model=formData.tooltip> <label for=tools-modal-price-box-checkbox>Floating Price Box</label> </div> </div> <div class=modal-settings-row data-ng-if="batsAvailable && loggedIn"> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-realtime-bats-checkbox data-ng-model=formData.batsData> <label for=tools-modal-realtime-bats-checkbox>Use Realtime Cboe BZX data when available</label> </div> </div> <div class=modal-settings-row data-ng-if="batsAvailable && !loggedIn"> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-realtime-bats-checkbox data-bc-modal-login=realtime> <label for=tools-modal-realtime-bats-checkbox>Use Realtime Cboe BZX data when available</label> </div> </div> </div> <div data-ng-show="currentTab === \'scale\'"> <div class="modal-settings-row row-scale-type"> <div class=label>Scale Type</div> <div class=input-radio> <input type=radio id=interactive-chart__radio-linear-scale data-ng-click="changeScaleType(\'Linear\')" data-ng-model=formData.scaleType value=Linear> <label for=interactive-chart__radio-linear-scale> <span></span> Linear </label> </div> <div class=input-radio> <input type=radio id=interactive-chart__radio-logarithmic-scale data-ng-click="changeScaleType(\'Logarithmic\')" data-ng-model=formData.scaleType value=Logarithmic> <label for=interactive-chart__radio-logarithmic-scale> <span></span> Logarithmic </label> </div> </div> <div class="modal-settings-row row-scale-values border-bottom"> <div class=label>Scale Values</div> <div class=input-radio> <input type=radio id=interactive-chart__radio-price-scale data-ng-click="changeScaleValue(\'price\')" data-ng-model=formData.scaleValue value=price> <label for=interactive-chart__radio-price-scale> <span></span> Price </label> </div> <div class=input-radio> <input type=radio id=interactive-chart__radio-change-scale data-ng-click="changeScaleValue(\'percent\')" data-ng-model=formData.scaleValue value=percent> <label for=interactive-chart__radio-change-scale> <span></span> % Change </label> </div> <div class=row-help-text> % Change Scale auto-changes Bar Type to Line </div> </div> <div class="modal-settings-row row-chart-margins"> <div class=label>Right Margin</div> <div class=bc-dropdown-suffix-label> <div class=bc-dropdown__suffix-label>Bars</div> <input type=number data-ng-model=formData.marginBars max=25 min=0 required=required> </div> <span class=row-chart-margins-help>(25 max)</span> </div> <div class=modal-settings-row> <div class=checkbox-wrapper> <input type=checkbox id=settings-modal-grid-lines-checkbox data-ng-model=formData.minorGridLines> <label for=settings-modal-grid-lines-checkbox>Minor Grids</label> </div> </div> <div class=modal-settings-row> <div class=checkbox-wrapper> <input type=checkbox id=settings-modal-overlapping-price-labels-checkbox data-ng-model=formData.preventLabelOverlap> <label for=settings-modal-overlapping-price-labels-checkbox>Overlapping Price Labels</label> </div> </div> </div> <div data-ng-if="equityEtfMutual || isFutureSymbol" data-ng-show="currentTab === \'adjustments\'"> <div class="modal-settings-row row-events" data-ng-show=equityEtfMutual> <div class=label>Events</div> <ul> <li> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-settings-cb1 data-ng-model=formData.events.dividends> <label for=tools-modal-settings-cb1>Dividends</label> </div> </li> <li> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-settings-cb2 data-ng-model=formData.events.earnings> <label for=tools-modal-settings-cb2>Earnings</label> </div> </li> <li> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-settings-cb3 data-ng-model=formData.events.splits> <label for=tools-modal-settings-cb3>Splits</label> </div> </li> </ul> </div> <div class="modal-settings-row row-back-adjust" data-ng-if=equityEtfMutual> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-dividends-back-adjust-checkbox data-ng-model=formData.dividendsAdjust> <label for=tools-modal-dividends-back-adjust-checkbox>Dividends Back Adjust</label> </div> <div class=row-help-text> Adjust price history for dividends </div> </div> <div class="modal-settings-row row-back-adjust" data-ng-if=equityEtfMutual> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-extended-hours-checkbox data-ng-model=formData.extendedHours> <label for=tools-modal-extended-hours-checkbox>Extended Hours</label> </div> <div class=row-help-text> Applies to minute charts for US Equities </div> </div> <div class="modal-settings-row row-continuation-chart" data-ng-if=isFutureSymbol> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-continuation-chart-checkbox data-ng-true-value="\'Continue\'" data-ng-false-value="\'None\'" data-ng-model=chartAggregation.spec data-ng-disabled="chartAggregation.spec === \'Nearest\'"> <label for=tools-modal-continuation-chart-checkbox>Build "Continuation" Chart</label> </div> <div class=row-help-text> Use same contract month (Z17, Z16, Z15 etc) back in time to build the chart. Does not work with Nearby charts. </div> </div> <div class="modal-settings-row row-contract-roll" data-ng-if=isFutureSymbol> <div class=label>Contract Roll</div> <div class=select-lists-wrapper> <div class=left-select-list> <div class="bc-dropdown styled"> <select data-ng-model=formData.contractRoll> <option value=combined>Volume / Open Interest</option> <option value=expiration>Days to Expiration</option> </select> </div> </div> <div class=right-select-list> <div class="bc-dropdown styled" data-ng-hide="formData.contractRoll !== \'expiration\'"> <select data-ng-model=formData.daysToExpiration data-ng-options="day.value as day.label for day in expirationDays" data-ng-disabled="formData.contractRoll !== \'expiration\'"></select> </div> <input type=text disabled=disabled data-ng-show="formData.contractRoll !== \'expiration\'"> </div> </div> <div class=row-help-text> Determine how Futures Contracts roll on Nearby and Continuous charts </div> </div> <div class="modal-settings-row row-back-adjust" data-ng-if=isFutureSymbol> <div class=checkbox-wrapper> <input type=checkbox id=tools-modal-back-adjust-checkbox data-ng-model=formData.backAdjust> <label for=tools-modal-back-adjust-checkbox>Back Adjust History</label> </div> <div class=row-help-text> Adjust price history when switching contract months </div> </div> </div> </form> <div class="modal-controls-row text-center"> <button class="bc-button grey" data-ng-click=closeModal()>Cancel</button> <button class="bc-button light-blue" data-ng-disabled=interactiveChartSettingsForm.$invalid data-ng-click=apply()>Apply</button> </div> </div>'
    },
    FDb0: function(e, t, a) {
        "use strict";

        function i(e) {
            this.changeBarType = function(t, a) {
                var i = t.change(e.mainPlotGet()),
                    r = {
                        colors: angular.copy(a.defaultColors),
                        lintWidth: 1,
                        curveStyle: a.key
                    };
                a.attr ? r.curveAttribute = a.attr : delete r.curveAttribute;
                var o = e.curveStyle(r, i[0].type);
                t.change(o)
            }, this.changeAggregationAndPeriod = function(e, t) {
                var a = {
                    id: "Aggregation",
                    context: t.aggregation
                };
                t.aggregation.spec && void 0 === t.aggregation.isContractVolume ? a.context.isContractVolume = !1 : void 0 !== t.aggregation.isContractVolume && (a.context.isContractVolume = t.aggregation.isContractVolume);
                var i = {
                    id: "Period",
                    context: {
                        period: t.period
                    }
                };
                console.log("-> [Dashboard Grid Chart API] Applying Action", a, i), e.change(a, i)
            }, this.changeAggregation = function(e, t) {
                var a = {
                    id: "Aggregation",
                    context: t
                };
                t.spec && void 0 === t.isContractVolume ? a.context.isContractVolume = !1 : void 0 !== t.isContractVolume && (a.context.isContractVolume = t.isContractVolume), console.log("-> [Dashboard Grid Chart API] Applying Action", a), e.change(a)
            }, this.changePeriod = function(e, t) {
                var a = {
                    id: "Period",
                    context: {
                        period: t
                    }
                };
                console.log("-> [Dashboard Grid Chart API] Applying Action", a), e.change(a)
            }, this.changeRange = function(t, a) {
                var i = e.range(a);
                console.log("-> [Dashboard Grid Chart API] Applying Action", i), t.change(i)
            }, this.loadDefinition = function(e, t, a) {
                var i = JSON.parse(t);
                i.display.navigator.visible = !1, i.display.navigator.enabled = !1, i.display.scrollbar.visible = !1, e.load(JSON.stringify(i), {
                    keepOldAnnotations: !0,
                    keepNewAnnotations: !1,
                    keepOldCompare: !1,
                    keepNewCompare: !0
                }), e.change({
                    id: "MainPlot",
                    context: {
                        symbol: a
                    }
                })
            }
        }
        i.$inject = ["interactiveChartApiActionsService"], e.exports = i
    },
    FF2s: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.resetDialogDismiss = function() {
                t.dismiss()
            }, e.resetDialogConfirm = function() {
                t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance"], e.exports = i
    },
    FFdE: function(e, t) {
        e.exports = '<div class=bc-portfolio__portfolios-edit-all> <form name=editMyChartGroupsForm> <div class=bc-datatable-toolbar> <div class="bc-dropdown filter"> <select data-ng-model=$ctrl.sortOrder data-ng-change=$ctrl.sortRows();> <option selected=selected value="">Sort List</option> <option value=name>Alphabetically by Name</option> </select> </div> </div> <div ui-tree=$ctrl.sortOptions class="bc-tools-edit__tool-symbols-row organize-page"> <bc-error-component data-errors=$ctrl.errors data-use-server-errors=true data-form-name=editMyChartGroupsForm></bc-error-component> <div class="bc-tools-edit__symbols-list-header clearfix"> <div class=bc-portfolio__portfolios-edit-all-caption>Name</div> <div class="bc-portfolio__portfolios-edit-all-total show-for-medium-up">Number of Charts</div> <div class=bc-portfolio__portfolios-edit-all-order>Order</div> <div class=bc-portfolio__portfolios-edit-all-group><span class=show-for-medium-up>Edit Group</span></div> </div> <ul ui-tree-nodes class=bc-tools-edit__symbols-list data-ng-model=$ctrl.treeGroups> <li ui-tree-node class="bc-tools-edit__symbols-list-symbol clearfix" data-ng-repeat="node in $ctrl.treeGroups track by node.id" data-ng-class-odd="\'odd\'"> <span class="left bc-glyph-minus-circle bc-tools-edit__symbol-delete visibility-animated" data-ng-class="{\'invisible\': $ctrl.pendingGroupDelete === node}" data-ng-click=$ctrl.removeGroup(node)></span> <div class=bc-tools-edit__delete-symbol data-ng-show="$ctrl.pendingGroupDelete === node"> <span class=block-title>Delete [[ node.name ]]?</span> <a class="bc-button small light-blue" data-ng-click="$ctrl.removeGroupConfirm($index, node)">Yes</a> <a class="bc-button small grey" data-ng-click=$ctrl.removeGroupCancel()>No</a> </div> <div class=bc-tools-edit__symbol-data> <div class="bc-tools__edit-all-caption visibility-animated" data-ng-class="{\'invisible\': $ctrl.pendingGroupDelete === node}"> <div class=pencil-icon-wrapper> <input type=text name=name[[node.id]] data-ng-model=node.name required data-ng-maxlength=20 data-ng-class="{\'invalid\': editMyChartGroupsForm.name[[node.id]].$invalid}" data-ng-model-options="{updateOn: \'blur\'}" data-ng-change="$ctrl.save(editMyChartGroupsForm, node)" value=node.name /> <i class=bc-glyph-pencil></i> </div> <div class=error-text data-ng-show=editMyChartGroupsForm.name[[node.id]].$invalid> <span data-ng-show=editMyChartGroupsForm.name[[node.id]].$error.maxlength>Group name cannot be longer than 20 characters.</span> <span data-ng-show=editMyChartGroupsForm.name[[node.id]].$error.uniqueName>Group name must be unique.</span> <span data-ng-show=editMyChartGroupsForm.name[[node.id]].$error.required>Fill the required fields.</span> </div> </div> <div ui-tree-handle class="right bc-glyph-bars bc-tools-edit__symbol-drag-icon"></div> <div class="right bc-glyph-arrow-up bc-tools-edit__symbol-up-icon" data-ng-click=$ctrl.moveSymbolTop($index)> </div> <div class="bc-portfolio__portfolios-edit-all-total visibility-animated show-for-medium-up" data-ng-class="{\'invisible\': $ctrl.pendingGroupDelete === node}"> <span> [[ node.charts.length ]] </span> </div> <div data-nodrag class="bc-portfolio__portfolios-edit-all-group link"><a target=_self data-ng-href="[[ $ctrl.getLink(node.id) ]]" title=Edit class=""> <i class=bc-glyph-cog></i> </a></div> </div> </li> </ul> </div> </form> </div> '
    },
    FPY3: function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = null;
            this.setRedirectPath = function(t) {
                e = t
            }, this.getRedirectPath = function() {
                return e
            }
        }
    },
    FRLq: function(e, t, a) {
        "use strict";
        e.exports = ["localStorageService", "interactiveChartStateApi", "authService", "$log", "interactiveChartUserPreferencesApi", function(e, t, a, i, r) {
            var o = e.get("interactiveChart.onRegisterChartData");
            if (o && a.isLoggedIn()) {
                var n = JSON.parse(o);
                i.info("Save interactive chart setting for symbol " + n.symbol), t.saveChartDataForSymbol(n.symbol, n.chartData).then(function() {
                    e.remove("interactiveChart.onRegisterChartData"), r.savePreferencesItem("interactive_charts_last_symbol", n.symbol);
                    var t = a.getUserPreferences();
                    t.interactive_charts_last_symbol = n.symbol, a.setUserPreferences(t)
                })
            }
        }]
    },
    "FS+y": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login technical-chart-clear-settings-content study-modal"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=clearSettingsClose()></i> </div> </div> <div class=settings> <p class=clear-text>Are you sure you want to clear all settings?</p> <div class=button-block> <button class="bc-button save grey" data-ng-click=clearSettingsClose()>Cancel</button> <button class="bc-button ok light-blue" data-ng-click=applyClearSettings()>Clear</button> </div> </div> </div>'
    },
    FSE1: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    displayFields: "=",
                    type: "@"
                },
                controller: ["$scope", "screenerPermissionService", function(e, t) {
                    var a = this;
                    a.ignoreFields = a.ignoreFields || [], a.fields = {}, a.fields.symbolName = !0, a.fields.exchange = !0, a.market = window.config.user.market || "usd";
                    var i = !1;
                    e.$watchCollection(function() {
                        return a.fields
                    }, function(e, r) {
                        if (!i && e !== r && !t.checkPermissions()) return a.fields = r, i = !0, !1;
                        i = !1, a.displayFields.splice(0), Object.keys(a.fields).forEach(function(e) {
                            !0 === a.fields[e] && a.displayFields.push(e)
                        })
                    })
                }],
                controllerAs: "$ctrl",
                template: a("nzQ4")
            }
        }
    },
    FT1v: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                getItem: function(r) {
                    var o = r.method || "/news/story";
                    return delete r.method, e.call(a.buildUrl(i.API_URL + o, r.api), t.GET)
                },
                getChart: function(r) {
                    var o = r.method || "/chart";
                    return delete r.method, r.api.data && "I" === r.api.data && (r.api.data = "I:" + r.api.im), e.call(a.buildUrl(i.API_URL + o, r.api), t.GET)
                },
                getSymbolData: function(r) {
                    var o = {
                        symbols: r,
                        fields: "symbol,symbolType,symbolName,category"
                    };
                    return e.call(a.buildUrl(i.API_URL + "/quotes/get", o), t.GET)
                },
                getEducationContent: function(a, i) {
                    return e.call("/education/get-content/" + a + "/" + i, t.GET)
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig"], e.exports = i
    },
    FdDE: function(e, t) {
        e.exports = '<div class=modal-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=cancel()></i> </div> <div class=modal-content-wrapper> <div class=feedback-form-container data-ng-if=!formCompleted> <h5 class=feedback-form-title>Give Feedback</h5> <p class=feedback-form-description>Can\'t find what you\'re looking for, have a question or a suggestion?</p> <form class=bc-form name=feedbackForm novalidate data-ng-submit=sendFeedback(feedbackForm)> <div class="form-item-container message"> <textarea name=message class=item-message data-ng-class="{\'invalid\': formSubmitted && feedbackForm.message.$invalid}" required data-ng-model=feedback.message placeholder=Message>\n            </textarea> </div> <div class="form-item-container email"> <input name=email type=email class=item-email data-ng-class="{\'invalid\': formSubmitted && feedbackForm.email.$invalid}" required data-bc-ng-email-validation data-ng-model=feedback.email placeholder=Email> </div> <div class="form-item-container recapcha"> <div id=g-recapcha-feedback class=g-recaptcha width=300></div> </div> <div class="form-item-container errors" data-ng-if=formSubmitted> <span data-ng-if="feedbackForm.message.$error.required || feedbackForm.email.$error.required"> Please complete required fields to continue. </span> <span data-ng-if=!recaptchaConfirmed> Confirm the captcha. </span> <span data-ng-if=feedbackForm.email.$error.invalidEmail> Enter a valid email. </span> <span data-ng-if=badRequestError data-ng-bind=badRequestError></span> </div> <div class="form-item-container submit"> <input type=submit class=item-submit value=Submit> </div> </form> </div> <div class=feedback-thanks-container data-ng-if=formCompleted> <h5 class=feedback-thanks-title>Give Feedback</h5> <p class=feedback-thanks-description>Thank you for contacting us.</p> <p class=feedback-thanks-text>We\'ve received your feedback and will be in touch with you shortly.</p> <div class=feedback-thanks-actions> <button class=bc-button data-ng-click=close()>Ok</button> </div> </div> </div>'
    },
    FfWV: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                getData: function(r) {
                    var o = r.api.method || "/quotes/get";
                    return delete r.api.method, e.call(a.buildUrl(i.API_URL + o, r.api), t.GET).then(function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig"], e.exports = i
    },
    FfmW: function(e, t) {
        e.exports = '<div data-ng-class="{\'text-left\': (barchartTableHeaderCellTemplateCtrl.cellKey === \'symbol\' || barchartTableHeaderCellTemplateCtrl.cellKey === \'symbolName\')}"> <div data-ng-if=barchartTableHeaderCellTemplateCtrl.isSortable()> <barchart-table-header-cell-sort data-cell-key="{{ barchartTableHeaderCellTemplateCtrl.cellKey }}" data-cell-value="{{ barchartTableHeaderCellTemplateCtrl.cellValue }}" data-sort-data=barchartTableHeaderCellTemplateCtrl.sortData data-content=barchartTableHeaderCellTemplateCtrl.content> </barchart-table-header-cell-sort> </div> <div data-ng-if=!barchartTableHeaderCellTemplateCtrl.isSortable() class=mini-table-cell-header> <span data-bs-tooltip data-placement=bottom data-title="[[ barchartTableHeaderCellTemplateCtrl.content.meta.field.description[barchartTableHeaderCellTemplateCtrl.cellKey] ]]"> [[ barchartTableHeaderCellTemplateCtrl.cellValue ]] </span> </div> </div>'
    },
    "Ffq+": function(e, t) {
        e.exports = function(e) {
            return [{
                value: e.chartSettings.BASIC,
                title: "Basic Chart"
            }, {
                value: e.chartSettings.SPREAD,
                title: "Spread Chart"
            }, {
                value: e.chartSettings.COMPARISON,
                title: "Comparison Chart"
            }]
        }
    },
    FikV: function(e, t, a) {
        "use strict";
        angular.module("Overview", []).directive("overview", a("Iys4"));
        e.exports = {
            enable: !0,
            name: "Overview"
        }
    },
    FkQG: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c) {
            var d = r.getIsFutureSymbol();
            if (e.templates = a.getTemplatesList(), e.config = r.getChartGlobalConfig(), e.editChartLink = window.config.routes["my.customChartTemplates.interactive"], s) {
                var u = l.getTemplate();
                e.config = {
                    template: u
                }
            }

            function p() {
                o.$broadcast(n.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED, {
                    updateState: !0
                }), t.dismiss()
            }
            e.modalDismiss = function() {
                t.dismiss()
            }, e.applyTemplate = function(r) {
                s ? (o.$broadcast(n.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED, {
                    updateState: !0,
                    template: angular.copy(r)
                }), e.config.template = r ? r.id : null, t.dismiss()) : (e.config.template = r ? r.id : null, r ? a.applyTemplate(r.id, d).then(function() {
                    p()
                }) : (a.resetTemplate(), p()), i.setCurrentFlipChartTemplate(r ? r.id : null))
            }, e.openSaveTemplateModal = function() {
                t.dismiss(), c.saveTemplateModal(), angular.element(document.querySelector(".js-bc-interactive-chart-dropdown-templates")).click()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "interactiveChartTemplates", "interactiveChartStateService", "interactiveChartSettings", "$rootScope", "events", "useGrid", "dashboardGridSettings", "interactiveChartModals"], e.exports = i
    },
    Fp35: function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <h5>[[ rawData.symbolName ]] ([[ rawData.symbol ]])</h5> <div class=inner-content> <div class="header clearfix"> <h5>Earnings Estimates</h5> <a class="bc-button white-with-border small right" target=_self data-ng-href="[[ link ]]">Full Earnings History</a> </div> <div class=earnings-table-content> <barchart-table-scroll> <table> <thead> <tr> <th></th> <th data-ng-repeat="period in periods"> <span class=text-nowrap>[[ period.title ]]</span> <span>[[ data[\'estimateDate\'+ period.key] ]]</span> </th> </tr> </thead> <tbody> <tr data-ng-repeat="row in rows" data-ng-class-even="\'odd\'"> <td class=text-left> <span>[[ row.shortTitle || row.title ]]</span> </td> <td data-ng-repeat="period in periods" data-ng-class="getClass(row, data[row.key + period.key])"> [[ data[row.key + period.key] ]] </td> </tr> </tbody> </table> </barchart-table-scroll> </div> <div class=description>* Earnings are based on GAAP income from continuing operations.</div> </div> </div> '
    },
    FswG: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                template: a("psvu"),
                controller: ["$scope", "$rootScope", function(e, t) {
                    e.showIndustrial = !0, e.changeFilter = function() {
                        t.$broadcast("filterByNumberOfStocks", e.showIndustrial)
                    }
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    Fvn1: function(e, t) {
        e.exports = '<div class="symbol-autocomplete quick-search hide"> <div data-ng-show=$ctrl.extented class=search-results-header>Click to add:</div> <a class=search-row data-ng-repeat="item in $ctrl.searchResults" data-ng-mousemove=$ctrl.setSelectedItem($index) data-ng-class="{\'selected\': $index === $ctrl.selectedItemIndex}" data-ng-click=$ctrl.selectSymbol(item)> <div class=clearfix> <div class="small-4 medium-3 column" data-ng-bind-html=$ctrl.addHighlightMarkup(item.symbol)></div> <div class="small-7 medium-6 column" data-ng-bind-html=$ctrl.addHighlightMarkup(item.name)></div> <div class="medium-3 large-3 column" data-ng-bind-html=$ctrl.addHighlightMarkup(item.exchange)></div> </div> </a> <div class="no-found columns" data-ng-show="$ctrl.searchResults === null"> <div class="large-12 medium-12 small-12"><span>No Matching Results</span></div> </div> </div>'
    },
    FwFJ: function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };
        e.exports = function() {
            return {
                restrict: "A",
                scope: !0,
                controller: ["$window", "bcShareService", "interactiveChartApi", "$q", "interactiveChartSettings", "interactiveChartStateApi", "utils", function(e, t, a, i, o, n, s) {
                    this.getImageChart = function(e, o, n, s, l, c) {
                        var d, u = i.defer();
                        switch (n) {
                            case "technical":
                                d = c;
                                break;
                            case "interactive":
                                d = a.getSVGForExport()
                        }
                        return d ? t.convertImageAndUpload(d, s, n).then(function(e) {
                            !0 === e.success && u.resolve(e.data)
                        }) : (u.reject(), console.error("Image is required: but " + (void 0 === d ? "undefined" : r(d)) + " was given.")), u.promise
                    }, this.share = function(e) {
                        t.share(e)
                    }, this.getLink = function(e) {
                        return t.getLink(e)
                    }, this.getShareLinkPartialEncoded = function(e) {
                        return t.getShareLinkPartialEncoded(e)
                    }, this.getRedirectUrl = function(t, r, l, c, d) {
                        var u, p = i.defer(),
                            m = t || e.location.pathname,
                            h = !t;
                        if ("technical" === r) u = s.route(e.config.routes["home.shared-chart"], {
                            symbol: d
                        }), t = e.location.origin + u + "?chart_url=" + l + "&page_url=" + encodeURIComponent(m), p.resolve(t);
                        else if ("interactive" === r) {
                            var g = {
                                configuration: JSON.stringify(o.getChartGlobalConfig()),
                                state: a.save()
                            };
                            n.saveChartDataForSymbolAnon(o.getSymbol(), g).then(function(a) {
                                (h || c) && (m = c ? c + "?id=" + a.id : e.location.pathname + "?id=" + a.id, u = s.route(e.config.routes["home.shared-chart"], {
                                    symbol: d
                                }), t = e.location.origin + u + "?chart_url=" + l + "&page_url=" + encodeURIComponent(m)), p.resolve(t)
                            })
                        }
                        return p.promise
                    }
                }]
            }
        }
    },
    FyVa: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                restrict: "A",
                scope: {
                    title: "@",
                    link: "@",
                    imageUrl: "@",
                    onShared: "&"
                },
                link: function(i, r) {
                    function o() {
                        a.openShareChartThoughMailModal({
                            imageUrl: i.imageUrl || null,
                            link: i.link || e.location.href,
                            subject: i.title,
                            systemBody: "I thought you might be interested in this story from Barchart.com"
                        }, "Share Story With Email", e.config.routes["share.news"], {
                            hideLink: !0
                        }).then(function(a) {
                            "OK" === a && (window.dataLayer.push({
                                event: "socialInteraction",
                                socialNetwork: "Email",
                                socialAction: "Sent",
                                socialTarget: i.link || e.location.href
                            }), t.success("Email has been sent."), i.onShared())
                        })
                    }
                    r.on("click", o), i.$on("$destroy", function() {
                        r.off("click", o)
                    })
                }
            }
        }
        i.$inject = ["$window", "Notification", "interactiveChartModals"], e.exports = i
    },
    G5ma: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = a.config.routes;
            return {
                checkIfEmailExists: function(a) {
                    var i = {
                        email: a
                    };
                    return e.call(r["users.checkEmail"], t.POST, i)
                },
                authAttempt: function(a, i) {
                    var o = {
                        email: a,
                        password: i
                    };
                    return e.call(r["auth.firstLevelUser"], t.POST, o)
                },
                getSubscription: function(a) {
                    return e.call(r["my.premier.getSubscription"], t.POST, a)
                },
                getSubscriptionInfo: function() {
                    return e.call(i.API_URL + "/get-subscription-info")
                },
                updateContactInfo: function(t) {
                    var a = {
                        body: {
                            fname: t.first_name,
                            lname: t.last_name
                        }
                    };
                    return e.call("/my/update-subscription/contact", "PUT", a)
                },
                updateAddressInfo: function(t, a) {
                    var i = {
                        body: {
                            cardid: a,
                            address: t.address,
                            city: t.city,
                            zip: t.zip
                        }
                    };
                    return t.address2 && (i.body.address2 = t.address2), t.country && (i.body.country = t.country), t.state && (i.body.state = t.state), t.phone && (i.body.phone = t.phone), t.company && (i.body.company = t.company), e.call("/my/update-subscription/address", "PUT", i)
                },
                updateCardInfo: function(t) {
                    var a = {
                        body: t
                    };
                    return e.call("/my/update-subscription/creditcard", "PUT", a)
                },
                cancelSubscription: function(t) {
                    var a = {
                        email: t.email,
                        first_name: t.first_name,
                        last_name: t.last_name,
                        message: t.message,
                        phone: t.phone
                    };
                    return e.call("/my/cancel-subscription", "POST", a)
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "$window", "apiConfig"], e.exports = i
    },
    G8SB: function(e, t) {
        e.exports = "<div class=\"tools-dropdown tools-dropdown-aggregation\"> <bc-dropdown-flexible data-label=getLabel() data-dropdown-id=bc-interactive-chart-dropdown-aggregation data-remove-mobile-touch=true> <div class=tools-dropdown-content> <ul> <li data-ng-repeat=\"item in aggregations\" data-ng-click=changeAggregation(item) data-ng-class=\"{'active': settings.aggregation.unit === item.unit && (!isFutureSymbol || settings.aggregation.spec === item.spec || (!item.spec && settings.aggregation.spec !== 'Nearest')), 'hide': settings.aggregation.spec === 'Continue' && item.spec === 'Nearest'}\"> [[ ::item.label ]] </li> </ul> </div> </bc-dropdown-flexible> </div>"
    },
    GBT0: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n, s;
            n = a.getUserData(), s = n.custom_chart_templates, this.getTemplateData = function(e) {
                var a;
                switch ((a = e.id ? angular.copy(t.find(s, "id", +e.id)) : e)[o.STUDYHEIGHT] && "number" == typeof a[o.STUDYHEIGHT] && (a[o.STUDYHEIGHT] = a[o.STUDYHEIGHT].toString()), null === a[o.STUDYHEIGHT] && delete a[o.STUDYHEIGHT], a[o.HEIGHT] && "number" == typeof a[o.HEIGHT] && (a[o.HEIGHT] = a[o.HEIGHT].toString()), a[o.HEIGHT]) {
                    case "325":
                        a[o.HEIGHT] = "250";
                        break;
                    case "350":
                        a[o.HEIGHT] = "375";
                        break;
                    case "450":
                        a[o.HEIGHT] = "500"
                }
                return null === a[o.HEIGHT] && delete a[o.HEIGHT], "" === a[o.INDICATORS] && (a[o.INDICATORS] = null), a
            }, this.getExistedNames = function(e) {
                var a, i;
                (a = t.pluck(s, "name"), e.id) && (i = a.indexOf(e.name), a.splice(i, 1));
                return a
            }, this.checkNameLength = function(t) {
                return i.checkNameLength(t.name).then(function(e) {
                    return t
                }, function(t) {
                    return e.reject("templateNameLength")
                })
            }, this.checkDescriptionLength = function(t) {
                return i.checkDescriptionLength(t.description, 50).then(function(e) {
                    return t
                }, function(t) {
                    return e.reject("templateDescriptionLength")
                })
            }, this.validateBasicForm = function(t) {
                return r.validateBasicFormPromise(t).then(function(e) {
                    return e
                }, function(t) {
                    for (var a in t) return e.reject(t[a])
                })
            }
        }
        i.$inject = ["$q", "_", "authService", "MyBarchartInputService", "technicalChartValidateService", "technicalChartFields"], e.exports = i
    },
    GIcn: function(e, t) {
        e.exports = '<div class=bc-screener__row-filter data-ng-hide=hideFilter> <div class="row collapse"> <div class="column small-12" data-ng-class="{\'medium-4\': !stockUsExchange, \'custom-exchange-title\': stockUsExchange}"> <div class=bc-screener__filter-title data-ng-show=!removeDialogOpen> <i data-ng-if=!hideDeleting class="bc-glyph-minus-circle bc-screener__remove-row-filter" data-ng-click=askToRemoveRowFilter()></i> <span class=bc-screener__filter-name data-ng-bind=filterItem.title></span> <span class=bc-screener__filter-description data-ng-if=filterItem.description data-ng-bind=filterItem.description></span> </div> <div class="bc-screener__delete-filter-dialog ng-hide" data-ng-show=removeDialogOpen> <span class=block-title>Delete Filter?</span> <a class="bc-button small light-blue" data-ng-click=confirmFilterRemove()>Yes</a> <a class="bc-button small grey" data-ng-click=cancelFilterRemove()>No</a> </div> </div> <div class="column small-12 bc-screener__filter-column js-filter-fields-container" data-ng-class="{\'medium-8\': !stockUsExchange, \'custom-exchange-body\': stockUsExchange}"> <screener-checkbox-filter data-ng-if="filterItem.directive === \'screener-checkbox-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-checkbox-filter> <screener-compare-filter data-ng-if="filterItem.directive === \'screener-compare-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-compare-filter> <screener-contain-filter data-ng-if="filterItem.directive === \'screener-contain-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-contain-filter> <screener-exchange-filter data-ng-if="filterItem.directive === \'screener-exchange-filter\'" data-detect-fund-market="detectFundMarket(market, type)" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-exchange-filter> <screener-filter-display data-ng-if="filterItem.directive === \'screener-filter-display\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-filter-display> <screener-indicator-filter data-ng-if="filterItem.directive === \'screener-indicator-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-indicator-filter> <screener-opinion-filter data-ng-if="filterItem.directive === \'screener-opinion-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-opinion-filter> <screener-options-expiration-filter data-ng-if="filterItem.directive === \'screener-options-expiration-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-options-expiration-filter> <screener-percent-from-filter data-ng-if="filterItem.directive === \'screener-percent-from-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-percent-from-filter> <screener-radio-filter data-ng-if="filterItem.directive === \'screener-radio-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-radio-filter> <screener-range-custom-date-filter data-ng-if="filterItem.directive === \'screener-range-custom-date-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-range-custom-date-filter> <screener-range-date-filter data-ng-if="filterItem.directive === \'screener-range-date-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-range-date-filter> <screener-range-expiration-filter data-ng-if="filterItem.directive === \'screener-range-expiration-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-range-expiration-filter> <screener-range-filter data-ng-if="filterItem.directive === \'screener-range-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-range-filter> <screener-range-timeframe-filter data-ng-if="filterItem.directive === \'screener-range-timeframe-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-range-timeframe-filter> <screener-static-filter data-ng-if="filterItem.directive === \'screener-static-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-static-filter> <screener-symbol-filter data-ng-if="filterItem.directive === \'screener-symbol-filter\'" data-filter-key="[[ ::filterItem.key ]]" data-type="[[ ::type ]]" data-filter-index="[[ filterIndex ]]" data-filter-data=filterItem.data data-filters=filterItem.filters> </screener-symbol-filter> </div> <div data-ng-if="filterItem.type !== \'exchange\'" class=item-bars-block ui-tree-handle> <i class=bc-glyph-bars></i> </div> </div> </div> '
    },
    GJHP: function(e, t) {
        e.exports = '<div class="bc-alerts__alerts-modal create-alert-modal"> <form class=bc-form novalidate name=alertForm data-ng-submit=activate(alertForm)> <div class=bc-alerts__alerts-modal-header> <a class="bc-alerts__alerts-modal-close bc-glyph-times" data-ng-click=$modalInstance.close()></a> <bc-short-symbol-info></bc-short-symbol-info> </div> <div class=bc-alerts__alerts-modal-content> <div class=bc-alerts__alerts-modal-tabs> <div class="bc-alerts__alerts-modal-tabs-tab active" data-ng-class="{\'active\': alertModel.alert_type === \'price\'}" data-ng-if="(alertIsNew || alertModel.alert_type === \'price\') && showPrice" data-ng-click="setAlertType(\'price\')">Price Alert</div> <div class=bc-alerts__alerts-modal-tabs-tab data-ng-class="{\'active\': alertModel.alert_type === \'news\'}" data-ng-if="!symbolHasNewsAlert && (alertIsNew || alertModel.alert_type === \'news\') && showNews" data-ng-click="setAlertType(\'news\')">News Alert</div> </div> <price-alert-simple-form data-ng-if="(alertModel.alert_type === \'price\' && !isPremier)" data-symbol="[[ symbol ]]" data-alert-form=alertForm data-alert-model=alertModel data-condition-model=conditionModel></price-alert-simple-form> <price-alert-premier-form data-ng-if="alertModel.alert_type === \'price\' && isPremier" data-conditions=conditions data-alert-model=alertModel data-symbol="[[ symbol ]]"></price-alert-premier-form> <news-alert-form data-all-selected=allFeedsSelected data-news-feeds-checkboxes=newsFeedsCheckboxes data-ng-if="alertModel.alert_type === \'news\'"></news-alert-form> </div> <bc-error-component data-errors=errors></bc-error-component> <div class=bc-alerts__alerts-modal-footer> <button class="bc-button grey save" type=button data-ng-click=cancel()>Cancel</button> <button class="bc-button light-blue save" type=submit data-ng-disabled=submitProcess data-ng-class="{\'disabled\': submitProcess}">Save</button> </div> </form> </div>'
    },
    GLMi: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            function s() {
                var t = {
                    id: [],
                    eod_email: [],
                    eod_view: []
                };
                return e.portfolios.forEach(function(e) {
                    t.id.push(e.id), t.eod_email.push(e.eod_email), t.eod_view.push(e.eod_view)
                }), t
            }
            e.portfolios = angular.copy(t.getUserData().portfolios), e.isPremier = t.getUserData().is_premier, e.portfolios.forEach(function(t) {
                t.eod_view && (e.isPremier || t.eod_email) || (t.eod_view = "main")
            }), e.isNewDisabled = t.getEodReportsNumber("portfolios", "eod_email") >= o.config.limits.reportsLimit, e.updateView = function(t) {
                var o = s();
                if (!e.isPremier && "portfolio" === t.eod_view) return t.eod_view = "main", void r.showPremier("portEmail");
                a.updateEodEmails(o).then(function(e) {
                    e.data && i.success("End-of-Day Email preferences have been saved.")
                })
            }, e.updateEodEmails = function(r) {
                if (!e.isPremier && r.eod_email && (r.eod_view = "main"), r.eod_email && e.isNewDisabled) return r.eod_email = !1, void i.warning({
                    message: n("MAX_EOD_REPORTS"),
                    delay: 8e3
                });
                var l = s();
                a.updateEodEmails(l).then(function(a) {
                    if (a.data) {
                        var r = "End-of-Day Email preferences have been saved.";
                        if (e.portfolios.length) {
                            var n = "";
                            e.portfolios.forEach(function(e) {
                                e.eod_email && (n += "<li>" + e.caption + "</li>")
                            }), n && (r = "<p>You will now receive End-of-Day emails for:</p><ul>" + n + "</ul>")
                        }
                        t.setPortfolios(a.data), i.success(r)
                    }
                    e.isNewDisabled = t.getEodReportsNumber("portfolios", "eod_email") >= o.config.limits.reportsLimit
                }, function(e) {
                    console.warn(e)
                })
            }
        }
        i.$inject = ["$scope", "authService", "portfolioApiFactory", "Notification", "bcModalLoginSrv", "$window", "textFactory"], e.exports = i
    },
    GTCz: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("UJPW"),
                controller: ["$scope", "quotesService", function(e, t) {
                    e.lists = {
                        left: [{
                            field: "fundFamily"
                        }, {
                            field: "underlyingIndex"
                        }, {
                            field: "inceptionDate"
                        }, {
                            field: "firstTradeDate"
                        }, {
                            field: "leverage"
                        }, {
                            field: "assetClass"
                        }],
                        right: [{
                            field: "returnYtd",
                            label: "YTD Return"
                        }, {
                            field: "return1y",
                            label: "1-Year Return"
                        }, {
                            field: "return3y",
                            label: "3-Year Return"
                        }, {
                            field: "return5y",
                            label: "5-Year Return"
                        }]
                    }, e.data = e.widgetData.data[0], e.sector = t.getSector(e.data.symbolType), e.meta = e.widgetData.meta.field.name, e.filterEmptyRows = function(t) {
                        return null !== e.data.raw[t.field]
                    }
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    GUvd: function(e, t, a) {
        "use strict";
        var i = {
                P1D: {
                    period: "P1D",
                    label: "1-Day",
                    labelShort: "1D"
                },
                P2D: {
                    period: "P2D",
                    label: "2-Day",
                    labelShort: "2D"
                },
                P3D: {
                    period: "P3D",
                    label: "3-Day",
                    labelShort: "3D"
                },
                P4D: {
                    period: "P4D",
                    label: "4-Day",
                    labelShort: "4D"
                },
                P5D: {
                    period: "P5D",
                    label: "5-Day",
                    labelShort: "5D"
                },
                P10D: {
                    period: "P10D",
                    label: "10-Day",
                    labelShort: "10D"
                },
                P15D: {
                    period: "P15D",
                    label: "15-Day",
                    labelShort: "15D"
                },
                P20D: {
                    period: "P20D",
                    label: "20-Day",
                    labelShort: "20D"
                },
                P25D: {
                    period: "P25D",
                    label: "25-Day",
                    labelShort: "25D"
                },
                P1M: {
                    period: "P1M",
                    label: "1-Month",
                    labelShort: "1M"
                },
                P2M: {
                    period: "P2M",
                    label: "2-Month",
                    labelShort: "2M"
                },
                P3M: {
                    period: "P3M",
                    label: "3-Month",
                    labelShort: "3M"
                },
                P4M: {
                    period: "P4M",
                    label: "4-Month",
                    labelShort: "4M"
                },
                P6M: {
                    period: "P6M",
                    label: "6-Month",
                    labelShort: "6M"
                },
                P9M: {
                    period: "P9M",
                    label: "9-Month",
                    labelShort: "9M"
                },
                P1Y: {
                    period: "P1Y",
                    label: "1-Year",
                    labelShort: "1Y"
                },
                P2Y: {
                    period: "P2Y",
                    label: "2-Year",
                    labelShort: "2Y"
                },
                P3Y: {
                    period: "P3Y",
                    label: "3-Year",
                    labelShort: "3Y"
                },
                P4Y: {
                    period: "P4Y",
                    label: "4-Year",
                    labelShort: "4Y"
                },
                P5Y: {
                    period: "P5Y",
                    label: "5-Year",
                    labelShort: "5Y"
                },
                P7Y: {
                    period: "P7Y",
                    label: "7-Year",
                    labelShort: "7Y"
                },
                P10Y: {
                    period: "P10Y",
                    label: "10-Year",
                    labelShort: "10Y"
                },
                P15Y: {
                    period: "P15Y",
                    label: "15-Year",
                    labelShort: "15Y"
                },
                P20Y: {
                    period: "P20Y",
                    label: "20-Year",
                    labelShort: "20Y"
                },
                P25Y: {
                    period: "P25Y",
                    label: "25-Year",
                    labelShort: "25Y"
                },
                P30Y: {
                    period: "P30Y",
                    label: "30-Year",
                    labelShort: "30Y"
                },
                P50Y: {
                    period: "P50Y",
                    label: "Max",
                    labelShort: "Max"
                },
                YTD: {
                    period: "YTD",
                    label: "Year-to-Date",
                    labelShort: "YTD"
                },
                CUSTOM: {
                    period: "CUSTOM",
                    label: "Date Range",
                    labelShort: "Date"
                }
            },
            r = {
                items: i,
                periods: {
                    Intraday: [i.P1D, i.P2D, i.P3D, i.P4D, i.P5D, i.P10D, i.P15D, i.P20D, i.P25D, i.P1M, i.CUSTOM],
                    Day: [i.P1M, i.P2M, i.P3M, i.P4M, i.P6M, i.P9M, i.YTD, i.P1Y, i.P2Y, i.CUSTOM],
                    Week: [i.P1Y, i.P2Y, i.P3Y, i.P4Y, i.P5Y, i.CUSTOM],
                    Month: [i.P5Y, i.P7Y, i.P10Y, i.P15Y, i.P20Y, i.P25Y, i.P30Y, i.CUSTOM],
                    Quarter: [i.P10Y, i.P15Y, i.P20Y, i.P25Y, i.P30Y, i.P50Y, i.CUSTOM]
                }
            };
        e.exports = r
    },
    GZ4e: function(e, t) {
        e.exports = '<div class=bc-dashboard-scroll-wrapper> <div class="wrapper bc-scroll-container" id=bc-dashboard-scroll-wrapper data-ng-transclude></div> <div class="scroll-control up" data-ng-show=arrowUp data-ng-click=scrollUp()> <i class=bc-glyph-chevron-up></i> </div> <div class="scroll-control down" data-ng-show=arrowDown data-ng-click=scrollDown()> <i class=bc-glyph-chevron-down></i> </div> </div> '
    },
    Gcsc: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                scope: {
                    cbModel: "=",
                    cbId: "=",
                    cbLabel: "=",
                    cbDisabled: "=",
                    cbClick: "&"
                },
                controller: ["$scope", "utils", function(e, t) {
                    e.cbId = e.cbId ? e.cbId : t.guid()
                }],
                template: a("EQgj")
            }
        }
        i.$inject = [], e.exports = i
    },
    Gk2o: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p, m, h) {
            e.loggedIn = s.isLoggedIn(), e.isMobile = c.isMobile(), e.fullScreen = u, e.expirationDays = c.createSelectListOptions(0, 25, 1, !1, {
                singular: "Day",
                plural: "Days"
            }), e.equityEtfMutual = -1 !== ["UsEquity", "Etf", "MutualFund", "OtherInternationalEquities", "CanadianEquity", "InternationalMutualFund", "Trust"].indexOf(p.config.symbols.type_names[d.symbolType]), e.isFutureSymbol = -1 !== [2, 12, 13, 14].indexOf(d.symbolType), e.batsAvailable = -1 !== ["1", "7"].indexOf(d.symbolTypeSpec) && a.getSymbolData().raw.hasBats, e.currentTab = m || "display", e.formData = l.getChartSettings(), e.chartAggregation = l.getChartAggregation();
            var g = a.getMainPlot()[0].curves[0];
            if (e.formData.barType && "Hollow" === e.formData.barType.curveAttribute && (e.formData.barType.curveStyle = "HollowCandles", delete e.formData.barType.curveAttribute), e.typeList = o.types, e.chartSizes = n.chartSizes, e.scaleTypes = ["Linear", "Logarithmic"], e.scaleValues = ["price", "percent"], e.scaleValuesLabels = {
                    price: "Prices",
                    percent: "%Change"
                }, e.maxPaddingOptions = c.createSelectListOptions(5, 25, 5, !0), e.minPaddingOptions = c.createSelectListOptions(5, 25, 5, !0), e.selectedBarType = {
                    model: {}
                }, e.formData.barType) {
                var f = {
                    key: e.formData.barType.curveStyle
                };
                e.formData.barType.curveAttribute && (f.attr = e.formData.barType.curveAttribute), e.selectedBarType.model = r.find(e.typeList, function(t) {
                    return t.key === e.formData.barType.curveStyle && t.attr === e.formData.barType.curveAttribute
                })
            }
            e.formData.barType && !e.formData.barType.colors && (e.formData.barType.colors = angular.copy(e.selectedBarType.model.defaultColors)), e.formData.barType.curveStyle = g.style, e.formData.barType.lineWidth = g.lineWidth, e.formData.barType.colors = [g.colors[0]], (-1 === ["Line", "Area", "OHLC"].indexOf(g.style) || "OHLC" === g.style && !0 === g.varyColorPerBar) && (g.colors.length > 1 ? (e.formData.barType.colors.push(g.colors[1]), 3 === g.colors.length && e.formData.barType.colors.push(g.colors[2])) : e.formData.barType.colors = ["#EF4226", "#00B04B"]);
            var b = l.getChartDefaultGlobalConfig().settings;
            if (e.formData.dimensions || (e.formData.dimensions = {
                    chartHeight: 650,
                    additionalPaneHeight: 50
                }), e.formData.dividendsAdjust || (e.formData.dividendsAdjust = b.dividendsAdjust), e.formData.backAdjust || (e.formData.backAdjust = b.backAdjust), e.equityEtfMutual && !e.formData.extendedHours && (e.formData.extendedHours = !1), e.isFutureSymbol && !e.formData.contractRoll && (e.formData.contractRoll = b.contractRoll, e.formData.daysToExpiration = b.daysToExpiration), void 0 === e.formData.maxPadding && (e.formData.maxPadding = b.maxPadding), void 0 === e.formData.minPadding && (e.formData.minPadding = b.minPadding), void 0 === e.formData.marginBars && (e.formData.marginBars = b.marginBars), void 0 === e.formData.minorGridLines && (e.formData.minorGridLines = b.minorGridLines), void 0 === e.formData.preventLabelOverlap && (e.formData.preventLabelOverlap = b.preventLabelOverlap), e.batTypeConfigurable = !0, e.changeBarType = function(t) {
                    e.batTypeConfigurable && (e.formData.barType.curveStyle = t.model.key, t.model.attr ? e.formData.barType.curveAttribute = t.model.attr : delete e.formData.barType.curveAttribute, -1 === ["Line", "Area"].indexOf(t.model.key) && (e.formData.scaleValue = "price"), e.formData.barType.colors = angular.copy(t.model.defaultColors))
                }, e.changeScaleType = function(t) {
                    e.formData.scaleType = t, "Logarithmic" === t && (e.formData.scaleValue = "price")
                }, e.changeScaleValue = function(t) {
                    e.formData.scaleValue = t, "percent" === t && (e.formData.scaleType = "Linear", -1 === ["Line", "Area"].indexOf(e.formData.barType.curveStyle) && (e.selectedBarType.model = r.find(e.typeList, {
                        key: "Line"
                    }), e.changeBarType(e.selectedBarType)))
                }, e.apply = function() {
                    ! function() {
                        var t = !1,
                            i = l.getChartGlobalConfig();
                        if (i.settings.barType.curveStyle = g.style, i.settings.barType.lineWidth = g.lineWidth, i.settings.barType.colors = [g.colors[0]], (-1 === ["Line", "Area", "OHLC"].indexOf(g.style) || "OHLC" === g.style && !0 === g.varyColorPerBar) && g.colors.length > 1 && i.settings.barType.colors.push(g.colors[1]), e.formData.barType.curveStyle === i.settings.barType.curveStyle && e.formData.barType.lineWidth === i.settings.barType.lineWidth && e.formData.barType.curveAttribute === i.settings.barType.curveAttribute && r.isEqual(e.formData.barType.colors, i.settings.barType.colors) || (a.changeCurveStyle(e.formData.barType), t = !0), e.formData.dividendsAdjust !== i.settings.dividendsAdjust || e.formData.backAdjust !== i.settings.backAdjust || e.chartAggregation.spec !== i.aggregation.spec || e.formData.extendedHours !== i.settings.extendedHours || e.formData.contractRoll !== i.settings.contractRoll || "expiration" === e.formData.contractRoll && e.formData.daysToExpiration !== i.settings.daysToExpiration) {
                            var o = {
                                dividendsAdjust: e.formData.dividendsAdjust,
                                backAdjust: e.formData.backAdjust
                            };
                            if (e.equityEtfMutual && (o.spec = e.formData.extendedHours ? "FormT" : "None"), e.isFutureSymbol && (o.spec = e.chartAggregation.spec, o.contractRoll = e.formData.contractRoll, "expiration" === e.formData.contractRoll && (o.daysToExpiration = e.formData.daysToExpiration)), l.resetChartRange(), a.changeAggregation(o), "CUSTOM" !== i.period) a.changePeriod(i.period);
                            else if (i.range && i.range.from) {
                                var n = i.range.from + "T00:00:00",
                                    c = {
                                        from: new Date(n).getTime()
                                    };
                                if (i.range.to) {
                                    var d = i.range.to + "T23:59:59";
                                    c.to = new Date(d).getTime()
                                }
                                a.changeRange(c)
                            }
                            t = !0
                        }
                        if (e.formData.events.dividends === i.settings.events.dividends && e.formData.events.earnings === i.settings.events.earnings && e.formData.events.splits === i.settings.events.splits || (a.changeEvents(e.formData.events), t = !0), e.formData.scaleType !== i.settings.scaleType && (a.changeScaleType(e.formData.scaleType), t = !0), e.formData.scaleValue !== i.settings.scaleValue && (a.changeAxisType(e.formData.scaleValue), t = !0), e.formData.maxPadding !== i.settings.maxPadding && (a.changeMaxPadding(e.formData.maxPadding), t = !0), e.formData.minPadding !== i.settings.minPadding && (a.changeMinPadding(e.formData.minPadding), t = !0), e.formData.marginBars !== i.settings.marginBars && (a.changeMarginBars(e.formData.marginBars), t = !0), e.formData.minorGridLines !== i.settings.minorGridLines && (a.changeMinorGridLines(e.formData.minorGridLines), t = !0), e.formData.preventLabelOverlap !== i.settings.preventLabelOverlap && (a.changePreventLabelOverlap(e.formData.preventLabelOverlap), t = !0), e.formData.tooltip !== i.settings.tooltip && (a.changeTooltip(e.formData.tooltip), t = !0), e.formData.navigator !== i.settings.navigator && (a.changeNavigator(e.formData.navigator), t = !0), e.formData.batsData !== i.settings.batsData) {
                            var u = l.getSymbol();
                            e.formData.batsData ? s.isLoggedIn() && e.batsAvailable && (u += ".BZ", a.setCurrentChartSymbol(u)) : a.setCurrentChartSymbol(l.getSymbol()), l.getChartMainPlotExpression() || a.changeSymbol(u), t = !0
                        }
                        t && a.render()
                    }(), l.setChartSettings(e.formData), l.setChartAggregation(e.chartAggregation), h.$broadcast("chartChanged"), t.close()
                }, e.closeModal = function() {
                    t.dismiss()
                }, i.type && i.type.length) {
                var v = [];
                i.type.forEach(function(t) {
                    var a = r.find(e.typeList, function(e) {
                        return e.key === t
                    });
                    a && v.push(a)
                }), v.length && a.getChartTaxonomy().then(function() {
                    var t = r.find(v, function(t) {
                        return t.key === e.formData.barType.curveStyle
                    });
                    t ? (e.selectedBarType.model = t, e.selectedBarType.model.defaultColors = angular.copy(e.formData.barType.colors)) : e.selectedBarType.model = v[0], e.changeBarType(e.selectedBarType), e.allowedBarTypes = i.type, e.batTypeConfigurable = v.length > 1
                })
            }
        }
        i.$inject = ["$scope", "$modalInstance", "interactiveChartApi", "interactiveChartFixedBarType", "_", "interactiveChartSettingsConfig", "interactiveChartDimensionsConfig", "authService", "interactiveChartSettings", "utils", "symbolData", "fullScreen", "$window", "initialState", "$rootScope"], e.exports = i
    },
    GmFH: function(e, t) {
        e.exports = '<div class=bc-dashboard__right-panel> <div class=guest-button-wrapper data-ng-if=::!$ctrl.isAuthenticated> <a data-bc-modal-login=dashboard class="link-user-auth log-in"><i class=bc-glyph-user></i> Guest</a> </div> <dashboard-vertical-scroll> <div id=scroller> <div class=menu-item> <a title="Site Menu" class="double-group right-off-canvas-toggle" data-trigger-event-on-click> <img src=/img/barchart-logo.png class="logo-image logo" title="Site Menu"> <span class=menu-bar> <i class=bc-glyph-bars></i> </span> </a> </div> <div class=category-separator> My Lists </div> <div class="menu-item cursor" data-ng-class="{\'active\': $ctrl.activeItem === \'markets\'}" data-ng-click=$ctrl.openMarkets() title="View charts for Major Market Lists"> <i class="bc-glyph-list-alt icon"> </i> <span class=label>Markets</span> </div> <hr class=separator /> <div class="menu-item cursor" data-ng-class="{\'active\': $ctrl.activeItem === \'watchlist\'}" data-ng-click=$ctrl.openWatchlists() title="View charts for your Watchlists"> <i class="bc-glyph-eye icon"> </i> <span class=label>Watchlists</span> </div> <hr class=separator /> <div class="menu-item cursor" data-ng-class="{\'active\': $ctrl.activeItem === \'portfolio\'}" data-ng-click=$ctrl.openPortfolio() title="View charts for your Portfolios"> <i class="bc-glyph-briefcase icon"> </i> <span class=label>Portfolios</span> </div> <hr class=separator /> <div class="menu-item cursor" data-ng-if=$ctrl.enableMyChart data-ng-class="{\'active\': $ctrl.activeItem === \'mycharts\'}" data-ng-click=$ctrl.openMyCharts()> <i class="bc-glyph-area-chart icon"> </i> <span class=label>My Charts</span> </div> <div class=category-separator> Symbol </div> <div class="menu-item cursor complex" data-bc-symbol-widgets-modal data-ng-if=!$ctrl.isCurrentSymbolDisabled data-symbol-data=$ctrl.currentSymbol data-ng-class="{\'disable-option\': $ctrl.isCurrentSymbolDisabled}" title="Additional Symbol Information"> <i class="bc-glyph-chevron-circle-down icon"> </i> <span class=label>More Data</span> </div> <div class="menu-item cursor complex disable-option" data-ng-if=$ctrl.isCurrentSymbolDisabled title="Additional Symbol Information"> <i class="bc-glyph-chevron-circle-down icon"> </i> <span class=label>More Data</span> </div> <hr class=separator /> <div class="menu-item cursor" data-bc-modal-login=alerts data-bc-show-alerts-modal data-ng-if=!$ctrl.isCurrentSymbolDisabled data-symbol="[[ $ctrl.currentSymbol | json ]]" title="Set Price Alert for this symbol"> <i class="bc-glyph-exclamation-circle icon"> </i> <span class=label>Set Alert</span> </div> <div class="menu-item cursor disable-option" data-ng-if=$ctrl.isCurrentSymbolDisabled title="Set Price Alert for this symbol"> <i class="bc-glyph-exclamation-circle icon"> </i> <span class=label>Set Alert</span> </div> <hr class=separator /> <div class="menu-item cursor complex" data-ng-if=::$ctrl.isAuthenticated data-ng-class="{\'disable-option\': $ctrl.isCurrentSymbolDisabled}" data-ng-click=$ctrl.addToWatchlist() title="Add this symbol to Watchlist"> <i class="bc-glyph-star icon"> </i> <span class=label>Add to Watchlist</span> </div> <div class="menu-item cursor complex" data-ng-if=::!$ctrl.isAuthenticated data-bc-modal-login=watchlist data-stay-on-page=true data-ng-click=$ctrl.addToWatchlist() title="Add this symbol to Watchlist"> <i class="bc-glyph-star icon"> </i> <span class=label>Add to Watchlist</span> </div> <hr class=separator data-ng-if=$ctrl.enableMyChart /> <div class="menu-item cursor complex" data-ng-if=$ctrl.enableMyChart data-ng-class="{\'disable-option\': $ctrl.isGridActive}" data-ng-click=$ctrl.saveToMyCharts()> <i class="bc-glyph-cloud icon"> </i> <span class=label>Save to My Charts</span> </div> <hr class=separator /> <div class="menu-item cursor complex" title="Share Chart to Social Media" data-ng-class="{\'disable-option\': $ctrl.isGridActive}"> <chart-share data-type="[[ ::$ctrl.chartStyle ]]" data-label="Social Share" data-dashboard-mode=true data-disabled=$ctrl.isGridActive data-use-default-page-link=true> </chart-share> </div> <hr class=separator /> <div class="menu-item cursor" data-ng-click=$ctrl.downloadAsImage() data-ng-class="{\'disable-option\': $ctrl.isGridActive}"> <i class="bc-glyph-download2 icon"> </i> <span class=label>Save PNG</span> </div> <div class=category-separator> More </div> <div class="menu-item cursor" data-bc-video-tutorial-modal="" data-title="Dashboard tutorial" data-link-mp4=https://s3.amazonaws.com/videos1.aws.barchart.com/barchart.com/education/07-25-2018%20Exploring%20Barchart%20Dashboard.mp4 title="View a Video"> <i class="bc-glyph-film icon"> </i> <span class=label>Tutorial</span> </div> <hr class=separator /> <div class="menu-item cursor" data-toggle-extended-help title="Display Dashboard Help"> <i class="bc-glyph-question-circle-o icon"> </i> <span class=label>Help</span> </div> <hr class=separator /> <div class="menu-item cursor text-item" data-bc-show-report-bug-modal> <i class="bc-glyph-envelope-o icon"> </i> <span class=label>Support</span> </div> <div class=show-for-medium-up style=height:60px;visibility:hidden> </div> </div> </dashboard-vertical-scroll> </div>'
    },
    GrRd: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    ref: "=",
                    goToRegister: "=",
                    isPremier: "=",
                    sales: "="
                },
                controller: ["$scope", function(a) {
                    a.premierLink = !1, a.routes = t.config.routes, !a.isPremier && e.hasOwnProperty(a.ref) ? (a.header = e[a.ref].header, a.content = e[a.ref].content) : a.isPremier && i.hasOwnProperty(a.ref) ? (a.header = i[a.ref].header, a.content = i[a.ref].content, a.premierLink = !0) : a.isPremier && (a.header = e.premier.header, a.content = e.premier.content), "premier" === a.ref && (a.premierLink = !0), !r.isLoggedIn() && i.hasOwnProperty(a.ref) && (a.premierLink = !0, a.header = i[a.ref].header, a.content = i[a.ref].content)
                }],
                template: a("lStE")
            }
        }
        i.$inject = ["bcLoginRef", "$window", "bcLoginPremierRef", "authService"], e.exports = i
    },
    GsLN: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            e.close = function() {
                a.dismiss()
            }, e.symbolData = r, e.setColor = n.setColor, e.setBackground = function(t) {
                return e.fullData && "high" === t && e.form.high_flag && e.form.high_flag < e.fullData.raw.lastPrice || e.fullData && "low" === t && e.form.low_flag && e.form.low_flag > e.fullData.raw.lastPrice ? t + "-alert" : ""
            }, e.save = function() {
                s.saveWatchlistExtraData(o.watchlist, e.form).then(function(a) {
                    a && a.data && a.data[0] && (o.watchlistFlags || (o.watchlistFlags = {}), o.watchlistFlags[r.symbol] = e.form, o.watchlistFlags[r.symbol].raw = a.data[0], t.$broadcast("notesHasBeenUpdated", o.watchlistFlags), e.close())
                })
            }, s.getSymbolData(e.symbolData.symbol).then(function(t) {
                t && t.data && t.data[0] && (e.fullData = t.data[0])
            }), o.watchlistFlags && o.watchlistFlags[e.symbolData.symbol] ? (e.form = angular.copy(o.watchlistFlags[e.symbolData.symbol]), e.form.raw && (0 === e.form.raw.high_flag && (e.form.high_flag = ""), 0 === e.form.raw.low_flag && (e.form.low_flag = ""))) : e.form = {
                symbol: e.symbolData.symbol,
                notes: "",
                low_flag: "",
                high_flag: ""
            }, i.scrollTo(0, 0)
        }
        i.$inject = ["$scope", "$rootScope", "$modalInstance", "$window", "symbolData", "options", "utils", "WatchlistEditBlockApiFactory"], e.exports = i
    },
    GvFo: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                link: function(e, t) {
                    var a = angular.element(t[0].querySelectorAll(".js-hover"));
                    a.bind("mouseover touchstart", function() {
                        var e, a = [];
                        angular.element(this).hasClass("current") ? a = this.parentNode.querySelectorAll(".js-hover") : (e = this.attributes["data-symbol"].value, a = angular.element(t[0].querySelectorAll('.js-hover[data-symbol="' + e + '"]')));
                        for (var i = 0; i < a.length; ++i) a[i].classList.add("active"), angular.element(a[i].querySelector(".percent")).addClass("hide"), angular.element(a[i].querySelector(".price")).removeClass("hide");
                        t.addClass("cell-hovered")
                    }), a.bind("mouseout touchend", function() {
                        angular.element(t[0].querySelectorAll(".percent")).removeClass("hide"), angular.element(t[0].querySelectorAll(".price")).addClass("hide");
                        for (var e = 0; e < a.length; ++e) a[e].classList.remove("active");
                        t.removeClass("cell-hovered")
                    })
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    Gyv6: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = [function() {
                var a = this;
                a.utils = t, a.apiData = JSON.parse(e.unescape(a.apiData));
                var r = JSON.parse(a.symbol);
                a.currentSymbol = r, a.quotesService = i, a.data = a.apiData.data[0], a.meta = a.apiData.meta.field.name, a.meta.dividendYieldForward = "Yield", a.meta.earningsPerShare = "EPS ttm", a.meta.peRatioTrailing = "P/E ttm", a.meta.peRatioForward = "P/E Forward", a.meta.pegRatio = "P/E to Growth", a.marketCap = a.data.marketCap, delete a.data.marketCap, delete a.meta.marketCap
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("BFrR"),
                controller: r,
                controllerAs: "KeyStatisticsCtrl"
            }
        }
        i.$inject = ["_", "utils", "quotesService"], e.exports = i
    },
    H0DN: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a) {
                    setTimeout(function() {
                        e.$broadcast("onGetCurrentWatchlistId", a.val());
                        var t = document.querySelector('.js-watchlist-selector [name="watchlists"] [value="' + a.val() + '"]').text;
                        e.$broadcast("currentWatchlistName", t)
                    }, 0)
                }
            }
        }
        i.$inject = ["$rootScope"], e.exports = i
    },
    H1Dc: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            return {
                restrict: "A",
                controller: ["$scope", "dataProvider", function(e, t) {
                    e.widgetsDataLoading = !1, e.currentSym = null;
                    e.$on("reorderDataTable", function(t, a) {
                        void 0 !== a.guid && e.guid !== a.guid || e.hideSymbolWidgets()
                    }), e.getSymbolWidgets = function(a, i, o, n) {
                        e.widgetsDataLoading = !0;
                        var s = r.getParameterByName("test");
                        "" !== s && (s = "&test=" + s), n = n ? 1 : 0, t.call("/symbols/" + a + "/modules?symbolType=" + o + "&symbolCode=" + i + "&hasOptions=" + n + s).then(function(t) {
                            e.widgetsDataLoading = !1, e.appendWidgets(t)
                        }, function(t) {
                            console.log("[Barchart Table Show Symbol Details]: error on getSymbolWidgets", t), e.currentSym = null, e.widgetsDataLoading = !1
                        })
                    }, e.showSymbolWidgets = function(t, a) {
                        if (!e.widgetsDataLoading) {
                            null !== e.currentSym && e.hideAnimateWidgets();
                            var i = t.symbolType,
                                r = t.symbol;
                            e.options.symbolDetailsOptions && (r = t[e.options.symbolDetailsOptions.symbol], i = t[e.options.symbolDetailsOptions.symbolType]), e.getSymbolWidgets(r, t.symbolCode, i, t.raw.hasOptions), e.currentSym = a, e.symbolWidgetsExpanded = !0
                        }
                    }, e.hideSymbolWidgets = function() {
                        e.hideAnimateWidgets(!0), e.currentSym = null, e.symbolWidgetsExpanded = !1
                    }, e.scrollWidgetsForward = function() {
                        var t = e.$parent.myScroll.scroller;
                        t.x > t.maxScrollX && (-t.maxScrollX + t.x < 300 ? e.$parent.myScroll.scroller.scrollTo(t.maxScrollX, 0, 400, IScroll.utils.ease.quadratic) : e.$parent.myScroll.scroller.scrollBy(-300, 0, 400, IScroll.utils.ease.quadratic))
                    }, e.scrollWidgetsBack = function() {
                        var t = e.$parent.myScroll.scroller;
                        t.x < 0 && (-t.x < 300 ? e.$parent.myScroll.scroller.scrollTo(0, 0, 400, IScroll.utils.ease.quadratic) : e.$parent.myScroll.scroller.scrollBy(300, 0, 400, IScroll.utils.ease.quadratic))
                    }, e.$on("datatableResetExpandWidgets", function() {
                        e.currentSym = null
                    })
                }],
                link: function(r, o, n) {
                    var s, l;
                    r.scrollableForward = !0, r.scrollableBack = !1, r.$on("tableHasBeenSorted", function() {
                        s && s.hasClass("symbol-details") && (s[0].style.display = "none", s.remove(), r.currentSym = null, r.symbolWidgetsExpanded = !1)
                    }), r.showAnimateWidgets = function(e) {
                        r.scrollableForward = !0, r.scrollableBack = !1;
                        var a = e.children();
                        t(e, "slideDown", {
                            duration: 300
                        }), t(a, "slideDown", {
                            duration: 300,
                            complete: function() {
                                r.$parent.myScroll && r.$parent.myScroll.scroller.refresh()
                            }
                        })
                    }, r.hideAnimateWidgets = function(e) {
                        if (s && s.hasClass("symbol-details"))
                            if (e) {
                                var a = s.children();
                                t(s, "slideUp", {
                                    duration: 300
                                }), t(a, "slideUp", {
                                    duration: 300,
                                    complete: function() {
                                        var e = angular.element(s[0].querySelector(".overview-symbols-charts"));
                                        e && e.scope() && e.scope().$destroy(), s.remove(), s = null
                                    }
                                })
                            } else {
                                var i = angular.element(s[0].querySelector(".overview-symbols-charts"));
                                i && i.scope() && i.scope().$destroy(), s.remove()
                            }
                    }, r.appendWidgets = function(t) {
                        n.$observe("");
                        var c = "",
                            d = "",
                            u = 0,
                            p = t.currentSymbol;
                        t.currentSymbol.symbol, p = JSON.stringify(p), delete t.currentSymbol, Object.keys(t).forEach(function(e) {
                            u += 370;
                            var a = i.escape(JSON.stringify(t[e]));
                            d += "<" + e + " data-symbol='" + p + "' data-api-data='" + a + "'></" + e + ">"
                        }), u += 50;
                        var m = angular.element(o[0].querySelector('[data-current-index="' + r.currentSym + '"]'));
                        r.$parent.myScrollOptions = {
                            snap: !1,
                            mouseWheel: !1,
                            scrollX: !0,
                            eventPassthrough: !0,
                            scrollbars: "custom",
                            interactiveScrollbars: !0,
                            bounce: !1
                        }, m.hasClass("odd") && (c += " odd");
                        var h = '<tr class="symbol-details' + c + '"><td>';
                        h += '<div class="wrapper scroll-wrapper" data-ng-iscroll="scroller" data-ng-iscroll-delay="310"><div class="expanded-modules" style="width:' + u + 'px;">' + d + "</div></div>", h += '<div class="scroll-control forward show-for-large-up" data-ng-show="scrollableForward" data-ng-click="scrollWidgetsForward()"><i class="bc-glyph-chevron-right"></i></div>', h += '<div class="scroll-control back show-for-large-up" data-ng-show="scrollableBack" data-ng-click="scrollWidgetsBack()"><i class="bc-glyph-chevron-left"></i></div>', h += '<div class="scroll-shadow"></div>', l = e(h += "</td></tr>")(r), m.after(l), r.showAnimateWidgets(l), s = angular.element(o[0].querySelector('[data-current-index="' + r.currentSym + '"]')).next(), a(function() {
                            r.$parent.myScroll.scroller.on("scrollEnd", function() {
                                var e = this;
                                r.$apply(function() {
                                    r.scrollableForward = e.x !== e.maxScrollX, r.scrollableBack = 0 !== e.x
                                })
                            })
                        }, 400)
                    }
                }
            }
        }
        i.$inject = ["$compile", "Velocity", "$timeout", "_", "utils"], e.exports = i
    },
    H8pH: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    charts: "=",
                    model: "=",
                    changeChart: "&"
                },
                controller: [function() {
                    var e = this;
                    e.change = function() {
                        e.changeChart({
                            chart: e.model
                        })
                    }, e.getItemName = function(e) {
                        return "(" + e.symbol + ") " + e.name
                    }
                }],
                controllerAs: "$ctrl",
                template: a("1Mn3")
            }
        }
    },
    HCNA: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    currentSymbol: "=",
                    formData: "=",
                    error: "="
                },
                controller: ["$rootScope", "$scope", "Notification", "apiFactory", "searchConnectionService", function(e, t, a, i, r) {
                    var o = this,
                        n = o.formData.sym,
                        s = !1;

                    function l(e) {
                        t.$evalAsync(function() {
                            o.formData.sym = e ? null : o.formData.sym || n, o.searchResultsVisible = !1, o.searchResults = null
                        })
                    }

                    function c() {
                        setTimeout(function() {
                            document.activeElement !== document.querySelector(".js-technical-chart-symbol-selector-input") && o.formData.sym && o.searchResultsVisible && document.activeElement !== document.querySelector(".js-technical-chart-symbol-form-in-base") && (document.activeElement.blur(), l())
                        }, 300)
                    }
                    o.searchResultsVisible = !1, o.searchResults = null, o.invalidSymbol = !1, t.$watch(function() {
                        return o.error.symbol
                    }, function(e, t) {
                        null === t && null !== e ? (o.invalidSymbol = !0, a.error("Invalid symbol. Please try again")) : o.invalidSymbol = !1
                    }), t.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        o.formData.sym = t.symbol, n = o.formData.sym
                    }), t.$on("dashboardCurrentSymbolUpdated", function(e, t) {
                        o.formData.sym = t.symbol, n = o.formData.sym
                    }), o.preSymbolEnter = function() {
                        n = o.formData.sym, o.formData.sym = ""
                    }, o.pastSymbolEnter = function() {
                        o.formData.sym = o.formData.sym || n
                    }, o.changeSymbol = function() {
                        if (!s && n !== o.formData.sym) {
                            var t = {
                                symbol: o.formData.sym.toUpperCase(),
                                fields: "symbol,symbolName,symbolType,lastPrice,priceChange,percentChange,highPrice,lowPrice,volume,tradeTime,symbolCode,exchange,sicIndustry,contractName,hasBats,pointValue,unitCode",
                                raw: 1,
                                meta: "field.shortName"
                            };
                            s = !0, i.query(t, "/quotes/get").then(function(t) {
                                t.data && t.data[0] ? (o.searchResultsVisible && l(), o.currentSymbol = t.data[0], console.log("technicalChartSymbolChanged", o.formData.sym), e.$broadcast("technicalChartSymbolChanged", o.formData.sym), e.$broadcast("chartCurrentSymbolChanged", o.formData.sym), e.$broadcast("dashboardHeaderSymbolChanged", o.currentSymbol), console.log("asdasdas", o.currentSymbol), e.$broadcast("dashboardSymbolChangedFromSelector", o.currentSymbol), n = o.formData.sym, o.invalidSymbol = !1) : t.errors && (o.invalidSymbol = !0, a.error("Invalid symbol. Please try again"))
                            }).finally(function() {
                                s = !1
                            })
                        }
                    }, o.selectSymbol = function(e) {
                        o.formData.sym = e.symbol, o.changeSymbol(), o.searchResultsVisible = !1, o.searchResults = null
                    }, o.useSearch = function() {
                        var e;
                        o.formData.sym ? (e = o.formData.sym, r.connect().then(function() {
                            r.getSearchResults(e).then(function(e) {
                                var a;
                                e.instruments.length > 0 ? (a = e.instruments, o.selectedItemIndex = null, o.searchResults = a, o.searchResultsVisible = !0) : o.searchResults = null, t.$digest()
                            })
                        })) : l(!0)
                    }, o.keyboardNavigation = function(t) {
                        switch (t.keyCode) {
                            case 38:
                                e.$broadcast("autoCompleteMoveToPrevItem");
                                break;
                            case 40:
                                e.$broadcast("autoCompleteMoveToNextItem");
                                break;
                            case 13:
                                e.$broadcast("autoCompleteUseSelectedItem")
                        }
                    }, document.querySelector(".js-technical-chart-symbol-selector-input").addEventListener("focus", function() {
                        window.addEventListener("click", c)
                    }), document.querySelector(".js-technical-chart-symbol-selector-input").addEventListener("blur", function() {
                        setTimeout(function() {
                            window.removeEventListener("click", c)
                        }, 1e3)
                    })
                }],
                controllerAs: "$ctrl",
                template: a("/j0q")
            }
        }
    },
    HD4v: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiConfig: "=",
                    hideWatchlist: "=",
                    type: "@",
                    filters: "=",
                    savedScreener: "=",
                    popularScreener: "="
                },
                controller: ["$rootScope", "$modal", "Notification", "authService", "$window", "utils", "textFactory", "screenerPermissionService", "$scope", "events", function(e, t, i, r, o, n, s, l, c, d) {
                    var u = this;
                    c.$on("onBarchartDataTableRendered", function(e, t) {
                        u.total = t.data && t.data.length ? t.total : 0
                    }), c.$on(d.ON_SCREENER_CLEAR, function() {
                        u.savedScreener = null, u.popularScreener = null
                    }), c.$watch(function() {
                        return u.savedScreener
                    }, function(e) {
                        e && (u.popularScreener = null)
                    }), c.$on("popularScreenerApplied", function(e, t) {
                        u.popularScreener = t
                    }), u.saveAsWatchlist = function() {
                        if (r.isLoggedIn()) return !!l.checkPermissions() && void t.open({
                            template: a("sOXp"),
                            controller: "Screener.ModalSaveAsWatchlictCtrl",
                            controllerAs: "$ctrl",
                            resolve: {
                                apiConfig: function() {
                                    return u.apiConfig
                                }
                            },
                            windowClass: "bc-light-modal"
                        }).result.then(function(e) {
                            if (!0 === e.success && e.name) {
                                var t = n.buildUrl(o.config.routes["my.watchlist"], {
                                    watchlist: e.id
                                });
                                i.success(s("SCREENER_SAVE_AS_WATCHLIST", {
                                    link: t,
                                    name: e.name
                                }))
                            }
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("owUM")
            }
        }
    },
    "HEC/": function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["$rootScope", "authRouteService", "bcModalLoginSrv", "bcSavePreferencesService", "authService", "$location", "bcAgreementService", "authRedirectService", "Notification", "$window", function(e, t, a, i, r, o, n, s, l, c) {
            var d = null;
            if (c.previousPage = null, e.$on("$locationChangeStart", function() {
                    -1 === window.location.pathname.indexOf("education") && (c.previousPage = window.location.pathname), t.match() || (d = o.url())
                }), e.$on("$locationChangeSuccess", function() {
                    if (t.match(d) && (!r.isLoggedIn() || t.isAllowed())) {
                        if ("login" === t.getState() && c.config.isLoginPage && !o.search().ref) return void(c.config.isLoginPage = !1);
                        if ("register" === t.getState() && c.config.isRegisterPage) return void(c.config.isRegisterPage = !1);
                        a.status.modal === a.status.statuses.STATUS_CLOSED && e.$broadcast("authModalHasBeenOpened"), "forgot" === t.getState() ? a.openForgotModal(t.getRef(), function() {
                            s.setRedirectPath(null)
                        }) : "register" === t.getState() ? a.openRegisterModal(t.getRef(), function() {
                            s.setRedirectPath(null)
                        }) : a.open(t.getState(), t.getRef(), function() {
                            s.setRedirectPath(null)
                        })
                    }!1
                }), window.config.firstLogin && n.showModal(), window.config.showAnnualAgreement) "/terms" !== o.path() && n.showAnnualModal(window.config.annualAgreementDate);
            else if (window.config.showWelcomeNotification) {
                var u = 'Welcome to Barchart.com. Thanks for signing up! <a target="_self" href="' + window.config.routes["my.sitePreferences"] + '">Click here to set Site Preferences.</a>';
                l.success({
                    message: u,
                    delay: 5e3
                }), i.savePreference("welcomeNotificationShown", 1)
            }
            window.config.reactivatedUser && (e.modalClass = "reactivate", l.success({
                message: "Your account has been reactivated.",
                positionX: "center",
                delay: 4e3
            }), setTimeout(function() {
                e.modalClass = ""
            }, 4500))
        }])
    },
    HEgv: function(e, t) {
        e.exports = '<div class="barchart-symbol-widget widget-commodity-profile"> <div class=barchart-symbol-widget__title> Commodity Profile <a data-ng-href="[[ \'/futures/quotes/\' + symbol + \'/profile\' ]]" class="bc-button small white-with-border right" target=_blank> Full Profile </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href="[[ \'/futures/quotes/\' + symbol + \'/profile\' ]]" target=_blank> <div class=barchart-symbol-widget__columns> <div class=barchart-symbol-widget__left-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.left | filter:filterEmptyRows"> <span class=right data-ng-class="{\'multi-string\': item.multiString}"> <div data-ng-class="{\'highlight\': item.colorize}"> [[ ::data[item.field] ]] </div> </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> <div class=barchart-symbol-widget__right-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.right | filter:filterEmptyRows"> <span class=right data-ng-class="{\'multi-string\': item.multiString}"> <div data-ng-class="{\'highlight\': item.colorize}"> [[ ::data[item.field] ]] </div> </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> </div> </a> </div>'
    },
    HHSU: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = "optionType,strikePrice,openPrice,highPrice,lowPrice,lastPrice,percentChange,volume,openInterest,volatility";
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    settings: "="
                },
                link: function(a) {
                    a.dataTablesContent = null, a.dataLoading = !1;
                    var o = !1,
                        n = a.settings.api.fields;

                    function s(r) {
                        if (!o) return !1;
                        a.dataLoading = !0, e.getSbsData(r).then(function(e) {
                            a.dataTablesContent = t.processData(e, "strikePrice"), i.$broadcast("customHandlerUpdate", {
                                tableName: "sidebyside",
                                data: a.dataTablesContent[0].data,
                                meta: a.dataTablesContent[0].meta.field
                            }), a.dataLoading = !1
                        })
                    }
                    i.$broadcast("updateViewForDownload", "stacked"), a.$on("onExpirationDateChanged", function(e, t) {
                        var i = angular.copy(a.settings.api);
                        i.expirationDate = t.data, a.dataTablesContent = {}, s(i)
                    }), a.$on("onOptionsViewsChanged", function(e, t) {
                        "sbs_ohl" === t.data || "stacked_ohl" === t.data ? a.settings.api.fields = r : a.settings.api.fields = n, "sbs" === t.data || "sbs_ohl" === t.data ? (o = !0, s(a.settings.api)) : o = !1
                    }), a.$on("initQuotesSbs", function(e, t) {
                        o = !0;
                        var i = angular.copy(a.settings.api);
                        t.expiration && (i.expirationDate = t.expiration), "sbs_ohl" === t.view ? i.fields = r : i.fields = n, t.moneyness && "allRows" === t.moneyness ? a.settings.options.handleContent = "" : a.settings.options.handleContent = "processContentInMoney", s(i)
                    })
                },
                template: a("M6R/")
            }
        }
        i.$inject = ["optionsQuotesApiFactory", "barchartDatatableGroupedData", "$rootScope"], e.exports = i
    },
    HM0t: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                scope: {},
                template: a("Bp9+"),
                controller: ["$scope", "bcInlineData", "quotesService", "utils", function(e, t, a, i) {
                    e.sectorSymbol = null, e.setColor = i.setColor, e.$on("filterChange", function(i, r) {
                        "quoteSectors" === r.name && (e.sectorSymbol = null, t.updateInlineDataForSymbol(r.value, {
                            extraFields: "highPrice1y,lowPrice1y,weightedAlpha"
                        }).then(function(t) {
                            e.sectorSymbol = r.value, e.highPrice1y = t.data[0].highPrice1y, e.lowPrice1y = t.data[0].lowPrice1y, e.weightedAlpha = t.data[0].weightedAlpha, e.symbol = t.data[0].symbol, e.symbolSector = a.getSector(t.data[0].symbolType)
                        }))
                    })
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    HPJQ: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o = this;
            o.saving = !1, o.name = null, o.close = function() {
                e.dismiss()
            }, o.addGroup = function(n) {
                n.$invalid || (o.saving = !0, a.createGroup({
                    name: o.name
                }).then(function(a) {
                    var o = angular.copy(a.data[0]);
                    o.charts = [];
                    var n = r.htmlEntities(o.name);
                    i.$broadcast("myChartsNewGroupCreated", o), t.success("Group " + n + " has been created."), e.close()
                }).catch(function() {
                    o.saving = !1, e.close(), t.error("Something went wrong, please try again.")
                }))
            }
        }
        i.$inject = ["$modalInstance", "Notification", "myChartsApiService", "$rootScope", "utils"], e.exports = i
    },
    HQSC: function(e, t) {
        e.exports = '<div class=chart-wrapper> <div class="chart-header clearfix"> <span class=right> 52 WK High <span class=up>[[ highPrice1y ]]</span> 52 WK Low <span class=down>[[ lowPrice1y ]]</span> </span> </div> <div class=chart-content data-ng-if=!loading> <a target=_self data-bc-full-chart-link data-href-by-click=true data-symbol="[[ symbol ]]" data-sector="[[ symbolSector ]]" data-default-chart=interactive> <simple-chart class=symbol-competitors-chart-canvas data-symbol="[[ symbol ]]" data-period=P1Y data-aggregation-unit=Day data-aggregation-size=1 data-x-axis-tick-pixel-interval=100 data-x-axis-gridlines-visible=false data-x-axis-crosshair-enabled=true data-y-axis-crosshair-enabled=true data-y-axis-visible=true data-y-axis-show-last=true data-show-previous=false data-style=Area data-primary-color=rgba(79,151,193,0.30) data-tooltip-visible=true data-y-axis-gridlines-visible=true data-plot-events-earnings=true></simple-chart> </a> </div> </div>'
    },
    HQv3: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "A",
                attrs: {
                    filename: "@",
                    selector: "@",
                    path: "@"
                },
                link: function(o, n, s) {
                    var l = {};
                    s.path = s.path.replace("/", ""), n.bind("click", function() {
                        html2canvas($(s.selector), {
                            onrendered: function(e) {
                                l.title = s.filename, t.convertImageAndUpload(e.toDataURL(), "base64", "widget").then(function(t) {
                                    !0 === t.success && (l.image = t.data, l.data = e.toDataURL(), l.path = s.path, l.redirectUrl = r.location.origin + i.route(r.config.routes["home.sharedWidget"], {
                                        image: l.image,
                                        path: s.path
                                    }) + "?t=" + encodeURIComponent(l.title), c())
                                })
                            }
                        })
                    });
                    var c = function() {
                        return e.open({
                            template: a("4P0x"),
                            controller: "bcShareImageCtrl",
                            windowClass: "technical-chart-clear-settings technical-chart-share-modal",
                            resolve: {
                                imageData: function() {
                                    return l
                                }
                            }
                        }).result
                    }
                }
            }
        }
        i.$inject = ["$modal", "bcShareService", "utils", "$window"], e.exports = i
    },
    HRO4: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.time = "intraday", e.view = "merged";
            var i = a.filterName("futuresOptionsView");
            i && (e.view = i), e.$on("onFuturesOptionsViewsChanged", function(t, a) {
                a.data && (e.view = a.data)
            }), e.$on("onFuturesOptionsIntervalChanged", function(t, a) {
                a.data && (e.time = a.data)
            }), e.resetToolbarSettings = function() {
                "merged" !== e.view && (t.$broadcast("futuresOptionsViewUpdate", {
                    data: "merged"
                }), a.filterName("futuresOptionsView", "merged")), "daily" !== e.time && (t.$broadcast("futuresOptionsTimeUpdate", {
                    data: "daily"
                }), a.filterName("futuresOptionsTime", "daily"))
            }
        }
        i.$inject = ["$scope", "$rootScope", "barchartDatatableFilterUrl"], e.exports = i
    },
    HX3x: function(e, t, a) {
        "use strict";
        angular.module("MyScreeners", []).constant("screenerNames", a("5u4i")).directive("myScreenerList", a("Sh0l")).controller("addNewScreenerCtrl", a("anFZ")).controller("EditScreenerCtrl", a("QfW6"));
        e.exports = {
            enable: !0,
            name: "MyScreeners"
        }
    },
    Hb8W: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u, p, m) {
            var h = {
                    ONE_DAY: "1d",
                    FIVE_DAYS: "5d",
                    ONE_MONTH: "1m",
                    THREE_MONTH: "3m",
                    SIX_MONTH: "6m",
                    ONE_YEAR: "1y",
                    FIVE_YEARS: "5y",
                    TWENTY_FIVE_YEARS: "25y"
                },
                g = [n.FREQUENCY, n.MINUTES_PERIOD, n.TIME_PERIOD, n.DATE_FROM, n.DATE_TO];

            function f(e, t) {
                var a = !1;
                return Object.keys(t).forEach(function(i) {
                    if (angular.isObject(t[i]) && !1 === a) {
                        var r = !0;
                        if (c.forEach(Object.keys(t[i]), function(a) {
                                if (!~g.indexOf(a)) return !0;
                                if (e.hasOwnProperty(a))
                                    if ("im" === a) {
                                        if (e[a] != t[i][a]) return r = !1, !1
                                    } else if (e[a] !== t[i][a]) return r = !1, !1
                            }), r) return a = i, !1
                    }
                }), a
            }
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    period: "=",
                    formData: "=",
                    symbolSector: "=",
                    currentSymbol: "=",
                    fullScreen: "=",
                    drawChart: "&",
                    chartData: "="
                },
                controller: ["$rootScope", "$scope", function(g, b) {
                    var v = e.isMobileOnly() ? o.quick_chart.mobile : o.quick_chart.desktop;
                    b.periods = a("k71M")(v, h);
                    var y = a("KUQm"),
                        w = y.periodSettings(n, h, b.symbolSector);
                    if (e.isMobileOnly()) {
                        var C = y.mobileSettings(n, h, b.symbolSector);
                        w = c.merge({}, w, C)
                    }
                    b.period = f(b.formData, w), b.chartTemplatesUrl = config.routes["my.customChartTemplates.technical"], b.applyQuickSetting = function(e) {
                            w.hasOwnProperty(e) && (b.period = e, b.appliedChartTemplate = null, b.formData = c.merge(b.formData, w[e]), g.$broadcast("applyTechnicalChartQuickSettings"), s(function() {
                                b.drawChart()
                            }, 0))
                        }, b.applyChartTemplate = function() {
                            if (null === b.appliedChartTemplate) g.$broadcast(d.ON_TECHNICAL_CHART_DEFAULT_TEMPLATE_SET);
                            else {
                                var e = angular.copy(b.appliedChartTemplate);
                                g.$broadcast("applyTemplate", e)
                            }
                        }, b.saveMyChart = function() {
                            if (!t.isLoggedIn() || t.isLoggedIn() && !t.getUserData().is_premier) r.showPremier("myCharts");
                            else {
                                var e = t.getUserData() || {};
                                "interactive" === (e.preferences ? e.preferences.charts_style : "interactive") ? m.openWarningModal(): (p.setSymbolData(b.currentSymbol), u.openSaveMyChartModal(!1, "technical"))
                            }
                        }, b.$on("drawChartHasBeenCalled", function() {
                            b.period = f(b.formData, w)
                        }), b.$on("clearSettings", function() {
                            b.period = "6m", b.appliedChartTemplate = null
                        }), b.$on("templateSaved", function(e, t) {
                            var a;
                            (a = c.find(b.userChartTemplates, "id", t[0].id)) ? c.merge(a, t[0]): (b.user.custom_chart_templates.push(t[0]), b.appliedChartTemplate = t[0])
                        }), b.$on("templateChanged", function(e) {
                            b.appliedChartTemplate = null
                        }), b.$on("setAppliedTemplate", function(e, t) {
                            var a;
                            (a = c.find(b.userChartTemplates, "id", +t.id)) && (b.appliedChartTemplate = a)
                        }), b.userChartTemplates = [], b.openFullScreen = function() {
                            var t = e.route(i.config.routes["quotes.fullTechnicalChart"], {
                                    sector: b.symbolSector,
                                    symbol: b.currentSymbol.symbol
                                }),
                                a = ["height=" + screen.height, "width=" + screen.width, "fullscreen=yes", "resizable=yes", "scrollbars=yes"].join(",");
                            setTimeout(function() {
                                i.open(t + i.location.search, "", a).moveTo(0, 0)
                            }, 0)
                        }, b.toggleChartForm = function() {
                            angular.element(document.querySelector(".chart-form-wrapper")).toggleClass("visible")
                        },
                        function() {
                            if (t.isLoggedIn()) {
                                b.user = t.getUserData(), b.userChartTemplates = b.user.custom_chart_templates;
                                var e, a = l.getLocationPathObject();
                                if (Object.keys(a).length) return;
                                b.user.preferences.charts_template && (e = c.find(b.userChartTemplates, "id", +b.user.preferences.charts_template)) && (b.appliedChartTemplate = e, s(function() {
                                    b.applyChartTemplate()
                                }, 0))
                            }
                        }()
                }],
                template: a("t+nV")
            }
        }
        i.$inject = ["utils", "authService", "$window", "bcModalLoginSrv", "technicalChartLabels", "technicalChartFields", "$timeout", "locationService", "_", "events", "dashboardModalsService", "dashboardSymbolStorage", "myChartModalService"], e.exports = i
    },
    HcB1: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <div class=modal-header> Profit/Loss <i class="bc-glyph-times form-close right" data-ng-click=close()></i> </div> <form class="bc-modal-content-inner bc-form" novalidate> <div class=calc-tools-form__fields-row> <label for=calc-tools-form__input-entry-price class=calc-tools-form__input-label>Entry Price:</label> <input type=text id=calc-tools-form__input-entry-price class=calc-tools-form__input data-bc-auto-focus="" data-ng-model=formData.entryPrice data-ng-keypress=unsubscribePickListener() data-ng-change=calculateResult() data-ng-focus=listenEntryPrice()> </div> <div class=calc-tools-form__fields-row> <label for=calc-tools-form__input-exit-price class=calc-tools-form__input-label>Exit Price:</label> <input type=text id=calc-tools-form__input-exit-price class=calc-tools-form__input data-ng-model=formData.exitPrice data-ng-change=calculateResult() data-ng-keypress=unsubscribePickListener() data-ng-focus=listenExitPrice()> </div> <div class=calc-tools-form__fields-row> <label for=calc-tools-form__input-contracts class=calc-tools-form__input-label>Nbr Contracts:</label> <input type=number id=calc-tools-form__input-contracts class=calc-tools-form__input data-ng-model=formData.contracts data-ng-change=calculateResult()> </div> <div class=calc-tools-form__fields-row> <div class=input-radio> <input type=radio data-ng-model=formData.direction data-ng-change=calculateResult() name=toolProfitLossTypeLongRadio value=Long id=tool-profit-loss-direction-long-radio> <label for=tool-profit-loss-direction-long-radio> Long <span></span> </label> </div> <div class=input-radio> <input type=radio data-ng-model=formData.direction data-ng-change=calculateResult() name=toolProfitLossTypeShortRadio value=Short id=tool-profit-loss-direction-short-radio> <label for=tool-profit-loss-direction-short-radio> Short <span></span> </label> </div> </div> <div class=calc-tools-form__fields-row> <div class=calc-tools-form__results-box> Profit/Loss: <span class=right data-ng-class="{\'up\': formData.result > 0, \'down\': formData.result <= 0}" data-ng-show="formData.result !== null">$[[ formData.result | number: 2 ]]</span> </div> </div> <div class=calc-tools-form__fields-row> <bc-checkbox data-cb-model=formData.showPrices data-cb-label="\'Show Prices\'"></bc-checkbox> </div> <div class=calc-tools-form__fields-row> <span class=annotation-modal__color-selector-label>Price Lines:</span> <bc-color-picker data-color-model=formData.line.color></bc-color-picker> <bc-line-width-selector data-line-width-model=formData.line.width></bc-line-width-selector> </div> <div class=calc-tools-form__fields-row> <div class="bc-dropdown styled"> <select data-ng-options="line.value as line.label for line in lineTypes" data-ng-model=formData.line.dashStyle></select> </div> </div> <div class="button-block text-center margin-top-20"> <a class="bc-button red" data-ng-if=annotationEditMode data-ng-click=removeAnnotation()>Delete</a> <button class="bc-button ok light-blue" data-ng-disabled="!formData.entryPrice || !formData.exitPrice" data-ng-click=confirm()>Add</button> </div> </form> </div>'
    },
    HhN8: function(e, t, a) {
        (function(e) {
            var t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            };
            ! function(a) {
                "use strict";
                var i, r = Object.prototype,
                    o = r.hasOwnProperty,
                    n = "function" == typeof Symbol ? Symbol : {},
                    s = n.iterator || "@@iterator",
                    l = n.asyncIterator || "@@asyncIterator",
                    c = n.toStringTag || "@@toStringTag",
                    d = "object" === t(e),
                    u = a.regeneratorRuntime;
                if (u) d && (e.exports = u);
                else {
                    (u = a.regeneratorRuntime = d ? e.exports : {}).wrap = C;
                    var p = "suspendedStart",
                        m = "suspendedYield",
                        h = "executing",
                        g = "completed",
                        f = {},
                        b = {};
                    b[s] = function() {
                        return this
                    };
                    var v = Object.getPrototypeOf,
                        y = v && v(v(M([])));
                    y && y !== r && o.call(y, s) && (b = y);
                    var w = D.prototype = x.prototype = Object.create(b);
                    k.prototype = w.constructor = D, D.constructor = k, D[c] = k.displayName = "GeneratorFunction", u.isGeneratorFunction = function(e) {
                        var t = "function" == typeof e && e.constructor;
                        return !!t && (t === k || "GeneratorFunction" === (t.displayName || t.name))
                    }, u.mark = function(e) {
                        return Object.setPrototypeOf ? Object.setPrototypeOf(e, D) : (e.__proto__ = D, c in e || (e[c] = "GeneratorFunction")), e.prototype = Object.create(w), e
                    }, u.awrap = function(e) {
                        return {
                            __await: e
                        }
                    }, T(_.prototype), _.prototype[l] = function() {
                        return this
                    }, u.AsyncIterator = _, u.async = function(e, t, a, i) {
                        var r = new _(C(e, t, a, i));
                        return u.isGeneratorFunction(t) ? r : r.next().then(function(e) {
                            return e.done ? e.value : r.next()
                        })
                    }, T(w), w[c] = "Generator", w[s] = function() {
                        return this
                    }, w.toString = function() {
                        return "[object Generator]"
                    }, u.keys = function(e) {
                        var t = [];
                        for (var a in e) t.push(a);
                        return t.reverse(),
                            function a() {
                                for (; t.length;) {
                                    var i = t.pop();
                                    if (i in e) return a.value = i, a.done = !1, a
                                }
                                return a.done = !0, a
                            }
                    }, u.values = M, $.prototype = {
                        constructor: $,
                        reset: function(e) {
                            if (this.prev = 0, this.next = 0, this.sent = this._sent = i, this.done = !1, this.delegate = null, this.method = "next", this.arg = i, this.tryEntries.forEach(A), !e)
                                for (var t in this) "t" === t.charAt(0) && o.call(this, t) && !isNaN(+t.slice(1)) && (this[t] = i)
                        },
                        stop: function() {
                            this.done = !0;
                            var e = this.tryEntries[0].completion;
                            if ("throw" === e.type) throw e.arg;
                            return this.rval
                        },
                        dispatchException: function(e) {
                            if (this.done) throw e;
                            var t = this;

                            function a(a, r) {
                                return s.type = "throw", s.arg = e, t.next = a, r && (t.method = "next", t.arg = i), !!r
                            }
                            for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                                var n = this.tryEntries[r],
                                    s = n.completion;
                                if ("root" === n.tryLoc) return a("end");
                                if (n.tryLoc <= this.prev) {
                                    var l = o.call(n, "catchLoc"),
                                        c = o.call(n, "finallyLoc");
                                    if (l && c) {
                                        if (this.prev < n.catchLoc) return a(n.catchLoc, !0);
                                        if (this.prev < n.finallyLoc) return a(n.finallyLoc)
                                    } else if (l) {
                                        if (this.prev < n.catchLoc) return a(n.catchLoc, !0)
                                    } else {
                                        if (!c) throw new Error("try statement without catch or finally");
                                        if (this.prev < n.finallyLoc) return a(n.finallyLoc)
                                    }
                                }
                            }
                        },
                        abrupt: function(e, t) {
                            for (var a = this.tryEntries.length - 1; a >= 0; --a) {
                                var i = this.tryEntries[a];
                                if (i.tryLoc <= this.prev && o.call(i, "finallyLoc") && this.prev < i.finallyLoc) {
                                    var r = i;
                                    break
                                }
                            }
                            r && ("break" === e || "continue" === e) && r.tryLoc <= t && t <= r.finallyLoc && (r = null);
                            var n = r ? r.completion : {};
                            return n.type = e, n.arg = t, r ? (this.method = "next", this.next = r.finallyLoc, f) : this.complete(n)
                        },
                        complete: function(e, t) {
                            if ("throw" === e.type) throw e.arg;
                            return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), f
                        },
                        finish: function(e) {
                            for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                                var a = this.tryEntries[t];
                                if (a.finallyLoc === e) return this.complete(a.completion, a.afterLoc), A(a), f
                            }
                        },
                        catch: function(e) {
                            for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                                var a = this.tryEntries[t];
                                if (a.tryLoc === e) {
                                    var i = a.completion;
                                    if ("throw" === i.type) {
                                        var r = i.arg;
                                        A(a)
                                    }
                                    return r
                                }
                            }
                            throw new Error("illegal catch attempt")
                        },
                        delegateYield: function(e, t, a) {
                            return this.delegate = {
                                iterator: M(e),
                                resultName: t,
                                nextLoc: a
                            }, "next" === this.method && (this.arg = i), f
                        }
                    }
                }

                function C(e, t, a, i) {
                    var r = t && t.prototype instanceof x ? t : x,
                        o = Object.create(r.prototype),
                        n = new $(i || []);
                    return o._invoke = function(e, t, a) {
                        var i = p;
                        return function(r, o) {
                            if (i === h) throw new Error("Generator is already running");
                            if (i === g) {
                                if ("throw" === r) throw o;
                                return L()
                            }
                            for (a.method = r, a.arg = o;;) {
                                var n = a.delegate;
                                if (n) {
                                    var s = P(n, a);
                                    if (s) {
                                        if (s === f) continue;
                                        return s
                                    }
                                }
                                if ("next" === a.method) a.sent = a._sent = a.arg;
                                else if ("throw" === a.method) {
                                    if (i === p) throw i = g, a.arg;
                                    a.dispatchException(a.arg)
                                } else "return" === a.method && a.abrupt("return", a.arg);
                                i = h;
                                var l = S(e, t, a);
                                if ("normal" === l.type) {
                                    if (i = a.done ? g : m, l.arg === f) continue;
                                    return {
                                        value: l.arg,
                                        done: a.done
                                    }
                                }
                                "throw" === l.type && (i = g, a.method = "throw", a.arg = l.arg)
                            }
                        }
                    }(e, a, n), o
                }

                function S(e, t, a) {
                    try {
                        return {
                            type: "normal",
                            arg: e.call(t, a)
                        }
                    } catch (e) {
                        return {
                            type: "throw",
                            arg: e
                        }
                    }
                }

                function x() {}

                function k() {}

                function D() {}

                function T(e) {
                    ["next", "throw", "return"].forEach(function(t) {
                        e[t] = function(e) {
                            return this._invoke(t, e)
                        }
                    })
                }

                function _(e) {
                    var a;
                    this._invoke = function(i, r) {
                        function n() {
                            return new Promise(function(a, n) {
                                ! function a(i, r, n, s) {
                                    var l = S(e[i], e, r);
                                    if ("throw" !== l.type) {
                                        var c = l.arg,
                                            d = c.value;
                                        return d && "object" === (void 0 === d ? "undefined" : t(d)) && o.call(d, "__await") ? Promise.resolve(d.__await).then(function(e) {
                                            a("next", e, n, s)
                                        }, function(e) {
                                            a("throw", e, n, s)
                                        }) : Promise.resolve(d).then(function(e) {
                                            c.value = e, n(c)
                                        }, s)
                                    }
                                    s(l.arg)
                                }(i, r, a, n)
                            })
                        }
                        return a = a ? a.then(n, n) : n()
                    }
                }

                function P(e, t) {
                    var a = e.iterator[t.method];
                    if (a === i) {
                        if (t.delegate = null, "throw" === t.method) {
                            if (e.iterator.return && (t.method = "return", t.arg = i, P(e, t), "throw" === t.method)) return f;
                            t.method = "throw", t.arg = new TypeError("The iterator does not provide a 'throw' method")
                        }
                        return f
                    }
                    var r = S(a, e.iterator, t.arg);
                    if ("throw" === r.type) return t.method = "throw", t.arg = r.arg, t.delegate = null, f;
                    var o = r.arg;
                    return o ? o.done ? (t[e.resultName] = o.value, t.next = e.nextLoc, "return" !== t.method && (t.method = "next", t.arg = i), t.delegate = null, f) : o : (t.method = "throw", t.arg = new TypeError("iterator result is not an object"), t.delegate = null, f)
                }

                function E(e) {
                    var t = {
                        tryLoc: e[0]
                    };
                    1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t)
                }

                function A(e) {
                    var t = e.completion || {};
                    t.type = "normal", delete t.arg, e.completion = t
                }

                function $(e) {
                    this.tryEntries = [{
                        tryLoc: "root"
                    }], e.forEach(E, this), this.reset(!0)
                }

                function M(e) {
                    if (e) {
                        var t = e[s];
                        if (t) return t.call(e);
                        if ("function" == typeof e.next) return e;
                        if (!isNaN(e.length)) {
                            var a = -1,
                                r = function t() {
                                    for (; ++a < e.length;)
                                        if (o.call(e, a)) return t.value = e[a], t.done = !1, t;
                                    return t.value = i, t.done = !0, t
                                };
                            return r.next = r
                        }
                    }
                    return {
                        next: L
                    }
                }

                function L() {
                    return {
                        value: i,
                        done: !0
                    }
                }
            }(function() {
                return this
            }() || Function("return this")())
        }).call(t, a("3IRH")(e))
    },
    Hkcv: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            var l = this,
                c = r.getUserData() || {},
                d = c.preferences ? c.preferences.charts_style : "interactive";
            l.saving = !1, l.model = {
                symbol: e.symbol,
                name: e.name,
                group: angular.copy(t)
            }, l.close = function() {
                a.dismiss()
            }, l.save = function(r) {
                r.$invalid || (l.saving = !0, i.updateChart(e.id, {
                    name: l.model.name,
                    group_id: l.model.group.id
                }).then(function(i) {
                    o.success("Chart has been added renamed to " + l.model.name), t.id !== l.model.group.id ? (n.removeChart(e.id, t.id, d), n.addChart(l.model.group.id, i.data, d), s.$broadcast("myChartMovedToAnotherGroup", {
                        oldGroup: angular.copy(t),
                        newGroup: angular.copy(l.model.group),
                        chart: angular.copy(i.data)
                    })) : (n.replaceChart(e.id, t.id, d, i.data), s.$broadcast("myChartRenamed", {
                        chart: angular.copy(i.data)
                    })), a.close("OK")
                }).catch(function() {
                    l.saving = !1, o.error("Something went wrong. Please try again.")
                }))
            }
        }
        i.$inject = ["chart", "group", "$modalInstance", "myChartsApiService", "authService", "Notification", "userMyChartStorageService", "$rootScope"], e.exports = i
    },
    Homj: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {},
                controller: ["interactiveChartPeriodSizeConfig", "dashboardGridSettings", "$scope", "dashboardGridChartApi", "bcChartFactory", "utils", "$rootScope", function(e, t, a, i, r, o, n) {
                    var s = this;
                    s.periodSizes = e.periodSizes, s.aggregation = t.getChartSettings().aggregation, s.period = t.getChartSettings().period, t.getChartSettings().range;
                    var l = s.aggregation.size;

                    function c() {
                        t.getSymbolsData().forEach(function(e) {
                            var a = r.getChart(e.symbol);
                            if (i.changeAggregation(a, {
                                    size: s.aggregation.size
                                }), t.setAggregationSettings(s.aggregation), "CUSTOM" !== s.period) i.changePeriod(a, s.period);
                            else if (n && n.from) {
                                var n = {
                                    from: o.getUTCFromTime(n.from)
                                };
                                n.to && (n.to = o.getUTCToTime(n.to)), i.changeRange(a, n)
                            }
                        }), t.resetRangeSettings(), t.setPeriodSettings(s.period), t.setAggregationSettings(s.aggregation), t.saveState(), n.$broadcast("gridChartChanged", {
                            action: "aggregationMinutes",
                            data: s.aggregation.size
                        })
                    }
                    s.updateAggregation = function(e) {
                        e.$valid && l !== s.aggregation.size && (c(), l = s.aggregation.size)
                    }, a.$on("gridChartChanged", function(e, a) {
                        "aggregation" !== a.action && "period" !== a.action || (s.aggregation = t.getChartSettings().aggregation, s.period = t.getChartSettings().period, l = s.aggregation.size, "Intraday" === s.aggregation.unit && "CUSTOM" !== s.period && s.periodSizes[s.period] && s.aggregation.size !== s.periodSizes[s.period] && (s.aggregation.size = s.periodSizes[s.period], c())), "fullAggregation" !== a.action && "template" !== a.action && "aggregationAndPeriod" !== a.action || (s.aggregation = t.getChartSettings().aggregation, s.period = t.getChartSettings().period, l = s.aggregation.size)
                    })
                }],
                controllerAs: "$ctrl",
                template: a("slX1")
            }
        }
    },
    HsRP: function(e, t) {
        e.exports = "<div class=bc-flipchart__data-tooltip> <div data-ng-if=!$ctrl.tooltipData.date> Mouseover chart to view prices. </div> <div data-ng-if=$ctrl.tooltipData.date> <span class=main data-ng-bind=$ctrl.tooltipData.date></span> <span class=main data-ng-bind=$ctrl.tooltipData.symbol></span> <span data-ng-show=$ctrl.tooltipBaseData.open> <span>Open:</span> <span data-ng-bind=$ctrl.tooltipBaseData.open></span> </span> <span data-ng-show=$ctrl.tooltipBaseData.high> <span>High:</span> <span data-ng-bind=$ctrl.tooltipBaseData.high></span> </span> <span data-ng-show=$ctrl.tooltipBaseData.low> <span>Low:</span> <span data-ng-bind=$ctrl.tooltipBaseData.low></span> </span> <span data-ng-show=$ctrl.tooltipBaseData.close> <span>Close:</span> <span data-ng-bind=$ctrl.tooltipBaseData.close></span> </span> <span data-ng-show=$ctrl.tooltipBaseData.Volume> <span>Volume:</span> <span data-ng-bind=$ctrl.tooltipBaseData.Volume></span> </span> <span data-ng-repeat=\"(key, value) in $ctrl.tooltipData\"> <span data-ng-hide=\"key === 'date' || key === 'symbol'\">[[ key | ucfirst ]]:</span> <span data-ng-hide=\"key === 'date' || key === 'symbol'\" data-ng-bind=value></span> </span> </div> </div>"
    },
    Hvc5: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.close = function() {
                t.dismiss()
            }, e.ref = a, e.isPremier = i
        }
        i.$inject = ["$scope", "$modalInstance", "ref", "isPremier"], e.exports = i
    },
    HwnX: function(e, t, a) {
        "use strict";
        var i = "Performance";
        angular.module(i, []).controller(i + ".performanceCtrl", a("S5Gc")).constant("performanceConfig", a("Ej22")).factory("performanceApiFactory", a("f10U"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "I/2d": function(e, t, a) {
        "use strict";
        var i = "QuoteOverview";
        angular.module(i, []).controller(i + ".quoteOverviewCtrl", a("+Eaz")).controller("QuoteOverview.ChartCtrl", a("2fX1")).directive("quoteOverviewQuickSettings", a("Joy1"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "I/Pl": function(e, t, a) {
        "use strict";

        function i(e) {
            var t = ["$scope", function(t) {
                t.isMobile = function() {
                    return !!(window.innerWidth <= 768 || e.isMobileOnly())
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                template: a("3EYg"),
                controller: t
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    I34Y: function(e, t) {
        e.exports = '<div class=bc-dropdown-flexible> <a data-ng-if=!isMobile class=bc-dropdown-flexible-toggle data-ng-click=handleClick($event) data-dropdown-toggle="#[[ ::dropdownId ]]"> <span data-ng-show=label>[[ label ]]</span> <img class=image-preview data-ng-src="[[ labelImg ]]" data-ng-show=labelImg> <i data-ng-show=labelFont class="icon-glypth [[ labelFont ]]"></i> <i class="bc-glyph-chevron-down bc-dropdown-flexible-arrow"></i> </a> <a data-ng-if=isMobile class="bc-dropdown-flexible-toggle js-bc-dropdown-flexible-toggle"> <span data-ng-show=label>[[ label ]]</span> <img class=image-preview data-ng-src="[[ labelImg ]]" data-ng-show=labelImg> <i data-ng-show=labelFont class="icon-glypth [[ labelFont ]]"></i> <i class="bc-glyph-chevron-down bc-dropdown-flexible-arrow"></i> </a> <div id="[[ ::dropdownId ]]" class=f-dropdown> <ng-transclude></ng-transclude> </div> </div>'
    },
    I7d2: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            var s = this;
            n.showDatePickerButtons = !0, s.aggregations = e[o ? "periodsFutures" : "periods"], s.periods = a.periods, s.periodSizes = i.periodSizes;
            var l = t.getChartSettings();
            s.currentChartConfig = l, s.selectedAggregation = {
                aggregation: s.aggregations[0],
                period: s.periods[s.aggregations[0].unit],
                range: l.range
            }, s.aggregations.forEach(function(e, t) {
                l.aggregation.unit !== e.unit || o && l.aggregation.spec !== e.spec || (s.selectedAggregation.aggregation = s.aggregations[t])
            }), s.periods[l.aggregation.unit].forEach(function(e, t) {
                l.period === e.period && (s.selectedAggregation.period = s.periods[l.aggregation.unit][t])
            }), s.selectedAggregation.aggregation.size = l.aggregation.size, s.changeAggregation = function() {
                var e = s.periods[s.selectedAggregation.aggregation.unit],
                    t = _.findIndex(e, {
                        period: s.selectedAggregation.period.period
                    });
                s.selectedAggregation.period = -1 === t ? e[0] : e[t], s.changePeriod()
            }, s.changePeriod = function() {
                "Intraday" === s.selectedAggregation.aggregation.unit && s.periodSizes[s.selectedAggregation.period.period] && (s.selectedAggregation.aggregation.size = s.periodSizes[s.selectedAggregation.period.period])
            }, s.changeRange = function() {
                s.selectedAggregation.range.from || (s.selectedAggregation.range.to = null)
            }, s.modalDismiss = function() {
                r.dismiss()
            }, s.modalConfirm = function() {
                var e = {
                    aggregation: {
                        unit: s.selectedAggregation.aggregation.unit,
                        size: s.selectedAggregation.aggregation.size,
                        spec: s.selectedAggregation.aggregation.spec
                    },
                    period: s.selectedAggregation.period.period,
                    range: s.selectedAggregation.range
                };
                r.close(e)
            }
        }
        i.$inject = ["interactiveChartAggregationConfig", "dashboardGridSettings", "interactiveChartPeriodConfig", "interactiveChartPeriodSizeConfig", "$modalInstance", "isFuture", "$scope"], e.exports = i
    },
    I9u5: function(e, t, a) {
        "use strict";
        e.exports = {
            MAIN: "main",
            TECHNICAL: "technical",
            PERFORMANCE: "performance",
            FUNDAMENTAL: "fundamental",
            CHART: "chart",
            EXTENDED: "extended",
            PORTFOLIO: "portfolio",
            TILE: "tile"
        }
    },
    IBv3: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    type: "@",
                    useDefaultPageLink: "@",
                    displayType: "@",
                    label: "@",
                    dashboardMode: "=",
                    disabled: "="
                },
                controllerAs: "$ctrl",
                controller: [function() {
                    var a = this;
                    a.label = a.label || "Share Chart";
                    var i = "true" === a.useDefaultPageLink;
                    a.openShareModal = function() {
                        if (!0 !== a.disabled) switch (a.type.toLowerCase()) {
                            case "interactive":
                                e.openShareModal(i);
                                break;
                            case "technical":
                                t.openShareModal(i, !!a.dashboardMode)
                        }
                    }
                }],
                template: a("6j/C")
            }
        }
        i.$inject = ["interactiveChartModals", "technicalChartModalsService"], e.exports = i
    },
    IDkH: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.hideConversionMessage = function(r) {
                t.call(i.API_URL + "/preferences", a.PUT, {
                    name: r,
                    value: "1"
                }).then(function(t) {
                    e.messageHidden = !0
                })
            }
        }
        i.$inject = ["$scope", "dataProvider", "httpVerbs", "apiConfig"], e.exports = i
    },
    IEIL: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {
                    title: "@",
                    description: "@",
                    redirectUrl: "=",
                    convertType: "@",
                    chartType: "@",
                    tChartData: "=",
                    loading: "=",
                    setChartPageUrl: "=",
                    dynamicTitle: "=",
                    symbol: "="
                },
                require: "^bcSocialChartShare",
                link: function(a, i, r, o) {
                    e.config.social.facebook.app_id;

                    function n() {
                        var e, i = Object.create(t.facebook.win);
                        a.loading = !0, e = a.dynamicTitle || a.title, o.getImageChart(e, a.description, a.chartType, a.convertType, i, a.tChartData ? a.tChartData.image : null).then(function(t) {
                            o.getRedirectUrl(a.redirectUrl, a.chartType, t, a.setChartPageUrl, a.symbol).then(function(r) {
                                var n = o.getShareLinkPartialEncoded({
                                        title: e,
                                        description: a.description,
                                        image: t,
                                        redirectUrl: r
                                    }),
                                    s = {
                                        winUrl: i.url,
                                        url: n
                                    };
                                i.url = o.getLink(s), window.dataLayer.push({
                                    event: "socialInteraction",
                                    socialNetwork: "Facebook",
                                    socialAction: "Share",
                                    socialTarget: r
                                }), o.share(i), a.loading = !1
                            })
                        })
                    }
                    i.on("click", n), a.$on("$destroy", function() {
                        i.off("click", n)
                    })
                }
            }
        }
        i.$inject = ["$window", "bcShareConfig"], e.exports = i
    },
    IHsK: function(e, t) {
        e.exports = '<div class=bc-tile-view> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div data-ng-show=!dataLoading class="bc-table-wrapper bc-tile-view-table"> <div class=bc-tile-view-block data-ng-repeat="row in data track by $index" data-ng-show=row.symbol data-ng-click=gotoSymbol(row) data-ng-mouseover=hoverIn(row.symbol) data-ng-mouseleave=hoverIn(false)> <div class="bc-tile-view__header text-left"> <a>[[ row.symbol ]]</a> </div> <div class="bc-tile-view__content text-right" data-ng-if="row.lastPrice "> <div class=price>[[ row.lastPrice ]]</div> <div class=price-change data-ng-class=setColor(row.priceChange)>[[ row.priceChange ]]</div> <div class=percent-change data-ng-class=setColor(row.percentChange)>([[ row.percentChange ]])</div> <div class=trade-time>[[ row.tradeTime ]]</div> </div> <div class="bc-tile-view__content text-right" data-ng-if=row.dailyLastPrice> <div class=price>[[ row.dailyLastPrice ]]</div> <div class=price-change data-ng-class=setColor(row.dailyPriceChange)>[[ row.dailyPriceChange ]]</div> <div class=percent-change data-ng-class=setColor(row.dailyPercentChange)>([[ row.dailyPercentChange ]])</div> <div class=trade-time>[[ row.dailyTradeTime ]]</div> </div> <div class="bc-tile-view__chart-block chart-module" data-ng-class=getClass($index) data-ng-if="isHovered && isHovered === row.symbol"> <h4>Daily chart <a class=right data-ng-click="openFullChart(row, $event)"><i class=bc-glyph-long-arrow-ne></i></a></h4> <a target=_self data-ng-href="[[ getChartLink(row) ]]" class=chart-link> <simple-chart class=overview-symbols-charts data-symbol="[[ row.symbol ]]" data-period=P1M data-aggregation-unit=Day data-aggregation-size=1 data-x-axis-tick-pixel-interval=50 data-x-axis-gridlines-visible=false data-x-axis-crosshair-enabled=true data-y-axis-crosshair-enabled=true data-y-axis-visible=true data-y-axis-show-last=true data-show-previous=true data-style=Area data-primary-color=rgba(79,151,193,0.30) data-y-axis-gridlines-visible=false></simple-chart> </a> <div class="footer clearfix"> <div class=text-left>([[ row.symbol]]) [[ row.symbolName ]] </div> <div class=symbol-price data-ng-if=row.priceChange> <span class=price-change data-ng-class=setColor(row.priceChange)>[[ row.priceChange ]]</span> <span class=percent-change data-ng-class=setColor(row.percentChange)>([[ row.percentChange ]])</span> </div> <div class=symbol-price data-ng-if=row.dailyPriceChange> <span class=price-change data-ng-class=setColor(row.dailyPriceChange)>[[ row.dailyPriceChange ]]</span> <span class=percent-change data-ng-class=setColor(row.dailyPercentChange)>([[ row.dailyPercentChange ]])</span> </div> </div> </div> </div> </div> <bc-table-pagination data-ng-if="data.length && !dataLoading && total > data.length" data-total=total data-count=data.count data-pagination=pagination data-show-all=false data-pagination-callback=loadPage()> </bc-table-pagination> </div>'
    },
    IJDV: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "AE",
                replace: !0,
                transclude: !0,
                template: a("qDzW"),
                link: function(e, t, a) {}
            }
        }
        i.$inject = [], e.exports = i
    },
    IPgN: function(e, t, a) {
        "use strict";
        var i = "EodReports";
        angular.module(i, []).controller(i + ".eodReportsCtrl", a("ewnG")).factory("eodReportsApiFactory", a("cbB4"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    IYZT: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: !0,
                controller: ["$scope", "technicalChartModalsService", "authService", "$rootScope", "Notification", "CustomChartTemplatesApiFactory", "_", "technicalChartSettingsService", "technicalChartDefaultSettings", "technicalChartFields", "technicalChartUrlService", "events", "technicalChartConfig", "textFactory", "utils", "technicalChartMappingService", "limitsService", function(e, t, a, i, r, o, n, s, l, c, d, u, p, m, h, g, f) {
                    function b() {
                        e.initializeFormData(), e.formData.forms.basic = n.merge(e.formData.forms.basic, l(e.symbolTypeName, c)), e.chartSettings.currentSetting === p.chartSettings.COMPARISON && (e.formData.forms.comparison = Object.create(s.comparison)), e.formData.forms.basic.studyheight = "150", e.formData.forms.basic.height = "500", h.isMobileOnly() && (e.formData.forms.basic.volume = "0"), g.prepareChartHeightBeforeRequest(e.formData.forms.basic), i.$broadcast("clearSettings", {
                            defaultData: e.formData.forms.basic
                        }), e.changedState = e.changedStates.CLEAR_SETTINGS, e.chartSettings.currentSetting = "basic", e.formData.forms.basic.isSpread && delete e.formData.forms.basic.isSpread;
                        var t = angular.copy(e.formData.forms.basic);
                        h.isMobileOnly() && (e.formData.forms.basic.studyheight = "150", e.formData.forms.basic.height = "500"), e.formData.forms.comparison.axis1 = !1, e.formData.forms.comparison.axis2 = !1, e.formData.forms.comparison.axis3 = !1, e.formData.forms.comparison.overlay1 = null, e.formData.forms.comparison.overlay2 = null, e.formData.forms.comparison.overlay3 = null, delete t.axis1, delete t.axis2, delete t.axis3, delete t.overlay1, delete t.overlay2, delete t.overlay3, delete t.isComparison, delete t.isSpread, e.drawTechnicalChart(t), e.resetState()
                    }
                    e.saveSettingAsTemplate = function() {
                        var l;
                        if (a.isLoggedIn()) {
                            if (f.chartTemplates()) return !1;
                            l = s.getChartSettings(e.formData.forms, e.chartSettings.currentSetting), g.convertChartHeightToModel(l), l.id || t.openCreateTemplateModal(l).result.then(function(t) {
                                return o.saveChartTemplate(t).then(function(a) {
                                    var o = angular.copy(a[0]);
                                    n.merge(o, e.formData.forms.basic), n.merge(t, o), i.$broadcast("templateSaved", a), r.success(m("TECHNICAL_CHART_SAVE_TEMPLATE", {
                                        name: a[0].name
                                    }))
                                })
                            })
                        }
                    }, e.clearSettings = function() {
                        t.openClearSettingsModal().result.then(function(e) {
                            "OK" === e && b()
                        })
                    }, e.$on(u.ON_TECHNICAL_CHART_DEFAULT_TEMPLATE_SET, function() {
                        b()
                    })
                }],
                template: a("o5HS")
            }
        }
    },
    IZVm: function(e, t) {
        e.exports = "<div class=my-chart-quick-links-wrapper> <div class=dropdown-toggler> <i class=bc-glyph-ellipsis-v data-ng-click=$ctrl.showMenu($event)></i> </div> </div> "
    },
    Ioe0: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                scope: {
                    options: "=",
                    symbol: "="
                },
                replace: !0,
                controller: ["$scope", function(e) {}],
                template: a("/0Wh")
            }
        }
        i.$inject = [], e.exports = i
    },
    Is1G: function(e, t) {
        e.exports = '<div class=drop-down-wrapper> <div class="bc-dropdown styled"> <select name=group data-ng-model=$ctrl.model data-ng-change=$ctrl.change() data-ng-options="item.name for item in $ctrl.groups"> <option selected=selected value="" data-ng-show="$ctrl.groups.length === 0">My Charts</option> </select> </div> </div> '
    },
    IvBp: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = this;
            t.miniTableCallbackFunction = function(t) {
                delete t.meta.field.shortName.symbolName, delete t.meta.field.shortName.symbolType, delete t.meta.field.shortName.symbolCode, t.data.forEach(function(t) {
                    t.symbolSector = e.getSector(t.symbolType)
                }), this.content = t
            }, t.miniTable = {
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: []
                    },
                    colorize: ["percentChange"]
                },
                callback: t.miniTableCallbackFunction
            }, t.highsMiniTable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["highPrice", "percentChange"]
                    },
                    colorize: t.miniTable.options.colorize
                },
                callback: t.miniTable.callback
            }, t.lowsMiniTable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["lowPrice", "percentChange"]
                    },
                    colorize: t.miniTable.options.colorize
                },
                callback: t.miniTable.callback
            }
        }
        i.$inject = ["quotesService"], e.exports = i
    },
    Iys4: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = [function() {
                var a = this;
                a.apiData = JSON.parse(e.unescape(a.apiData));
                var r = JSON.parse(a.symbol);
                a.currentSymbol = r, a.quotesService = i, a.data = a.apiData.data[0], a.meta = a.apiData.meta.field.name, a.meta.percentChange1y = "52Wk %Change", a.percent = a.apiData.percent, a.low = a.apiData.low, a.high = a.apiData.high, a.setColor = function(e) {
                    return e && ~e.indexOf("%") ? t.setColor(e) : e
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("Ywcj"),
                controller: r,
                controllerAs: "OverviewCtrl"
            }
        }
        i.$inject = ["_", "utils", "quotesService"], e.exports = i
    },
    J4Gk: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {
                    url: "=",
                    title: "@",
                    description: "@",
                    image: "@",
                    trimDesc: "@",
                    redirectUrl: "@"
                },
                require: "^bcSocialShare",
                link: function(a, i, r, o) {
                    if (o) {
                        var n, s, l = Object.create(t.facebook.win),
                            c = a.image || e.location.origin + t.defaultNewsImage;
                        a.description && (n = o.getDescription(a.description), ("true" === a.trimDesc || a.description.length > o.descLimit) && (n = o.trimDesc(n))), s = a.url ? a.url : o.getShareLinkPartialEncoded({
                            title: a.title,
                            description: n,
                            image: c,
                            redirectUrl: a.redirectUrl || e.location.href
                        });
                        var d = {
                            winUrl: l.url,
                            url: s
                        };
                        l.url = o.getLink(d), i.on("click", u), a.$on("$destroy", function() {
                            i.off("click", u)
                        })
                    }

                    function u() {
                        window.dataLayer.push({
                            event: "socialInteraction",
                            socialNetwork: "Facebook",
                            socialAction: "Share",
                            socialTarget: s
                        }), o.share(l)
                    }
                }
            }
        }
        i.$inject = ["$window", "bcShareConfig"], e.exports = i
    },
    J7WF: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            this.showModal = function() {
                if (!t("bcSurveyShowed")) {
                    var r = e.open({
                        template: a("PqZ3"),
                        controller: ["$scope", function(e) {
                            e.close = function() {
                                r.close()
                            }, e.goToLink = function() {
                                e.close(), window.open(i.config.survey.surveyLink, "_blank")
                            }
                        }],
                        windowClass: "bc-fdn-modal"
                    });
                    r.result.finally(function() {
                        t("bcSurveyShowed", !0, {
                            expires: new Date(i.config.survey.date),
                            path: "/"
                        })
                    })
                }
            }
        }
        i.$inject = ["$modal", "ipCookie", "$window"], e.exports = i
    },
    JCjV: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.formData = a.getChartSettings(), e.chartSizes = i.chartSizes, e.formData.dimensions || (e.formData.dimensions = {
                chartHeight: 650,
                additionalPaneHeight: 50
            }), e.cancel = function() {
                t.dismiss()
            }, e.apply = function() {
                a.setChartSettings(e.formData), t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "interactiveChartSettings", "interactiveChartDimensionsConfig"], e.exports = i
    },
    JETF: function(e, t, a) {
        "use strict";
        var i = "MajorEuropeanFutures";
        angular.module(i, []).controller(i + ".MajorEuropeanFuturesCtrl", a("khNu"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    JHDo: function(e, t) {
        e.exports = '<div class="tooltip in bc-tooltip bc-portfolio-tooltip" data-ng-show=!empty> <div class="tooltip-inner clearfix"> <ul> <li data-ng-if=quantity>Quantity: [[ quantity ]]</li> <li data-ng-if=action>Action: [[ action ]]</li> <li data-ng-if=entry_date>Entry Date: [[ entry_date ]]</li> <li data-ng-if=entry_price>Entry Price: [[ entry_price ]]</li> </ul> <ul> <li data-ng-if=exit_date>Exit Date: [[ exit_date ]]</li> <li data-ng-if=exit_price>Exit Price: [[ exit_price ]]</li> <li data-ng-if=commission>Fees: [[ commission ]]</li> <li data-ng-if=high_alert data-ng-class="{\'bold\' : raw_lastPrice > raw_high_alert }">High Flag: [[ high_alert ]]</li> <li data-ng-if=low_alert data-ng-class="{\'bold\' : raw_lastPrice < raw_low_alert }">Low Flag: [[ low_alert ]]</li> </ul> </div> </div> '
    },
    JIQe: function(e, t, a) {
        "use strict";
        var i = "StocksSectorFinder";
        angular.module(i, []).controller(i + ".StocksSectorFinderCtrl", a("cMke")).factory("stocksSectorFinderFactory", a("NMUD"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    JN7L: function(e, t) {
        e.exports = '<div class=bc-dashboard-ribbon data-ng-class="{\'is-grid-view\': $ctrl.isGridView}"> <div class=grid-wrapper data-ng-if="$ctrl.isGridView && $ctrl.symbols.length && $ctrl.visible && $ctrl.chartStyle === \'interactive\'"> <dashboard-grid-view-control data-allow-grid=$ctrl.allowGrid></dashboard-grid-view-control> </div> <div class=bc-dashboard-ribbon__symbols-scroller-wrapper> <div class="bc-dashboard-ribbon__symbols-scroller hide-for-print" data-ng-show="$ctrl.activeTab !== \'mycharts\'"> <div data-ng-show="$ctrl.symbols.length && $ctrl.visible"> <bc-scrollbar> <ul class=bc-dashboard-ribbon__scroller-list> <li class=bc-dashboard-ribbon__scroller-item data-ng-repeat="item in $ctrl.symbols track by $index" data-ng-class="{\'active\': $ctrl.currentSymbol.symbol === item.symbol && $ctrl.symbolFromList, \'active-highlight\': $ctrl.selectedSymbols.indexOf(item.symbol) !== -1}" data-ng-click=$ctrl.loadChartForSymbol(item) data-scroll-item-id="[[ item.symbol ]]">[[ item.symbol ]]</li> </ul> </bc-scrollbar> </div> </div> <div class="bc-dashboard-ribbon__symbols-scroller hide-for-print" data-ng-show="$ctrl.activeTab === \'mycharts\' && $ctrl.visible"> <div data-ng-if="$ctrl.myCharts && $ctrl.myCharts.length"> <bc-scrollbar> <ul class=bc-dashboard-ribbon__scroller-list> <li class=bc-dashboard-ribbon__scroller-item data-ng-class="{\'active\': chart.id === $ctrl.chartsData.currentChart.id}" data-ng-repeat="chart in $ctrl.myCharts" data-ng-click=$ctrl.loadSavedChart(chart) data-scroll-item-id="[[ chart.id ]]">([[ chart.symbol ]]) [[ chart.name ]]</li> </ul> </bc-scrollbar> </div> </div> </div> </div>'
    },
    JTw3: function(e, t, a) {
        "use strict";
        e.exports = [{
            symbol: "$SPX",
            name: "S&P 500 Index"
        }, {
            symbol: "$ONE",
            name: "S&P 100 Index"
        }, {
            symbol: "$DOWI",
            name: "DOW Industrials"
        }, {
            symbol: "$IUXX",
            name: "Nasdaq 100 Index"
        }, {
            symbol: "$NASX",
            name: " Nasdaq Composite"
        }, {
            symbol: "$NYA",
            name: "NYSE Composite"
        }, {
            symbol: "$XAX",
            name: "AMEX Composite"
        }, {
            symbol: "$XMI",
            name: "Major Market Index"
        }]
    },
    JZM8: function(e, t, a) {
        "use strict";

        function i(e) {
            e.put("bc-datepicker.html", a("3Rwf")), e.put("bc-download-button-error.html", a("twWI")), e.put("bc-notification.html", a("W5lt")), e.put("bc-tooltip.html", a("O/Wv"))
        }
        i.$inject = ["$templateCache"], e.exports = i
    },
    JiBO: function(e, t) {
        e.exports = '<div class=bc-color-picker> <span class=bc-color-picker__label data-ng-show=label> [[ ::label ]]: </span> <div class=bc-color-picker__dropdown data-bc-click-outside=hideColorsSelector()> <div class=bc-color-picker__swatch data-ng-click="colorsVisible = !colorsVisible"> <div class=bc-color-picker__swatch-color data-ng-style="{\'background-color\': color.hex}"></div> </div> <ul class="bc-color-picker__selector ng-hide" data-ng-show=colorsVisible> <li class=bc-color-picker__swatch-color data-ng-repeat="item in colors" data-ng-class="{\'active\': item === color.hex}" data-ng-style="{\'background-color\': item}" data-ng-click=setColor(item)></li> </ul> </div> <div class=bc-color-picker__transparency data-ng-if="color.opacity !== null"> <div class="bc-dropdown styled"> <select data-ng-options="fill.value as fill.label for fill in fillTransparencies" data-ng-model=color.opacity data-ng-change=setOpacity()></select> </div> </div> </div> '
    },
    JkbY: function(e, t) {
        e.exports = "<div> <screener-range-date data-form-data=filterData.default.value data-input-prefix=filters.default.prepend data-input-suffix=filters.default.append></screener-range-date> </div>"
    },
    Joy1: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    isFuture: "=",
                    isCrypto: "=",
                    defaultPeriod: "@",
                    onPeriodChanged: "&",
                    symbol: "@"
                },
                controller: ["bcChartFactory", function(e) {
                    var t, i = this;
                    i.period = i.defaultPeriod || "P6M", i.quickPeriods = i.isCrypto ? a("EGrj").cryptoQuickChartPeriods : a("EGrj").quickChartPeriods, i.applyQuickSettings = function(a) {
                        i.period = a.period, t = e.getChart(i.symbol), i.isFuture || (a.aggregation.spec = "None");
                        var r = {
                            id: "Aggregation",
                            context: a.aggregation
                        };
                        a.aggregation.spec && (r.context.isContractVolume = "None" === a.aggregation.spec);
                        var o = {
                            id: "Period",
                            context: {
                                period: a.period
                            }
                        };
                        t.change(r, o), i.onPeriodChanged({
                            periodData: a
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("1Jbu")
            }
        }
    },
    JrL5: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                restrict: "A",
                scope: !1,
                link: function(r, o) {
                    function n(r) {
                        if (r.preventDefault(), "/" !== e.path() && "" !== e.path()) {
                            var o = e.search().ref;
                            a.clearErrors(), i.goToForgot(o || null)
                        } else t.location.href = t.config.routes["auth.forgot"]
                    }
                    o.on("click", n), r.$on("$destroy", function() {
                        o.off("click", n)
                    })
                }
            }
        }
        i.$inject = ["$location", "$window", "userAuthFormData", "authRouteService"], e.exports = i
    },
    Jspq: function(e, t, a) {
        "use strict";
        angular.module("Headlines", []).directive("headlines", a("4hOt"));
        e.exports = {
            enable: !0,
            name: "Headlines"
        }
    },
    JwZc: function(e, t) {
        e.exports = '<div class="bc-table-wrapper sticky-row bc-synthetic-spread"> <barchart-table-scroll> <table> <thead> <tr> <th>&nbsp;</th> <td data-ng-repeat="header in ::$ctrl.headers track by $index"> <div data-ng-bind=::header></div> </td> </tr> </thead> <tbody> <tr data-ng-repeat="row in ::$ctrl.data track by $index"> <td> <div data-ng-bind=::row.contractExpirationDate></div> </td> <td data-ng-repeat="cell in row.values track by $index"> <div data-ng-class="::{\'down\': (cell.indexOf(\'-\') === 0), \'up\': (cell.indexOf(\'+\') === 0)}" data-ng-bind=::cell></div> </td> </tr> </tbody> </table> </barchart-table-scroll> </div>'
    },
    "K+W3": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n, s, l, c;
            e.bugReport = {
                url: window.location.href,
                actualDimension: (l = window.innerWidth, c = window.innerHeight, l + "x" + c),
                availResolution: (n = window.screen.availWidth, s = window.screen.availHeight, n + "x" + s)
            }, e.isLoggedIn = i.isLoggedIn(), e.isLoggedIn && (e.bugReport.email = i.getUserData().primary_email), e.widgetId = !1, e.grecaptchaInvisibleKey = r.grecaptchaInvisibleKey, e.formSubmitted = !1, e.formCompleted = !1, e.badRequestError = !1, e.sendBugReport = function(t) {
                e.formSubmitted = !0, e.badRequestError = !1, t.email.$$rawModelValue && t.email.$setValidity("invalidEmail", !0), t.$valid && (e.isLoggedIn ? e.sendReport() : o.execute(e.widgetId))
            }, e.sendReport = function() {
                a.sendBugReport(e.bugReport).then(function(t) {
                    !0 === t.success && (e.formCompleted = !0)
                }, function(t) {
                    t.error && t.error.message && (e.badRequestError = t.error.message)
                })
            }, e.setWidgetId = function(t) {
                e.widgetId = t
            }, e.cancel = function() {
                t.dismiss("cancel")
            }, e.close = function() {
                t.close("completed")
            }
        }
        i.$inject = ["$scope", "$modalInstance", "authApiService", "authService", "appConfig", "vcRecaptchaService"], e.exports = i
    },
    "K/Ru": function(e, t) {
        e.exports = '<div class=bc-login-wrapper> <div class=forgot-block> <div data-ng-hide=success> <h1 class=header>Set a Password</h1> <p class=forgot-text>Please enter your email address. We will send you an email with instructions to set your password.</p> <form novalidate name=forgotForm class="bc-form bc-login-form" data-ng-submit=sendPass(forgotForm)> <div class="form-group group-pass-submit row collapse"> <div class="small-12 columns field-password-wrapper" data-ng-class="{\'error-input\':forgotForm.email.$invalid && forgotForm.$submitted}"> <input type=email class=form-input data-ng-class="{\'remove-chrome-highlight\':forgotForm.email.$invalid && forgotForm.$submitted}" placeholder=Email name=email required data-ng-pattern=/^[_a-z0-9]+(\\.[_a-z0-9]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/i data-ng-model=user.email> </div> <errors-component class=error-block data-ng-show=hasErrors data-form=forgotForm data-errors=errors> </errors-component> </div> <br/> <div class="form-group group-pass-submit row collapse"> <div class="small-12 columns"> <input type=submit data-ng-class="{\'increase-line-height\':forgotForm.email.$invalid && forgotForm.$submitted}" class=form-field-submit value=SUBMIT> </div> </div> </form> </div> <div data-ng-show=success> <div class=activate-block> <h1 class=header>Check Your Inbox</h1> <p class=forgot-text>Please check your inbox for instructions to set your password.</p> <p class=forgot-text>If you do not receive the email within a few minutes check your spam folder or <a href="" data-ng-click=goToContact()>contact our support team</a> for assistance.</p> <button class="form-field-submit create-account-btn" data-ng-click=close()>ok</button> </div> </div> </div> </div>'
    },
    K4T7: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u) {
            function p(t) {
                e.fundamentalCurves = t.curves || [{
                    colors: ["#000"],
                    lineWidth: 1
                }], e.formData = {
                    fundamentalFrequency: t.frequency || "Year"
                }
            }
            e.submitText = void 0 !== i ? "Apply" : "Add", e.allowRemove = u, e.fundamentalName = n.name, p(n), !i && r.isLoggedIn() && (e.dataLoading = !0, o.loadFundamentalConfig(n.id).then(function(t) {
                p(JSON.parse(t.data[0].value)), e.dataLoading = !1
            }, function() {
                e.dataLoading = !1
            })), e.removeConfirm = function() {
                s.removeFundamental(i, a), t.dismiss()
            }, e.addFundamentalConfirm = function() {
                var u = {
                    type: a,
                    id: n.id,
                    frequency: e.formData.fundamentalFrequency,
                    curves: e.fundamentalCurves
                };
                if (r.isLoggedIn()) {
                    var p = angular.copy(u);
                    delete p.type, delete p.id, o.saveFundamentalConfig(n.id, JSON.stringify(p))
                }
                try {
                    void 0 !== i && i >= 0 ? s.updateFundamental(u, i).render() : s.addFundamental(u).render(), d.setChartTemplate(null), c.save()
                } catch (e) {
                    l.error(e.message)
                }
                t.dismiss()
            }, e.resetFundamentalConfig = function() {
                e.formData.fundamentalFrequency = "Year", e.fundamentalCurves = [{
                    colors: ["#000"],
                    lineWidth: 1
                }]
            }, e.modalDismiss = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "fundamentalType", "fundamentalIndex", "authService", "interactiveChartUserPreferencesApi", "fundamentalData", "interactiveChartApi", "Notification", "interactiveChartStateService", "interactiveChartSettings", "allowRemove"], e.exports = i
    },
    "K5S/": function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = {};
            return {
                addChart: function(t, a) {
                    e.hasOwnProperty(t) && void 0 !== e[t] || (e[t] = a)
                },
                getChart: function(t) {
                    return e[t]
                },
                removeChart: function(t) {
                    e[t] = void 0
                }
            }
        }
    },
    K6Cl: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.formData = a.getChartSettings();
            var r = e.formData.marginBars;
            e.cancel = function() {
                t.dismiss()
            }, e.apply = function() {
                e.formData.marginBars !== r && (i.changeMarginBars(e.formData.marginBars), a.setChartSettings(e.formData), i.render()), t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "interactiveChartSettings", "interactiveChartApi"], e.exports = i
    },
    KBuA: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            this.createPremierAlertName = function(a) {
                var i, r = [];
                return a.conditions.forEach(function(a) {
                    var i = function(a) {
                            var i, r;
                            if ("percent" === a.property.type && (i = a.operator.operand.toString()), i = i || a.operator.operand.toString(), isNaN(a.operator.operand)) r = i;
                            else switch (a.property.format) {
                                case "0,0":
                                    r = e("number")(i);
                                    break;
                                case "0.00%":
                                case "!0.00%":
                                    r = t.convertToDecimal(i) + "%";
                                    break;
                                case "!0%":
                                    r = i + "%";
                                    break;
                                case "0,0.00":
                                    r = t.convertToDecimal(e("number")(i));
                                    break;
                                default:
                                    r = t.convertToDecimal(i)
                            }
                            return r
                        }(a),
                        o = 2 === a.property.description.length && "Hold" === a.property.description[1],
                        n = [a.property.description.join(" "), o ? "" : a.operator.display.long, o ? "" : i].join(" ");
                    r.push(n)
                }), i = r.join(" and "), i += " (", "schedule" === a.alert_behavior ? i += "EOD, " : i += "Intraday, ", i
            }, this.validateConditions = function(e) {
                var t = {
                    hasErrors: !1,
                    errorName: null
                };
                return e.forEach(function(e) {
                    var a = e.validate();
                    a && (t.hasErrors = !0, t.errorName = a)
                }), t
            }, this.createAlertName = function(e, t) {
                if ("news" === e.alert_type) return e.name;
                var a = e.name;
                return a += " (", "schedule" !== e.alert_behavior && t ? a += t : "schedule" === e.alert_behavior ? a += "EOD" : a += "Intraday", a += ")"
            }
        }
        i.$inject = ["$filter", "utils", "alertProperties"], e.exports = i
    },
    KDeg: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = this;

            function a() {
                t.showHeaderInfo || (t.showHeaderInfo = !0)
            }
            t.showHeaderInfo = !0, e.$on("myChartGroupHasNoCharts", function() {
                t.showHeaderInfo = !1
            }), e.$on("myChartsEmpty", function() {
                t.showHeaderInfo = !1
            }), e.$on("myChartLoaded", a), e.$on("dashboardCurrentSymbolChanged", a)
        }
        i.$inject = ["$scope"], e.exports = i
    },
    KDns: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c) {
            if (e.user = t.getUserData(), e.form = angular.copy(e.user.preferences), "Main" === e.form.default_view && (e.form.default_view = "main"), e.form.left_menu || (e.form.left_menu = "show"), e.form.overview_charts || (e.form.overview_charts = "default"), e.form.default_watchlist && s.find(e.user.watchlists, {
                    id: parseInt(e.form.default_watchlist)
                }) || (e.form.default_watchlist = "last"), !e.form.interactive_charts_saving_mechanism && e.form.interactive_charts_template && "None" !== e.form.interactive_charts_template ? e.form.interactive_charts_saving_mechanism = "template" : e.form.interactive_charts_saving_mechanism = e.form.interactive_charts_saving_mechanism || "every", e.form.refresh_timeout = e.form.refresh_timeout || "20", e.form.refresh_trading_time = e.form.refresh_trading_time || "always", e.isPremier = e.user.subscription === n.SUBSCRIPTIONS.PREMIUM_USER, e.form.pagination = e.form.pagination && e.isPremier ? JSON.parse(e.form.pagination) : o.config.pagination, e.changeState = function(t) {
                    e.isPremier || e.current === t || "premier" !== t || c.showPremier("pmPreferences"), e.current = e.current === t ? "" : t
                }, l.search().state) {
                var d = l.search().state;
                e.changeState(d), l.search("state", null)
            }
            e.saveEveryChart = function() {
                e.isPremier || c.showPremier("saveEveryChart")
            }, e.savePreferences = function() {
                var t = {},
                    o = ["default_view", "charts_style", "interactive_charts_saving_mechanism", "charts_template", "interactive_charts_template", "flipcharts_style", "flipcharts_template", "flipcharts_template_interactive", "left_menu", "refresh_trading_time", "refresh_timeout", "default_watchlist", "overview_charts"];
                e.errors = !1, o.forEach(function(a) {
                    a && e.form[a] && (t[a] = e.form[a])
                }), "interactive" === t.charts_style && (t.charts_template = "None"), "technical" === t.charts_style && (t.interactive_charts_template = "None"), e.isPremier ? t.pagination = JSON.stringify(e.form.pagination) : (delete t.pagination, delete t.left_menu), a.call("/user/preferences", i.POST, t, []).then(function(t) {
                    !0 === t.success ? (r.success("Your site preferences have been saved."), o.forEach(function(t) {
                        t && e.form[t] && (e.user.preferences[t] = e.form[t])
                    })) : e.errors = t.errors
                }, function() {
                    e.errors.internal = {
                        0: "Something went wrong"
                    }
                })
            }
        }
        i.$inject = ["$scope", "authService", "dataProvider", "httpVerbs", "Notification", "$window", "appConfig", "_", "$location", "bcModalLoginSrv"], e.exports = i
    },
    KHoG: function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = null,
                t = null;
            this.setChartTab = function(a) {
                e = angular.copy(a), null !== a && (t = e.symbol)
            }, this.getChartTab = function() {
                return e
            }, this.lastViewedTabSymbol = function() {
                return t
            }, this.clearLastViewedTabSymbol = function() {
                t = null
            }
        }
    },
    KJLm: function(e, t) {
        e.exports = '<div class="technical-chart-basic-settings bc-form"> <div class="chart-form-section border-bottom"> <div class=first-group> <label class=section-label>Settings:</label> <div class="bc-dropdown styled"> <select name=style data-ng-model=formData[fields.STYLE] data-ng-options="item.value as item.title for item in chartStyle"> </select> </div> <div class="bc-dropdown styled bc-technical-chart__select-volume" data-ng-class="{\'disable\': disableVolume}"> <select name=volume data-ng-disabled=disableVolume data-ng-model=formData[fields.VOLUME] data-ng-options="item.value as item.title for item in symbolVolume"> </select> </div> <div class="input-checkbox bc-technical-chart__checkbox-show-prices"> <input id=price-box type=checkbox name=pricebox data-ng-true-value="\'1\'" data-ng-false-value="\'0\'" data-ng-model=extraSettings.pricebox> <label for=price-box> <span class=bc-glyph-check></span> Price Box </label> </div> <div class="group-labeled group-display-size right"> <label for=bc-technical-chart__select-chart-size>Chart Size:</label> <div id=bc-technical-chart__select-chart-size class="bc-dropdown styled bc-technical-chart__select-chart-size"> <select name=displaySize data-ng-model=formData[fields.HEIGHT] data-ng-options="item.key as item.value for item in chartSizes"> </select> </div> </div> </div> <div class=second-group> <div class=chart-form-subsection> <div class=input-radio> <input type=radio name=linearScale id=technical-chart-setting-linear-scale data-ng-change="changeDisplaySetting(formData[fields.SCALE], fields.SCALE)" data-ng-model=formData[fields.SCALE] value=0> <label for=technical-chart-setting-linear-scale> <span></span> Linear Scale </label> </div> <div class=input-radio> <input type=radio name=linearScale id=technical-chart-setting-logarithmic-scale data-ng-change="changeDisplaySetting(formData[fields.SCALE], fields.SCALE)" data-ng-model=formData[fields.SCALE] value=1> <label for=technical-chart-setting-logarithmic-scale> <span></span> Logarithmic Scale </label> </div> </div> <div class=chart-form-subsection> <div> <div class=input-radio> <input type=radio name=priceScale id=technical-chart-setting-price-scale data-ng-change="changeDisplaySetting(formData[fields.PRICE_SCALE], fields.PRICE_SCALE)" data-ng-model=formData[fields.PRICE_SCALE] value=0> <label for=technical-chart-setting-price-scale> <span></span> Price Scale </label> </div> <div class=input-radio> <input type=radio name=priceScale id=technical-chart-setting-change-scale data-ng-change="changeDisplaySetting(formData[fields.PRICE_SCALE], fields.PRICE_SCALE)" data-ng-model=formData[fields.PRICE_SCALE] value=1> <label for=technical-chart-setting-change-scale> <span></span> % Change Scale </label> </div> </div> </div> </div> </div> <div class="chart-form-section border-bottom"> <div class=third-group> <label class=section-label>Period:</label> <div class=periods-wrapper> <div class="row collapse"> <div class="column small-4 medium-5"> <div class="bc-dropdown styled"> <select name=firstPeriod data-ng-model=formData[fields.FREQUENCY] data-ng-change=changeFrequency() data-ng-options="item.value as item.title for item in frequency"> </select> </div> </div> <div class="column small-4 medium-4"> <div class="bc-dropdown styled"> <select name=timePeriods data-ng-model=formData[fields.TIME_PERIOD] data-ng-change=changeTimePeriod() data-ng-options="item.value as item.title for item in timePeriodsList"> </select> </div> </div> <div class="column small-4 medium-3"> <div class=period-time-label>Mins.</div> <div class=input-third-period-wrapper> <input data-technical-chart-minute-period data-minute-depends=formData[fields.FREQUENCY] disabled=disabled data-ng-model=formData[fields.MINUTES_PERIOD] data-ng-disabled="formData[fields.FREQUENCY] !== \'I\'" name=minutesPeriod placeholder="" type=text /> </div> </div> </div> </div> <div class=datepicker-wrapper> <span class=or>or</span> <div class=date-from> <div class=bc-datepicker-item> <input type=text name=dateFrom class="form-control bc-datepicker-control" data-ng-model=formData[fields.DATE_FROM] data-ng-class="{\'error-input\': technicalChartForm.dateFrom.$invalid && technicalChartForm.dateFrom.$touched && formSubmitted, \'not-empty\' : formData[fields.DATE_FROM]}" data-date-format=MM/dd/yyyy autocomplete=off data-bs-datepicker placeholder=MM/DD/YYYY /> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> <span class=date-separator>-</span> <div class=date-to> <div class=bc-datepicker-item> <input type=text name=dateTo class="form-control bc-datepicker-control" data-ng-model=formData[fields.DATE_TO] placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy autocomplete=off data-bs-datepicker data-ng-class="{\'error-input\': technicalChartForm.dateTo.$invalid && technicalChartForm.dateTo.$touched && formSubmitted, \'not-empty\' : formData[fields.DATE_TO]}" data-placement=bottom-right /> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> </div> </div> </div> <div class="chart-form-section border-bottom"> <technical-chart-study data-form-data=formData></technical-chart-study> </div> </div>'
    },
    KOeA: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = [function() {
                var a = this;
                a.apiData = JSON.parse(e.unescape(a.apiData));
                var r = JSON.parse(a.symbol);
                a.currentSymbol = r, a.quotesService = i, a.data = a.apiData.data, a.utils = t
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("UGCi"),
                controller: r,
                controllerAs: "PerformanceReportCtrl"
            }
        }
        i.$inject = ["_", "utils", "quotesService"], e.exports = i
    },
    KUQm: function(e, t, a) {
        "use strict";
        e.exports = {
            periodSettings: function(e, t, a) {
                var i = {};
                return i[t.ONE_DAY] = {}, i[t.ONE_DAY][e.FREQUENCY] = "I", i[t.ONE_DAY][e.TIME_PERIOD] = "L", i[t.ONE_DAY][e.MINUTES_PERIOD] = "5", i[t.ONE_DAY][e.DATE_FROM] = null, i[t.ONE_DAY][e.DATE_TO] = null, i[t.ONE_DAY][e.DATE_RANGE] = null, i[t.FIVE_DAYS] = {}, i[t.FIVE_DAYS][e.FREQUENCY] = "I", i[t.FIVE_DAYS][e.TIME_PERIOD] = "X", i[t.FIVE_DAYS][e.MINUTES_PERIOD] = "30", i[t.FIVE_DAYS][e.DATE_FROM] = null, i[t.FIVE_DAYS][e.DATE_TO] = null, i[t.FIVE_DAYS][e.DATE_RANGE] = null, i[t.ONE_MONTH] = {}, i[t.ONE_MONTH][e.FREQUENCY] = "I", i[t.ONE_MONTH][e.TIME_PERIOD] = "H120", i[t.ONE_MONTH][e.MINUTES_PERIOD] = "120", i[t.ONE_MONTH][e.DATE_FROM] = null, i[t.ONE_MONTH][e.DATE_TO] = null, i[t.ONE_MONTH][e.DATE_RANGE] = null, i[t.THREE_MONTH] = {}, i[t.THREE_MONTH][e.FREQUENCY] = "DO", i[t.THREE_MONTH][e.TIME_PERIOD] = "ML", i[t.THREE_MONTH][e.MINUTES_PERIOD] = null, i[t.THREE_MONTH][e.DATE_FROM] = null, i[t.THREE_MONTH][e.DATE_TO] = null, i[t.THREE_MONTH][e.DATE_RANGE] = null, i[t.SIX_MONTH] = {}, i[t.SIX_MONTH][e.FREQUENCY] = "DO", i[t.SIX_MONTH][e.TIME_PERIOD] = "M", i[t.SIX_MONTH][e.MINUTES_PERIOD] = null, i[t.SIX_MONTH][e.DATE_FROM] = null, i[t.SIX_MONTH][e.DATE_TO] = null, i[t.SIX_MONTH][e.DATE_RANGE] = null, i[t.ONE_YEAR] = {}, i[t.ONE_YEAR][e.FREQUENCY] = "DO", i[t.ONE_YEAR][e.TIME_PERIOD] = "X", i[t.ONE_YEAR][e.MINUTES_PERIOD] = null, i[t.ONE_YEAR][e.DATE_FROM] = null, i[t.ONE_YEAR][e.DATE_TO] = null, i[t.ONE_YEAR][e.DATE_RANGE] = null, i[t.FIVE_YEARS] = {}, i[t.FIVE_YEARS][e.FREQUENCY] = "WO", i[t.FIVE_YEARS][e.TIME_PERIOD] = "X", i[t.FIVE_YEARS][e.MINUTES_PERIOD] = null, i[t.FIVE_YEARS][e.DATE_FROM] = null, i[t.FIVE_YEARS][e.DATE_TO] = null, i[t.FIVE_YEARS][e.DATE_RANGE] = null, i[t.TWENTY_FIVE_YEARS] = {}, i[t.TWENTY_FIVE_YEARS][e.FREQUENCY] = "MO", i[t.TWENTY_FIVE_YEARS][e.TIME_PERIOD] = "X", i[t.TWENTY_FIVE_YEARS][e.MINUTES_PERIOD] = null, i[t.TWENTY_FIVE_YEARS][e.DATE_FROM] = null, i[t.TWENTY_FIVE_YEARS][e.DATE_TO] = null, i[t.TWENTY_FIVE_YEARS][e.DATE_RANGE] = null,
                    function(e, t, a, i) {
                        "futures" === t && (e[i.ONE_DAY][a.MINUTES_PERIOD] = "5", e[i.FIVE_YEARS][a.FREQUENCY] = "WN", e[i.TWENTY_FIVE_YEARS][a.FREQUENCY] = "MN")
                    }(i, a, e, t), i
            },
            mobileSettings: function(e, t, a) {
                var i = {};
                return i[t.ONE_MONTH] = {}, i[t.ONE_MONTH][e.MINUTES_PERIOD] = "240", i[t.ONE_YEAR] = {}, i[t.ONE_YEAR][e.FREQUENCY] = "WO", i[t.ONE_YEAR][e.TIME_PERIOD] = "L", i[t.FIVE_YEARS] = {}, i[t.FIVE_YEARS][e.FREQUENCY] = "MO", i[t.FIVE_YEARS][e.TIME_PERIOD] = "L",
                    function(e, t, a, i) {
                        "futures" === t && (e[i.FIVE_YEARS][a.FREQUENCY] = "MN")
                    }(i, a, e, t), i
            }
        }
    },
    KUt5: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                convertToUTC: function(e) {
                    var t, a, i = e.split(" ");
                    return t = i[0].split("/"), a = i[1].split(":"), Date.UTC(Number((new Date).getFullYear().toFixed(0).slice(0, -2) + t[2]), Number(t[0] - 1), Number(t[1]), Number(a[0]), Number(a[1]), Number(a[2]))
                }
            }
        }
    },
    KV1w: function(e, t) {
        e.exports = '<div> <div class=bc-screener__filter-compare> <div class="bc-dropdown filter bc-screener__filter-compare-select"> <select data-ng-model=$ctrl.filterData.default.operator data-ng-options="item.key as item.value for item in $ctrl.filters.default.operator"></select> </div> <div class=bc-screener__input-group-wrapper> <div class=input-group data-ng-if="$ctrl.filterData.default.operator === \'between\' && !$ctrl.filterData.default.type"> <screener-range data-form-data=$ctrl.filterData.default.value data-input-prefix=$ctrl.filters.default.prepend data-input-suffix=$ctrl.filters.default.append></screener-range> </div> <div class=input-group data-ng-if="$ctrl.filterData.default.operator === \'between\'  && $ctrl.filterData.default.type"> <screener-range-date data-form-data=$ctrl.filterData.default.value></screener-range-date> </div> <div class="bc-dropdown filter bc-screener__filter-compare-select" data-ng-if="[\'gtField\',\'geField\', \'ltField\'].indexOf($ctrl.filterData.default.operator) !== -1"> <select data-ng-model=$ctrl.filterData.default.value data-ng-options="item.key as item.value for item in $ctrl.filters.default.compares"></select> </div> <div class=input-group data-ng-if="[\'gt\', \'lt\'].indexOf($ctrl.filterData.default.operator) !== -1"> <span class=input-group-prefix data-ng-if=$ctrl.filters.default.prepend data-ng-bind-html=$ctrl.filters.default.prepend></span> <input type=number class=bc-screener__filter-compare-input data-ng-model=$ctrl.filterData.default.value /> <span class=input-group-suffix data-ng-if=$ctrl.filters.default.append data-ng-bind-html=$ctrl.filters.default.append></span> </div> </div> </div> </div> '
    },
    KWph: function(e, t, a) {
        "use strict";
        var i = "MajorMarketSectors";
        angular.module(i, []).constant("symbolsConfig", a("mcKH")).constant("timeFrameConfig", a("DOGw")).directive("majorMarketSectors", a("WYF3")).directive("majorMarketSectorsTable", a("oDRS")).directive("majorMarketSectorsTableMatrix", a("I/Pl")).directive("majorMarketSectorHistogram", a("Eb3Y")).directive("majorMarketSectorGroups", a("yEZo")).service("majorMarketSectorsService", a("n50t"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    KYGC: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$rootScope", "$scope", "utils", "authService", function(e, t, a, i) {
                var r, o = !a.isMobileAndTablet();

                function n() {
                    e.$broadcast("priceHistoryGetDailyPrice", t.priceHistory)
                }
                t.loggedIn = i.isLoggedIn(), t.limits = {}, t.priceHistory = {
                    dateFrom: t.dateFrom,
                    dateTo: t.dateTo
                }, t.showDatePickerButtons = !0, t.$watch(function() {
                    return t.priceHistory.dateFrom
                }, function(e, a) {
                    e !== a && e && (o && (r = document.querySelector(".bc-datepicker-item.date-from > .bc-datepicker-control"), angular.element(r).controller("ngModel").$render()), t.isDownload || t.priceHistory.dateTo > window.moment(e).add(2, "years").format("YYYY-MM-DD") && (t.priceHistory.dateTo = window.moment(e).add(2, "years").format("YYYY-MM-DD"), t.priceHistory.dateTo > t.maxDate && (t.priceHistory.dateTo = t.maxDate)), t.limits.minDateTo = t.priceHistory.dateFrom, n())
                }), t.$watch(function() {
                    return t.priceHistory.dateTo
                }, function(e, a) {
                    e !== a && e && (o && (r = document.querySelector(".bc-datepicker-item.date-to > .bc-datepicker-control"), angular.element(r).controller("ngModel").$render()), t.isDownload || (t.priceHistory.dateFrom < window.moment(e).subtract(2, "years").format("YYYY-MM-DD") && (t.priceHistory.dateFrom = window.moment(e).subtract(2, "years").format("YYYY-MM-DD"), t.priceHistory.dateFrom < t.minDate && (t.priceHistory.dateFrom = t.minDate)), t.limits.minDateFrom = t.priceHistory.dateTo), n())
                }), t.maxDate = window.moment().format("YYYY-MM-DD"), t.limits.minDateFrom = t.minDate, t.limits.maxDateFrom = t.priceHistory.dateTo, t.limits.minDateTo = t.priceHistory.dateFrom, t.limits.maxDateTo = t.maxDate, n()
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    dateFrom: "@",
                    dateTo: "@",
                    minDate: "@",
                    isDownload: "@"
                },
                template: a("3T3q"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    Kcaa: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                scope: {
                    providers: "="
                },
                link: function(a, o, n) {
                    var s = n.flashMessages;
                    if (s) {
                        var l = {
                            message: s
                        };
                        s.length > 100 && (l.delay = 12e3), i.success(l)
                    }
                    a.connected = {
                        facebook: !1,
                        linkedin: !1,
                        twitter: !1,
                        google: !1
                    }, Array.isArray(a.providers) && a.providers.forEach(function(e) {
                        a.connected.hasOwnProperty(e.provider) && (a.connected[e.provider] = !0)
                    }), a.connectDisconnect = function(o) {
                        a.connected[o] ? e.disconnect(o).then(function(e) {
                            !0 === e.data.success && (a.connected[o] = !a.connected[o], i.success(r.ucfirst(o) + " has been removed as a login method."))
                        }) : t.location.href = e.getConnectRoute(o)
                    }
                },
                template: a("z0E8")
            }
        }
        i.$inject = ["providerConnectApiService", "$window", "Notification", "utils"], e.exports = i
    },
    Kh0T: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    content: "="
                },
                link: function(a) {
                    var p = c.getUserData() || {},
                        m = p.preferences ? p.preferences.charts_style : "interactive";
                    a.sort = {}, a.market = e.config.user.market, a.marketsParams = t.markets, a.list = s.getParameter("list"), a.loading = !0, a.currentSymbol = !1, a.isGridViewEnabled = s.isGridViewEnabled(), a.options = {
                        colorize: ["priceChange", "percentChange"],
                        exclude: t.defaultExclude
                    }, a.view = s.getParameter("controllerView") || "main", a.changeView = function() {
                        s.updateParameter("controllerView", a.view), o.$broadcast("updateControllerListData")
                    };
                    var h, g = [],
                        f = !1;

                    function b() {
                        f && l.cancel(f), i.getData().then(function() {
                            o.$broadcast("dashboardSymbolsListChanged")
                        }), f = l(b, i.getTimeout())
                    }
                    a.closePanel = function() {
                        o.$broadcast("closeRightPanel")
                    }, a.openControllerModal = function() {
                        d.openControllerModal()
                    }, a.sortData = function(e) {
                        a.sort.orderBy === e ? a.sort.orderDir = "desc" === a.sort.orderDir ? "asc" : "desc" : (a.sort.orderBy = e, a.sort.orderDir = "desc"), a.marketChanged(!0)
                    }, a.marketChanged = function(e) {
                        a.loading = !0, s.updateParameter("list", a.list), h = angular.copy(t.defaultConfig), g = r.find(a.marketsParams, {
                            key: a.list
                        }), r.merge(h, g.api.default), g.api[a.market] && r.merge(h, g.api[a.market]), a.sort && a.sort.orderBy || (a.sort = {
                            orderDir: h.orderDir || "asc",
                            orderBy: h.orderBy || "symbol"
                        }), h.orderDir = a.sort.orderDir, h.orderBy = a.sort.orderBy, i.setSettings(h, "getMarketData"), i.getData().then(function(t) {
                            e || (o.$broadcast("dashboardSymbolsListChanged"), a.changeSymbol(t.data[0])), a.options = u.colorizeFields(a.options, i.getFields().split(","))
                        }), i.needRefresh() && ("market_leaders" === a.list ? f = l(b, i.getTimeout()) : f && l.cancel(f))
                    }, a.changeSymbol = function(e) {
                        a.currentSymbol = e, o.$broadcast("dashboardCurrentSymbolChanged", angular.copy(a.currentSymbol))
                    }, a.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        a.currentSymbol = t && t.newSymbol ? {} : t
                    }), a.$on("dashboardCurrentSymbolUpdated", function(e, t) {
                        console.log("[Markets Table]: event <dashboardCurrentSymbolUpdated>:", t), a.currentSymbol = t && t.newSymbol ? {} : t
                    }), a.$on("dashboardSymbolChangedFromSelector", function(e, t) {
                        "technical" === m && (a.currentSymbol = t)
                    }), a.$on("dashboardSymbolsListUpdated", function(e, t) {
                        a.content.data = t.data, a.content.meta = t.meta, a.loading = !1, o.$broadcast("dashboardSymbolsListLoaded", t.data), n.realtimeListener(a.content.data, g.realtimeSector || "myBarchart")
                    }), a.$on("dashboardControlWidgetNextSymbol", function(e, t) {
                        a.changeSymbol(t)
                    }), a.$on("dashboardControlWidgetPrevSymbol", function(e, t) {
                        a.changeSymbol(t)
                    }), a.$on("updateControllerListData", function() {
                        a.marketChanged(!0)
                    }), a.setClass = function(e, t, a) {
                        var i = "";
                        return "symbol" === e && (i = "text-left"), a.updatedFields && ~["lastPrice", "percentChange", "priceChange", "highPrice", "lowPrice", "volume"].indexOf(e) && ~a.updatedFields.indexOf(e) && ("volume" === e ? i += " up-highlight" : a.lastPriceDirection && (i += " " + a.lastPriceDirection + "-highlight")), i
                    }, a.marketChanged(!0)
                },
                template: a("eDG+")
            }
        }
        i.$inject = ["$window", "controlWidgetConfig", "dashboardDataService", "_", "$rootScope", "barchartDatatableRealtime", "dashboardSettingsService", "$timeout", "authService", "dashboardModalsService", "barchartDatatableColorize"], e.exports = i
    },
    KiYY: function(e, t) {
        e.exports = '<div class="bc-dropdown filter bc-screener__toolbar-select"> <select name=screenerSavedPresets data-ng-model=$ctrl.savedScreener data-ng-change=$ctrl.applySavedScreener() data-ng-options="item as item.name for item in $ctrl.screeners"> <option value="">Saved Screeners</option> </select> </div>'
    },
    Krg7: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                scope: !0,
                controller: ["$document", "$location", "$window", "utils", "dataProvider", "bcShareService", function(e, t, a, i, r, o) {
                    var n = this;
                    return this.descLimit = 200, this.getLink = function(e) {
                        return o.getLink(e)
                    }, this.getDescription = function(e) {
                        return o.getDescription(e)
                    }, this.trimDesc = function(e) {
                        var t = i.findFirstSentence(e);
                        return t.length > n.descLimit ? (t = t.substr(0, n.descLimit)) + "..." : t
                    }, this.getShareLinkPartialEncoded = function(e) {
                        return o.getShareLinkPartialEncoded(e)
                    }, this.share = function(e) {
                        o.share(e)
                    }, this
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    KuKU: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login study-modal"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=modal-header> <i class="bc-glyph-times form-close right" data-ng-click=modalDismiss()></i> </div> <div class=study-modal__study-data data-ng-if=!dataLoading> <div class=study-modal__study-name>[[ ::fundamentalName ]]</div> <form class=bc-form data-ng-submit=addFundamentalConfirm()> <div class=study-modal__form-row> <div class=study-modal__fundamentals-radios> <div class=input-radio> <input type=radio data-ng-model=formData.fundamentalFrequency name=fundamentalFrequencyRadio value=Year id=tools-dropdown-fundamentals-year> <label for=tools-dropdown-fundamentals-year> <span></span> Annual </label> </div> <div class=input-radio> <input type=radio data-ng-model=formData.fundamentalFrequency name=fundamentalFrequencyRadio value=Quarter id=tools-dropdown-fundamentals-quarter> <label for=tools-dropdown-fundamentals-quarter> <span></span> Quarterly </label> </div> </div> <div> <bc-color-picker data-color-model=fundamentalCurves[0].colors[0]></bc-color-picker> <bc-line-width-selector data-line-width-model=fundamentalCurves[0].lineWidth></bc-line-width-selector> </div> </div> <div class=study-modal__form-row> <button type=button class="bc-button just-grey-border upper" data-ng-click=resetFundamentalConfig()>Reset</button> </div> <div class=study-modal__study-form-buttons> <button type=button class="bc-button red" data-ng-if=allowRemove data-ng-click=removeConfirm()>Delete</button> <button type=submit class="bc-button ok light-blue">[[ ::submitText ]]</button> </div> </form> </div> </div> </div>'
    },
    KvAG: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            var s = [function() {
                var a = this,
                    s = JSON.parse(a.apiConfig);
                if (a.quotesService = o, a.chartType in e) {
                    a.setColor = function(e) {
                        return (e = isNaN(+e) ? parseFloat(e) : +e) > 0 ? "up" : e < 0 ? "down" : "unch"
                    }, a.setChartClass = function() {
                        if ("daily" === a.chartType) return "chart-block"
                    }, a.quotesData = [], a.chartConfig = [], a.chartTypeLink = n.getChartLink(), s.api.quotes.symbols.split(",").forEach(function(t) {
                        a.chartConfig[t] = angular.copy(e[a.chartType])
                    });
                    var l = {},
                        c = i.defer();
                    c.promise;
                    t.getQuotes(s.api.quotes).then(function(e) {
                        var t = [];
                        s.api.quotes.symbols.split(",").forEach(function(a) {
                            t.push(r.find(e.data, {
                                symbol: a
                            }))
                        }), a.quotesData = t, a.quotesData.description = s.api.quotes.description.symbols, e.data.forEach(function(e, t) {
                            e.hasOwnProperty("previous") && (l[e.symbol] = Number(e.previous.replace(/[,]/g, "")))
                        }), c.resolve(l)
                    })
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiConfig: "@",
                    chartType: "@"
                },
                template: a("Wcda"),
                controller: s,
                controllerAs: "OverviewChartsCtrl"
            }
        }
        i.$inject = ["OverviewChartsHighChartConfig", "OverviewChartsApiFactory", "$q", "_", "quotesService", "userPreferencesService"], e.exports = i
    },
    KvFE: function(e, t, a) {
        "use strict";
        e.exports = {
            CASH_VALUE: "Cash Value",
            ENTRY_VALUE: "Entry Value",
            TOTAL_FEES: "Total Fees",
            CURRENT_VALUE: "Current Value",
            ACTIVE_PL: "Active P&L",
            CLOSED_PL: "Closed P&L",
            TODAYS_RETURN: "Today's Return",
            TOTAL_PL: "Total P&L"
        }
    },
    KzvF: function(e, t, a) {
        "use strict";
        var i = "TradingCalendar";
        angular.module(i, []).controller(i + ".tradingCalendarCtrl", a("f7CN"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "L/eQ": function(e, t, a) {
        "use strict";
        e.exports = {
            defaultNewsImage: "/img/barchart-share.png",
            facebook: {
                win: {
                    url: "http://www.facebook.com/sharer/sharer.php?u={url}",
                    name: "FacebookShare",
                    width: 600,
                    height: 500
                }
            },
            gplus: {
                win: {
                    url: "https://plus.google.com/share?url={url}",
                    name: "GooglePlusShare",
                    width: 600,
                    height: 500
                }
            },
            twitter: {
                win: {
                    url: "http://twitter.com/intent/tweet?url={url}&text={title}&via=Barchart",
                    name: "TwitterShare",
                    width: 600,
                    height: 500
                }
            },
            linkedin: {
                win: {
                    url: "http://www.linkedin.com/shareArticle?mini=true&url={url}&title={title}&summary={description}",
                    name: "LinkedinShare",
                    width: 600,
                    height: 500
                }
            }
        }
    },
    L0wU: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = null,
                r = null,
                o = null,
                n = ["login", "register", "forgot", "contact"],
                s = ["contact", "forgot"];

            function l() {
                return r
            }

            function c(t) {
                var a = e.search();
                return void 0 !== t ? a.hasOwnProperty(t) && void 0 !== t ? a[t] : null : a
            }

            function d(e) {
                ~n.indexOf(e) && (r = e)
            }

            function u(t) {
                e.search({}), void 0 !== t && (e.search("ref", t), o = t)
            }

            function p() {
                var t = (i = i || e.url()).replace(/^\//, "");
                t = t.substr(0, ~t.indexOf("?") ? t.indexOf("?") : t.length), ("/" === i || ~n.indexOf(t)) && (i = null)
            }
            return {
                goToLogin: function(i, r) {
                    r && -1 !== ["login", "forgot", "register"].indexOf(l()) || (p(), d("login"), u(i), t.$evalAsync(function() {
                        e.path("/login"), a.isMobile() && window.scroll(0, 0)
                    }))
                },
                goToRegister: function(a) {
                    p(), d("register"), u(a), t.$evalAsync(function() {
                        e.path("/register")
                    })
                },
                goToForgot: function(a) {
                    p(), d("forgot"), u(a), t.$evalAsync(function() {
                        e.path("/forgot")
                    })
                },
                goToContact: function(a) {
                    p(), d("contact"), u(a), t.$evalAsync(function() {
                        e.path("/contact")
                    })
                },
                match: function(t) {
                    i = t || i;
                    var a = e.path();
                    return a = a.replace(/^\/|\/$/g, ""), ~n.indexOf(a) ? (r = n[n.indexOf(a)], o = c("ref"), !0) : (r = null, !1)
                },
                getState: l,
                getRef: function() {
                    return o
                },
                getSearchParams: c,
                getPrevious: function() {
                    return i
                },
                setPrevious: function(t) {
                    e.search("ref", null), void 0 !== t ? e.url(t) : (i = i || "", e.url(i), i = null)
                },
                isAllowed: function() {
                    return ~s.indexOf(l())
                }
            }
        }
        i.$inject = ["$location", "$rootScope", "utils"], e.exports = i
    },
    L6nY: function(e, t) {
        e.exports = '<div class=bc-screener__filter-radio> <div class=input-radio data-ng-repeat="val in filters.default.value"> <input id="cb-filter-radio-[[ filterIndex ]]-[[ $index ]]" type=radio name=options data-ng-model=filterData.default.value data-ng-value=val.key /> <label for="cb-filter-radio-[[ filterIndex ]]-[[ $index ]]"> <span></span> [[ val.value ]] </label> </div> </div>'
    },
    L6yU: function(e, t, a) {
        "use strict";
        e.exports = {
            data: {
                aggregation: {
                    unit: "Day",
                    isContractVolume: !0,
                    size: 1,
                    spec: "None",
                    dividendsAdjust: !1,
                    backAdjust: !1,
                    daysToExpiration: 1,
                    contractRoll: "expiration"
                }
            },
            display: {
                period: "P6M",
                chart: {
                    backgroundColor: "#FFFFFF",
                    plotBorderColor: "#CCC",
                    fontFamily: "Noto Sans",
                    previous: {
                        color: "#003053",
                        dashStyle: "ShortDot",
                        forceVisible: !0
                    },
                    exportUrl: "/export/image",
                    showMinMaxArc: !0,
                    newPaneHeight: 1
                },
                scrollbar: {
                    barColor: "#D3D3D3",
                    buttonColor: "#F3F3F3",
                    trackColor: "#F3F3F3",
                    visible: !1
                },
                navigator: {
                    visible: !1,
                    enabled: !1
                },
                tooltip: {
                    visible: !0,
                    mode: "standard",
                    backgroundColor: "rgba(255, 255, 255, 0.85)",
                    borderColor: "#000"
                },
                xAxis: {
                    visible: !0,
                    tickPixelInterval: 120,
                    gridLines: {
                        visible: !0,
                        color: "#CCC"
                    },
                    textColor: "#666",
                    crosshair: {
                        enabled: !0,
                        showValue: !0,
                        color: "#333",
                        dashStyle: "ShortDot",
                        snap: !0
                    },
                    marginBars: 2,
                    minTickInterval: 0,
                    equidistant: !0
                },
                yAxis: {
                    visible: !0,
                    gridLines: {
                        visible: !0,
                        color: "#CCC"
                    },
                    minorGridLines: {
                        visible: !1,
                        color: "#E9E9E9"
                    },
                    textColor: "#666",
                    showLastValue: !0,
                    crosshair: {
                        enabled: !0,
                        showValue: !0,
                        color: "#333",
                        dashStyle: "ShortDot",
                        snap: !1
                    },
                    minPadding: .05,
                    maxPadding: .05
                }
            },
            panes: [{
                axes: [{
                    plots: [{
                        curves: [{
                            colors: ["#000"],
                            fields: ["Open", "High", "Low", "Close", "Change"],
                            style: "OHLC",
                            lineWidth: 1,
                            varyColorPerBar: !1,
                            visible: !0
                        }],
                        main: !0,
                        symbol: "PLACEHOLDER",
                        type: "Symbol",
                        showPrevious: !1
                    }],
                    comparison: "None",
                    scale: "Linear"
                }],
                height: 4
            }],
            version: 10
        }
    },
    LE92: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    model: "=",
                    id: "@",
                    symbolType: "@",
                    flipChartMode: "="
                },
                controller: ["$scope", "authService", "interactiveChartSettings", "interactiveChartStateService", "interactiveChartApi", "$rootScope", "events", "$window", "interactiveChartTemplates", function(e, t, a, i, r, o, n, s, l) {
                    var c = this;
                    if (!t.isLoggedIn()) throw new Error("User must be authenticated to use this directive. Apply it thought ng-if");

                    function d() {
                        c.model.template = a.getChartTemplate(), c.model.aggregation = a.getChartAggregation(), c.model.period = a.getChartPeriod(), c.model.range = a.getChartRange(), c.model.settings = a.getChartSettings(), i.save(), o.$broadcast(n.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED)
                    }
                    c.templates = l.getTemplatesList(), e.$on("interactiveChartTemplatesListUpdated", function(e, t) {
                        c.templates = l.getTemplatesList(), t.template && (a.setChartTemplate(t.template.id), d())
                    }), e.$on("$destroy", function() {
                        i.setCurrentFlipChartTemplate(null)
                    }), c.changeSavedTemplate = function() {
                        if (c.model.template) {
                            var e = "futures" === s.config.symbols.mapping[r.getSymbolData().symbolType];
                            l.applyTemplate(c.model.template, e).then(function() {
                                d()
                            })
                        } else c.flipChartMode ? (i.resetFlipChartState(), a.resetChartGlobalConfig()) : (l.resetTemplate(), d());
                        i.setCurrentFlipChartTemplate(c.model.template), o.$broadcast(n.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED, {
                            updateState: !0
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("mPiW")
            }
        }
    },
    LFRK: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(i, r, o) {
                    r.bind("click", function() {
                        t.config.disableAutoRefreshPage(), e.open({
                            template: a("FdDE"),
                            controller: "common.GiveFeedback",
                            windowClass: "bc-fdn-modal bc-modal-feedback"
                        }).result.finally(function() {
                            t.config.autoRefresh = !0, t.config.runAutoRefreshPage()
                        })
                    })
                }
            }
        }
        i.$inject = ["$modal", "$window"], e.exports = i
    },
    LHW0: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                restrict: "A",
                scope: {
                    bcTypeahead: "=",
                    bcTypeaheadTemplate: "=",
                    bcTypeaheadItemClick: "=",
                    bindModel: "=ngModel"
                },
                link: function(a, i, r) {
                    var o = null;
                    i.on("blur", function() {
                        t(function() {
                            o && o.disabled ? o = null : a.clearInput()
                        }, 200)
                    }), i.on("keydown", function(e) {
                        if (38 === e.keyCode) a.active = 0 === a.active ? 0 : a.active - 1, a.$digest();
                        else if (40 === e.keyCode) {
                            var t = a.matches.length;
                            a.active = a.active === t - 1 ? t - 1 : a.active + 1, a.$digest()
                        } else if (13 === e.keyCode && a.matches.length) {
                            var i = a.matches[a.active];
                            i.disabled || a.selectItem(i)
                        }
                    }), a.active = 0, a.matches = [], a.setActive = function(e) {
                        a.active = e
                    }, a.clearInput = function() {
                        o = null, a.$evalAsync(function() {
                            a.bindModel = "", a.active = 0
                        })
                    }, a.selectItem = function(e) {
                        o = e, e.disabled ? i[0].focus() : (a.bcTypeaheadItemClick(e), i[0].blur())
                    }, a.$watch("bindModel", function(e) {
                        a.matches = e ? a.bcTypeahead() : []
                    }), i.after(e(a.bcTypeaheadTemplate)(a))
                }
            }
        }
        i.$inject = ["$compile", "$timeout", "_"], e.exports = i
    },
    LJlV: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    symbolTypeSpec: "@",
                    widgetData: "="
                },
                template: a("6QTz"),
                controller: ["$scope", "quotesService", function(e, t) {
                    e.data = e.widgetData.data[0], e.sector = t.getSector(e.symbolTypeSpec)
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    LMxz: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p) {
            return {
                initializeChartUsingStrategy: function(r, o, u) {
                    var p = e.defer(),
                        m = {};
                    return n.loadChartDataForSymbol(o).then(function(h) {
                        var g = [];
                        switch (t.isEmpty(h) || (m.currentSymbolState = h), r) {
                            case "last":
                                var f = i.getUserData().preferences.interactive_charts_last_symbol;
                                if (f) {
                                    var b = n.loadChartDataForSymbol(f).then(function(e) {
                                        t.isEmpty(e) || (m.lastUpdatedState = e)
                                    });
                                    g.push(b)
                                }
                                break;
                            case "every":
                                break;
                            case "template":
                                var v = i.getUserData().preferences.interactive_charts_template;
                                v && "None" !== v && (m.template = +v);
                                break;
                            case "tab":
                                console.info("[Interactive Chart Initialization Service]: Load chart state by tab");
                                var y = d.getChartTab();
                                if (null === y) {
                                    console.error("There is no tab chart in the service userChartTabService");
                                    break
                                }
                                m.tabState = y
                        }
                        e.all(g).then(function() {
                            var e = [],
                                i = s.getFeed().getHeadlessChart();
                            if ((m.currentSymbolState || m.lastUpdatedState) && !m.tabState) {
                                if (m.currentSymbolState) {
                                    try {
                                        m.currentSymbolState = c(m.currentSymbolState)
                                    } catch (e) {
                                        throw e instanceof InvalidJSONStateError && n.deleteChartDataForSymbol(o).then(function() {
                                            window.location.reload()
                                        }), e
                                    }
                                    try {
                                        i.load(m.currentSymbolState.state)
                                    } catch (e) {
                                        throw console.warn(m.currentSymbolState.state), window.localStorage && "yes" === window.localStorage.getItem("clearBadDefinition") && n.deleteChartDataForSymbol(o).then(function() {
                                            window.location.reload()
                                        }), e
                                    }
                                    i.change(l.symbolPlotsGet()).forEach(function(t) {
                                        "PLACEHOLDER" !== t.title && e.push(t.title)
                                    }), u && u.compareSymbols && (i.change(l.changeCompare(u.compareSymbols.filter(function(e) {
                                        return e.symbol
                                    }))), m.currentSymbolState.state = i.save(), (d = JSON.parse(m.currentSymbolState.configuration)) && (d = t.merge(d, {
                                        compareSymbols: u.compareSymbols.map(function(e) {
                                            return {
                                                symbol: e.symbol,
                                                leftScale: !1,
                                                color: e.curves[0].colors[0]
                                            }
                                        })
                                    }), m.currentSymbolState.configuration = JSON.stringify(d)));
                                    var r = JSON.parse(m.currentSymbolState.configuration).expression;
                                    r && r.match(/{([\w-.$^*]*)}/g).forEach(function(t) {
                                        e.push(t.slice(1, -1))
                                    }), i.change(l.expressionAdditionalPlotGet()).forEach(function(t) {
                                        "PLACEHOLDER" !== t.title && t.title.match(/{([\w-.$^*]*)}/g).forEach(function(t) {
                                            e.push(t.slice(1, -1))
                                        })
                                    })
                                }
                                var d;
                                if (m.lastUpdatedState) m.lastUpdatedState = c(m.lastUpdatedState), i.load(m.lastUpdatedState.state), i.change(l.symbolPlotsGet()).forEach(function(t) {
                                    "PLACEHOLDER" !== t.title && e.push(t.title)
                                }), u && u.compareSymbols && (i.change(l.changeCompare(u.compareSymbols.filter(function(e) {
                                    return e.symbol
                                }))), m.lastUpdatedState.state = i.save(), (d = JSON.parse(m.lastUpdatedState.configuration)) && (d = t.merge(d, {
                                    compareSymbols: u.compareSymbols.map(function(e) {
                                        return {
                                            symbol: e.symbol,
                                            leftScale: !1,
                                            color: e.curves[0].colors[0]
                                        }
                                    })
                                }), m.lastUpdatedState.configuration = JSON.stringify(d))), i.change(l.expressionAdditionalPlotGet()).forEach(function(t) {
                                    "PLACEHOLDER" !== t.title && t.title.match(/{([\w-.$^*]*)}/g).forEach(function(t) {
                                        e.push(t.slice(1, -1))
                                    })
                                })
                            }
                            if (m.tabState) {
                                m.tabState = c(m.tabState);
                                try {
                                    i.load(m.tabState.state)
                                } catch (e) {
                                    console.log("Could not load tab state")
                                }
                                i.change(l.symbolPlotsGet()).forEach(function(t) {
                                    "PLACEHOLDER" !== t.title && e.push(t.title)
                                }), (r = JSON.parse(m.tabState.configuration).expression) && r.match(/{([\w-.$^*]*)}/g).forEach(function(t) {
                                    e.push(t.slice(1, -1))
                                }), i.change(l.expressionAdditionalPlotGet()).forEach(function(t) {
                                    "PLACEHOLDER" !== t.title && t.title.match(/{([\w-.$^*]*)}/g).forEach(function(t) {
                                        e.push(t.slice(1, -1))
                                    })
                                })
                            }
                            if (e.length > 0) {
                                var h = t.uniq(e);
                                u && u.compareSymbols && (h = t.pluck(u.compareSymbols, "symbol")), a.addInlineDataForSymbols(h).then(function() {
                                    p.resolve(m)
                                })
                            } else p.resolve(m)
                        })
                    }), p.promise
                },
                initializeChartAsFlipChart: function(r, o) {
                    var c = e.defer(),
                        d = {},
                        u = i.getUserData().preferences.flipcharts_template_interactive;
                    return u && "None" !== u && (d.template = +u), n.loadChartDataForSymbol(r).then(function(e) {
                        if (o) return d.flipChartSymbolState = e, c.resolve(d), c.promise;
                        var i = [];
                        if (!t.isEmpty(e)) {
                            d.flipChartSymbolState = e;
                            var r = s.getFeed().getHeadlessChart();
                            d.flipChartSymbolState && (r.load(d.flipChartSymbolState.state), r.change(l.symbolPlotsGet()).forEach(function(e) {
                                "PLACEHOLDER" !== e.title && i.push(e.title)
                            }), r.change(l.expressionAdditionalPlotGet()).forEach(function(e) {
                                "PLACEHOLDER" !== e.title && e.title.match(/{([\w-.$^*]*)}/g).forEach(function(e) {
                                    i.push(e.slice(1, -1))
                                })
                            }))
                        }
                        i.length > 0 ? a.addInlineDataForSymbols(t.uniq(i)).then(function() {
                            c.resolve(d)
                        }) : c.resolve(d)
                    }), c.promise
                },
                initializeChartForAnonymousUser: function(a) {
                    var i = e.defer(),
                        r = {};
                    return n.loadChartDataForSymbolAnon(a).then(function(e) {
                        t.isEmpty(e) || (r.currentSymbolState = e), i.resolve(r)
                    }), i.promise
                },
                initializeLastViewedChartForAnnon: function() {
                    var i = e.defer(),
                        r = p.get("interactiveChartLastViewedState"),
                        o = p.get("interactiveChartLastViewedStateExpireTime"),
                        n = new Date;
                    if (o && !r && p.remove("interactiveChartLastViewedStateExpireTime"), r && n > new Date(o) && (p.remove("interactiveChartLastViewedStateExpireTime"), p.remove("interactiveChartLastViewedState"), r = null), r) {
                        var d = s.getFeed().getHeadlessChart(),
                            u = [],
                            m = JSON.parse(r);
                        if (m = c(m), d.load(m.state), d.change(l.symbolPlotsGet()).forEach(function(e) {
                                "PLACEHOLDER" !== e.title && u.push(e.title)
                            }), d.change(l.expressionAdditionalPlotGet()).forEach(function(e) {
                                "PLACEHOLDER" !== e.title && e.title.match(/{([\w-.$^*]*)}/g).forEach(function(e) {
                                    u.push(e.slice(1, -1))
                                })
                            }), u.length > 0) {
                            var h = t.uniq(u);
                            a.addInlineDataForSymbols(h).then(function() {
                                i.resolve({
                                    annonLastViewed: m
                                })
                            })
                        } else i.resolve({
                            annonLastViewed: m
                        })
                    } else i.resolve({});
                    return i.promise
                }
            }
        }
        i.$inject = ["$q", "_", "bcInlineData", "authService", "realtimeConnectService", "realtimeConnection", "interactiveChartStateApi", "bcMarketDataChart", "interactiveChartApiActionsService", "interactiveChartFallback", "userChartTabService", "$window", "localStorageService"], e.exports = i
    },
    LViy: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-ads-modal bc-survey-modal"> <input type=hidden /> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <div class=mobile-padding> <h3>Upcoming Changes to Your account</h3> </div> <p class=mobile-padding> Your free My Barchart account provides access to many member-only tools, and we are constantly making improvements and adding new features to the website.<br><br/> In an effort to more accurately reflect the value our paying Barchart Premier Members are getting from their subscription, we are adjusting some of our free membership benefits, <span class=bold>effective January 1, 2019</span>. </p> <div class=bonuses> <div class="row header"> <div class="small-4 column"> <div>Feature</div> </div> <div class="small-4 column"> <div>Free Account</div> </div> <div class="small-4 column premier-color"> <div>Barchart Premier</div> </div> </div> <div class="row content"> <div class="small-4 column"><div>Watchlists</div></div> <div class="small-4 column"><div>Maximum 5</div></div> <div class="small-4 column premier-color"><div>Unlimited</div></div> </div> <div class="row content"> <div class="small-4 column"><div>Portfolios</div></div> <div class="small-4 column"><div>Maximum 5 </div></div> <div class="small-4 column premier-color"><div>Unlimited</div></div> </div> <div class="row content"> <div class="small-4 column"><div>Downloads</div></div> <div class="small-4 column"><div>Maximum 5 per Day</div></div> <div class="small-4 column premier-color"><div>Maximum 100 per Day</div></div> </div> <div class="row content"> <div class="small-4 column"><div>Custom Views</div></div> <div class="small-4 column"><div>Maximum 5</div></div> <div class="small-4 column premier-color"><div>Unlimited</div></div> </div> <div class="row content"> <div class="small-4 column"><div>Chart Templates</div></div> <div class="small-4 column"><div>Maximum 5</div></div> <div class="small-4 column premier-color"><div>Unlimited</div></div> </div> </div> <div class=mobile-padding> <div class=color-box> Need additional access to these features? Sign up for <span class=bold>Barchart Premier</span>, with a <span class=bold>30-Day 100% Money-Back Guarantee!</span> </div> <div class=control-buttons> <a target=_self data-ng-href="[[ premierLink ]]" class="btn bc-button light-blue">Try Barchart Premier</a> </div> <span class=info> *We will NOT remove any existing tools in your account; you are grandfathered in to keeping tools already created. The new download limit, however, is effective immediately on January 1, 2019 for all free membership accounts. </span> </div> </div>'
    },
    LZsM: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            return {
                restrict: "E",
                replace: !0,
                link: function(a) {
                    a.isMobile = o.isMobileOnly(), a.applyFiter = function() {
                        t.search("expirationDate", a.expirationDate), e.$broadcast("onExpirationDateChanged", {
                            data: a.expirationDate
                        })
                    }, a.applyFiterMobile = function() {
                        var i = window.moment(a.expirationDateM).format("YYYY-MM-DD");
                        t.search("expirationDate", i), e.$broadcast("onExpirationDateChanged", {
                            data: i
                        })
                    }, a.minDate = window.moment(new Date).subtract(1, "d").format("YYYY-MM-DD"), a.disabled = !i.isLoggedIn() || !i.getUserData().is_premier, a.showPremierModal = function() {
                        i.isLoggedIn() && i.getUserData().is_premier || r.showPremier("unusualOpt")
                    };
                    var n = a.$on("barchartDataTableIsReady", function() {
                        t.search().expirationDate ? (a.expirationDate = t.search().expirationDate, a.expirationDateM = new Date(t.search().expirationDate), e.$broadcast("onExpirationDateChanged", {
                            data: a.expirationDate
                        })) : e.$broadcast("onExpirationDateChanged", {
                            data: !1
                        }), n()
                    })
                },
                template: a("Y9v9")
            }
        }
        i.$inject = ["$rootScope", "$location", "authService", "bcModalLoginSrv", "utils"], e.exports = i
    },
    LfMQ: function(e, t) {
        e.exports = '<form name=watchlistAddSymbolsBlock data-ng-submit=addSymbolsToWatchlist() novalidate> <div class=bc-form__add-symbol-fieldset> <input type=submit class="bc-button add light-blue bc-form__add-symbol-button" value=Add> <div class=bc-form__add-symbol-input-wrapper> <div class="clear-button-wrapper show-for-large-up"> <input type=text autocomplete=off autocorrect=off autocapitalize=off placeholder="Enter symbols separated by commas or spaces..." class=bc-form__add-symbol-input data-ng-model=userEnteredSymbols data-barchart-clear-input required/> </div> <div class="clear-button-wrapper hide-for-large-up"> <input type=text autocomplete=off autocorrect=off autocapitalize=off placeholder="Add a symbol..." class="sec-search-box bc-form__add-symbol-input" data-ng-model=userEnteredSymbols data-barchart-clear-input required/> </div> </div> </div> <div class=bc-tools-page__input-error data-ng-if=invalidSymbolsAlreadyInList.length> The following symbols are already in list: <span data-ng-repeat="symbol in invalidSymbolsAlreadyInList">[[ symbol ]] </span> </div> <div class=bc-tools-page__input-error data-ng-if=invalidSymbolsNotFound.length> The following symbols were not found: <span data-ng-repeat="symbol in invalidSymbolsNotFound">[[ symbol ]] </span> </div> <div class=bc-tools-page__input-error data-ng-if=invalidSymbolsInRequest> [[ invalidSymbolsInRequest ]] </div> <div class=bc-tools-page__input-error data-ng-if=watchlistLimitReached> [[ watchlistLimitReached ]] </div> </form>'
    },
    LlPw: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            var l, c, d = this,
                u = null,
                p = [],
                m = !0,
                h = null,
                g = 0,
                f = t.defer();
            this.getStandaloneStudiesCount = function() {
                return g
            };
            var b = function() {
                setTimeout(function() {
                    g = d.getDefinition().panes.length
                })
            };

            function v() {
                var e = "";
                if (m) {
                    e = (l.raw.contractName ? l.contractName.replace(/\(|\)/g, "") : l.symbolName) + " (" + c + ") - Barchart.com";
                    var t = s.getChartMainPlotExpression();
                    t && (e = t + " - Barchart.com")
                }
                u.setTitle({
                    text: e,
                    align: "left",
                    x: 15,
                    y: 25,
                    style: {
                        fontSize: "18px",
                        color: "#888888"
                    },
                    floating: !0
                })
            }
            this.setCurrentChartSymbol = function(e) {
                c = e
            }, this.disableTitle = function() {
                return m = !1, d
            }, this.isTitleEnabled = function() {
                return m
            }, this.enableTitle = function() {
                return m = !0, d
            }, this.setSymbolData = function(e) {
                return l = angular.copy(e), d
            }, this.getSymbolData = function() {
                return angular.copy(l)
            }, this.initFeed = function(e, t, a) {
                l = angular.copy(e);
                var n = {
                    showResizeHandles: !0
                };
                r.isMobile() && (n.defaultTemplate = "/chart.def.mobile.json"), "Index" === o.config.symbols.type_names[e.symbolType] && (n.defaultTemplate = "/chart-indices.def.json"), -1 !== ["MutualFund", "InterestRates"].indexOf(o.config.symbols.type_names[e.symbolType]) && (n.defaultTemplate = "/chart-mutual-funds.def.json"), a && (n.defaultTemplate = "/" + a), console.log("-> [Interactive Chart Api]: initFeed. Real time is ", t), i.getFeed(n, t)
            }, this.initChart = function(e, t, a) {
                h = a, l = angular.copy(e), console.log("[Interactive Chart Api]: initChart->symbolData", e), console.log("[Interactive Chart Api]: initChart->initConfig", t);
                var r = i.getFeed();
                return r.charts && a && !r.charts[a] ? r.ready().then(function() {
                    try {
                        u = r.addChart(a, t), window.chart = u, f.resolve(i.getTaxonomies()), b(), v()
                    } catch (e) {
                        console.log("Chart could not initialize properly with custom config:", t), console.log("initialization error:", e)
                    }
                }) : r.charts && r.charts["bc-interactive-chart__chart-container"] ? (d.changeSymbol(t.symbol).render(), f.resolve(i.getTaxonomies())) : r.ready().then(function() {
                    try {
                        u = r.addChart("bc-interactive-chart__chart-container", t), window.chart = u, f.resolve(i.getTaxonomies()), b(), v()
                    } catch (e) {
                        console.log("Chart could not initialize properly with custom config:", t), console.log("initialization error:", e)
                    }
                }), f.promise
            }, this.destroyChart = function() {
                var e = i.getFeed();
                h && e.charts[h] ? (e.removeChart(h), u = null, h = null, f = t.defer()) : (e.charts || e.charts["bc-interactive-chart__chart-container"]) && (e.removeChart("bc-interactive-chart__chart-container"), u = null, f = t.defer())
            }, this.getDeferredChart = function() {
                return f.promise
            }, this.getChartTaxonomy = function() {
                return f.promise
            }, this.changeSymbol = function(e) {
                var t = {
                    id: "MainPlot",
                    context: {
                        symbol: e
                    }
                };
                return p.push(t), d
            }, this.restoreCurrentSymbolPlot = function() {
                if (p.length) {
                    var e = a.find(p, {
                        id: "MainPlot"
                    });
                    if (e && e.context && e.context.symbol === c) return d
                }
                return p.push({
                    id: "MainPlot",
                    context: {
                        symbol: c
                    }
                }), d
            }, this.changeMainPlotToExpression = function(t) {
                return console.log("-> [Interactive Chart API] Changing main plot to expression:", t), u.change(e.expressionMainPlotAdd(t))
            }, this.changeMainPlotToAnnual = function(t, a) {
                return console.log("-> [Interactive Chart API] Changing main plot to annual:", t), u.change(e.annualMainPlotAdd(t, a))
            }, this.getMainPlot = function() {
                return u.change(e.mainPlotGet())
            }, this.changeAggregation = function(t) {
                return p.push(e.aggregation(t)), d
            }, this.changeCurveStyle = function(t, a) {
                var i = d.getMainPlot();
                return p.push(e.curveStyle(t, a || i[0].type)), d
            }, this.changeTooltip = function(t) {
                return p.push(e.tooltip(t)), d
            }, this.changeNavigator = function(t) {
                return p.push(e.navigator(t)), d
            }, this.changePeriod = function(t) {
                return p.push(e.period(t)), d
            }, this.changeRange = function(t) {
                return p.push(e.range(t)), d
            }, this.changeEvents = function(t) {
                return p.push(e.events(t)), d
            }, this.changeScaleType = function(t) {
                return p.push(e.scaleType(t)), d
            }, this.changeMinPadding = function(t) {
                return p.push(e.minPaddibg(t)), d
            }, this.changeMaxPadding = function(t) {
                return p.push(e.maxPaddibg(t)), d
            }, this.changeMarginBars = function(t) {
                return p.push(e.marginBars(t)), d
            }, this.snapAnnotationsToPrices = function(t) {
                return p.push(e.snapAnnotationsToPrices(t)), d
            }, this.changeMinorGridLines = function(t) {
                return p.push(e.gridLines(t)), d
            }, this.changePreventLabelOverlap = function(t) {
                return p.push(e.preventLabelOverlap(t)), d
            }, this.changeAxisType = function(t) {
                return p.push(e.axisType(t)), d
            }, this.changeCompare = function(t) {
                return p.push(e.changeCompare(t)), d
            }, this.getTechnicalStudies = function() {
                return u.change(e.technicalStudiesGet())
            }, this.addTechnicalStudy = function(t) {
                return p.push(e.technicalStudyAdd(t)), d
            }, this.updateTechnicalStudy = function(t, a) {
                return p.push(e.technicalStudyUpdate(t, a)), d
            }, this.removeTechnicalStudy = function(t) {
                var a = e.technicalStudyRemove(t);
                console.log("-> [Interactive Chart API] Removing Technical Study:", a);
                var i = u.change(a);
                return v(), b(), i
            }, this.removeAllTechnicalStudies = function() {
                var e = d.getTechnicalStudies();
                if (e && e.length)
                    for (var t = e.length - 1; t >= 0; t--) d.removeTechnicalStudy(t);
                d.render()
            }, this.getFundamentals = function(e) {
                var t = {},
                    a = {
                        id: "Plot",
                        context: {
                            id: "Get",
                            type: "BalanceSheet"
                        }
                    },
                    i = {
                        id: "Plot",
                        context: {
                            id: "Get",
                            type: "IncomeStatement"
                        }
                    };
                return t.BalanceSheet = e ? e.change(a) : u.change(a), t.IncomeStatement = e ? e.change(i) : u.change(i), t
            }, this.addFundamental = function(t) {
                return p.push(e.fundamentalAdd(t)), d
            }, this.updateFundamental = function(t, a) {
                return p.push(e.fundamentalUpdate(t, a)), d
            }, this.removeFundamental = function(t, a) {
                var i = e.fundamentalRemove(t, a);
                console.log("-> [Interactive Chart API] Removing Fundamental:", i);
                var r = u.change(i);
                return b(), r
            }, this.getExpressions = function() {
                return u.change(e.expressionsGet())
            }, this.addExpression = function(t, a) {
                return p.push(e.expressionAdditionalPlotAdd(t, a)), d
            }, this.updateExpression = function(t, a, i) {
                return p.push(e.expressionAdditionalPlotUpdate(t, a, i)), d
            }, this.removeExpression = function(t) {
                var a = e.expressionRemove(t);
                return console.log("-> [Interactive Chart API] Removing Expression:", a), u.change(a)
            }, this.useTool = function(e, t, a) {
                console.log("-> [Interactive Chart API] Used tools:", u, e, t, a), u.annotate(e, t, a)
            }, this.updateTool = function(e) {
                console.log("-> [Interactive Chart API] Update Annotation:", e);
                var t = {
                    id: "Annotation",
                    context: {
                        id: "Update",
                        uid: e.uid,
                        traits: e.traits
                    }
                };
                return e.points && (t.context.points = e.points), e.extras && (t.context.extras = e.extras), u.change(t)
            }, this.deleteTool = function(e) {
                var t = {
                    id: "Annotation",
                    context: {
                        id: "Delete",
                        uid: e.uid
                    }
                };
                return u.change(t)
            }, this.cloneTool = function(e) {
                var t = {
                    id: "Annotation",
                    context: {
                        id: "Duplicate",
                        uid: e.uid
                    }
                };
                return u.change(t)
            }, this.print = function() {
                var e = !1;
                m || (e = !0, m = !0), u.print(), e && (m = !1, u.setTitle({
                    text: ""
                }))
            }, this.exportTo = function(e) {
                u.exportTo(e)
            }, this.exportData = function() {
                return u.exportData()
            }, this.reset = function() {
                console.log("-> [Interactive Chart API] Resetting chart."), u.reset(), v(), b(), n.hasData = !0
            }, this.softReset = function() {
                console.log("-> [Interactive Chart API] Applying default template."), u.load(JSON.stringify(u.getDefaultTemplate())), v(), b(), n.hasData = !0
            }, this.getDefinition = function(e) {
                return u.asTemplate({
                    main: !0,
                    annotations: !e
                })
            }, this.loadDefinition = function(e, t) {
                t = t || {}, console.log("-> [Interactive Chart API] Loading chart definition:", JSON.parse(e), t), u.load(e, t), b(), v()
            }, this.getDefaultTemplate = function() {
                return u.getDefaultTemplate()
            }, this.save = function() {
                return u.save()
            }, this.load = function(e) {
                u.load(e), v()
            }, this.getSVGForExport = function() {
                return u.getSVGForExport()
            }, this.render = function() {
                var e = angular.copy(p);
                p = [], e.forEach(function(e) {
                    console.log("-> [Interactive Chart API] Applying Action:", e)
                }), u.change.apply(u, e), b(), v()
            }
        }
        i.$inject = ["interactiveChartApiActionsService", "$q", "_", "bcMarketDataChart", "utils", "$window", "chartVisibility", "interactiveChartSettings"], e.exports = i
    },
    Lnyf: function(e, t) {
        e.exports = "<a data-ng-click=setDefaultPage()>Make this my default [[ linkTitle ]]</a> "
    },
    LoTI: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "$q", "_", "dataProvider", "httpVerbs", "utils", "apiConfig", function(e, t, a, i, r, o, n) {
                e.exchangeGroups = JSON.parse(e.groupsData), e.symbolList = {}, e.loadSymbols = function(t) {
                    e.dataLoading = !0, e.symbolList[t] || i.call(o.buildUrl(n.API_URL + "/quotes/get", {
                        lists: t + "(true)",
                        fields: "symbolRoot,symbolName"
                    }), r.GET).then(function(a) {
                        e.dataLoading = !1, e.symbolList[t] = a.data
                    }, function(t) {
                        console.log("GOT ERROR: ", t), e.dataLoading = !1
                    })
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    groupsData: "@",
                    baseUrl: "@"
                },
                template: a("ZQbF"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    Lshu: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            var s = this,
                l = a.getUserData().watchlists;
            s.error = !1, s.currentTab = "new", s.watchlist = {}, s.saveWatchlist = function(e) {
                return s.error = !1, !e.$invalid && (n.watchlist() ? (t.close({
                    success: !1
                }), !1) : l.every(function(e) {
                    return e.name !== s.watchlist.name
                }) ? void s.getSymbols().then(function(e) {
                    var a = [];
                    e.count > 0 && (e.data.forEach(function(e) {
                        a.push(e.symbol)
                    }), s.watchlist.symbols = a, i.createWatchlist(s.watchlist).then(function(e) {
                        t.close({
                            success: !0,
                            name: s.watchlist.name,
                            id: e.data[0].id
                        })
                    }, function(e) {
                        s.error = e
                    }))
                }, function(e) {
                    s.error = e
                }) : (s.error = "A Watchlist already exists with that name. Please enter a new name.", !1))
            }, e.$on("watchlistsUpdated", function(e) {
                t.close({
                    success: !0
                })
            }), s.getSymbols = function() {
                var e = angular.copy(r.api);
                return delete e.limit, delete e.orderBy, delete e.orderDir, delete e.page, delete e.raw, e.fields = "symbol,lastPrice", o.query(e, "/quotes/get")
            }, s.close = function() {
                t.close({
                    success: !1
                })
            }
        }
        i.$inject = ["$scope", "$modalInstance", "authService", "watchlistEditApiFactory", "apiConfig", "apiFactory", "limitsService"], e.exports = i
    },
    LvAn: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    settings: "=",
                    isFutureSymbol: "=",
                    chartVisibility: "="
                },
                controller: ["$scope", "$rootScope", "interactiveChartApi", "interactiveChartSettings", "interactiveChartAggregationConfig", "interactiveChartStateService", function(a, i, r, o, n, s) {
                    a.aggregations = n[a.isFutureSymbol ? "periodsFutures" : "periods"], a.$watch("isFutureSymbol", function(e, t) {
                        e !== t && (a.aggregations = n[a.isFutureSymbol ? "periodsFutures" : "periods"])
                    }), a.$on("chartSettingsChanged", function() {}), a.changeAggregation = function(t) {
                        a.chartVisibility.hasData = !0;
                        var n = o.getChartSettings(),
                            l = o.getChartAggregation();
                        a.settings.aggregation.unit = t.unit, a.settings.aggregation.size = t.size, a.isFutureSymbol || (a.settings.aggregation.spec = n.extendedHours ? "FormT" : "None"), a.isFutureSymbol && (t.spec ? "Continue" === a.settings.aggregation.spec && "Intraday" !== t.unit || (a.settings.aggregation.spec = t.spec) : a.settings.aggregation.spec = "Nearest" === l.spec ? "None" : l.spec);
                        var c = angular.copy(a.settings.aggregation);
                        a.isFutureSymbol && (c.contractRoll = n.contractRoll, c.dividendsAdjust = n.dividendsAdjust, c.backAdjust = n.backAdjust, "expiration" === c.contractRoll && (c.daysToExpiration = n.daysToExpiration)), r.changeAggregation(c).render(), o.setChartAggregation(a.settings.aggregation), a.settings.range.from = null, a.settings.range.to = null, o.setChartRange(a.settings.range), i.$broadcast(e.ON_INTERACTIVE_CHART_SET_AGGREGATION, {
                            unit: t.unit
                        }), s.save()
                    }, a.getLabel = function() {
                        var e = {
                            unit: a.settings.aggregation.unit
                        };
                        return a.isFutureSymbol && "Intraday" !== a.settings.aggregation.unit && "Nearest" === a.settings.aggregation.spec && (e.spec = a.settings.aggregation.spec), t.find(a.aggregations, e).label
                    }
                }],
                template: a("G8SB")
            }
        }
        i.$inject = ["events", "_"], e.exports = i
    },
    Lz3e: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = ["$scope", "quotesService", function(t, a) {
                t.data = t.widgetData.data[0], t.sector = a.getSector(t.data.symbolType), t.rowChartData = angular.copy(t.data.rowChartData), t.performance = angular.copy(t.data.performance), t.setColor = function(t) {
                    return e.setColor(t)
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("/IDI"),
                controller: t
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    LzrJ: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                scope: {},
                bindToController: {
                    symbol: "@"
                },
                controller: ["syntheticApiService", "$filter", function(e, t) {
                    var a = this;
                    a.data = void 0, a.headers = void 0, e.getSpreads({
                        baseSymbol: a.symbol
                    }).then(function(e) {
                        a.headers = [], a.data = [], e.data.forEach(function(i) {
                            i.contractExpirationDate = i.contractMonth + " '" + i.contractShortYear, a.headers.push(decodeURIComponent(i.contractExpirationDate)), a.data.push(function(e, a) {
                                var i, r = {
                                        symbol: e.symbol,
                                        contractExpirationDate: decodeURIComponent(e.contractExpirationDate),
                                        values: []
                                    },
                                    o = 0;
                                return ~e.lastPrice.indexOf(".") && (i = e.lastPrice.toString().substring(e.lastPrice.toString().indexOf(".") + 1), o = i.length, "s" === i[i.length - 1] && o--), a.forEach(function(a) {
                                    var i = t("formatDecimal")(e.raw.lastPrice - a.raw.lastPrice, e.baseCode);
                                    "number" == typeof i ? i = 0 === i ? "" : i > 0 ? "+" + i.toFixed(o) : i.toFixed(o) : "string" == typeof i && ("0" === i || "0-0" === i ? i = "" : isNaN(+i) || 0 != +i ? "-" !== i[0] && (i = "+" + i) : i = ""), r.values.push(i)
                                }), r
                            }(i, e.data))
                        })
                    })
                }],
                controllerAs: "$ctrl",
                template: a("JwZc")
            }
        }
    },
    "M6R/": function(e, t) {
        e.exports = '<div class=bc-options-quotes__columns> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=hide-for-small-only data-ng-if=dataTablesContent data-ng-show=!dataLoading> <div class="bc-options-quotes__column bc-options-quotes__left-column"> <div class="block-title joined"> <h4> Calls </h4> </div> </div> <div class="bc-options-quotes__column bc-options-quotes__middle-column"> <div class=bc-options-quotes__middle-column-filler></div> </div> <div class="bc-options-quotes__column bc-options-quotes__right-column"> <div class="block-title joined"> <h4> Puts </h4> </div> </div> </div> <div data-ng-if="dataTablesContent && dataTablesContent.length" data-ng-show=!dataLoading> <barchart-datatable data-sticky=false data-content=dataTablesContent data-options=settings.options data-custom-handlers=settings.customHandlers> </barchart-datatable> </div> </div>'
    },
    M73E: function(e, t, a) {
        "use strict";
        e.exports = {
            operators: [{
                value: "+",
                label: "+"
            }, {
                value: "-",
                label: "-"
            }, {
                value: "*",
                label: "*"
            }, {
                value: "/",
                label: "/"
            }],
            spreadData: {
                symbol1: "",
                monthPeriod1: "",
                yearPeriod1: "",
                multiplier1: "",
                symbol2: "",
                monthPeriod2: "",
                yearPeriod2: "",
                multiplier2: "",
                operator2: "+",
                symbol3: "",
                monthPeriod3: "",
                yearPeriod3: "",
                multiplier3: "",
                operator3: "+"
            }
        }
    },
    M8OA: function(e, t) {
        e.exports = '<div class=bc-major-markes-charts-overview> <div class="row collapse bc-overviewcharts__landing-charts" data-ng-if="!loading && !inlineDataLoading"> <div data-ng-if=!threeColumn class="small-6 large-3 columns market-column" data-ng-repeat="quotesItem in quotesData track by $index"> <div class=market-component-wrapper> <button title="Configure Homepage Charts" data-ng-if="$index === 1 && configurateButton" class="configure bc-button white-with-border show-for-small-only" data-ng-click=editPreferences()> <i class=bc-glyph-cog></i> </button> <button title="Configure Homepage Charts" data-ng-if="$index === 1 && configurateButton" class="configure bc-button white-with-border show-for-medium-only" data-ng-click=editPreferences()> <i class=bc-glyph-cog></i> </button> <button title="Configure Homepage Charts" data-ng-if="$last && configurateButton" class="configure bc-button white-with-border show-for-large-up" data-ng-click=editPreferences()> <i class=bc-glyph-cog></i> </button> <major-markets-chart-component data-symbol-title="[[ quotesData.description[$index] ]]" data-type="[[ type ]]" data-item-data=quotesItem></major-markets-chart-component> </div> </div> <div data-ng-if=threeColumn class="small-6 medium-12 large-4 columns market-column three-column" data-ng-repeat="quotesItem in quotesData track by $index"> <div class=market-component-wrapper data-ng-class="{\'show-for-large-up\': $index===2}"> <major-markets-chart-component data-symbol-title="[[ quotesData.description[$index] ]]" data-item-data=quotesItem></major-markets-chart-component> </div> </div> </div> </div>'
    },
    MB2a: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            function i(a, i, r) {
                if (!Array.isArray(a)) throw new InvalidTypeError("parameter in parseFilters method must be an array");
                e.getFiltersData(i).then(function(i) {
                    a.forEach(function(a) {
                        if (i.hasOwnProperty(a.key)) {
                            var r = angular.copy(i[a.key]);
                            r.directive = t[r.type], r.data = a, r.key = a.key, e.addFilter(r)
                        } else console.error(a.key + " does not exist in filter definition from /api/v1/screeners/fields")
                    }), r && r.resolve(a)
                })
            }
            return {
                parseFilters: i,
                parseFiltersAsync: function(e, t) {
                    var r = a.defer();
                    return i(e, t, r), r.promise
                }
            }
        }
        i.$inject = ["screenerFilterService", "screenerDirectiveMapper", "$q"], e.exports = i
    },
    MC2Z: function(e, t) {
        e.exports = '<div> <div class="barchart-content-block toolbar"> <div class=block-content> <div class="bc-dropdown filter"> <select name=timeFrame data-ng-options="tf as tf.title for tf in timeFrames" data-ng-change=updateTimeFrame() data-ng-model=timeFrame> </select> </div> <span class=bc-time-period-info> <span data-ng-if="timeframeName === \'Latest\'"> <span class=first>[[ timeframeName ]]</span> <span data-ng-if=isFutures>futures</span> price quotes as of [[ timeframeDate]]. </span> <span data-ng-if="timeframeName !== \'Latest\'"> <span class=first>[[ timeframeName ]]</span> price quotes, based on <span class=to-lower>[[ timeframeName ]]</span> <span data-ng-if=isFutures>futures</span> data. </span> </span> </div> </div> <div class="barchart-content-block total"> <div class=block-title> <h4>Strong Buy & Sell Signals</h4> </div> <div class="block-content row"> <div class="total-item columns small-12 medium-6 small-collapse medium-uncollapse"> <p> <span class="signal-title buy">100% Buy Signal </span> <span class=signal-value> <span data-ng-if="indicatorsData.total.buy == 0"> [[ indicatorsData.total.buy ]] <span class=signal-name> [[ name ]]</span> </span> <span data-ng-if="indicatorsData.total.buy != 0"> <a target=_self href="[[ getStrongLink(\'buy\') ]]" data-bc-modal-login=strategies> [[ indicatorsData.total.buy ]] <span class=signal-name> [[ name ]]</span> </a> </span> </span> </p> </div> <div class="total-item columns small-12 medium-6 small-collapse medium-uncollapse"> <p> <span class="signal-title sell">100% Sell Signal </span> <span class=signal-value> <span data-ng-if="indicatorsData.total.sell == 0"> [[ indicatorsData.total.sell ]] <span class=signal-name> [[ name ]]</span> </span> <span data-ng-if="indicatorsData.total.sell != 0"> <a target=_self href="[[ getStrongLink(\'sell\') ]]" data-bc-modal-login=strategies> [[ indicatorsData.total.sell ]] <span class=signal-name> [[ name ]]</span> </a> </span> </span> </p> </div> </div> </div> <div class="barchart-content-block indicators"> <div class=block-title> <h4>Today\'s New Indicators</h4> </div> <div class=block-content> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=indicators-wrapper data-ng-show=!dataLoading> <barchart-table-scroll> <table data-ng-repeat="indicatorCategory in indicatorsItems"> <thead> <tr> <th class=indicators-column-title>[[ indicatorCategory.title ]]</th> <th class="indicators-column-signal buy"># <span class=text-lowercase>of</span> New Buys</th> <th class="indicators-column-signal hold"># <span class=text-lowercase>of</span> New Holds</th> <th class="indicators-column-signal sell"># <span class=text-lowercase>of</span> New Sells</th> </tr> </thead> <tbody> <tr data-ng-repeat="(indicatorItemKey, indicatorItem) in indicatorCategory.items" data-ng-class-odd="\'odd\'"> <td class=indicator-title> [[ indicatorItem.title ]] </td> <td class="indicator-signal buy"> <span data-ng-if="indicatorsData[indicatorItemKey].buy == 0"> [[ indicatorsData[indicatorItemKey].buy ]] [[ name ]] </span> <a target=_self data-ng-if="indicatorsData[indicatorItemKey].buy != 0" data-ng-href="[[ getIndicatorLink(indicatorItem.title, \'Buy\') ]]" data-bc-modal-login=strategies> [[ indicatorsData[indicatorItemKey].buy ]] [[ name ]] </a> </td> <td class="indicator-signal hold"> <span data-ng-if="indicatorsData[indicatorItemKey].hold == 0"> [[ indicatorsData[indicatorItemKey].hold ]] [[ name ]] </span> <a target=_self data-ng-if="indicatorsData[indicatorItemKey].hold != 0" data-ng-href="[[ getIndicatorLink(indicatorItem.title, \'Hold\') ]]" data-bc-modal-login=strategies> [[ indicatorsData[indicatorItemKey].hold ]] [[ name ]] </a> </td> <td class="indicator-signal sell"> <span data-ng-if="indicatorsData[indicatorItemKey].sell == 0"> [[ indicatorsData[indicatorItemKey].sell ]] [[ name ]] </span> <a target=_self data-ng-if="indicatorsData[indicatorItemKey].sell != 0" data-ng-href="[[ getIndicatorLink(indicatorItem.title, \'Sell\') ]]" data-bc-modal-login=strategies> [[ indicatorsData[indicatorItemKey].sell ]] [[ name ]] </a> </td> </tr> </tbody> </table> </barchart-table-scroll> </div> </div> </div> </div>'
    },
    MFYR: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l) {
            e.message = !1, e.errors = !1, e.user = {}, e.grecaptchaInvisibleKey = o.grecaptchaInvisibleKey;
            var c, d = !1;
            e.submit = function(t, a) {
                e.message = !1, e.errors = !1;
                var i = new r(t);
                if (i.validate().fails()) return e.errors = i.getErrors(), !1;
                t, n.execute(d)
            }, e.onRender = function(e) {
                d = e
            }, e.onSuccess = function() {
                t.call(i.config.routes["user.account"], "POST", e.user, []).then(function(t) {
                    e.message = t.data.message, e.user = {}, e.errors = !1, l(function() {
                        e.close()
                    }, 6e3)
                }, function(t) {
                    return e.errors = t.error.message, t
                })
            }, e.subscribe = function() {
                c = s.open({
                    template: a("Qqjl"),
                    scope: e,
                    windowClass: "modal-fixed-top news-subscription-widget-wrapper-modal"
                })
            }, e.close = function() {
                c.close()
            }
        }
        i.$inject = ["$scope", "dataProvider", "$window", "bcFormValidationFactory", "appConfig", "vcRecaptchaService", "$modal", "$timeout"], e.exports = i
    },
    MHU3: function(e, t) {
        e.exports = '<form class="bc-interactive-chart__symbol-selector bc-form" data-ng-submit=changeSymbol() autocomplete=off> <div class=bc-interactive-chart__symbol-selector-fieldset> <input type=submit value=Go class="bc-button light-blue"/> <input type=text class=js-interactive-chart-symbol-selector-input data-ng-model=symbol data-ng-model-options="{ debounce: 100 }" data-ng-change=useSearch() data-ng-focus=preSymbolEnter() data-ng-blur=pastSymbolEnter() data-ng-keydown=keyboardNavigation($event) data-ng-class="{\'error\': invalidSymbol}"/> <symbol-autocomplete data-ng-show=searchResultsVisible data-ng-class="{\'hide\': !searchResultsVisible}" data-model=symbol data-search-results=searchResults data-on-symbol-select=selectSymbol(symbol)> </symbol-autocomplete> </div> </form> '
    },
    MIqE: function(e, t, a) {
        "use strict";
        var i = "InPageNavigation";
        angular.module(i, []).controller("inPageTabNavigation", a("WN/S"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    MJXX: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    symbolData: "="
                },
                controller: ["dashboardGridSettings", "$scope", "$timeout", function(e, t, a) {
                    var i = this;

                    function r() {
                        i.style = "OHLC", i.attributes = [], i.varyColorPerBar = !1, i.primaryColor = "#000000", i.period = "P6M", i.aggregationUnit = "Day", i.aggregationSize = 1, i.state = e.getState()
                    }
                    i.ready = !0, i.title = (i.symbolData.raw.contractName ? i.symbolData.contractName.replace(/\(|\)/g, "") : i.symbolData.symbolName) + " (" + i.symbolData.symbol + ")", r(), t.$on("dashboardGridHardReset", function() {
                        i.ready = !1, a(function() {
                            r(), i.ready = !0
                        }, 0)
                    })
                }],
                controllerAs: "$ctrl",
                template: a("0N5s")
            }
        }
    },
    MNEI: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close();></i> </div> <div class=modal-inner-wrapper> <h4 class=text-center>Terms of Use and Privacy Policy</h4> <p>Based on recent changes ([[ agreementDate ]]), Barchart.com Members are required to review and agree to our Terms of Use and Privacy Policy, and renew your registration, to continue using Barchart.com.</p> <p>Please read our <a target=_blank href=/terms#terms-of-service>Terms of Use</a> and <a target=_blank href=/terms#privacy-policy>Privacy Policy</a> to learn more about the choices you have, then click "I Agree" if you would like to proceed. Thank you for using Barchart.com!</p> <button type=button data-ng-click=agreedToTerms() class="form-field-submit create-account-btn">I Agree</button> </div> </div> </div>'
    },
    MSNI: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                data: {
                    aggregation: {
                        isContractVolume: !0
                    }
                },
                display: {
                    period: "P1D",
                    chart: {
                        backgroundColor: "#FFFFFF",
                        fontFamily: "Noto Sans",
                        showMinMaxArc: !1,
                        previous: {
                            color: "#003053",
                            dashStyle: "ShortDot",
                            forceVisible: !0
                        }
                    },
                    scrollbar: {
                        visible: !1
                    },
                    navigator: {
                        visible: !1,
                        enabled: !1
                    },
                    xAxis: {
                        visible: !0,
                        gridLines: {
                            visible: !0,
                            color: "#CCC"
                        },
                        textColor: "#666",
                        tickPixelInterval: 10,
                        crosshair: {
                            enabled: !1,
                            snap: !0,
                            showValue: !0,
                            color: "#333",
                            dashStyle: "ShortDot"
                        },
                        equidistant: !1
                    },
                    tooltip: {
                        visible: !1
                    },
                    yAxis: {
                        visible: !0,
                        gridLines: {
                            visible: !0,
                            color: "#CCC"
                        },
                        textColor: "#666",
                        showLastValue: !0,
                        crosshair: {
                            enabled: !1,
                            snap: !1,
                            showValue: !0,
                            color: "#333",
                            dashStyle: "ShortDot"
                        }
                    }
                },
                panes: [{
                    axes: [{
                        comparison: "None",
                        plots: [{
                            curves: [{
                                attributes: ["ChangeBased"],
                                colors: ["#4F97C1", "#4F97C1"],
                                fields: ["Close"],
                                style: "Line",
                                varyColorPerBar: !1,
                                lineWidth: 2
                            }],
                            events: {
                                dividends: {
                                    show: !1
                                },
                                earnings: {
                                    show: !1
                                },
                                splits: {
                                    show: !1
                                }
                            },
                            symbol: "PLACEHOLDER",
                            type: "Symbol",
                            showPrevious: !1
                        }],
                        scale: "Linear"
                    }],
                    height: 2
                }],
                version: 5
            }
        }
    },
    MbZa: function(e, t, a) {
        "use strict";
        var i = {
            options: {
                chart: {
                    type: "line",
                    height: 107,
                    spacing: [10, 5, 5, 15]
                },
                tooltip: {
                    enabled: !1
                },
                credits: {
                    enabled: !1
                },
                title: {
                    text: ""
                },
                legend: {
                    display: !1
                },
                xAxis: {
                    gridLineWidth: 1,
                    type: "datetime",
                    labels: {
                        enabled: !0,
                        y: 25
                    },
                    dateTimeLabelFormats: {
                        month: "%m/%y"
                    },
                    tickPositioner: function() {
                        var e = [];
                        return this.series[0].xData.forEach(function(t) {
                            "function" != typeof t.getFullYear && (t = new Date(t)), e.push(Date.UTC(t.getFullYear(), t.getMonth(), t.getDate()))
                        }), e.info = {
                            unitName: "month",
                            higherRanks: {}
                        }, e
                    },
                    lineColor: "transparent"
                },
                yAxis: {
                    title: {
                        text: null
                    },
                    gridLineWidth: 0,
                    labels: {
                        enabled: !0
                    },
                    opposite: !0
                },
                plotOptions: {
                    series: {
                        marker: {
                            enabled: !0,
                            symbol: "circle"
                        },
                        states: {
                            hover: {
                                lineWidth: 2
                            }
                        }
                    },
                    line: {
                        lineWidth: 2
                    }
                }
            },
            series: [{
                name: "chart",
                showInLegend: !1
            }]
        };
        e.exports = i
    },
    Mdt2: function(e, t) {
        e.exports = '<div class=js-modal-overlay-news> <div data-left-right-arrow data-left-fn=goToPrevItem(prevItem) data-right-fn=goToNextItem(nextItem) data-close-fn=hideOverlayModal()> <div class=modal-mobile-navigation data-ng-class="{\'hide-for-medium-up\': !compactModal}"> <div class=modal-prev> <a href="[[ prevItem ]]" data-ng-if=prevItem> <i class=bc-glyph-chevron-left></i> Previous </a> <span data-ng-if=!prevItem> <i class=bc-glyph-chevron-left></i> Previous </span> </div> <div class=modal-next> <a href="[[ nextItem ]]" data-ng-if=nextItem> Next <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if=!nextItem> Next <i class=bc-glyph-chevron-right></i> </span> </div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class=modal-sidebar-left data-ng-class="{\'show-for-medium-up\': !compactModal, \'hide\': compactModal}" data-ng-show=!dataLoading> <div class=modal-sidebar-background></div> <div class=modal-prev> <a href="[[ prevItem ]]" data-ng-click=goToPrevItem(prevItem) data-ng-if=prevItem> <i class=bc-glyph-chevron-left></i> </a> <span data-ng-if=!prevItem> <i class=bc-glyph-chevron-left></i> </span> </div> </div> <div class=modal-sidebar-right data-ng-class="{\'show-for-medium-up\': !compactModal, \'hide\': compactModal}" data-ng-show=!dataLoading> <div class=modal-sidebar-background></div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> <div class=modal-next> <a href="[[ nextItem ]]" data-ng-click=goToNextItem(nextItem) data-ng-if=nextItem> <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if=!nextItem> <i class=bc-glyph-chevron-right></i> </span> </div> </div> <div class=modal-share-group data-ng-if="!dataLoading && item"> <p>Share</p> <ul bc-social-share> <li class=facebook title="Share on Facebook"> <a bc-facebook-share data-title="[[ ::item.title ]]" data-url="[[ shareLink ]]"> <i class=bc-glyph-facebook></i> </a> </li> <li class=twitter title="Share on Twitter"> <a bc-twitter-share data-title="[[ ::item.title ]]" data-url="[[ shareLink ]]"> <i class=bc-glyph-twitter></i> </a> </li> <li class=linkedin title="Share on LinkedIn"> <a bc-linkedin-share data-title="[[ ::item.title ]]" data-url="[[ shareLink ]]"> <i class=bc-glyph-linkedin></i> </a> </li> <li class=google-plus title="Share on Google+"> <a bc-gplus-share data-title="[[ ::item.title ]]" data-url="[[ shareLink ]]"> <i class=bc-glyph-google-plus></i> </a> </li> <li class=email title="Share via Email"> <a data-bc-mail-share-news data-title="[[ ::item.title ]]" data-url="[[ shareLink ]]" class=emailShare> <i class=bc-glyph-envelope-o></i> </a> </li> <li class=print title=Print> <a bc-print-share data-container-id=bcModalContent> <i class=bc-glyph-print></i> </a> </li> </ul> </div> <div class=modal-inner> <div class=modal-content> <div class=throbber-wrapper data-ng-show=dataLoading> <img alt="Loading, please wait..." src=/img/throbber.gif /> </div> <div class="row collapse" data-ng-show=!dataLoading> <div class="small-12 column column-content"> <div id=bcModalContent class=bc-article> <div class=article-header-wrapper> <div class=article-author-image data-ng-if="item.feed === \'IF\' && item.thumbnail"> <img data-ng-src="[[ item.thumbnail.url ]]" alt="[[ item.thumbnail.caption ]]"> </div> <h1 class=article-title>[[ item.title ]]</h1> <div class=article-meta> <span class=article-author data-ng-if="item.author && item.author !== \'N/A\'"> [[ item.author ]] - </span> <span class=article-feed data-ng-if=item.feedName> <span data-ng-if="item.feedUrl != \'N/A\'"> <a href="[[ item.feedUrl ]]" target=_blank>[[ item.feedName ]]</a> </span> <span data-ng-if="item.feedUrl == \'N/A\'"> [[ item.feedName ]] </span> - </span> <span class=article-published data-ng-if=item.published> [[ item.published ]] </span> </div> </div> <div class=article-image data-ng-if="item.image && item.image.url && item.media !== \'video\'"> <img data-ng-src="[[ item.image.url ]]" alt=""/> <div class=image-caption data-ng-bind-html=item.image.caption></div> </div> <div class=article-content data-ng-bind-html="item.content | parseHTML" data-ng-if="item.media !== \'video\' && !compactModal"></div> <div class=article-content data-ng-bind-html="item.content | addTargetBlank | parseHTML" data-ng-if="item.media !== \'video\' && compactModal"></div> <div id=grabDiv1921523 class=article-video data-ng-show="item.media === \'video\'"></div> </div> </div> <div class="small-12 column column-sidebar"> <div id=news_modal_ads data-ng-class="{\'show-for-large-up\': !compactModal, \'hide\': compactModal}"></div> <div class="background-widget bc-widget-next-story" data-ng-if="nextItem && nextItemMeta"> <a href="[[ nextItem ]]"> <div class=next-story-header> Next Story <i class=bc-glyph-chevron-right></i> </div> <div class=next-story-title> [[ nextItemMeta.title ]] </div> <div class=next-story-meta> <span>[[ nextItemMeta.feed ]]</span> <span> - [[ nextItemMeta.published ]]</span> </div> </a> </div> <div class=background-widget data-ng-if=relatedSymbols> <h3>Related Symbols</h3> <div class=widget-content> <barchart-minitable-double-row data-content=relatedSymbols.content data-options=relatedSymbols.options data-links-open-new-tab=compactModal> </barchart-minitable-double-row> </div> </div> <div class=background-widget data-ng-if=item.related> <h3>More News</h3> <div class=widget-content> <div class=more-news-block> <div class=news-row data-ng-repeat="relatedItem in item.related"> <a href="/story/[[ currentURL ]]/[[ relatedItem.id ]]/[[ relatedItem.slug ]]">[[ relatedItem.title ]]</a> <p class=author>[[ relatedItem.feedName ]] - [[ relatedItem.published ]]</p> </div> </div> </div> </div> </div> </div> </div> </div> </div> </div> '
    },
    MdxV: function(e, t, a) {
        "use strict";
        e.exports = {
            advAlerts: {
                header: "Try Advanced Alerts",
                content: "<p>Upgrade to a Barchart Premier membership and get Advanced Alerts. Set multiple alerts using Price, Technical, and Opinion data variables.</p> <p>Receive your alerts via text SMS messages or email. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            advOptions: {
                header: "Advanced Options Screeners",
                content: "<p>Barchart Premier members can add unlimited filters to screen for options, including advanced strategies for Covered Calls, Naked Puts and Option Spreads.</p> <p>Screen on symbol, expiration date, volume, moneyness, and more. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            chartDownload: {
                header: "Chart Data Downloads",
                content: "<p>Barchart Premier members can download the data from any chart, including study values, to a comma separated value file.</p> <p>Chart downloads count towards the daily limit of 100 for Premier Members. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            cotReports: {
                header: "Commitments of Traders Historical Reports",
                content: '<p>Your Barchart Premier membership provides access to COT Data Reports that show how "big money" moves the markets today.</p> <p>Available for viewing in tabular format, or for download, these reports reveal which big-money participants are buying and selling. <strong>Try Barchart Premier - First Month Free.</strong></p>'
            },
            csvWatchlist: {
                header: ".csv Attachments with Email",
                content: "<p>Your Barchart Premier membership lets you receive a .csv file attachment with your End-of-Day Watchlist email for uploading the day's activity to a 3rd party spreadsheet.</p><p><strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            dashCharts: {
                header: 'View "thumbnail charts" for groups of symbols',
                content: '<p>As a Barchart Premier member, you can view mini charts for a group of symbols found in your Watchlist or Portfolio.</p> <p>Using the "FlipCharts ribbon" at the top of the page, select a grid pattern ... from one to eight thumbnail charts.</p><p><strong>Try Barchart Premier - First Month Free.</strong></p>'
            },
            eodReports: {
                header: "Premier End-of-Day Reports",
                content: "<p>Barchart Premier members can track symbols from Barchart's exclusive signals and indicators tables. Your Barchart Premier membership lets you choose to receive end-of-day recaps of top rated symbols directly to your inbox. <strong>Try Barchart Premier - First Month Free.</strong></p> "
            },
            eodScreeners: {
                header: "End-of-Day Screener Reports",
                content: "<p>Barchart Premier members can automatically send the results of any screener direct to their inbox.</p> <p>Choose your email layout, number of top results to return ... even get a .csv file for analysis in 3rd party spreadsheets. <strong>Try Barchart Premier - First Month Free.</strong></p> "
            },
            histDownload: {
                header: "Data Downloads Back to Jan. 1 2000",
                content: "<p>Barchart Premier members can download historical data back to January 1st, 2000, and can download additional underlying chart data and study values using the Interactive Charts.</p>"
            },
            homeSymbols: {
                header: "Customized Homepage Symbols",
                content: "<p>Barchart Premier members can customize the symbols appearing on the homepage.</p><p>This gives you a glimpse into the markets that matter most to you when coming to the website. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            listScreen: {
                header: "Advanced Screening Filters, Screens Based on Major Pages",
                content: "<p>Upgrade to Barchart Premier and pull the symbols from major Indices, or from many of your favorite pages like Top 100 Stocks or Volume Leaders into the Screener for further analysis.</p> <p>These advanced filters let you narrow down your focus to screen for interesting candidates. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            moreTemplates: {
                header: "Unlimited Chart Templates",
                content: "<p><strong>You've Reached Your Chart Template Limit</strong>.</p><p> With a Barchart Premier membership, you can create and manage and unlimited number of Custom Chart Templates.</p><p>Chart Templates let you save your preferred aggregations, bar types and study configurations for quick access and to save time. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            morePortfolios: {
                header: "Unlimited Portfolios",
                content: "<p>Barchart Premier members can create and manage an unlimited number of Portfolios to track proft/loss (site members with free membership are limited to 5 Portfolios total.)</p><p>In addition, you may opt to receive end-of-day emails on any Portfolio you create. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            morePriceAlerts: {
                header: "Unlimited Price Alerts",
                content: '<p>With a Barchart Premier membership, you can create an unlimited number of Alerts (site members with free membership are limited to a maximum of 50 basic alerts.)</p><p>Barchart Premier also provides access to "Advanced Alerts" with additional Price, Technical, and Opinion filters and SMS text messaging. <strong>Try Barchart Premier - First Month Free.</strong></p>'
            },
            moreScreeners: {
                header: "Unlimited Saved Screeners",
                content: "<p>Barchart Premier members can create and save an unlimited number of Screeners, used to find promising opportunities or monitor the markets (site members with free membership are limited to 5 Saved Screeners total.) </p><p><strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            moreViews: {
                header: "Unlimited Custom Views",
                content: "<p><strong>You've Reached Your Custom View Limit</strong>.</p><p>With a Barchart Premier membership, you can create and manage and unlimited number of Custom Views.</p><p>Custom Views provide access to many other data points, allowing you to analyze a set of symbols using criteria you define. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            moreWatchlists: {
                header: "Unlimited Watchlists",
                content: "<p>Barchart Premier members can create and manage an unlimited number of Watchlists (site members with free membership are limited to 5 Watchlists total.)</p><p>In addition, you may opt to receive end-of-day emails on any Watchlist you create. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            myCharts: {
                header: 'Save Custom "My Charts"',
                content: "<p>Barchart Premier members can save up to 1000 custom charts for the same symbol, each with their own time frame, studies, and annotations.</p> <p>Similar in concept to a Portfolio of charts, you can save multiple spread charts for a commodity, or different views for the same symbol. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            optCCalls: {
                header: "Advanced Options Screeners",
                content: "<p>Barchart Premier members can add unlimited filters to screen for options, including advanced strategies for Covered Calls, Naked Puts and Option Spreads.</p> <p>Screen on symbol, expiration date, volume, moneyness, and more. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            optNPuts: {
                header: "Advanced Options Screeners",
                content: "<p>Barchart Premier members can add unlimited filters to screen for options, including advanced strategies for Covered Calls, Naked Puts and Option Spreads.</p> <p>Screen on symbol, expiration date, volume, moneyness, and more. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            optScreener: {
                header: "Advanced Options Screeners",
                content: "<p>Barchart Premier members can add unlimited filters to screen for options, including advanced strategies for Covered Calls, Naked Puts and Option Spreads.</p> <p>Screen on symbol, expiration date, volume, moneyness, and more. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            optSpreads: {
                header: "Advanced Options Screeners",
                content: "<p>Barchart Premier members can add unlimited filters to screen for options, including advanced strategies for Covered Calls, Naked Puts and Option Spreads.</p> <p>Screen on symbol, expiration date, volume, moneyness, and more. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            portEmail: {
                header: "End-of-Day Portfolio Profit/Loss Emails",
                content: "<p>Your Barchart Premier membership lets you receive the end-of-day Portfolio email showing your Portfolio's profit/loss for the day.</p><p>This feature provides the option for you to get your daily recap in a format that helps you track the profitability of your investments. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            pmPreferences: {
                header: "More Account Customization",
                content: "<p>Barchart Premier members have additional options to further tailor your account.</p> <p><strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            saveEveryChart: {
                header: "Save Unique Charts for Every Symbol",
                content: '<p>Barchart Premier members can change their chart saving preference to always save a unique chart setup for each symbol you view.</p> <p>If you are looking to save multiple charts for the same symbol, try "My Charts" ... also a Barchart Premier feature.</p>'
            },
            scrView: {
                header: "Save a Preferred View and Sort to your Screener",
                content: "<p>Upgrade to Barchart Premier and select your preferred View and Sort to use next time you run a saved screener.</p> <p>Choose any view, including the screener's Filter View or one of your Custom Views. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            seasonals: {
                header: "Seasonal Price Charts for Commodities",
                content: "<p>Your Barchart Premier membership gives access to seasonal price trends on commodity charts, allowing you to better visualize potential price moves.</p> <p>Seasonal Patterns help you identify trends that happen consistently with events such as expiration, harvest, or holidays. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            signals: {
                header: "Chart Indicator Trading Signals",
                content: "<p>Upgrade to a Barchart Premier membership and view the historical Buy/Sell signals given by an indicator on a chart at the specific date on which the signal is triggered.</p> <p>These charts can teach you how to recognize future Buy/Sell patterns in your chart analysis. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            tileView: {
                header: "Watchlist Tile View with Charts on Hover",
                content: '<p>Upgrade to a Barchart Premier membership and view your Watchlist in "tile" format. Hover over a tile to view a Daily thumbnail chart.</p> <p>This view gives you a different perspective of the symbols you follow. <strong>Try Barchart Premier - First Month Free.</strong></p>'
            },
            unusualOpt: {
                header: "Advanced Options Screeners",
                content: "<p>Barchart Premier members can filter the options database to find options with unusual activity, or run advanced strategies for Covered Calls, Naked Puts and Option Spreads.</p> <p>Screen on symbol, expiration date, volume, moneyness, and more. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            watchEmail: {
                header: "Custom End-of-Day Watchlist Emails",
                content: "<p>Your Barchart Premier membership lets you receive end-of-day Watchlist emails using any of your Custom Views.</p><p>This feature provides the ultimate flexibility for you to get your daily recap in the format that best fits your trading style. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            },
            wlMidday: {
                header: "Market-Open or Mid-Day Watchlist Emails",
                content: "<p>Your Barchart Premier membership lets you receive additional email recaps of your Watchlist other than the End-of-Day email that My Barchart members may receive.</p><p>Get email recaps at Market-Open (9a CT), or Mid-Day (noon CT). This features gives you the information you need... when you want it... to stay on top of the markets!</p>"
            },
            wlScreen: {
                header: "Screen on Watchlists/Portfolios",
                content: "<p>Upgrade to Barchart Premier and pull the symbols from any of your Watchlists or Portfolios into the screener for further analysis.</p> <p>When you <strong>save a screener built on a Watchlist or Portfolio</strong>, you can re-run the screener at any time using your custom filters. <strong>Try Barchart Premier - First Month Free.</strong></p>"
            }
        }
    },
    MiTI: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = a("dx5o");
            return {
                restrict: "A",
                scope: {
                    callback: "&autocompleteCallback",
                    symbolNotFoundCallback: "&?"
                },
                require: "ngModel",
                link: function(a, o, n, s) {
                    a.searchRequestTimeout = null, a.searchResults = null, a.searchResultsVisible = !1, a.selectedItemIndex = null, a.extended = n.extended || !1, a.searchForQuery = function(i) {
                        t.connect().then(function() {
                            t.getSearchResults(i).then(function(t) {
                                t.instruments.length > 0 ? (a.searchResults = t.instruments.slice(0, 6), l(), o.after(e(r)(a))) : a.searchResults = null, a.$apply()
                            })
                        })
                    }, a.$watch(function() {
                        return s.$modelValue
                    }, function(e) {
                        e && e.length ? a.searchForQuery(e) : l()
                    }), a.selectSymbol = function(e) {
                        s.$setViewValue(e), s.$render(), l(), a.searchResultsVisible = !1, i(function() {
                            a.callback()
                        }, 500)
                    }, o.on("focus", function() {
                        a.searchResultsVisible = !0, a.focusActive = !0
                    }), o.on("blur", function() {
                        a.focusActive = !1, setTimeout(function() {
                            a.focusActive || (a.searchResultsVisible = !1)
                        }, 100)
                    }), a.setSelectedItem = function(e) {
                        a.selectedItemIndex = e
                    }, a.selectNextItem = function() {
                        a.searchResults && ("number" == typeof a.selectedItemIndex && a.selectedItemIndex < a.searchResults.length - 1 ? a.selectedItemIndex++ : a.selectedItemIndex = 0, a.$apply())
                    }, a.selectPrevItem = function() {
                        a.searchResults && ("number" == typeof a.selectedItemIndex && a.selectedItemIndex > 0 ? a.selectedItemIndex-- : a.selectedItemIndex = a.searchResults.length - 1), a.$apply()
                    }, o.on("keydown", function(e) {
                        switch (e.keyCode) {
                            case 38:
                                a.selectPrevItem();
                                break;
                            case 40:
                                a.selectNextItem();
                                break;
                            case 13:
                                a.selectedItemIndex && a.searchResults[a.selectedItemIndex] ? a.selectSymbol(a.searchResults[a.selectedItemIndex].symbol) : null == a.selectedItemIndex && a.searchResults && a.searchResults.length > 0 ? a.selectSymbol(a.searchResults[0].symbol) : (a.searchResultsVisible = !1, a.symbolNotFoundCallback && "function" == typeof a.symbolNotFoundCallback && a.symbolNotFoundCallback(), a.$apply(), i(function() {
                                    a.callback()
                                }, 500)), o[0].blur()
                        }
                    });
                    var l = function() {
                        angular.element(document.querySelectorAll(".js-symbol-autocomplete")).remove(), a.selectedItemIndex = null
                    }
                }
            }
        }
        i.$inject = ["$compile", "searchConnectionService", "$timeout"], e.exports = i
    },
    "Mj+o": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            function i(e, t) {
                angular.element(e[0].querySelector(".barchart-sort-asc")).length && angular.element(e[0].querySelector(".barchart-sort-desc")).length || console.error('Hello my name is "barchart-sorting" directive and I am added click even handled on my element, and I am looking for "barchart-sort-asc" and "barchart-sort-desc" and I did not find, something went wrong'), !1 === t ? (angular.element(e[0].querySelector(".barchart-sort-asc")).removeClass("hide"), angular.element(e[0].querySelector(".barchart-sort-desc")).addClass("hide")) : (angular.element(e[0].querySelector(".barchart-sort-desc")).removeClass("hide"), angular.element(e[0].querySelector(".barchart-sort-asc")).addClass("hide"))
            }

            function r(e) {
                var t = angular.element(e[0].querySelectorAll("[class*=barchart-sort]"));
                t.length || console.error('Hello my name is "barchart-sorting" directive and I added click even handled on my element, and I am looking for all "<i></i>" elements and I can not find them, looks like something went wrong'), t.addClass("hide")
            }
            return {
                restrict: "A",
                scope: {
                    barchartSortingKey: "=",
                    barchartSortingContent: "=",
                    barchartSortingData: "=",
                    barchartSortingGuid: "=",
                    barchartSortingForceReload: "=",
                    barchartSortingBlacklist: "=",
                    barchartSortingOptions: "=",
                    barchartSortingOrderBy: "=",
                    barchartSortingOrderDir: "=",
                    barchartSortingOrderShared: "@",
                    fieldTypes: "="
                },
                link: function(o, n) {
                    if (void 0 === o.barchartSortingOptions || void 0 === o.barchartSortingOptions.sort || !0 !== o.barchartSortingOptions.sort.disable) {
                        o.dir = !1;
                        var s = !1;
                        o.barchartSortingContent && o.fieldTypes && "string" === o.fieldTypes[o.barchartSortingKey] && (o.dir = !0, s = !0),
                            function(e) {
                                e.append('<i class="hide barchart-sort-asc bc-glyph-sort-asc"></i><i class="hide barchart-sort-desc bc-glyph-sort-desc"></i>')
                            }(n), o.barchartSortingOrderBy === o.barchartSortingKey && (o.dir = "asc" !== o.barchartSortingOrderDir, i(n, o.dir));
                        var l = !!o.barchartSortingForceReload,
                            c = [];
                        if (void 0 !== o.barchartSortingOptions && void 0 !== o.barchartSortingOptions.sort && void 0 !== o.barchartSortingOptions.sort.blacklist && (c = o.barchartSortingOptions.sort.blacklist), void 0 !== o.barchartSortingBlacklist && (c = o.barchartSortingBlacklist), ~c.indexOf(o.barchartSortingKey) || n.on("click", function() {
                                o.dir = !o.dir, t.$broadcast("tableSorted", {
                                    field: o.barchartSortingKey,
                                    dir: o.dir,
                                    guid: o.barchartSortingGuid || null
                                }), o.barchartSortingOptions && o.barchartSortingOptions.noPagination || (a.setPathParameter("orderBy", o.barchartSortingKey), a.setPathParameter("orderDir", o.dir ? "desc" : "asc")), void 0 !== o.barchartSortingContent && void 0 !== o.barchartSortingOptions && o.barchartSortingOptions.pagination && void 0 !== o.barchartSortingContent[0].total && o.barchartSortingContent[0].total > o.barchartSortingContent[0].count ? t.$broadcast("reorderDataTable", {
                                    field: o.barchartSortingKey,
                                    dir: o.dir,
                                    guid: o.barchartSortingGuid
                                }) : l ? t.$broadcast("reorderDataTable", {
                                    field: o.barchartSortingKey,
                                    dir: o.dir,
                                    guid: o.barchartSortingGuid
                                }) : (o.barchartSortingOptions && o.barchartSortingOptions.portfolioTransaction && o.barchartSortingContent[0].count > o.barchartSortingOptions.pagination ? t.$broadcast("reloadPortfolioData", {
                                    field: o.barchartSortingKey,
                                    dir: o.dir
                                }) : d(o.barchartSortingKey, o.dir), setTimeout(function() {
                                    t.$broadcast("tableHasBeenSorted", {
                                        data: o.barchartSortingContent[0].data,
                                        options: o.barchartSortingOptions
                                    })
                                }, 0))
                            }), void 0 !== o.barchartSortingOptions && void 0 !== o.barchartSortingOptions.sort && void 0 !== o.barchartSortingOptions.sort.default)
                            if (o.barchartSortingOptions.sort.default.column === o.barchartSortingKey) d(o.barchartSortingOptions.sort.default.column, "asc" !== o.barchartSortingOptions.sort.default.dir);
                        o.$on("tableSorted", function(e, a) {
                            a.field && o.barchartSortingGuid === a.guid ? n.hasClass(a.field) ? (o.barchartSortingKey = a.field, o.dir = a.dir, i(n, a.dir)) : r(n) : "true" !== o.barchartSortingOrderShared && "1" !== o.barchartSortingOrderShared || (setTimeout(function() {
                                t.$broadcast("tableHasBeenSorted", {
                                    data: o.barchartSortingContent[0].data,
                                    options: o.barchartSortingOptions
                                })
                            }, 0), n.hasClass(a.field) ? (o.barchartSortingKey = a.field, o.dir = a.dir, i(n, a.dir), d(a.field, a.dir)) : r(n))
                        })
                    }

                    function d(t, a) {
                        o.$evalAsync(function() {
                            if (void 0 !== o.barchartSortingContent)
                                for (var i = o.barchartSortingContent.length, r = 0; r < i; r++) o.barchartSortingContent[r].data = e.sort(t, o.barchartSortingContent[r].data, a, !s);
                            else o.barchartSortingData = e.sort(o.barchartSortingKey, o.barchartSortingData, a)
                        })
                    }
                }
            }
        }
        i.$inject = ["barchartDatatableSorting", "$rootScope", "locationService"], e.exports = i
    },
    MlPG: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    colorModel: "=",
                    useRgba: "=",
                    label: "="
                },
                link: function(a, i, r) {
                    function o() {
                        if (a.colorModel.indexOf("rgba") > -1) {
                            var t = e.rgbaToHex(a.colorModel);
                            a.color.hex = t.color.toUpperCase(), a.color.opacity = t.opacity
                        } else a.color.hex = a.colorModel.toUpperCase()
                    }

                    function n() {
                        null === a.color.opacity ? a.colorModel = a.color.hex : a.colorModel = e.hexToRgba(a.color.hex, a.color.opacity)
                    }
                    a.colors = ["#BC41CE", "#5700B8", "#9470FF", "#007BE7", "#0C32FF", "#000000", "#FFAF1C", "#FF8300", "#EF4226", "#00B04B", "#B25900", "#AAAAAA"], a.fillTransparencies = t.fillTransparencies, a.color = {
                        hex: null,
                        opacity: null
                    }, a.colorsVisible = !1, o(), a.$watch("colorModel", function(e, t) {
                        e !== t && o()
                    }), a.$watch("useRgba", function(t, i) {
                        if (!1 === i && !0 === t && (a.colorModel = e.hexToRgba(a.colorModel, .3), o()), !1 === t) {
                            if (-1 !== a.colorModel.indexOf("rgba")) {
                                var r = e.rgbaToHex(a.colorModel);
                                a.colorModel = r.color, a.color.hex = r.color
                            }
                            a.color.opacity = null
                        }
                    }), a.setColor = function(e) {
                        a.color.hex = e, a.colorsVisible = !1, n()
                    }, a.setOpacity = function() {
                        n()
                    }, a.hideColorsSelector = function() {
                        a.colorsVisible = !1
                    }
                },
                template: a("JiBO")
            }
        }
        i.$inject = ["utils", "interactiveChartAnnotationsConfig"], e.exports = i
    },
    MsKD: function(e, t) {
        e.exports = '<div class=bc-premier-benefits-table> <div class=row> <div class="column small-12 medium-10 medium-offset-1"> <table> <thead> <tr> <th class=bc-premier-benefits-table__cell-title colspan=2>[[ table.title ]]</th> <th class="bc-premier-benefits-table__cell-barchart show-for-medium-up">Free Membership</th> <th class="bc-premier-benefits-table__cell-premier show-for-medium-up">Premier</th> </tr> </thead> <tbody data-ng-repeat="row in table.rows track by $index"> <tr data-ng-click="toggleDescription(row, $index)" class=bc-premier-benefits-table__row> <td class=bc-premier-benefits-table__cell-controls> <i class=bc-glyph-plus data-ng-hide=row.visible></i> <i class=bc-glyph-minus data-ng-show=row.visible></i> </td> <td class=bc-premier-benefits-table__cell-feature> <div class=bc-premier-benefits-table__title>[[ row.title ]]</div> <div class=bc-premier-benefits-table__short-description>[[ row.short_description ]]</div> </td> <td class="bc-premier-benefits-table__cell-barchart show-for-medium-up"> <span class="bc-glyph-minus-circle red" data-ng-show="row.my_barchart !== true && !row.my_barchart"></span> <span data-ng-class="{\'text-green\': row.my_barchart === \'Unlimited\'}" data-ng-show="row.my_barchart && row.my_barchart !== true">[[ ::row.my_barchart ]]</span> </td> <td class="bc-premier-benefits-table__cell-premier show-for-medium-up"> <span class=bc-premier-benefits-table__feature-mark data-ng-show="row.premier === true"></span> <span data-ng-class="{\'text-green\': row.premier === \'Unlimited\'}" data-ng-show="row.premier && row.premier !== true">[[ ::row.premier ]]</span> </td> </tr> <tr class=bc-premier-benefits-table__row-full-description data-ng-show=row.visible> <td colspan=4> <div class=bc-premier-benefits-table__full-description-wrapper> <div data-ng-bind-html=row.description class=bc-premier-benefits-table__description-text></div> <a data-bc-scroll-to=bc-premier-subscription__form data-ng-if=!isPremier class="bc-button light-blue save">Start Free Trial</a> </div> </td> </tr> </tbody> </table> </div> </div> </div> '
    },
    "N+ca": function(e, t, a) {
        "use strict";
        angular.module("bcSocial", []).constant("bcShareConfig", a("L/eQ")).service("bcShareService", a("OF70")).directive("bcSocialShare", a("Krg7")).directive("bcSocialChartShare", a("FwFJ")).directive("bcFacebookShare", a("J4Gk")).directive("bcFacebookShareChart", a("IEIL")).directive("bcTwitterShare", a("lQPl")).directive("bcTwitterShareChart", a("fhFH")).directive("bcGplusShare", a("XV5m")).directive("bcGplusShareChart", a("7bcZ")).directive("bcLinkedinShare", a("VhAZ")).directive("bcLinkedinShareChart", a("9iHu")).directive("bcMailShareChart", a("2Tgn")).directive("bcMailShareNews", a("FyVa")).directive("bcPrintShare", a("oupf"))
    },
    "N+w6": function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "A",
                scope: {
                    symbolData: "="
                },
                link: function(r, o) {
                    var n;
                    t.isMobileAndTablet() ? o.bind("touchend", function(e) {
                        !0 !== n && s()
                    }).bind("touchmove", function(e) {
                        n = !0
                    }).bind("touchstart", function() {
                        n = !1
                    }) : (o.bind("click", s), r.$on("$destroy", function() {
                        o.unbind("click", s)
                    }));

                    function s() {
                        i.$broadcast("bcOpenMoreDataModal"), e.open({
                            template: a("fLig"),
                            controller: "bcSymbolWidgetsModalCtrl",
                            windowClass: "symbol-widgets-scroller-modal",
                            resolve: {
                                symbolData: function() {
                                    return r.symbolData
                                }
                            }
                        })
                    }
                }
            }
        }
        i.$inject = ["$modal", "utils", "$rootScope"], e.exports = i
    },
    "N/DK": function(e, t, a) {
        "use strict";
        e.exports = {
            expression: null,
            template: null,
            period: "P6M",
            range: {
                from: null,
                to: null
            },
            aggregation: {
                unit: "Day",
                size: 1,
                spec: "None",
                isContractVolume: void 0
            },
            settings: {
                barType: {
                    curveStyle: "OHLC",
                    colors: ["#000000"],
                    lineWidth: 1
                },
                scaleValue: "price",
                scaleType: "Linear",
                maxPadding: .05,
                minPadding: .05,
                snapAnnotationsToPrices: !0,
                marginBars: 2,
                navigator: !0,
                minorGridLines: !1,
                preventLabelOverlap: !1,
                events: {
                    dividends: !1,
                    earnings: !1,
                    splits: !1
                },
                tooltip: !0,
                dividendsAdjust: !1,
                backAdjust: !1,
                extendedHours: !1,
                contractRoll: "combined",
                daysToExpiration: 1,
                chartTheme: "Light",
                dimensions: {
                    chartHeight: 650,
                    additionalPaneHeight: 50
                },
                batsData: !1
            },
            compareSymbols: [{
                symbol: null,
                leftScale: !1,
                color: "#2284DD"
            }, {
                symbol: null,
                leftScale: !1,
                color: "#F18900"
            }, {
                symbol: null,
                leftScale: !1,
                color: "#BC41CE"
            }, {
                symbol: null,
                leftScale: !1,
                color: "#00AF4B"
            }, {
                symbol: null,
                leftScale: !1,
                color: "#25329B"
            }]
        }
    },
    N1rJ: function(e, t) {
        e.exports = '<div class=templates-list-wrapper> <div class=templates-list-tree ui-tree=treeOptions> <div class="templates-tree-head clearfix"> <div class=head-left-container> Name </div> <div class=head-right-container> <div class=hrc-right-block> <div class=column-order> Order </div> </div> <div class=hrc-left-block> <div class=column-description> Description </div> </div> </div> </div> <ol class=templates-tree-nodes ui-tree-nodes data-ng-model=templates> <li class=templates-tree-node ui-tree-node data-ng-repeat="template in templates"> <div class="templates-tree-handle clearfix" ui-tree-handle> <div class=item-left-container data-nodrag> <div class=item-minus> <i class=bc-glyph-minus-circle data-ng-click=removeTemplate(template)></i> </div> <div class=item-name> <a target=_self href="[[ \'/my/custom-chart-templates/interactive/edit/\' + template.id ]]" title="Change template settings"> [[ template.name ]] </a> </div> <div class=item-delete data-ng-show="pendingRemoveTemplate === template"> <span>Delete Template?</span> <a class="bc-button small light-blue" data-ng-click=confirmRemoveTemplate()>Yes</a> <a class="bc-button small grey" data-ng-click=cancelRemoveTemplate()>No</a> </div> </div> <div class=item-right-container> <div class=irc-right-block> <div class=item-bars> <i class=nodrag-area data-nodrag></i> <i class=bc-glyph-bars></i> </div> </div> <div class=irc-left-block> <div class=item-description> <span class=desktop> [[ template.description ]] </span> <span class=tablet data-nodrag> [[ template.description ]] </span> </div> </div> </div> </div> </li> </ol> </div> </div> '
    },
    N5Bs: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.link = window.config.routes["home.welcomeTour"], e.skipTutorial = function() {
                t.close("skip")
            }, e.cancel = function() {
                t.dismiss("cancel")
            }, e.close = function() {
                t.close("completed")
            }
        }
        i.$inject = ["$scope", "$modalInstance"], e.exports = i
    },
    N7MB: function(e, t, a) {
        "use strict";

        function i(e) {
            var t, a, i, r, o;

            function n(t, a) {
                var i, n, d, u, p;
                if (t.length) return i = c(t, a), n = t.length - a.length, d = function(e, t) {
                    var a, i, o;
                    a = e[0], o = c(e, t), i = s(a) ? 1 : l(a) ? 1 - r * o : 1;
                    return i
                }(t, a), u = 0, p = 0, e.forEach(t, function(e, t) {
                    var c, m;
                    n > 0 && t <= ++n ? (c = a[p], m = s(e) ? d - r * u : l(e) ? d + r * u : d - r * u, u < i ? u++ : (u = 0, p++)) : (c = a[p], m = 1, p++), e[o + "Color"] = c, e[o + "Opacity"] = m
                }), t
            }

            function s(e) {
                return e.raw[o] > 0
            }

            function l(e) {
                return e.raw[o] < 0
            }

            function c(e, t) {
                return Math.ceil(e.length / t.length) - 1
            }
            t = ["#007D34", "#25794F", "#38775C", "#4B746A", "#4A717B"], a = ["#735A78", "#914F60", "#A5344A", "#C40000"], i = ["#546585"], r = .1, this.getColors = function(r, c) {
                var d, u, p;
                return o = c, d = [], u = [], p = [], e.forEach(r, function(e) {
                    s(e) ? d.push(e) : l(e) ? u.push(e) : p.push(e)
                }), n(d, t), n(u, a), n(p, i), d.concat(p, u)
            }
        }
        i.$inject = ["_"], e.exports = i
    },
    NAIc: function(e, t, a) {
        "use strict";

        function i(e, t) {
            var a = !1,
                i = ["F", "G", "H", "J", "K", "M", "N", "Q", "U", "V", "X", "Z"];
            return {
                validateSymbol: function(r) {
                    var o = t.defer();
                    if (4 === (r = r.toString()).length || 5 === r.length) {
                        var n = 4 === r.length,
                            s = parseInt(r.substr(-1)),
                            l = parseInt(r.substr(-2));
                        if (Number.isInteger(s) || Number.isInteger(l)) {
                            var c = n ? r.substr(1, 1).toUpperCase() : r.substr(2, 1).toUpperCase();
                            if (-1 !== i.indexOf(c)) {
                                var d = n ? r.substr(0, 1).toUpperCase() : r.substr(0, 2).toUpperCase();
                                (function(t) {
                                    var a = {
                                        symbol: t,
                                        fields: "symbolType,symbolCode,symbol"
                                    };
                                    return e.query(a, "/quotes/get")
                                })(d += "*0").then(function(e) {
                                    e.data && e.data.length ? (a = d, o.resolve(e.data[0])) : o.reject()
                                })
                            } else o.reject()
                        } else o.reject()
                    } else o.reject();
                    return o.promise
                },
                getRootSymbol: function() {
                    if (a) return a
                }
            }
        }
        i.$inject = ["apiFactory", "$q"], e.exports = i
    },
    NBPq: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l) {
            l = l || {}, e.showDatePickerButtons = !0, e.aggregations = o[a ? "periodsFutures" : "periods"], e.periods = n.periods, e.periodSizes = s.periodSizes, e.error = null;
            var c = r.getChartGlobalConfig();
            if (e.currentChartConfig = c, e.selectedAggregation = {
                    aggregation: e.aggregations[0],
                    period: e.periods[e.aggregations[0].unit],
                    range: c.range
                }, e.aggregations.forEach(function(t, i) {
                    c.aggregation.unit !== t.unit || a && c.aggregation.spec !== t.spec || (e.selectedAggregation.aggregation = e.aggregations[i])
                }), e.periods.Day.forEach(function(e, t) {
                    var a, i;
                    "YTD" === e.period && (e.period = "P" + (a = new Date, i = new Date(a.getFullYear(), 0, 0), Math.floor((a - i) / 864e5)) + "D")
                }), e.periods[c.aggregation.unit].forEach(function(t, a) {
                    c.period === t.period && (e.selectedAggregation.period = e.periods[c.aggregation.unit][a])
                }), l.period) {
                var d = i.find(e.periods[c.aggregation.unit], {
                    period: l.period
                });
                d && (e.selectedAggregation.period = d)
            }
            e.selectedAggregation.aggregation.size = c.aggregation.size, e.changeAggregation = function() {
                var t = e.periods[e.selectedAggregation.aggregation.unit],
                    a = i.findIndex(t, {
                        period: e.selectedAggregation.period.period
                    });
                e.selectedAggregation.period = -1 === a ? t[0] : t[a], e.changePeriod()
            }, e.changePeriod = function() {
                "Intraday" === e.selectedAggregation.aggregation.unit && e.periodSizes[e.selectedAggregation.period.period] && (e.selectedAggregation.aggregation.size = e.periodSizes[e.selectedAggregation.period.period])
            }, e.changeRange = function() {
                e.selectedAggregation.range.from || (e.selectedAggregation.range.to = null)
            }, e.modalDismiss = function() {
                t.dismiss()
            }, e.modalConfirm = function() {
                if ("CUSTOM" !== e.selectedAggregation.period.period || e.selectedAggregation.range.from || e.selectedAggregation.range.to) {
                    var a = {
                        aggregation: {
                            unit: e.selectedAggregation.aggregation.unit,
                            size: e.selectedAggregation.aggregation.size,
                            spec: e.selectedAggregation.aggregation.spec
                        },
                        period: e.selectedAggregation.period.period,
                        range: e.selectedAggregation.range
                    };
                    t.close(a)
                } else e.error = "Please fill the range fields."
            }
        }
        i.$inject = ["$scope", "$modalInstance", "isFutures", "_", "interactiveChartSettings", "interactiveChartAggregationConfig", "interactiveChartPeriodConfig", "interactiveChartPeriodSizeConfig", "defaultSettings"], e.exports = i
    },
    NFnd: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            var n = 1;
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    symbol: "@",
                    period: "@",
                    aggregationSize: "@",
                    aggregationUnit: "@",
                    chartBackgroundColor: "@",
                    chartDataRangeFrom: "@",
                    chartDataRangeTo: "@",
                    xAxisVisible: "@",
                    xAxisVisibleRangeFrom: "@",
                    xAxisVisibleRangeTo: "@",
                    xAxisGridlinesVisible: "@",
                    xAxisGridlinesColor: "@",
                    xAxisTextColor: "@",
                    xAxisFormat: "@",
                    xAxisMinTickInterval: "@",
                    xAxisTickPixelInterval: "@",
                    xAxisCrosshairEnabled: "@",
                    xAxisCrosshairShowValue: "@",
                    xAxisEquidistant: "@",
                    tooltipVisible: "@",
                    yAxisVisible: "@",
                    yAxisGridlinesVisible: "@",
                    yAxisGridlinesColor: "@",
                    yAxisTextColor: "@",
                    yAxisShowLast: "@",
                    yAxisCrosshairEnabled: "@",
                    yAxisCrosshairShowValue: "@",
                    plotEventsDividends: "@",
                    plotEventsEarnings: "@",
                    plotEventsSplits: "@",
                    showPrevious: "@",
                    primaryColor: "@",
                    annualPrimaryColor: "@",
                    secondaryColor: "@",
                    lineWidth: "@",
                    style: "@",
                    ignorePeriodInitialization: "@",
                    varyColorPerBar: "@",
                    showAnnual: "@",
                    comparisonMode: "@",
                    attributes: "@",
                    title: "@",
                    state: "@"
                },
                controller: ["$scope", "$timeout", function(a, s) {
                    var l = JSON.parse(angular.element("#barchart-www-inline-data")[0].innerHTML);
                    if (l) {
                        var c = this,
                            d = JSON.parse(JSON.stringify(e)),
                            u = l[c.symbol];
                        if (void 0 !== u) {
                            var p, m = new Date(u.quote.tradeTime),
                                h = {
                                    setPeriod: function(e) {
                                        if ("true" === c.ignorePeriodInitialization || "P1D" !== e) d.display.period = e;
                                        else if (delete d.display.period, "NS India" === u.instrument.exchange || "LSE" === u.instrument.exchange) p = new Date(m.getTime()).setMonth(m.getMonth() - 1), d.data.range = {
                                            from: p,
                                            to: m.setHours(11, 59)
                                        }, d.display.xAxis.visibleRange = {
                                            from: p
                                        }, d.display.xAxis.format = "{value:%b %e}", d.data.aggregation = {
                                            size: 1,
                                            unit: "Day"
                                        }, d.display.xAxis.minTickInterval = 121e7;
                                        else if ("ASX" === u.instrument.exchange) {
                                            var t = new Date(m.getTime()).setHours(m.getHours() - 6),
                                                a = new Date(m.getTime()).setHours(m.getHours() + 6);
                                            d.data.range = {
                                                from: new Date(t).setHours(18, 0, 0, 0),
                                                to: new Date(a).setHours(0, 1, 0, 0)
                                            }, d.display.xAxis.visibleRange = {
                                                from: new Date(t).setHours(18, 0, 0, 0),
                                                to: new Date(a).setHours(0, 0, 0, 0)
                                            }, d.data.aggregation = {
                                                size: 5,
                                                unit: "Intraday"
                                            }, d.display.xAxis.format = "{value:%l%P}", d.display.xAxis.minTickInterval = 108e5
                                        } else 2 === u.instrument.symbolType || 10 === u.instrument.symbolType || 18 === u.instrument.symbolType ? (p = new Date(m.getTime()).setHours(0, 0, 0, 0), d.data.range = {
                                            from: m.setHours(0, 0, 0, 0),
                                            to: m.setHours(23, 59, 0, 0)
                                        }, d.display.xAxis.visibleRange = {
                                            from: m.setHours(0, 0, 0, 0),
                                            to: m.setHours(24, 0, 0, 0)
                                        }, d.data.aggregation = {
                                            size: 5,
                                            unit: "Intraday"
                                        }, d.display.xAxis.format = "{value:%l}", d.display.xAxis.minTickInterval = 216e5) : 16 === u.instrument.symbolType || 17 === u.instrument.symbolType ? (p = new Date(m.getTime()).setFullYear(m.getFullYear() - 2), d.data.range = {
                                            from: p,
                                            to: m.setHours(23, 59, 0, 0)
                                        }, d.display.xAxis.visibleRange = {
                                            from: p
                                        }, d.data.aggregation = {
                                            size: 1,
                                            unit: "Week"
                                        }, d.display.xAxis.format = "{value:%b '%y}") : 3 == u.instrument.symbolType ? (p = new Date(m.getTime()).setMonth(m.getMonth() - 1), d.data.range = {
                                            from: p,
                                            to: m.setHours(23, 59, 0, 0)
                                        }, d.display.xAxis.visibleRange = {
                                            from: p
                                        }, d.data.aggregation = {
                                            size: 1,
                                            unit: "Day"
                                        }, d.display.xAxis.format = "{value:%b %e}", d.display.xAxis.crosshair.format = "{value:%B %e}", d.display.xAxis.minTickInterval = 6048e5) : (d.data.range = {
                                            from: m.setHours(9, 30, 0, 0),
                                            to: m.setHours(16, 5, 0, 0)
                                        }, d.display.xAxis.visibleRange = {
                                            from: m.setHours(9, 30, 0, 0),
                                            to: m.setHours(16, 0, 0, 0)
                                        }, d.data.aggregation = {
                                            size: 5,
                                            unit: "Intraday"
                                        }, d.display.xAxis.format = "{value:%l%P}", d.display.xAxis.crosshair.format = "{value:%l:%M %p}", d.display.xAxis.minTickInterval = 72e5)
                                    },
                                    setAggregationSize: function(e) {
                                        d.data.aggregation.size = +e
                                    },
                                    setAggregationUnit: function(e) {
                                        d.data.aggregation.unit = e
                                    },
                                    setChartBackground: function(e) {
                                        d.display.chart.backgroundColor = e
                                    },
                                    setChartDataRangeFrom: function(e) {},
                                    setChartDataRangeTo: function(e) {},
                                    setXAxisVisible: function(e) {
                                        d.display.xAxis.visible = "true" === e
                                    },
                                    setXAxisVisibleRangeFrom: function(e) {},
                                    setXAxisVisibleRangeTo: function(e) {},
                                    setXAxisGridlinesVisible: function(e) {
                                        d.display.xAxis.gridLines.visible = "true" === e
                                    },
                                    setXAxisGridlinesColor: function(e) {
                                        d.display.xAxis.gridLines.color = e
                                    },
                                    setXAxisTextColor: function(e) {
                                        d.display.xAxis.textColor = e
                                    },
                                    setXAxisFormat: function(e) {
                                        d.display.xAxis.format = "{value:" + e + "}"
                                    },
                                    setXAxisMinTickInterval: function(e) {
                                        d.display.xAxis.minTickInterval = parseInt(e)
                                    },
                                    setXAxisTickPixelInterval: function(e) {
                                        d.display.xAxis.tickPixelInterval = parseInt(e)
                                    },
                                    setXAxisCrosshairEnabled: function(e) {
                                        d.display.xAxis.crosshair.enabled = "true" === e
                                    },
                                    setXAxisCrosshairShowValue: function(e) {
                                        d.display.xAxis.crosshair.showValue = "true" === e
                                    },
                                    setXAxisEquidistant: function(e) {
                                        d.display.xAxis.equidistant = "true" === e
                                    },
                                    setTooltipVisible: function(e) {
                                        d.display.tooltip.visible = "true" === e
                                    },
                                    setYAxisVisible: function(e) {
                                        d.display.yAxis.visible = "true" === e
                                    },
                                    setYAxisGridlinesVisible: function(e) {
                                        d.display.yAxis.gridLines.visible = "true" === e
                                    },
                                    setYAxisGridlinesColor: function(e) {
                                        d.display.yAxis.gridLines.color = e
                                    },
                                    setYAxisTextColor: function(e) {
                                        d.display.yAxis.textColor = e
                                    },
                                    setYAxisShowLast: function(e) {
                                        d.display.yAxis.showLastValue = "true" === e
                                    },
                                    setYAxisCrosshairEnabled: function(e) {
                                        d.display.yAxis.crosshair.enabled = "true" === e
                                    },
                                    setYAxisCrosshairShowValue: function(e) {
                                        d.display.yAxis.crosshair.showValue = "true" === e
                                    },
                                    setShowPrevious: function(e) {
                                        d.panes[0].axes[0].plots[0].showPrevious = "true" === e
                                    },
                                    setPrimaryColor: function(e) {
                                        d.panes[0].axes[0].plots[0].curves[0].colors[0] = e
                                    },
                                    setAnnualPrimaryColor: function(e) {
                                        d.panes[0].axes[0].plots[0].curves[0].colors = [e]
                                    },
                                    setSecondaryColor: function(e) {
                                        e && (d.panes[0].axes[0].plots[0].curves[0].colors[1] = e)
                                    },
                                    setLineWidth: function(e) {
                                        d.panes[0].axes[0].plots[0].curves[0].lineWidth = +e
                                    },
                                    setVaryColorPerBar: function(e) {
                                        d.panes[0].axes[0].plots[0].curves[0].varyColorPerBar = "true" === e
                                    },
                                    setAttributes: function(e) {
                                        d.panes[0].axes[0].plots[0].curves[0].attributes = JSON.parse(e)
                                    },
                                    setStyle: function(e) {
                                        d.panes[0].axes[0].plots[0].curves[0].style = e
                                    },
                                    setPlotEventsDividends: function(e) {
                                        d.panes[0].axes[0].plots[0].events.dividends.show = "true" === e
                                    },
                                    setPlotEventsEarnings: function(e) {
                                        d.panes[0].axes[0].plots[0].events.earnings.show = "true" === e
                                    },
                                    setPlotEventsSplits: function(e) {
                                        d.panes[0].axes[0].plots[0].events.splits.show = "true" === e
                                    }
                                };
                            void 0 === c.period && (c.period = "P1D"), c.state || angular.forEach(c, function(e, t) {
                                void 0 !== e && h["set" + t[0].toUpperCase() + t.slice(1)] && h["set" + t[0].toUpperCase() + t.slice(1)](e)
                            }), c.uniqueId = "simple-chart-" + n++, t.ready(function() {
                                var e = i.getFeed();
                                e.ready().then(function() {
                                    s(function() {
                                        var t;
                                        if (d.panes[0].axes[0].plots[0].symbol = c.symbol, c.state) t = e.addChart(c.uniqueId, {
                                            symbol: c.symbol,
                                            template: c.state
                                        });
                                        else if ((t = e.addChart(c.uniqueId)).load(JSON.stringify(d)), c.showAnnual) {
                                            var a = [];
                                            a.push(o.annualMainPlotAdd(c.symbol, c.annualPrimaryColor)), c.comparisonMode ? a.push(o.comparisonMode(c.comparisonMode)) : a.push(o.comparisonMode("None")), console.log("[Interactive Chart Api]: Annual Chart", JSON.stringify(a)), t.change.apply(t, a)
                                        }
                                        c.showAnnual || r.addChart(c.symbol, t), c.title && function(e) {
                                            e.setTitle({
                                                text: c.title,
                                                align: "left",
                                                x: 15,
                                                y: 25,
                                                style: {
                                                    fontSize: "18px",
                                                    color: "#888888"
                                                },
                                                floating: !0
                                            })
                                        }(t)
                                    }, 0, !1)
                                })
                            }), a.$on("$destroy", function() {
                                r.removeChart(c.symbol)
                            })
                        } else console.error("No inline data found for symbol '" + c.symbol + "'")
                    } else console.error("Element '#barchart-www-inline-data' not found!")
                }],
                controllerAs: "vm",
                template: a("gpNt")
            }
        }
        i.$inject = ["SimpleChartConfig", "highchartsNG", "bcMarketDataChart", "bcChartFactory", "interactiveChartApiActionsService"], e.exports = i
    },
    NHqO: function(e, t) {
        e.exports = '<div class=bc-interactive-chart data-ng-class="{\'full-screen\': fullScreen, \'dashboard\': dashboardMode, \'full-tab-screen\': fullTabScreen}"> <interactive-chart-premier-ads></interactive-chart-premier-ads> <div class=bc-interactive-chart__wrapper> <div class="bc-interactive-chart__wrapper-toolbar no-print" data-ng-if="currentChartSettings && !readOnlyMode"> <div class=tools> <div class=bc-interactive-chart__toolbars> <div class="row collapse flipchart-mode" data-ng-if=flipChartMode> <div class="flipchart-mode__left-column margin-top-5"> <div class="bc-interactive-chart__flipcharts-controls hide-for-print"> <a class=bc-interactive-chart__flipcharts-symbol-title target=_self href="[[ \'/\' + getSymbolSector(currentSymbol.symbolType) + \'/quotes/\' + currentSymbol.symbol + \'/interactive-chart\' ]]">[[ currentSymbol.symbolName | limitTo:35 ]]</a> <interactive-chart-quick-settings data-settings-aggregation=currentChartSettings.aggregation data-settings-period=currentChartSettings.period data-settings=currentChartSettings data-is-future=isFutureSymbol data-full-screen=fullScreen data-dashboard-mode=dashboardMode data-my-charts-mode=myChartsMode data-as-select-list=true></interactive-chart-quick-settings> <a class=bc-interactive-chart__flipcharts-watchlist data-ng-click=addToWatchlist()> <i class=bc-glyph-star></i> <span>Watch</span> </a> <a class="bc-interactive-chart__flipcharts-watchlist more-data" data-bc-symbol-widgets-modal data-symbol-data=currentSymbol title="Additional Symbol Information"> <span>More Data</span> </a> </div> </div> <div class="flipchart-mode__right-column margin-top-5 text-right"> <div class="interactive-chart-tools-block flipchart-mode__tools-block"> <div class=apply-template-wrapper data-ng-if="user && hasChartTemplates"> <a target=_self class=apply-template-label data-ng-href="[[ templatesEditingLink ]]">Template:</a> <interactive-chart-select-template data-model=currentChartSettings data-symbol-type="[[ ::currentSymbol.symbolType ]]" data-id=technical-chart-template data-flip-chart-mode=flipChartMode></interactive-chart-select-template> </div> <div class=apply-template-wrapper data-ng-if="user && !hasChartTemplates"> <a target=_self class="apply-template-label create-new" data-ng-href="[[ templatesEditingLink ]]">Create Chart Template</a> </div> <interactive-chart-tools data-current-symbol=currentSymbol data-full-screen=fullScreen data-dashboard-mode=dashboardMode></interactive-chart-tools> </div> </div> </div> <div class="bc-interactive-chart__toolbar-wrapper separator hide-for-print show-for-medium-up clearfix" data-ng-if=!flipChartMode> <interactive-chart-symbol-selector data-dashboard-mode=dashboardMode data-full-screen=fullScreen></interactive-chart-symbol-selector> <div class="bar-type-drop-down right-border-separator"> <interactive-chart-bar-type-drop-down data-current-chart-settings=currentChartSettings> </interactive-chart-bar-type-drop-down> </div> <button class="bc-button white-with-border small right-border-separator no-left-padding" data-ng-click=plotToolsModal()>+Study</button> <button class="bc-button white-with-border small chart-tools-button right-border-separator no-left-padding" data-ng-click=openToolsModal()>Tools</button> <button class="bc-button white-with-border small settings-button right-border-separator no-left-padding" data-ng-click=settingsModal()> <span data-ng-class="{\'show-for-medium-up\': dashboardMode, \'show-for-large-up\': !dashboardMode}"> Settings </span> <i class=bc-glyph-cog data-ng-class="{\'show-for-small-down\': dashboardMode, \'show-for-medium-down\': !dashboardMode}"></i> </button> <interactive-chart-quick-settings data-settings-aggregation=currentChartSettings.aggregation data-settings-period=currentChartSettings.period data-settings=currentChartSettings data-is-future=isFutureSymbol data-dashboard-mode=dashboardMode data-my-charts-mode=myChartsMode data-full-screen=fullScreen></interactive-chart-quick-settings> <interactive-chart-calendar></interactive-chart-calendar> <div class=bc-dashboard__aggregation-panel data-ng-class="{\'hide-on-interactive-chart-page\': !dashboardMode && !fullScreen}"> <interactive-chart-drop-down-aggregation data-settings=currentChartSettings data-chart-visibility=chartVisibility data-is-future-symbol=isFutureSymbol></interactive-chart-drop-down-aggregation> <interactive-chart-drop-down-period data-settings=currentChartSettings data-chart-visibility=chartVisibility data-dashboard-mode=dashboardMode> </interactive-chart-drop-down-period> <interactive-chart-field-minutes data-settings-aggregation=currentChartSettings.aggregation data-settings=currentChartSettings data-chart-visibility=chartVisibility data-ng-show="currentChartSettings.aggregation.unit === \'Intraday\'"></interactive-chart-field-minutes> </div> <div class=right> <interactive-chart-template-drop-down></interactive-chart-template-drop-down> <a class="bc-button white-with-border bc-interactive-chart__button-reset right-border-separator no-left-padding" data-ng-click=resetDialog()>Clear</a> <div class="show-for-medium-up right"> <interactive-chart-tools data-current-symbol=currentSymbol data-full-screen=fullScreen data-dashboard-mode=dashboardMode data-dropdown-id=interactive-chart-tools-dropdown data-my-charts-mode=myChartsMode data-hide-dropdown=flipChartMode></interactive-chart-tools> <interactive-chart-hamburger-drop-down data-full-screen=fullScreen data-dashboard-mode=dashboardMode data-enable-my-charts=enableMyCharts data-flip-chart-mode=flipChartMode data-current-symbol=currentSymbol data-reset-dialog-fn=resetDialog()> </interactive-chart-hamburger-drop-down> </div> </div> </div> <div class="bc-interactive-chart__toolbar-wrapper hide-for-print hide-for-medium-up" data-ng-if=!flipChartMode> <div class="bc-interactive-chart__mobile-toolbar js-bc-interactive-chart__mobile-toolbar show-for-small-down"> <interactive-chart-symbol-selector data-dashboard-mode=dashboardMode data-full-screen=fullScreen></interactive-chart-symbol-selector> <div class="bar-type-drop-down right-border-separator"> <interactive-chart-bar-type-drop-down data-current-chart-settings=currentChartSettings> </interactive-chart-bar-type-drop-down> </div> <div class=bc-interactive-chart__button-group-wrapper> <table class="bc-interactive-chart__button-group first-row-group"> <tr> <td data-ng-click=plotToolsModal() class="td-coll right-border-separator"> +Study </td> <td data-ng-click=settingsModal() class=td-coll> <i class=bc-glyph-cog></i> </td> </tr> </table> </div> <table class="bc-interactive-chart__button-group right"> <tr> <td data-ng-click=actionsModal() class="td-coll ham-menu-mobile-portrait"> <i class=bc-glyph-bars></i> </td> <td class="td-coll ham-menu-mobile-landscape"> <interactive-chart-hamburger-drop-down data-full-screen=fullScreen data-dashboard-mode=dashboardMode data-flip-chart-mode=flipChartMode data-reset-dialog-fn=resetDialog()> </interactive-chart-hamburger-drop-down> </td> </tr> </table> <interactive-chart-quick-settings data-settings-aggregation=currentChartSettings.aggregation data-settings-period=currentChartSettings.period data-settings=currentChartSettings data-is-future=isFutureSymbol data-dashboard-mode=dashboardMode data-my-charts-mode=myChartsMode data-full-screen=fullScreen></interactive-chart-quick-settings> </div> <div class=bc-interactive-chart__set-alerts data-ng-if="fullScreen && !chartDataLoading"> <a href class=set-alerts-link data-bc-modal-login=alerts data-bc-show-alerts-modal data-symbol="[[ currentSymbol ]]"> <i class=bc-glyph-exclamation-circle></i> Set Alerts </a> </div> <div class=bc-interactive-chart__edit-watchlist data-ng-if="fullScreen && !chartDataLoading && user"> <a class="split toggle-class" data-dropdown-toggle=#bc-watchlist-dropdown-interactive-chart data-bc-dropdown-fix> <i class=bc-glyph-star></i> Watchlist </a> <bc-watchlist data-ng-if=!chartDataLoading data-symbol="[[ currentSymbol.symbol ]]" data-quid=interactive-chart></bc-watchlist> </div> <div class=bc-interactive-chart__edit-watchlist data-ng-if="fullScreen && !chartDataLoading && !user"> <a class="split toggle-class" data-bc-modal-login=watchlist> <i class=bc-glyph-star></i> Watchlist </a> </div> <div class=bc-interactive-chart__share-button data-ng-if="fullScreen && !chartDataLoading"> <chart-share data-type=interactive data-use-default-page-link=true></chart-share> </div> <div class="bc-interactive-chart__mobile-portrait-notification show-for-portrait"> (Rotate device for full chart view) </div> </div> </div> </div> </div> <div id=bc-interactive-chart__chart-container-tooltip data-ng-hide=currentChartSettings.settings.tooltip></div> <div class=bc-interactive-chart__wrapper-chart> <div class="bc-interactive-chart__chart-error-block ng-binding" data-ng-show=!chartVisibility.hasData> There is no chart available for the chart settings you have selected. Either we do not have intraday data for the symbol you selected, or the symbol may have stopped trading. </div> <div class="bc-interactive-chart__wrapper-chart-share vertical-share-wrapper" data-ng-if="fullScreen && !dashboardMode"> <div class=vertical-share> <interactive-chart-vertical-share data-current-symbol=currentSymbol> </interactive-chart-vertical-share> </div> </div> <div class=bc-interactive-chart__wrapper-chart-content data-ng-class="{\'no-data-for-chart\': !chartVisibility.hasData}"> <div class="throbber-wrapper ng-hide" data-ng-show=chartDataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div id=bcModalFlipchartContent class=chart-wrapper data-ng-class="{\'hide-opacity\': chartDataLoading}"> <div data-ng-if=!elementId id=bc-interactive-chart__chart-container class=chart-container data-ng-show="!chartDataLoading || dashboardMode" data-ng-style="!fullScreen && {\'height\': getCurrentChartHeight()}"></div> <div data-ng-if=elementId id="[[ elementId ]]" class=chart-container data-ng-show="!chartDataLoading || dashboardMode" data-ng-style="!fullScreen && {\'height\': getCurrentChartHeight()}"> </div> <interactive-chart-context-menu data-add-study-fn=plotToolsModal(initialState) data-open-settings-modal-fn=settingsModal(initialState) data-reset-dialog-fn=resetDialog() data-open-tools-modal-fn=openToolsModal() data-open-comparison-modal-fn=comparisonModal() data-open-expressions-list-modal-fn=openExpressionsListModal() data-open-save-template-modal-fn=saveTemplateModal() data-current-symbol=currentSymbol data-dashboard-mode=dashboardMode data-current-chart-settings=currentChartSettings> </interactive-chart-context-menu> </div> </div> </div> </div> </div> <div id=mouseMoveSpinner> Drawing </div>'
    },
    NKA2: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    barTypeKey: "@"
                },
                controller: ["interactiveChartSettingsConfig", "_", "bcChartFactory", "dashboardGridChartApi", "interactiveChartApiActionsService", "$scope", "dashboardGridSettings", "$rootScope", function(e, t, a, i, r, o, n, s) {
                    var l = this,
                        c = n.getChartSettings();
                    if (l.typeList = e.types, l.selectedBarType = c.settings.barType, l.labelFont = null, l.barTypeKey) {
                        var d = t.find(l.typeList, {
                            key: l.barTypeKey
                        });
                        l.selectedBarType.curveStyle = d.key, d.attr && (l.selectedBarType.curveAttribute = d.attr), l.selectedBarType.colors = d.defaultColors
                    }

                    function u() {
                        switch (l.selectedBarType.curveStyle) {
                            case "OHLC":
                                l.labelFont = "bc-glyph-ohlc", l.label = "/img/bar_types/ohlc.png", l.selectedBarType.curveAttribute && (l.labelFont = "bc-glyph-ohlc-colored", l.label = "/img/bar_types/ohlc-colored.png"), l.labelFont = null;
                                break;
                            case "HLC":
                                l.labelFont = "bc-glyph-hlc", l.label = "/img/bar_types/hlc.png", l.labelFont = null;
                                break;
                            case "HollowCandles":
                                l.labelFont = "bc-glyph-bar-candlestick-hollow", l.label = "/img/bar_types/hollow-candlesticks.png", l.labelFont = null;
                                break;
                            case "Candlestick":
                                l.labelFont = "bc-glyph-candlestick-colored", l.label = "/img/bar_types/candlesticks.png", l.labelFont = null;
                                break;
                            case "HeikinAshi":
                                l.labelFont = "bc-glyph-bar-candlestick", l.label = "/img/bar_types/heikin-ashi.png", l.labelFont = null;
                                break;
                            case "Line":
                                l.labelFont = "bc-glyph-bar-line", l.label = "/img/bar_types/line.png", l.labelFont = null;
                                break;
                            case "Area":
                                l.labelFont = "bc-glyph-area", l.label = "/img/bar_types/area.png", l.labelFont = null
                        }
                    }
                    u(), l.changeBarType = function(e) {
                        l.selectedBarType = e, l.selectedBarType.curveStyle = e.key, l.selectedBarType.colors = e.defaultColors, e.attr && (l.selectedBarType.curveAttribute = e.attr), n.getSymbolsData().forEach(function(t) {
                            var r = a.getChart(t.symbol);
                            i.changeBarType(r, e), n.setBarTypeSettings(l.selectedBarType)
                        }), n.saveState(), u(), s.$broadcast("gridChartChanged", {
                            action: "bartType",
                            data: angular.copy(e)
                        })
                    }, o.$on("dashboardGridHardReset", function() {
                        l.selectedBarType = n.getChartSettings().settings.barType, u()
                    }), o.$on("gridUpdated", function() {
                        l.selectedBarType = n.getChartSettings().settings.barType, u()
                    })
                }],
                controllerAs: "$ctrl",
                template: a("PtyM")
            }
        }
    },
    "NKC+": function(e, t, a) {
        "use strict";
        angular.module("api", []).factory("ApiWidget", a("rOCC")).factory("apiFactory", a("ck8N")).factory("ApiConverter", a("zdTK")).constant("apiConfig", {
            API_URL: "/" + [window.config.api.internalPrefix, window.config.api.internalVersion].filter(function(e) {
                return e
            }).join("/"),
            API_HOST: "/proxies/core-api",
            API_EXTERNAL_PREFIX: window.config.api.externalPrefix,
            API_EXTERNAL_VERSION: window.config.api.externalVersion,
            API_INTERNAL_PREFIX: window.config.api.internalPrefix,
            API_INTERNAL_VERSION: window.config.api.internalVersion
        }).constant("timeFrameConfig", a("sAHu"))
    },
    NKTc: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login technical-chart-display-settings-content study-modal"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=$ctrl.close()></i> </div> </div> <div class=settings> <div class=title> Share Chart With: </div> <div class=social-component> <ul class="social-list share" data-bc-social-chart-share> <li class="social-icon icon-facebook" title="Share on Facebook"> <a data-bc-facebook-share-chart data-title="[[ ::$ctrl.title ]]" data-description="[[ ::$ctrl.specificDesc ]]" data-convert-type=svg data-ng-class="{\'social-loading\': $ctrl.facebookLoading}" data-loading=$ctrl.facebookLoading data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.symbol data-chart-type=interactive> <i class=bc-glyph-facebook></i> </a> </li> <li class="social-icon icon-google-plus" title="Share on Google+"> <a data-bc-gplus-share-chart data-title="[[ ::$ctrl.title ]]" data-description="[[ ::$ctrl.description ]]" data-convert-type=svg data-ng-class="{\'social-loading\': $ctrl.gplusLoading}" data-loading=$ctrl.gplusLoading data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.symbol data-chart-type=interactive> <i class=bc-glyph-google-plus></i> </a> </li> <li class="social-icon icon-linkedin" title="Share on LinkedIn"> <a data-bc-linkedin-share-chart data-title="[[ ::$ctrl.title ]]" data-description="[[ ::$ctrl.description ]]" data-convert-type=svg data-ng-class="{\'social-loading\': $ctrl.linkedinLoading}" data-loading=$ctrl.linkedinLoading data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.symbol data-chart-type=interactive> <i class=bc-glyph-linkedin></i> </a> </li> <li class="social-icon icon-twitter" title="Share on Twitter"> <a data-bc-twitter-share-chart data-text="[[ ::$ctrl.twitterTitle ]]" data-title="[[ ::$ctrl.title ]]" data-description="[[ ::$ctrl.specificDesc ]]" data-convert-type=svg data-ng-class="{\'social-loading\': $ctrl.twitterLoading}" data-loading=$ctrl.twitterLoading data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.symbol data-chart-type=interactive> <i class=bc-glyph-twitter></i> </a> </li> <li class="social-icon email" title="Share via Email"> <a data-bc-mail-share-chart data-title="[[ ::$ctrl.title ]]" data-convert-type=svg data-chart-type=interactive data-on-shared=$ctrl.close() data-link="[[ ::$ctrl.redirectUrl ]]" class=emailShare> <i class=bc-glyph-envelope-o></i> </a> </li> </ul> </div> </div> </div>'
    },
    NMUD: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                getSymbolData: function(r) {
                    return e.call(a.buildUrl(i.API_URL + r.method, r), t.GET)
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig"], e.exports = i
    },
    NON8: function(e, t) {
        e.exports = '<div class="bc-my-charts-table widget-table"> <div class=form-close-wrapper data-ng-click=$ctrl.closePanel()> <i class="bc-glyph-times form-close"></i> </div> <my-chart-groups-drop-down data-change-group=$ctrl.changeGroup(group) data-model=$ctrl.currentGroup data-groups-loaded=$ctrl.groupsLoaded(groups)> </my-chart-groups-drop-down> <div class=throbber-wrapper data-ng-show=$ctrl.loading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=my-chart-table-wrapper data-ng-if=!$ctrl.loading> <table class=my-chart-table> <thead> </thead> <tbody> <tr data-ng-repeat="item in $ctrl.myCharts track by $index" data-ng-class-odd="\'odd\'" data-ng-class="{\'current\': $ctrl.currentIndex === $index}"> <td class="links-menu quick-links"> <my-chart-quick-links data-chart=item data-group=$ctrl.currentGroup data-type=tab></my-chart-quick-links> </td> <td class=chart-value data-ng-click="$ctrl.loadChart(item, $index)"> ([[ item.symbol ]]) [[ item.name ]] </td> </tr> </tbody> </table> <div data-ng-if="$ctrl.myCharts.length === 0 && !$ctrl.loading"> No Saved Charts. </div> </div> </div>'
    },
    NP4I: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    id: "@"
                },
                controllerAs: "$ctrl",
                controller: ["waitService", "$window", "appConfig", function(e, t, a) {
                    var i = this;

                    function r() {
                        i.captcha.$setValidity("invalidCaptcha", !0)
                    }

                    function o() {
                        i.captcha.$setValidity("invalidCaptcha", !1)
                    }
                    e.for("grecaptcha").then(function() {
                        t.grecaptcha.render(i.id, {
                            sitekey: a.grecaptchaKey,
                            callback: r,
                            "expired-callback": o
                        }), i.captcha = angular.element(document.querySelector("#" + i.id + " + input")).controller("ngModel"), i.captcha.$setValidity("invalidCaptcha", !1)
                    })
                }],
                template: a("rzpc")
            }
        }
    },
    NZ3R: function(e, t) {
        e.exports = '<div class="bc-user-block show-for-medium-up"> <div class=bc-user-block__button-wrapper data-ng-show=!user> <a href=/login class=bc-user-block__button data-ng-click=openModal()> <span class=bc-glyph-user></span> Log In or Sign Up </a> </div> <div class=bc-user-block__button-wrapper data-ng-show=user> <a class="bc-user-block__button js-user-account-desktop" data-bc-dropdown-fix data-dropdown-toggle="#dropdown-user-links-[[ dropdownId ]]"> <span class=bc-glyph-user></span> <span>My Account</span> <i class="bc-glyph-chevron-down right"></i> <i class="bc-glyph-chevron-up right"></i> </a> <ul id="dropdown-user-links-[[ dropdownId ]]" class="f-dropdown bc-dropdown-fix bc-user-block__dropdown"> <li data-ng-repeat="(linkType, linkData) in userLinks track by $index"> <a target=_self href="[[ linkData.link ]]"> [[ linkData.title ]] </a> </li> </ul> </div> </div> '
    },
    NcfW: function(e, t, a) {
        "use strict";
        var i = "MyBarchart.WatchlistEditBlock";
        angular.module(i, []).controller("watchlistEditExtraFieldsModalCtrl", a("GsLN")).directive("watchlistAddSymbols", a("9r1Y")).directive("watchlistShowNotes", a("yVSV")).factory("WatchlistEditBlockApiFactory", a("TDrC"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    NiAe: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                template: a("qdmw"),
                link: function(a, i, r) {
                    var o = [];
                    a.types = ["dividend", "earnings", "split"], a.items = [], a.symbol = r.symbol, a.filters = {
                        earnings: "Earnings",
                        split: "Splits",
                        dividend: "Dividends"
                    }, a.loading = !0, e.getData(r.symbol, r.startDate).then(function(e) {
                        a.loading = !1, o = e.data, a.items = angular.copy(o), a.meta = e.meta.field, t.$broadcast("setCustomData", {
                            meta: a.meta,
                            data: a.items
                        })
                    }), a.updateResult = function() {
                        a.items = [], o.forEach(function(e) {
                            -1 !== a.types.indexOf(e.eventType.toLowerCase()) && a.items.push(e)
                        }), t.$broadcast("setCustomData", {
                            meta: a.meta,
                            data: a.items
                        })
                    }
                }
            }
        }
        i.$inject = ["corporateActionsApiFactory", "$rootScope"], e.exports = i
    },
    NjKG: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u) {
            var p = {
                    ONE_DAY: "1d",
                    FIVE_DAYS: "5d",
                    ONE_MONTH: "1m",
                    THREE_MONTH: "3m",
                    SIX_MONTH: "6m",
                    ONE_YEAR: "1y",
                    FIVE_YEARS: "5y",
                    TWENTY_FIVE_YEARS: "25y"
                },
                m = [o.FREQUENCY, o.MINUTES_PERIOD, o.TIME_PERIOD, o.DATE_FROM, o.DATE_TO];

            function h(e, t) {
                var a = !1;
                return Object.keys(t).forEach(function(i) {
                    if (angular.isObject(t[i]) && !1 === a) {
                        var r = !0;
                        if (s.forEach(Object.keys(t[i]), function(a) {
                                if (!~m.indexOf(a)) return !0;
                                if (e.hasOwnProperty(a))
                                    if ("im" === a) {
                                        if (e[a] != t[i][a]) return r = !1, !1
                                    } else if (e[a] !== t[i][a]) return r = !1, !1
                            }), r) return a = i, !1
                    }
                }), a
            }
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    period: "=",
                    formData: "=",
                    symbolSector: "=",
                    currentSymbol: "=",
                    fullScreen: "=",
                    drawChart: "&",
                    chartData: "=",
                    dataLoading: "=",
                    error: "=",
                    myChartsMode: "="
                },
                controller: ["$rootScope", "$scope", function(m, g) {
                    var f = e.isMobileOnly() ? r.quick_chart.mobile : r.quick_chart.desktop;
                    g.periods = a("k71M")(f, p);
                    var b, v = a("KUQm"),
                        y = v.periodSettings(o, p, g.symbolSector);
                    if (e.isMobileOnly()) {
                        var w = v.mobileSettings(o, p, g.symbolSector);
                        y = s.merge({}, y, w)
                    }
                    g.period = h(g.formData, y), g.chartTemplatesUrl = config.routes["my.customChartTemplates.technical"], g.applyQuickSetting = function(e) {
                        y.hasOwnProperty(e) && (g.period = e, g.appliedChartTemplate = null, "mycharts" !== d.getParameter("activeTab") && c.saveTemplate(null), g.formData = s.merge(g.formData, y[e]), m.$broadcast("applyTechnicalChartQuickSettings"), n(function() {
                            g.drawChart()
                        }, 0))
                    }, g.applyChartTemplate = function() {
                        if (null === g.appliedChartTemplate) m.$broadcast(l.ON_TECHNICAL_CHART_DEFAULT_TEMPLATE_SET), "mycharts" !== d.getParameter("activeTab") && c.saveTemplate(null);
                        else {
                            var e = angular.copy(g.appliedChartTemplate);
                            m.$broadcast("applyTemplate", e), "mycharts" !== d.getParameter("activeTab") && c.saveTemplate(e)
                        }
                    }, g.$on("drawChartHasBeenCalled", function() {
                        g.period = h(g.formData, y)
                    }), g.$on("clearSettings", function() {
                        g.period = "6m", g.appliedChartTemplate = null, "mycharts" !== d.getParameter("activeTab") && c.saveTemplate(null)
                    }), g.$on("dashboardChangeTab", function(e, t) {
                        "mycharts" === t && (g.appliedChartTemplate = null)
                    }), g.$on("templateSaved", function(e, t) {
                        var a;
                        (a = s.find(g.userChartTemplates, "id", t[0].id)) ? (s.merge(a, t[0]), "mycharts" !== d.getParameter("activeTab") && c.saveTemplate(a)) : (g.user.custom_chart_templates.push(t[0]), g.appliedChartTemplate = t[0], "mycharts" !== d.getParameter("activeTab") && c.saveTemplate(g.appliedChartTemplate))
                    }), g.$on("templateChanged", function(e) {
                        g.appliedChartTemplate = null, "mycharts" !== d.getParameter("activeTab") && c.saveTemplate(null)
                    }), g.$on("setAppliedTemplate", function(e, t) {
                        var a;
                        (a = s.find(g.userChartTemplates, "id", +t.id)) && setTimeout(function() {
                            g.appliedChartTemplate = a
                        }, 0), "mycharts" !== d.getParameter("activeTab") && c.saveTemplate(a)
                    }), g.userChartTemplates = [], g.openFullScreen = function() {
                        var t, a = ["height=" + screen.height, "width=" + screen.width, "fullscreen=yes", "resizable=yes", "scrollbars=yes"].join(",");
                        if ("mycharts" === d.getParameter("activeTab")) {
                            var r = u.getChartTab();
                            t = e.route(i.config.routes["quotes.fullChartTabScreen"], {
                                symbol: g.currentSymbol.symbol,
                                sector: g.symbolSector,
                                tabId: r.id
                            }), window.open(t, "", a).moveTo(0, 0)
                        } else t = e.route(i.config.routes["quotes.fullTechnicalChart"], {
                            sector: g.symbolSector,
                            symbol: g.currentSymbol.symbol
                        }), setTimeout(function() {
                            i.open(t + i.location.search, "", a).moveTo(0, 0)
                        }, 0)
                    }, g.toggleChartForm = function() {
                        angular.element(document.querySelector(".chart-form-wrapper")).toggleClass("visible")
                    }, t.isLoggedIn() && (g.user = t.getUserData(), g.userChartTemplates = g.user.custom_chart_templates, g.user.preferences.charts_template && (b = s.find(g.userChartTemplates, "id", +g.user.preferences.charts_template)) && n(function() {
                        g.appliedChartTemplate = b, g.applyChartTemplate()
                    }, 0))
                }],
                template: a("r57p")
            }
        }
        i.$inject = ["utils", "authService", "$window", "technicalChartLabels", "technicalChartFields", "$timeout", "_", "events", "technicalChartStateStorage", "dashboardSettingsService", "userChartTabService"], e.exports = i
    },
    NqXL: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            function i(t) {
                t[e.DATE_FROM] && t[e.DATE_TO] ? t[e.DATE_RANGE] = "specific" : t[e.DATE_RANGE] = ""
            }
            return {
                mapSettingsFromUrl: function(t, a) {
                    a && Object.keys(t).forEach(function(i) {
                        Object.keys(t[i]).forEach(function(r) {
                            if (a.hasOwnProperty(r)) t[i][r] = a[r];
                            else switch (r) {
                                case e.DATE_FROM:
                                case e.DATE_TO:
                                    t[i][r] = null
                            }
                        })
                    })
                },
                mapData: function(a) {
                    ! function(t) {
                        if (~t[e.FREQUENCY].indexOf("I:")) {
                            var a = t[e.FREQUENCY].substr(t[e.FREQUENCY].indexOf("I") + 2);
                            t[e.FREQUENCY] = "I", t[e.MINUTES_PERIOD] = +a ? a : 15
                        } else "I" === t[e.FREQUENCY] && (t[e.FREQUENCY] = t[e.FREQUENCY] + ":" + t[e.MINUTES_PERIOD])
                    }(a), i(a),
                        function(a) {
                            var i;
                            null === a[e.INDICATORS_OBJECT] && "string" == typeof a[e.INDICATORS] ? (a[e.INDICATORS_OBJECT] = [], (i = a[e.INDICATORS].split(";")).forEach(function(i) {
                                var r = t.convertFromStringToStudy(i);
                                r && a[e.INDICATORS_OBJECT].push(r)
                            })) : null !== a[e.INDICATORS_OBJECT] && Array.isArray(a[e.INDICATORS_OBJECT]) && a[e.INDICATORS_OBJECT].length > 0 ? (i = [], a[e.INDICATORS_OBJECT].forEach(function(e) {
                                var a = t.convertStudyToString(e, e.code).replace(/\s/, "");
                                i.push(a)
                            }), a[e.INDICATORS] = i.join(";")) : a[e.INDICATORS] = null
                        }(a)
                },
                mapDateRange: function(e) {
                    i(e)
                },
                prepareChartHeightBeforeRequest: function(t) {
                    if (a.isMobileOnly()) {
                        switch (t[e.HEIGHT]) {
                            case "250":
                                t[e.HEIGHT] = "120";
                                break;
                            case "375":
                                t[e.HEIGHT] = "160";
                                break;
                            case "500":
                                t[e.HEIGHT] = "210";
                                break;
                            case "625":
                                t[e.HEIGHT] = "260"
                        }
                        switch (t[e.STUDYHEIGHT]) {
                            case "100":
                                t[e.STUDYHEIGHT] = "60";
                                break;
                            case "150":
                                t[e.STUDYHEIGHT] = "100";
                                break;
                            case "200":
                                t[e.STUDYHEIGHT] = "130"
                        }
                    }
                },
                convertChartHeightToModel: function(t) {
                    if ("number" == typeof t[e.HEIGHT] && (t[e.HEIGHT] = t[e.HEIGHT].toString()), "number" == typeof t[e.STUDYHEIGHT] && (t[e.STUDYHEIGHT] = t[e.STUDYHEIGHT].toString()), a.isMobileOnly()) {
                        switch (t[e.HEIGHT]) {
                            case "120":
                                t[e.HEIGHT] = "250";
                                break;
                            case "160":
                                t[e.HEIGHT] = "375";
                                break;
                            case "210":
                                t[e.HEIGHT] = "500";
                                break;
                            case "260":
                                t[e.HEIGHT] = "625"
                        }
                        switch (t[e.STUDYHEIGHT]) {
                            case "60":
                                t[e.STUDYHEIGHT] = "100";
                                break;
                            case "100":
                                t[e.STUDYHEIGHT] = "150";
                                break;
                            case "130":
                                t[e.STUDYHEIGHT] = "200"
                        }
                    }
                },
                mapFrequencyFromUrl: function(t, a, i) {
                    if (i) {
                        var r = a;
                        ~["DO", "DN", "DC"].indexOf(r) ? t[e.FREQUENCY] = "DO" : ~["WO", "WN", "WC"].indexOf(r) ? t[e.FREQUENCY] = "WO" : ~["MO", "MN", "MC"].indexOf(r) && (t[e.FREQUENCY] = "MO")
                    }
                },
                mapVolumeFromUrl: function(t, a, i) {
                    i && "contract" === a && (t[e.VOLUME] = "total")
                }
            }
        }
        i.$inject = ["technicalChartFields", "technicalChartStudiesConverter", "utils"], e.exports = i
    },
    NtPV: function(e, t, a) {
        "use strict";
        var i = "PricesByExchange";
        angular.module(i, []).directive("exchangeGroup", a("LoTI"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    NvWv: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                scope: {
                    transactionId: "=",
                    row: "="
                },
                replace: !0,
                controller: ["$scope", function(a) {
                    a.editTransaction = function() {
                        e.$broadcast("showEditTransactionModal", {
                            id: a.transactionId
                        })
                    }, a.tooltip = a.row.raw && a.row.raw.tooltip && 0 !== Object.keys(a.row.raw.tooltip).length ? a.row.raw.tooltip : {
                        empty: !0
                    }, e.$on("tableHasBeenSorted", function() {
                        t(function() {
                            if (a.row.raw && a.row.raw.tooltip && 0 !== Object.keys(a.row.raw.tooltip).length) {
                                var e = a.row.raw.tooltip;
                                a.tooltip = {
                                    quantity: e.quantity,
                                    action: e.action,
                                    entry_date: e.entry_date,
                                    entry_price: e.entry_price,
                                    notes: e.notes || "",
                                    exit_date: e.exit_date || "",
                                    exit_price: e.exit_price || "",
                                    commission: e.commission || "",
                                    high_alert: e.high_alert || "",
                                    low_alert: e.low_alert || "",
                                    raw_lastPrice: e.raw_lastPrice || "",
                                    raw_high_alert: e.raw_high_alert || "",
                                    raw_low_alert: e.raw_low_alert || ""
                                }
                            } else a.tooltip = {
                                empty: !0
                            }
                        })
                    })
                }],
                template: a("4H3P")
            }
        }
        i.$inject = ["$rootScope", "$timeout"], e.exports = i
    },
    "O/Wv": function(e, t) {
        e.exports = '<div class="tooltip in bc-tooltip" data-ng-show=title> <div class=tooltip-inner data-ng-bind=title></div> </div> '
    },
    O3eK: function(e, t) {
        e.exports = '<div class=my-charts-toolbar> <p class=my-charts-toolbar__tooltip> Use My Charts to save multiple charts for the same symbol, each with different studies, tools, or expressions. </p> <div class=my-charts-toolbar__toolbar> <div class=my-charts-toolbar_group-wrapper> <span class=my-charts-toolbar__label>Group:</span> <my-chart-groups-drop-down data-change-group=$ctrl.changeGroup(group) data-model=$ctrl.currentGroup data-groups-loaded=$ctrl.groupsLoaded(groups)> </my-chart-groups-drop-down> </div> <div class=my-charts-toolbar_charts-wrapper> <span class=my-charts-toolbar__label>Chart:</span> <my-chart-saved-charts-drop-down data-charts=$ctrl.myCharts data-model=$ctrl.currentChart data-change-chart="$ctrl.loadChart(chart, index)"> </my-chart-saved-charts-drop-down> </div> <div class=my-charts-toolbar_add-chart-wrapper> <button class="bc-button extra dark-blue" data-ng-click=$ctrl.AddNewChart()> <span class=show-for-large-up>+ New Chart</span> <span class=show-for-medium-down>+ New</span> </button> <button class="bc-button extra dark-blue margin-left-5" data-ng-show=$ctrl.currentChart data-ng-click=$ctrl.showMenu()>Actions</button> </div> <div class=my-charts-toolbar__flipchart-wrapper data-ng-click=$ctrl.showFlipchart()> <a class="toolbar-button flipcharts ng-isolate-scope"> <i class=bc-glyph-flipcharts></i> flipcharts </a> </div> </div> <div class=my-charts-toolbar__eod-report> <div class=input-checkbox> <input id=bc-chart__send-report data-ng-model=$ctrl.currentChart.email data-ng-change=$ctrl.updateEodSettings() name=email type=checkbox> <label for=bc-chart__send-report> <span class=bc-glyph-check></span> Receive End-of-Day Email </label> </div> </div> </div>'
    },
    O6uj: function(e, t) {
        e.exports = '<div class=bc-premier-form> <input type=hidden /> <div class=modal-header-wrapper> <div class=form-close-wrapper data-ng-show=!isPage> <i class="bc-glyph-times form-close" data-ng-click=close();></i> </div> <div class=modal-header> <h2>Start Your Free Trial</h2> <p>[[ header ]] are only available to Barchart Premier Members.</p> </div> </div> <div class="bc-modal-login-content clearfix"> <div class=modal-inner-wrapper> <div class=ref-block> <h3 class=ref-header>[[ header ]]</h3> <div class=ref-text> <p class=ref-text-pharagraph data-ng-bind-html=content></p> </div> <div class=ref-text> Also included with BARCHART PREMIER: <div class=premier-options-list> <ul> <li>A customizable, Ad-free experience</li> <li>Exclusive Tools for Premier Members</li> <li>More Access to Barchart Tools and Historical Data</li> </ul> </div> </div> <p class=button-area> <a target=_self class="bc-button light-blue premier-link" data-ng-href="[[ ::premierLink ]]">Start free trial</a> <a class="bc-button white-with-border login-button long-text premier-login-btn" data-ng-show=showLoginButton data-ng-click=goToLogin()>I am a Barchart Premier Member. <br/> Log me in.</a> </p> <p class=text-center>A membership helps support the continual development of our products. Thank you.</p> </div> </div> </div> </div> '
    },
    O9AV: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.selectMarket = {
                visibility: !1
            }, e.showDashboardNotification = function() {
                a.error("Dashboard display is not viewable on mobile devices. Please view on a desktop or tablet device instead.")
            }, t.register("only screen and (max-width: 767px)", {
                match: function() {
                    e.$evalAsync(function() {
                        e.selectMarket.visibility = !0
                    })
                },
                unmatch: function() {
                    e.$evalAsync(function() {
                        e.selectMarket.visibility = !1
                    })
                }
            })
        }
        i.$inject = ["$scope", "enquire", "Notification"], e.exports = i
    },
    ODbt: function(e, t) {
        e.exports = '<div> <a data-ng-click=$ctrl.redirectToChart()> <div class="module chart-module"> <h4>[[ ::$ctrl.header ]]</h4> <div data-ng-if=::$ctrl.chartReady> <simple-chart class=overview-symbols-charts data-symbol="[[ ::$ctrl.currentSymbol.symbol ]]" data-period=P1M data-aggregation-unit=Day data-aggregation-size=1 data-x-axis-tick-pixel-interval=50 data-x-axis-gridlines-visible=false data-x-axis-crosshair-enabled=true data-y-axis-crosshair-enabled=true data-y-axis-visible=true data-y-axis-show-last=true data-show-previous=true data-style=Area data-primary-color=rgba(79,151,193,0.30) data-y-axis-gridlines-visible=false></simple-chart> </div> </div> </a> </div> '
    },
    OF70: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = this;
            this.share = function(e) {
                var t = 0,
                    a = Math.round(screen.width / 2 - e.width / 2);
                screen.height > e.height && (t = Math.round(screen.height / 3 - e.height / 2));
                var r = window.open(e.url, "BC_" + e.name, "left=" + a + ",top=" + t + ",width=" + e.width + ",height=" + e.height + ",personalbar=0,toolbar=0,scrollbars=1,resizable=1");
                r ? r.focus() : i.error('Please turn off your pop-up blocker. Or <a href="' + e.url + '" target="_blank">share by link</a>')
            }, this.getDescription = function(e) {
                var t = document.createElement("div");
                t.innerHTML = e;
                var a = t.textContent || t.innerText || "";
                return a = a.replace(/(\r\n|\n|\r)/gm, " ")
            }, this.getPageUrl = function() {
                return a.absUrl()
            }, this.getPageTitle = function() {
                return document.getElementsByTagName("title")[0].innerHTML
            }, this.getLink = function(e) {
                var t, a, i, o, n, s;
                return t = e.winUrl, a = e.url ? e.url : r.getPageUrl(), i = e.title ? e.title : r.getPageTitle(), o = e.description ? e.description : "", n = e.link ? e.link : "", s = e.image ? e.image : "", t = (t = (t = (t = (t = t.replace("{url}", encodeURIComponent(a))).replace("{title}", encodeURIComponent(i))).replace("{description}", encodeURIComponent(o))).replace("{image}", encodeURIComponent(s))).replace("{link}", n)
            }, this.convertImageAndUpload = function(a, i, r) {
                return e.call(t.config.routes.convertImage, "POST", {
                    image: a,
                    type: i,
                    bucket: r
                })
            }, this.getShareLinkPartialEncoded = function(e) {
                var a = void 0 !== e.disableUrl && e.disableUrl;
                return t.location.origin + "/social/share?t=" + encodeURIComponent(e.title) + "&d=" + encodeURIComponent(e.description) + "&i=" + encodeURIComponent(e.image) + "&r=" + encodeURIComponent(e.redirectUrl) + "&du=" + a
            }
        }
        i.$inject = ["dataProvider", "$window", "$location", "Notification"], e.exports = i
    },
    OL83: function(e, t) {
        e.exports = "<div class=my-charts-chart> <div class=bc-dashboard-chart__inner-wrapper data-ng-if=\"$ctrl.currentSymbol && $ctrl.chartStyle === 'interactive' && $ctrl.showChart\"> <interactive-chart data-current-symbol=$ctrl.currentSymbol data-full-screen=false data-dashboard-mode=true data-my-charts-mode=true data-enable-my-charts=true></interactive-chart> </div> <div class=bc-dashboard-chart__inner-wrapper data-ng-if=\"$ctrl.currentSymbol && $ctrl.chartStyle === 'technical' && $ctrl.showChart\"> <dashboard-technical-chart data-current-symbol=$ctrl.currentSymbol data-my-charts-mode=true data-full-screen=true></dashboard-technical-chart> </div> </div>"
    },
    OLIK: function(e, t) {
        e.exports = '<div class=bc-alerts__symbol-alerts-list> <div class=bc-alerts__symbol-alerts-list-header> <div class=bc-alerts__symbol-alerts-list-active>Active</div> <div class="bc-alerts__symbol-alerts-list-inner clearfix"> <div class=bc-alerts__symbol-alerts-list-settings>Alerts Settings</div> <div class="bc-alerts__symbol-alerts-list-triggered show-for-medium-up">Triggered</div> <div class=bc-alerts__symbol-alerts-list-notes>Notes</div> </div> </div> <div class=bc-alerts__symbol-alerts-list-row data-ng-class-odd="\'odd\'" data-ng-class-even="\'even\'" data-ng-repeat="alert in alerts track by $index"> <div class=bc-alerts__symbol-alerts-list-active> <bc-checkbox data-cb-disabled="alert.alert_state === states.STARTING || alert.alert_state === states.STOPPING" data-cb-click="changeActive(alert, alertsState[alert.alert_id])" data-cb-model=alertsState[alert.alert_id] data-cd-id="\'cbId\'"></bc-checkbox> </div> <span data-ng-click=showAlertRemovalDialog($index) class="bc-glyph-minus-circle bc-alerts__symbol-alerts-list-delete-alert"></span> <div class="bc-alerts__symbol-alerts-list-inner clearfix"> <div class=bc-alerts__symbol-alerts-list-settings> <a data-ng-click=editAlert(alert) data-ng-bind-html=getAlertName(alert)></a> </div> <div class=bc-alerts__symbol-alerts-list-triggered data-ng-show="alert.alert_state === \'Expired\'">Expired Contract</div> <div class=bc-alerts__symbol-alerts-list-triggered data-ng-show="alert.alert_state !== \'Expired\'" data-ng-bind="alert.last_trigger_date | date:\'MM/dd/yy h:mma\'"></div> <div class=bc-alerts__symbol-alerts-list-notes> <i class=bc-glyph-sticky-note-o data-ng-click="editAlert(alert, true)" data-ng-show="!alert.user_notes && alert.alert_type !== \'news\'"></i> <i class=bc-glyph-sticky-note data-ng-click="editAlert(alert, true)" data-ng-if="alert.user_notes && alert.alert_type !== \'news\'" data-bs-tooltip=alert.user_notes data-placement=left></i> </div> </div> <div class=bc-alerts__delete-dialog data-ng-class="{\'visible\': pendingAlertRemoval === $index}"> <div class=bc-alerts__delete-dialog-inner> <span class=bc-alerts__delete-dialog-title>Delete Alert?</span> <a class="bc-button small light-blue" data-ng-click="deleteAlert(alert, $index)">Yes</a> <a class="bc-button small grey" data-ng-click=cancelAlertRemoval()>No</a> </div> </div> </div> </div>'
    },
    OLeP: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", function(e) {
                e.lists = {
                    left: [{
                        field: "fullNameWithoutExchange",
                        label: "Contract"
                    }, {
                        field: "contractSize"
                    }, {
                        field: "marginMaintenance"
                    }, {
                        field: "tickSize",
                        multiString: !0
                    }, {
                        field: "dailyLimit",
                        multiString: !0
                    }],
                    right: [{
                        field: "exchange"
                    }, {
                        field: "pointValue"
                    }, {
                        field: "contractFirstNoticeDate",
                        label: "First Notice Date"
                    }, {
                        field: "contractExpirationDate",
                        multiString: !0,
                        colorize: !1
                    }, {
                        field: "tradingHours",
                        multiString: !0
                    }]
                };
                var t = angular.copy(e.widgetData.data[0]);
                if (t.raw.contractExpirationDate) {
                    var a = new Date(t.raw.contractExpirationDate),
                        i = new Date,
                        r = Math.floor((a.getTime() - i.getTime()) / 864e5);
                    r < 7 && (e.lists.right[3].colorize = !0), t.contractExpirationDate += " (" + r + " day" + (1 !== r ? "s" : "") + ")"
                }
                e.data = t, e.meta = e.widgetData.meta.field.name, e.filterEmptyRows = function(t) {
                    return null !== e.data.raw[t.field]
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("HEgv"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    OMIF: function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["$rootScope", "barchartDatatableFilterUrl", "$location", function(e, t, a) {
            e.$on("$locationChangeSuccess", function(o, n, s) {
                if (t.isPreventNextFiltersEvent()) return !1;
                a.search().screener && "tsx_tsxv" === a.search().screener && a.search("screener", "ca"), t.getFilterCollection().forEach(function(t) {
                    var a = t.name + "=" + t.value;
                    if (~n.indexOf(a)) {
                        var o = i(s);
                        o[t.name] && o[t.name] === t.value && !r || e.$broadcast("filterChangeFromUrl", t)
                    }
                }), r = !1
            });
            var i = function(e) {
                    var t, a = {};
                    (t = e.split("?"))[1] && (t[1] = t[1].replace("/", ""), t[1].split("&").forEach(function(e) {
                        var t = e.split("=");
                        a[t[0]] = t[1]
                    }));
                    return a
                },
                r = !0
        }])
    },
    ON1N: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a) {
                    a.find("a").bind("click", function() {
                        e("bcExternalAdsHidden", !0, {
                            expires: new Date(window.config.extAdsExpired),
                            path: "/"
                        }), a.remove()
                    })
                }
            }
        }
        i.$inject = ["ipCookie"], e.exports = i
    },
    OTgG: function(e, t, a) {
        "use strict";
        var i = "BarchartPremier";
        angular.module(i, []).controller(i + ".BarchartPremierSubscriptionCtrl", a("Ew1D")).controller("barchartPremierModalContact", a("wh/I")).controller("barchartPremierModalAddress", a("hdyp")).controller("barchartPremierModalCard", a("fZkK")).controller("barchartPremierModalCancelSubscription", a("b0UC")).directive("barchartPremierSettings", a("ZTad")).factory("barchartPremierService", a("G5ma")).factory("barchartPremierModalService", a("CEbq"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "OXx/": function(e, t, a) {
        "use strict";
        e.exports = function() {
            function e(e, t, a) {
                var i = document.createElement("input");
                i.setAttribute("type", "hidden"), i.setAttribute("name", t), i.setAttribute("value", a), e.appendChild(i)
            }
            this.generateAndSubmit = function(t, a) {
                var i = document.createElement("form");
                i.setAttribute("method", "post"), i.setAttribute("action", t), e(i, "_token", angular.element('meta[name="csrf-token"]').attr("content")), Object.keys(a).forEach(function(t) {
                    e(i, t, a[t])
                }), document.getElementsByTagName("body")[0].appendChild(i), i.submit(), document.getElementsByTagName("body")[0].removeChild(i)
            }
        }
    },
    OdX4: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {},
                controller: ["interactiveChartPeriodConfig", "interactiveChartPeriodSizeConfig", "dashboardGridSettings", "$scope", "_", "$rootScope", "bcChartFactory", "dashboardGridChartApi", "dashboardModalsService", "$window", "utils", function(e, t, a, i, r, o, n, s, l, c, d) {
                    var u = this;
                    u.periods = e.periods;
                    var p = e.items;
                    u.periodSizes = t.periodSizes, u.period = a.getChartSettings().period, u.aggregation = a.getChartSettings().aggregation, p[u.period] || (u.period = u.periods[u.aggregation.unit][0].period), u.changePeriod = function(e) {
                        u.period = e;
                        var t, i, r = "YTD" === e ? "P" + (t = new Date, i = new Date(t.getFullYear(), 0, 0), Math.floor((t - i) / 864e5)) + "D" : e;
                        if ("CUSTOM" !== e) a.getSymbolsData().forEach(function(e) {
                            var t = n.getChart(e.symbol);
                            s.changePeriod(t, r), a.setPeriodSettings(u.period)
                        }), a.resetRangeSettings(), a.saveState(), o.$broadcast("gridChartChanged", {
                            action: "period",
                            data: {
                                period: u.period
                            }
                        });
                        else {
                            a.setPeriodSettings(u.period);
                            var p = a.getSymbolsData()[0],
                                m = "futures" === c.config.symbols.mapping[p.symbolType];
                            l.openAggregationGridModal(m).then(function(e) {
                                console.log(e);
                                var t = a.getChartSettings();
                                m ? e.aggregation.spec || (e.aggregation.spec = "Nearest" === t.aggregation.aggregation.spec ? "None" : t.aggregation.aggregation.spec) : e.aggregation.spec = t.settings.extendedHours ? "FormT" : "None", a.getSymbolsData().forEach(function(t) {
                                    var i = n.getChart(t.symbol);
                                    if (s.changeAggregation(i, e.aggregation), a.setAggregationSettings(e.aggregation), e.period && "CUSTOM" === e.period) {
                                        if (e.range && e.range.from) {
                                            var r = {
                                                from: d.getUTCFromTime(e.range.from)
                                            };
                                            e.range.to && (r.to = d.getUTCToTime(e.range.to)), s.changeRange(i, r), a.setRangeSettings(e.range)
                                        }
                                    } else s.changePeriod(i, e.period), a.resetRangeSettings();
                                    a.setPeriodSettings(e.period), a.setAggregationSettings(e.aggregation), a.setTemplate(null)
                                }), a.saveState(), o.$broadcast("gridChartChanged", {
                                    action: "fullAggregation",
                                    data: {
                                        aggregation: a.getChartSettings().aggregation,
                                        period: a.getChartSettings().period,
                                        range: a.getChartSettings().range
                                    }
                                })
                            })
                        }
                    }, i.$on("gridChartChanged", function(e, t) {
                        if ("aggregation" === t.action) {
                            u.aggregation = a.getChartSettings().aggregation, u.period = a.getChartSettings().period;
                            var i = u.periods[u.aggregation.unit];
                            "CUSTOM" === u.period || -1 === r.findIndex(i, {
                                period: u.period
                            }) ? u.changePeriod(i[0].period) : o.$broadcast("gridChartChanged", {
                                action: "period",
                                data: {
                                    period: u.period
                                }
                            })
                        }
                        "fullAggregation" !== t.action && "aggregationAndPeriod" !== t.action && "template" !== t.action || (u.aggregation = a.getChartSettings().aggregation, u.period = a.getChartSettings().period)
                    }), i.$on("dashboardGridHardReset", function() {
                        u.aggregation = a.getChartSettings().aggregation, u.period = a.getChartSettings().period
                    }), u.getLabel = function() {
                        return p[u.period].labelShort
                    }
                }],
                controllerAs: "$ctrl",
                template: a("oifM")
            }
        }
    },
    Okc7: function(e, t) {
        e.exports = "<div class=histogram-wrapper> <div class=bar-negative> <div class=bar-inner data-ng-if=!positive data-ng-style=\"{ 'width': width + '%' }\"></div> </div> <div class=bar-positive> <div class=bar-inner data-ng-if=positive data-ng-style=\"{ 'width': width + '%' }\"></div> </div> </div> "
    },
    OluI: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    condition: "=",
                    properties: "=",
                    operators: "=",
                    removeCondition: "&",
                    symbol: "@",
                    shouldShowPopularAlert: "&",
                    shouldHidePopularAlert: "&",
                    disableRemoving: "="
                },
                link: function(t, a, i) {
                    t.extendDropDown = !1, t.removeDialogOpen = !1, t._ = e, t.quoteCategory = !1;
                    var r = !!t.condition.condition_id;

                    function o() {
                        t.operatorsList = null, t.operator = null, t.operand = null, t.extendPropertiesList = null, t.extendDropDown = !1
                    }

                    function n() {
                        t.condition.property = t.extendProperty, t.condition.property.target.identifier = t.symbol, t.operatorsList = [], t.extendProperty.valid_operators.forEach(function(e) {
                            t.operatorsList.push(t.operators[e])
                        })
                    }

                    function s() {
                        angular.isObject(t.specificProperty) && !Array.isArray(t.specificProperty) ? (t.condition.property = t.specificProperty, t.condition.property.target.identifier = t.symbol, t.operatorsList = [], t.specificProperty.valid_operators.forEach(function(e) {
                            t.operatorsList.push(t.operators[e])
                        })) : Array.isArray(t.specificProperty) && t.specificProperty && 1 === t.specificProperty.length ? (t.condition.property = t.specificProperty[0], t.condition.property.target.identifier = t.symbol, t.operatorsList = [], t.specificProperty[0].valid_operators.forEach(function(e) {
                            t.operatorsList.push(t.operators[e])
                        })) : Array.isArray(t.specificProperty) && t.specificProperty && t.specificProperty.length > 1 && (t.extendDropDown = !0, t.extendPropertiesList = [], t.specificProperty.forEach(function(e) {
                            t.extendPropertiesList.push(e)
                        }), r && (t.extendProperty = e.find(t.specificProperty, {
                            property_id: t.condition.property.property_id
                        }), n()))
                    }

                    function l() {
                        "quote" === t.baseProperty[0].group.toLowerCase() ? (t.quoteCategory = !0, t.specificPropertiesList = t.baseProperty.filter(function(e) {
                            return !~["Summary", "Close", "Timestamp"].indexOf(e.description[0])
                        })) : (t.quoteCategory = !1, t.specificPropertiesList = e.groupBy(t.baseProperty, "description[0]"), delete t.specificPropertiesList.Summary, delete t.specificPropertiesList.Close, delete t.specificPropertiesList.Timestamp)
                    }
                    if (r || !0 === t.condition.popular) {
                        t.baseProperty = t.properties[t.condition.property.group], l();
                        var c = t.condition.property.description[0];
                        t.quoteCategory ? t.specificProperty = e.find(t.specificPropertiesList, function(e) {
                            return e.description[0] === c
                        }) : t.specificProperty = t.specificPropertiesList[c], t.operator = t.operators[t.condition.operator.operator_id], t.operand = "number" === t.condition.operator.operand_type ? +t.condition.operator.operand : t.condition.operator.operand, s(), "percent" === t.condition.property.type && (t.operand = 100 * t.operand, t.condition.operator.operand = t.operand)
                    }
                    t.askToRemoveRowFilter = function() {
                        t.removeDialogOpen = !0
                    }, t.confirmFilterRemove = function() {
                        t.removeCondition()
                    }, t.cancelFilterRemove = function() {
                        t.removeDialogOpen = !1
                    }, t.changeBaseProperty = function() {
                        l(), t.shouldHidePopularAlert(), 0 === Object.keys(t.specificPropertiesList).length && (t.specificPropertiesList = null, t.shouldShowPopularAlert()), t.specificProperty = null, o()
                    }, t.changeSpecificProperty = function() {
                        o(), s()
                    }, t.changeExtendProperty = function() {
                        t.operator = null, n()
                    }, t.changeOperator = function() {
                        t.condition.operator = t.operator, t.operator.operand = null, t.operand = null
                    }, t.changeOperand = function(e) {
                        t.condition.operator.operand = null !== e && void 0 !== e ? e.toString() : null
                    }
                },
                template: a("DXVM")
            }
        }
        i.$inject = ["_"], e.exports = i
    },
    OqDd: function(e, t, a) {
        "use strict";
        e.exports = function(e) {
            return [{
                property: e[1],
                group: "Price",
                label: e[1].descriptionShort[0],
                valid_operators: [2, 3]
            }, {
                property: e[2],
                group: "Price",
                label: e[2].descriptionShort[0]
            }, {
                property: e[3],
                group: "Price",
                label: e[3].descriptionShort[0]
            }, {
                property: e[4],
                group: "Price",
                label: e[4].descriptionShort[0]
            }, {
                property: e[7],
                group: "Change",
                label: e[7].descriptionShort[0]
            }, {
                property: e[6],
                group: "Change",
                label: e[6].descriptionShort[0]
            }, {
                property: e[8],
                group: "Liquidity",
                label: e[8].descriptionShort[0]
            }, {
                property: e[103],
                group: "Highs/Lows",
                label: "% From High",
                valid_operators: [13],
                operator_id: 13,
                useOptions: !0,
                withModifier: !0,
                useDefaultRightModel: !0
            }, {
                property: e[103],
                group: "Highs/Lows",
                label: "% From Low",
                valid_operators: [14],
                operator_id: 14,
                useOptions: !0,
                withModifier: !0,
                useDefaultRightModel: !0
            }, {
                property: e[103],
                group: "Highs/Lows",
                label: "Makes New High",
                valid_operators: [11],
                operator_id: 11,
                useOptions: !0,
                useDefaultRightModel: !0
            }, {
                property: e[103],
                group: "Highs/Lows",
                label: "Makes New Low",
                valid_operators: [12],
                operator_id: 12,
                useOptions: !0,
                useDefaultRightModel: !0
            }, {
                property: null,
                group: "Technical",
                label: "Average Volume",
                items: [{
                    label: "5-Day",
                    property: e[15]
                }, {
                    label: "20-Day",
                    property: e[16]
                }, {
                    label: "50-Day",
                    property: e[17]
                }, {
                    label: "100-Day",
                    property: e[18]
                }, {
                    label: "200-Day",
                    property: e[19]
                }, {
                    label: "YTD",
                    property: e[20]
                }]
            }, {
                property: null,
                group: "Technical",
                label: "Historic Volatility",
                items: [{
                    label: "9-Day",
                    property: e[77]
                }, {
                    label: "14-Day",
                    property: e[78]
                }, {
                    label: "20-Day",
                    property: e[79]
                }, {
                    label: "50-Day",
                    property: e[80]
                }, {
                    label: "100-Day",
                    property: e[81]
                }]
            }, {
                property: null,
                group: "Technical",
                label: "MACD Oscillator",
                items: [{
                    label: "9-Day",
                    property: e[82]
                }, {
                    label: "14-Day",
                    property: e[83]
                }, {
                    label: "20-Day",
                    property: e[84]
                }, {
                    label: "50-Day",
                    property: e[85]
                }, {
                    label: "100-Day",
                    property: e[86]
                }]
            }, {
                property: null,
                group: "Technical",
                label: "Moving Average",
                items: [{
                    label: "5-Day",
                    property: e[9]
                }, {
                    label: "20-Day",
                    property: e[10]
                }, {
                    label: "50-Day",
                    property: e[11]
                }, {
                    label: "100-Day",
                    property: e[12]
                }, {
                    label: "200-Day",
                    property: e[13]
                }, {
                    label: "YTD",
                    property: e[14]
                }]
            }, {
                property: null,
                group: "Technical",
                label: "Percent R",
                items: [{
                    label: "9-Day",
                    property: e[72]
                }, {
                    label: "14-Day",
                    property: e[73]
                }, {
                    label: "20-Day",
                    property: e[74]
                }, {
                    label: "50-Day",
                    property: e[75]
                }, {
                    label: "100-Day",
                    property: e[76]
                }]
            }, {
                property: null,
                group: "Technical",
                label: "Raw Stochastic",
                items: [{
                    label: "9-Day",
                    property: e[21]
                }, {
                    label: "14-Day",
                    property: e[22]
                }, {
                    label: "20-Day",
                    property: e[23]
                }, {
                    label: "50-Day",
                    property: e[24]
                }, {
                    label: "100-Day",
                    property: e[25]
                }]
            }, {
                property: null,
                group: "Technical",
                label: "Relative Strength",
                items: [{
                    label: "9-Day",
                    property: e[67]
                }, {
                    label: "14-Day",
                    property: e[68]
                }, {
                    label: "20-Day",
                    property: e[69]
                }, {
                    label: "50-Day",
                    property: e[70]
                }, {
                    label: "100-Day",
                    property: e[71]
                }]
            }, {
                property: e[87],
                group: "Technical",
                label: "Standard Deviation"
            }, {
                property: null,
                group: "Technical",
                label: "Stochastic (%D)",
                items: [{
                    label: "9-Day",
                    property: e[57]
                }, {
                    label: "14-Day",
                    property: e[58]
                }, {
                    label: "20-Day",
                    property: e[59]
                }, {
                    label: "50-Day",
                    property: e[60]
                }, {
                    label: "100-Day",
                    property: e[61]
                }]
            }, {
                property: null,
                group: "Technical",
                label: "Stochastic (%K)",
                items: [{
                    label: "9-Day",
                    property: e[52]
                }, {
                    label: "14-Day",
                    property: e[53]
                }, {
                    label: "20-Day",
                    property: e[54]
                }, {
                    label: "50-Day",
                    property: e[55]
                }, {
                    label: "100-Day",
                    property: e[56]
                }]
            }, {
                property: null,
                group: "Technical",
                label: "True Range",
                items: [{
                    label: "9-Day",
                    property: e[62]
                }, {
                    label: "14-Day",
                    property: e[63]
                }, {
                    label: "20-Day",
                    property: e[64]
                }, {
                    label: "50-Day",
                    property: e[65]
                }, {
                    label: "100-Day",
                    property: e[66]
                }]
            }, {
                property: e[88],
                group: "Technical",
                label: "Weighted Alpha"
            }, {
                property: null,
                group: "Today's Opinion",
                label: "Overall Opinion",
                items: [{
                    label: "Buy",
                    property: e[100],
                    key: "buy"
                }, {
                    label: "Hold",
                    property: e[101],
                    key: "hold"
                }, {
                    label: "Sell",
                    property: e[102],
                    key: "sell"
                }],
                changeOnHold: !0
            }, {
                property: null,
                group: "Today's Opinion",
                label: "Short Term Opinion",
                items: [{
                    label: "Buy",
                    property: e[91],
                    key: "buy"
                }, {
                    label: "Hold",
                    property: e[92],
                    key: "hold"
                }, {
                    label: "Sell",
                    property: e[93],
                    key: "sell"
                }],
                changeOnHold: !0
            }, {
                property: null,
                group: "Today's Opinion",
                label: "Medium Term Opinion",
                items: [{
                    label: "Buy",
                    property: e[94],
                    key: "buy"
                }, {
                    label: "Hold",
                    property: e[95],
                    key: "hold"
                }, {
                    label: "Sell",
                    property: e[96],
                    key: "sell"
                }],
                changeOnHold: !0
            }, {
                property: null,
                group: "Today's Opinion",
                label: "Long Term Opinion",
                items: [{
                    label: "Buy",
                    property: e[97],
                    key: "buy"
                }, {
                    label: "Hold",
                    property: e[98],
                    key: "hold"
                }, {
                    label: "Sell",
                    property: e[99],
                    key: "sell"
                }],
                changeOnHold: !0
            }, {
                property: e[26],
                group: "Opinion Indicators",
                label: e[26].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[27],
                group: "Opinion Indicators",
                label: e[27].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[28],
                group: "Opinion Indicators",
                label: e[28].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[29],
                group: "Opinion Indicators",
                label: e[29].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[30],
                group: "Opinion Indicators",
                label: e[30].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[31],
                group: "Opinion Indicators",
                label: e[31].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[32],
                group: "Opinion Indicators",
                label: e[32].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[33],
                group: "Opinion Indicators",
                label: e[33].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[51],
                group: "Opinion Indicators",
                label: e[51].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[34],
                group: "Opinion Indicators",
                label: e[34].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[35],
                group: "Opinion Indicators",
                label: e[35].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[36],
                group: "Opinion Indicators",
                label: e[36].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }, {
                property: e[37],
                group: "Opinion Indicators",
                label: e[37].descriptionShort[0],
                useOptions: !0,
                skipConditionOperator: !0,
                operator_id: 4
            }]
        }
    },
    OsVs: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            return {
                restrict: "E",
                scope: {
                    dropdownId: "@"
                },
                replace: !0,
                link: function(a, n) {
                    function s() {
                        angular.element(document.querySelector(".js-user-account-mobile")).off("touchstart", s), angular.element(document.querySelector(".js-user-account-desktop")).off("click", s), t.set("allAlertsNotification", !1), a.$evalAsync(function() {
                            a.showAlerts = !1
                        })
                    }
                    a.user = e.getUserData(), a.userLinks = config.userLinks, e.isLoggedIn() && (a.showAlerts = null === t.get("allAlertsNotification") || t.get("allAlertsNotification"), !0 === a.showAlerts && (angular.element(document.querySelector(".js-user-account-mobile")).on("touchstart", s), angular.element(document.querySelector(".js-user-account-desktop")).on("click", s))), a.openModal = function() {
                        "/login" === o.url() && i.open("login", !1, function() {
                            r.setRedirectPath("/login")
                        })
                    }
                },
                template: a("NZ3R")
            }
        }
        i.$inject = ["authService", "localStorageService", "bcModalLoginSrv", "authRedirectService", "$location"], e.exports = i
    },
    Osi5: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {},
                controllerAs: "$ctrl",
                controller: ["interactiveChartModals", "interactiveChartApi", "$window", "interactiveChartSettings", "interactiveChartStateService", "$scope", "events", "$rootScope", function(e, t, a, i, r, o, n, s) {
                    var l = this;
                    o.$on(n.ON_INTERACTIVE_CHART_SET_PERIOD, function(e, t) {
                        "CUSTOM" === t.period && l.showAggregationModal()
                    }), l.showAggregationModal = function() {
                        var o = "futures" === a.config.symbols.mapping[t.getSymbolData().symbolType];
                        e.aggregationModal(o, {
                            period: "CUSTOM"
                        }).then(function(e) {
                            console.log(e);
                            var a = i.getChartAggregation();
                            if (o ? e.aggregation.spec || (e.aggregation.spec = "Nearest" === a.spec ? "None" : a.spec) : e.aggregation.spec = i.getChartSettings().extendedHours ? "FormT" : "None", t.changeAggregation(e.aggregation), e.period && "CUSTOM" === e.period) {
                                if (e.range && e.range.from) {
                                    var n = e.range.from + " 00:00:00",
                                        l = {
                                            from: new Date(n).getTime()
                                        };
                                    if (e.range.to) {
                                        var c = e.range.to + " 23:59:59";
                                        l.to = new Date(c).getTime()
                                    }
                                    t.changeRange(l).render()
                                }
                            } else t.changePeriod(e.period).render();
                            i.setChartPeriod(e.period), i.setChartAggregation(e.aggregation), e.range ? i.setChartRange(e.range) : i.resetChartRange(), i.setChartTemplate(null), r.setCurrentFlipChartQuickSettings(e.period), r.save(), s.$broadcast("chartSettingsChanged")
                        })
                    }
                }],
                template: a("yfuJ")
            }
        }
    },
    OstN: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    currentSymbol: "=",
                    addStudyFn: "&",
                    openSettingsModalFn: "&",
                    resetDialogFn: "&",
                    openToolsModalFn: "&",
                    openComparisonModalFn: "&",
                    openExpressionsListModalFn: "&",
                    openSaveTemplateModalFn: "&",
                    currentChartSettings: "=",
                    dashboardMode: "="
                },
                link: function(a, f) {
                    var b;
                    a.config = {}, a.booleanSpec = !1;
                    var v = u.types,
                        y = Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_CHTNEEDSCONTEXTMENU, function(i, r) {
                            f.css("display", "block"), f.css("left", r.offset.x + "px"), f.css("top", r.offset.y + "px"), document.querySelector("body").addEventListener("click", x), document.oncontextmenu = function() {
                                return !1
                            }, a.config = e.getChartGlobalConfig(), b = t.getMainPlot()[0].curves[0], a.config.settings.barType.curveStyle = b.style, a.config.settings.barType.lineWidth = b.lineWidth, a.config.settings.barType.colors = [b.colors[0]], (-1 === ["Line", "Area", "OHLC"].indexOf(b.style) || "OHLC" === b.style && !0 === b.varyColorPerBar) && (b.colors.length > 1 ? a.config.settings.barType.colors.push(b.colors[1]) : a.config.settings.barType.colors = ["#EF4226", "#00B04B"]), a.booleanSpec = "Continue" === a.config.aggregation.spec
                        });

                    function w() {
                        t.changeEvents(a.config.settings.events), t.render(), e.setChartSettings(a.config.settings)
                    }

                    function C() {
                        var i = {
                            dividendsAdjust: a.config.settings.dividendsAdjust,
                            backAdjust: a.config.settings.backAdjust
                        };
                        a.isEquityEtfMutual && (a.config.aggregation.spec = a.config.settings.extendedHours ? "FormT" : "None"), a.isFutureSymbol && (i.spec = a.config.aggregation.spec, i.contractRoll = a.config.settings.contractRoll, "expiration" === a.config.settings.contractRoll && (i.daysToExpiration = a.config.settings.daysToExpiration)), e.resetChartRange(), t.changeAggregation(i), t.render(), e.setChartSettings(a.config.settings), e.setChartAggregation(a.config.aggregation)
                    }

                    function S() {
                        f.css("display", "none"), document.querySelector("body").removeEventListener("click", x), document.oncontextmenu = function() {
                            return !0
                        }
                    }

                    function x(e) {
                        (function e(t) {
                            if (null === t) return !0;
                            if ("string" != typeof t.className || void 0 === t.className) return e(t.parentNode);
                            return -1 === t.className.indexOf("js-bc-interactive-chart-context-menu") && e(t.parentNode)
                        })(e.target) && (document.querySelector("body").removeEventListener("click", x), f.css("display", "none"), document.oncontextmenu = function() {
                            return !0
                        })
                    }
                    a.$on("$destroy", function() {
                        Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(y), document.querySelector("body").removeEventListener("click", x)
                    }), a.isEquity = e.getIsEquitySymbol(), a.isEquityEtfMutual = e.getIsEquityEtfMutual(), a.isFutureSymbol = e.getIsFutureSymbol(), a.isLoggedIn = o.isLoggedIn(), a.batsAvailable = -1 !== ["1", "7"].indexOf(a.currentSymbol.symbolTypeSpec) && t.getSymbolData().raw.hasBats, a.$on("dashboardCurrentSymbolChanged", function(e, i) {
                        a.isFutureSymbol = -1 !== [2, 12, 13, 14].indexOf(i.symbolType), a.isEquity = -1 !== ["1", "6:CA"].indexOf(i.symbolTypeSpec), a.isEquityEtfMutual = -1 !== ["UsEquity", "Etf", "MutualFund", "OtherInternationalEquities", "CanadianEquity", "InternationalMutualFund", "Trust"].indexOf(p.config.symbols.type_names[i.symbolType]), a.batsAvailable = -1 !== ["1", "7"].indexOf(i.symbolTypeSpec) && t.getSymbolData().raw.hasBats
                    }), a.$on("bcOpenMoreDataModal", function(e, t) {
                        S()
                    }), a.openSettingsModal = function(e) {
                        a.openSettingsModalFn({
                            initialState: e
                        }), S()
                    }, a.plotToolsModal = function(e) {
                        a.addStudyFn({
                            initialState: e
                        }), S()
                    }, a.openToolsModal = function() {
                        a.openToolsModalFn(), S()
                    }, a.comparisonModal = function() {
                        a.openComparisonModalFn(), S()
                    }, a.openBarTypeSettingsModal = function() {
                        s.showBarTypeSettingsModal(), S()
                    }, a.openSizeSettingsModal = function() {
                        s.showSizeSettingsModal().then(function() {
                            e.setChartTemplate(null), a.currentChartSettings.template = null, a.currentChartSettings.aggregation = e.getChartAggregation(), a.currentChartSettings.settings = e.getChartSettings(), a.currentChartSettings.range = e.getChartRange(), c.save()
                        }), S()
                    }, a.openExpressionsListModal = function() {
                        a.openExpressionsListModalFn(), S()
                    }, a.toggleNavigator = function() {
                        t.changeNavigator(a.config.settings.navigator), t.render(), e.setChartSettings(a.config.settings), S()
                    }, a.toggleFloatingPriceBox = function() {
                        t.changeTooltip(a.config.settings.tooltip), t.render(), e.setChartSettings(a.config.settings), S()
                    }, a.toggleRealTime = function() {
                        var i = e.getSymbol();
                        a.config.settings.batsData ? o.isLoggedIn() && a.batsAvailable && (i += ".BZ", t.setCurrentChartSymbol(i)) : t.setCurrentChartSymbol(e.getSymbol()), e.getChartMainPlotExpression() || t.changeSymbol(i), t.render(), e.setChartSettings(a.config.settings), S()
                    }, a.changeScaleType = function(i) {
                        a.config.settings.scaleType = i, "Logarithmic" === i && "percent" === a.config.settings.scaleValue && (a.config.settings.scaleValue = "price", t.changeAxisType(a.config.settings.scaleValue)), t.changeScaleType(a.config.settings.scaleType), t.render(), e.setChartSettings(a.config.settings), S()
                    }, a.changeScaleValue = function(i) {
                        if (a.config.settings.scaleValue = i, "percent" === i) {
                            if (-1 === ["Line", "Area"].indexOf(a.config.settings.barType.curveStyle)) {
                                var r = d.find(v, {
                                    key: "Line"
                                });
                                a.config.settings.barType.curveStyle = r.key, r.attr ? a.config.settings.barType.curveAttribute = r.attr : delete a.config.settings.barType.curveAttribute, -1 === ["Line", "Area"].indexOf(r.key) && (a.config.settings.scaleValue = "price"), a.config.settings.barType.colors = angular.copy(r.defaultColors), t.changeCurveStyle(a.config.settings.barType)
                            }
                            "Logarithmic" === a.config.settings.scaleType && (a.config.settings.scaleType = "Linear", t.changeScaleType(a.config.settings.scaleType))
                        }
                        t.changeAxisType(a.config.settings.scaleValue), t.render(), e.setChartSettings(a.config.settings), S()
                    }, a.openSettingsMarginModal = function() {
                        s.showMarginSettingsModal(), S()
                    }, a.toggleMinorGrids = function() {
                        t.changeMinorGridLines(a.config.settings.minorGridLines), t.render(), e.setChartSettings(a.config.settings), S()
                    }, a.toggleOverlapLabel = function() {
                        t.changePreventLabelOverlap(a.config.settings.preventLabelOverlap), t.render(), e.setChartSettings(a.config.settings), S()
                    }, a.toggleBackAdjust = function() {
                        C(), S()
                    }, a.toggleEventDividends = function() {
                        w(), S()
                    }, a.toggleEventEarnings = function() {
                        w(), S()
                    }, a.toggleEventSplits = function() {
                        w(), S()
                    }, a.toggleDividendsAdjust = function() {
                        C(), S()
                    }, a.toggleExtendedHours = function() {
                        C(), S()
                    }, a.toggleAggregationSpec = function() {
                        a.config.aggregation.spec = "Continue" === a.config.aggregation.spec ? "None" : "Continue", C(), S()
                    }, a.openContractRollSettingsModal = function() {
                        s.showContractRollSettingsModal(), S()
                    }, a.resetDialog = function() {
                        a.resetDialogFn(), S()
                    }, a.downloadChartData = function() {
                        g.exportCSV(a.currentSymbol.symbol)
                    }, a.saveToMyCharts = function() {
                        if (!o.isLoggedIn() || o.isLoggedIn() && !o.getUserData().is_premier) m.showPremier("myCharts");
                        else {
                            var e = o.getUserData() || {};
                            "technical" === (e.preferences ? e.preferences.charts_style : "interactive") ? l.openWarningModal(): h.openSaveMyChartModal()
                        }
                    }, a.downloadAsImage = function() {
                        var e = a.currentSymbol.symbol + "_Barchart_Interactive_Chart_" + window.moment(new Date).format("MM/DD/YYYY"),
                            i = t.getSVGForExport();
                        r.saveAsImage(i, e)
                    }, a.openChartInNewWindow = function() {
                        i.openInNewWindow(a.currentSymbol, a.dashboardMode)
                    }, a.openSaveTemplateModal = function() {
                        a.isLoggedIn && a.openSaveTemplateModalFn(), S()
                    }, a.openApplyTemplateModal = function() {
                        a.isLoggedIn && s.applyTemplateModal(), S()
                    }, a.addToWatchlist = function() {
                        S(), n.addToWatchlist(a.currentSymbol.symbol, a.currentSymbol.symbolName, a.dashboardMode)
                    }, a.hideMenu = function() {
                        S()
                    }
                },
                template: a("mnmy")
            }
        }
        i.$inject = ["interactiveChartSettings", "interactiveChartApi", "interactiveChartExpand", "interactiveChartUtils", "authService", "watchlistFormModalService", "interactiveChartModals", "myChartModalService", "interactiveChartStateService", "_", "interactiveChartSettingsConfig", "$window", "bcModalLoginSrv", "dashboardModalsService", "interactiveChartExportFacade"], e.exports = i
    },
    Ow8I: function(e, t, a) {
        "use strict";

        function i(e, t) {
            var i = ["$scope", function(a) {
                var i = {},
                    r = {};
                a.items.forEach(function(e) {
                    e.value = 100 * e.raw.lastPrice, e.value > 0 ? i[e.symbol] = e.value : r[e.symbol] = e.value
                }), e.ready(function() {
                    if ("housing" !== a.type || "mortgage" !== a.type) {
                        var e = function(e, t, a) {
                                var i;
                                return t.rgba.length && e.rgba.length ? (e = e.rgba, e = ((i = 1 !== (t = t.rgba)[3] || 1 !== e[3]) ? "rgba(" : "rgb(") + Math.round(t[0] + (e[0] - t[0]) * (1 - a)) + "," + Math.round(t[1] + (e[1] - t[1]) * (1 - a)) + "," + Math.round(t[2] + (e[2] - t[2]) * (1 - a)) + (i ? "," + (t[3] + (e[3] - t[3]) * (1 - a)) : "") + ")") : e = t.input || "none", e
                            },
                            o = Math.min.apply(null, Object.values(i)),
                            n = Math.max.apply(null, Object.values(i)) - o,
                            s = Math.min.apply(null, Object.values(r)),
                            l = Math.max.apply(null, Object.values(r)) - s;
                        a.items.forEach(function(t) {
                            if (t.value > 0) {
                                var a = (t.value - o) / n;
                                t.color = e(Highcharts.Color("#546585"), Highcharts.Color("#007D34"), a)
                            } else {
                                a = (t.value - s) / l;
                                t.color = e(Highcharts.Color("#C40000"), Highcharts.Color("#735A78"), a)
                            }
                        })
                    }
                    var c = {
                        chartType: "map",
                        title: {
                            text: null
                        },
                        subTitle: {
                            text: null
                        },
                        options: {
                            colors: [null],
                            chart: {
                                borderWidth: 0,
                                marginBottom: 90,
                                spacingBottom: 40,
                                type: "map"
                            },
                            colorAxis: {
                                type: "housing" === a.type || "mortgage" === a.type ? "logarithmic" : "linear",
                                minColor: "#C40000",
                                maxColor: "#007D34",
                                stops: [
                                    [.1, "#C40000"],
                                    [.2, "#A5344A"],
                                    [.3, "#914F60"],
                                    [.4, "#735A78"],
                                    [.5, "#546585"],
                                    [.6, "#4A717B"],
                                    [.7, "#4B746A"],
                                    [.8, "#38775C"],
                                    [.9, "#25794F"],
                                    [.95, "#007D34"]
                                ],
                                endOnTick: !0,
                                labels: {
                                    step: a.legendStep || 1
                                }
                            },
                            tooltip: {
                                headerFormat: "",
                                backgroundColor: "#313E4D",
                                borderColor: "#fff",
                                style: {
                                    color: "#fff"
                                },
                                pointFormat: "housing" === a.type || "mortgage" === a.type ? "<b>{point.stateName}</b> <br/> " + a.placeholder + ": <b>{point.lastPrice}</b>" : "<b>{point.stateName}</b> <br/> " + a.placeholder + ": <b>{point.lastPrice}%</b>"
                            },
                            plotOptions: {
                                map: {
                                    mapData: Highcharts.maps["countries/us/us-all"],
                                    joinBy: ["name", "stateName"],
                                    dashStyle: "solid"
                                }
                            },
                            legend: {
                                layout: "horizontal",
                                borderWidth: 0,
                                backgroundColor: "rgba(255,255,255,0.85)",
                                verticalAlign: "bottom",
                                align: "center",
                                y: 0,
                                itemMarginTop: -70,
                                title: {
                                    text: a.placeholder,
                                    style: {
                                        fontSize: "16px",
                                        textTransform: "uppercase",
                                        fontWeight: "normal"
                                    }
                                }
                            }
                        },
                        series: [{
                            mapData: Highcharts.maps["countries/us/us-all"],
                            data: a.items,
                            borderColor: "none",
                            borderWidth: "none",
                            states: {
                                hover: {
                                    borderColor: "#ccc",
                                    borderWidth: 1
                                }
                            },
                            nullColor: "#B5B5B5",
                            events: {
                                click: function(e) {
                                    window.location.href = "/stocks/quotes/" + e.point.symbol
                                }
                            }
                        }]
                    };
                    "housing" !== a.type && "mortgage" !== a.type && (c.options.legend.enabled = !1, c.title.text = "For each state's " + a.placeholder.replace("%", "") + " represents the premium or discount from the National " + a.type.charAt(0).toUpperCase() + a.type.slice(1) + '  Price Index ("' + a.placeholder.split(" ")[0] + '").', c.title.verticalAlign = "bottom", c.title.style = {
                        fontSize: "12px"
                    }), t.isMobile() && (c.series.states = {
                        hover: {
                            enabled: !1
                        },
                        normal: {
                            animation: !1
                        }
                    }), a.chartConfig = c
                }, this)
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    items: "=",
                    chartConfig: "=",
                    legendStep: "=",
                    type: "=",
                    placeholder: "=placeholderValue"
                },
                template: a("xqvM"),
                controller: i
            }
        }
        i.$inject = ["highchartsNG", "utils"], e.exports = i
    },
    Ox5F: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                getSbsData: function(r) {
                    var o = r.method || "/options/chain";
                    return delete r.method, e.call(a.buildUrl(i.API_URL + o, r), t.GET).then(function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig"], e.exports = i
    },
    P2It: function(e, t) {
        e.exports = '<div class=bc-modal-content> <input type=hidden /> <div class=modal-header> <i class="bc-glyph-times form-close" data-ng-click=cancel()></i> </div> <div class=bc-modal-content-inner> <div class="modal-settings-row row-contract-roll"> <div class="label bold">Contract Roll</div> <div class=select-lists-wrapper> <div class=left-select-list> <div class="bc-dropdown styled"> <select data-ng-model=formData.contractRoll> <option value=combined>Volume / Open Interest</option> <option value=expiration>Days to Expiration</option> </select> </div> </div> <div class=right-select-list> <div class="bc-dropdown styled" data-ng-hide="formData.contractRoll !== \'expiration\'"> <select data-ng-model=formData.daysToExpiration data-ng-options="day.value as day.label for day in expirationDays" data-ng-disabled="formData.contractRoll !== \'expiration\'"></select> </div> <input type=text disabled=disabled data-ng-show="formData.contractRoll !== \'expiration\'"> </div> </div> <div class=row-help-text> Determine how Futures Contracts roll on Nearby and Continuous charts </div> </div> </div> <div class="modal-controls-row text-center"> <button type=button class="bc-button grey" data-ng-click=cancel()>Cancel</button> <button type=submit class="bc-button light-blue" data-ng-click=apply()>Apply</button> </div> </div> '
    },
    P4da: function(e, t) {
        e.exports = '<div data-ng-class="{\'hide\':!$ctrl.showTooltip}" class="[[ ::$ctrl.class ]]" id="[[ ::$ctrl.id ]]"> <div data-ng-show=$ctrl.mapDataEmpty> [[ ::$ctrl.mapDataEmpty ]] </div> <div data-ng-show=!$ctrl.mapDataEmpty> <span class=title data-ng-bind=$ctrl.tooltipData.date></span> <span class=title data-ng-bind=$ctrl.tooltipData.symbol></span> <ul class=details> <li data-ng-show=$ctrl.tooltipBaseData.open> <span>Open:</span> <span data-ng-bind=$ctrl.tooltipBaseData.open></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.high> <span>High:</span> <span data-ng-bind=$ctrl.tooltipBaseData.high></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.low> <span>Low:</span> <span data-ng-bind=$ctrl.tooltipBaseData.low></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.close> <span>Close:</span> <span data-ng-bind=$ctrl.tooltipBaseData.close></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.Volume> <span>Volume:</span> <span data-ng-bind=$ctrl.tooltipBaseData.Volume></span> </li> <li data-ng-repeat="(key, value) in $ctrl.tooltipData"> <span data-ng-hide="key === \'date\' || key === \'symbol\'">[[ key | ucfirst ]]:</span> <span data-ng-hide="key === \'date\' || key === \'symbol\'" data-ng-bind=$ctrl.getValue(value)></span> </li> <li data-ng-if=$ctrl.tooltipBaseData.overlay1> <span class=title data-ng-bind=$ctrl.tooltipBaseData.overlay1.symbol></span> </li><li data-ng-show=$ctrl.tooltipBaseData.overlay1.open> <span>Open:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay1.open></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay1.high> <span>High:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay1.high></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay1.low> <span>Low:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay1.low></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay1.close> <span>Close:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay1.close></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay1.Volume> <span>Volume:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay1.Volume></span> </li>  <li data-ng-if=$ctrl.tooltipBaseData.overlay2> <span class=title data-ng-bind=$ctrl.tooltipBaseData.overlay2.symbol></span> </li><li data-ng-show=$ctrl.tooltipBaseData.overlay2.open> <span>Open:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay2.open></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay2.high> <span>High:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay2.high></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay2.low> <span>Low:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay2.low></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay2.close> <span>Close:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay2.close></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay2.Volume> <span>Volume:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay2.Volume></span> </li>  <li data-ng-if=$ctrl.tooltipBaseData.overlay3> <span class=title data-ng-bind=$ctrl.tooltipBaseData.overlay3.symbol></span> </li><li data-ng-show=$ctrl.tooltipBaseData.overlay3.open> <span>Open:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay3.open></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay3.high> <span>High:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay3.high></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay3.low> <span>Low:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay3.low></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay3.close> <span>Close:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay3.close></span> </li> <li data-ng-show=$ctrl.tooltipBaseData.overlay3.Volume> <span>Volume:</span> <span data-ng-bind=$ctrl.tooltipBaseData.overlay3.Volume></span> </li>  </ul> </div> </div>'
    },
    P8Mb: function(e, t) {
        e.exports = '<div class="bc-filter-etfs-leverage rows-wrapper" data-ng-cloak> <span class=label-wrapper>Leverage:</span> <div class=input-checkbox data-ng-repeat="(key, item) in checkboxes"> <input id="bc-leverage-[[ item ]]" data-checklist-before-change=checkUser() data-checklist-change=changeLeverage() data-checklist-model=leverages data-checklist-value=key data-ng-disabled="leverages.length === 1 && leverages.indexOf(key) !== -1" type=checkbox> <label for="bc-leverage-[[ item ]]"> <span class=bc-glyph-check></span> [[ item ]] </label> </div> </div>'
    },
    P8Xz: function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = new Date,
                t = (new Date).getTimezoneOffset() / 60;
            e.setMinutes(0);
            var a = 10 + (t = t < 0 ? Math.abs(t) : t > 0 ? -Math.abs(t) : t),
                i = 16 + t,
                r = 12 + t,
                o = 14 + t;
            return {
                minute: {
                    options: {
                        chart: {
                            type: "line",
                            height: 90
                        },
                        credits: {
                            enabled: !1
                        },
                        title: {
                            text: ""
                        },
                        legend: {
                            display: !1
                        },
                        xAxis: {
                            gridLineWidth: 0,
                            type: "datetime",
                            dateTimeLabelFormats: {
                                hour: "%l",
                                minute: "%M"
                            },
                            tickWidth: 0,
                            tickPositioner: function() {
                                var t = [e.setHours(a), e.setHours(r), e.setHours(o), e.setHours(i)];
                                return t.info = {
                                    unitName: "hour",
                                    higherRanks: {}
                                }, t
                            },
                            min: e.setHours(a),
                            max: e.setHours(i)
                        },
                        yAxis: {
                            title: {
                                text: null
                            },
                            gridLineWidth: 1,
                            labels: {
                                enabled: !1
                            },
                            plotLines: [{
                                color: "#909090",
                                width: 1,
                                value: 17600.69
                            }]
                        },
                        plotOptions: {
                            series: {
                                marker: {
                                    enabled: !1
                                },
                                states: {
                                    hover: {
                                        lineWidth: 1
                                    }
                                }
                            },
                            line: {
                                lineWidth: 1
                            }
                        }
                    },
                    series: [{
                        name: "chart",
                        showInLegend: !1
                    }]
                },
                daily: {
                    options: {
                        chart: {
                            type: "area",
                            height: 90,
                            marginRight: 35,
                            marginLeft: 0,
                            spacingRight: 1
                        },
                        credits: {
                            enabled: !1
                        },
                        title: {
                            text: ""
                        },
                        legend: {
                            display: !1
                        },
                        xAxis: {
                            gridLineWidth: 0,
                            type: "datetime",
                            minPadding: 0,
                            tickWidth: 0,
                            labels: {
                                x: 18
                            },
                            tickPositioner: function(e, t) {
                                var a = this.options,
                                    i = this.normalizeTimeTickInterval(this.tickInterval, a.units),
                                    r = this.getTimeTicks(i, e, t, a.startOfWeek, this.ordinalPositions, this.closestPointRange, !0);
                                return r.splice(1, 1), r.info = {
                                    higherRanks: i.higherRanks,
                                    unitName: i.unitName
                                }, r.splice(0, 1, e), r
                            },
                            min: null
                        },
                        yAxis: {
                            title: {
                                text: null
                            },
                            tickAmount: 2,
                            offset: -10,
                            opposite: !0,
                            gridLineWidth: 1,
                            labels: {
                                formatter: function() {
                                    return this.value
                                }
                            },
                            plotLines: [{
                                color: "#FF0000",
                                width: 1,
                                zIndex: 2,
                                value: 103.6934,
                                label: {
                                    text: 10,
                                    align: "right",
                                    x: 52,
                                    y: 5,
                                    style: {
                                        color: "#606060"
                                    }
                                }
                            }],
                            min: null
                        },
                        plotOptions: {
                            series: {
                                color: "rgba(79,151,193,0.30)",
                                marker: {
                                    enabled: !1
                                },
                                states: {
                                    hover: {
                                        lineWidth: 1
                                    }
                                }
                            },
                            line: {
                                lineWidth: 1
                            }
                        }
                    },
                    series: [{
                        name: "chart",
                        showInLegend: !1
                    }]
                }
            }
        }
    },
    P9Vo: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                transactionForm: function(t, i, r) {
                    return e.open({
                        template: a("684h"),
                        controller: "Portfolio.addTransactionModalCtrl",
                        controllerAs: "$ctrl",
                        windowClass: "reveal-modal bc-portfolio__add-transaction-modal-wrapper js-delete-confirmation",
                        resolve: {
                            portfolio: function() {
                                return t
                            },
                            transactionData: function() {
                                return i
                            },
                            isNote: function() {
                                return r
                            }
                        }
                    })
                },
                deletePortfolioConfirm: function(t) {
                    return e.open({
                        template: a("/AcI"),
                        controller: "Portfolio.deleteConfirmModalCtrl",
                        windowClass: "reveal-modal bc-light-modal bc-delete-portfolio-modal",
                        resolve: {
                            portfolio: function() {
                                return t
                            }
                        }
                    })
                },
                showPortfolioListForSymbol: function(t, i) {
                    return e.open({
                        template: a("24Gw"),
                        controller: "Portfolio.showPortfolioListModalCtrl",
                        windowClass: "reveal-modal bc-tools__modal-with-header",
                        resolve: {
                            symbolData: function() {
                                return {
                                    symbol: t,
                                    name: i
                                }
                            }
                        }
                    })
                },
                showPortfolioListForTransaction: function(t, i) {
                    return e.open({
                        template: a("DY2s"),
                        controller: "Portfolio.moveTransactionModalCtrl",
                        windowClass: "reveal-modal bc-tools__modal-with-header",
                        resolve: {
                            portfolio: function() {
                                return {
                                    portfolioId: t,
                                    transactionId: i
                                }
                            }
                        }
                    })
                }
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    PAIb: function(e, t, a) {
        "use strict";
        var i = "MyBarchart.OrganiseWatchlists";
        angular.module(i, []).controller("organiseWatchlistsCtrl", a("Cuoc")).factory("watchlistOrganiseApiFactory", a("wtSk"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    PCiX: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = [function() {
                var a = this;
                a.apiData = JSON.parse(e.unescape(a.apiData));
                var r = JSON.parse(a.symbol);
                a.currentSymbol = r, a.quotesService = i, a.data = a.apiData.data, a.utils = t
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("YZ3k"),
                controller: r,
                controllerAs: "DetailedQuoteCtrl"
            }
        }
        i.$inject = ["_", "utils", "quotesService"], e.exports = i
    },
    "PD+q": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r, o = !1,
                n = !1,
                s = this;
            this.symbols = {}, this.useBatData = !1, this.batSymbolsData = {}, this.exchange = "NYSE", this.profile = {}, this.deleteClasses = function() {
                t.$broadcast("realtimeDeleteClasses")
            }, this.timeoutInit = function() {
                o && a.cancel(o), o = a(function() {
                    t.$broadcast("realtimeUpdate"), s.symbols = {}, s.batSymbolsData = {}, n && a.cancel(n), s.timeoutInit(), n = a(function() {
                        s.deleteClasses()
                    }, 300)
                }, 1e3)
            }, s.timeoutInit(), this.connect = function() {
                return r || (r = e.connect(i.config.services.jerq_aggregator.host, !0)), r
            }
        }
        i.$inject = ["realtimeConnection", "$rootScope", "$timeout", "$window"], e.exports = i
    },
    PHMS: function(e, t, a) {
        "use strict";

        function i() {
            return function(e, t, a) {
                var i = t[0];
                t.bind("scroll", function() {
                    i.scrollTop + i.offsetHeight >= i.scrollHeight && e.$apply(a.bcInfinityScroll)
                })
            }
        }
        i.$inject = [], e.exports = i
    },
    PKdj: function(e, t) {
        e.exports = '<div class="bc-premier-ads-block [[ customClass ]]" data-ng-class="{\'show-for-medium-up\': refCode !== \'advAlerts\'}" data-ng-hide=hideContent> <div class=modal-close-wrapper data-ng-click=close()> <i class=bc-glyph-times></i> </div> <p data-ng-if="refCode === \'eodScreeners\'"> Did you know <strong>Barchart Premier Members</strong> can select their favorite Screeners to run automatically and have the results emailed to them each and every day after market close? Premier Members can also screen on their Watchlists, Portfolios, or Index Groups. See what else Barchart Premier can do for you, <a data-ng-click=gotoLink()>Sign up for a risk-free 30-day trial today</a>. </p> <p data-ng-if="refCode === \'tileView\'"> <strong>Barchart Premier Members</strong> may now choose the "Mini-Chart View" (use the "View" drop-down menu above) to see a small chart when you hover on the symbol. <span data-ng-show=isNotPremier> See what else Barchart Premier can do for you, <a data-ng-click=gotoLink()>Sign up for a risk-free 30-day trial today</a>.</span> </p> <p data-ng-if="refCode === \'advAlerts\'"> <strong>Barchart Premier Members</strong> can set Advanced Alerts from 100â€™s of technical and fundamental filters from the Barchart database. <span class="hide-small-alert hide-small-alert-page">These alerts include high/low prices, triggers, and turning points. Be alerted when a symbol youâ€™re following creates a new high, TrendSpotter changes to a Buy, or the 20-Day Moving Average crosses the 50-Day. </span><span class=hide-small-alert-page>Price Alerts for US equities are triggered based on real-time prices and can be configured for email or SMS text notifications.</span> <a data-ng-click=gotoLink()>Sign up for a risk-free 30-day trial today</a>. </p> <p data-ng-if="refCode === \'listScreen\'"> Did you know <strong>Barchart Premier Members</strong> can run a Screener on this page? The "Screen" icon below allows you to pull the stocks you see on this list into the Screener to further apply filters that match your investing criteria. For example, filter for Stocks with positive P/E ratio, highest Weighted Alpha or increasing Volume. And best of all if you like your screen, you can save the Settings and have them automatically run and emailed to you every day. <a data-ng-click=gotoLink()>Sign up for a risk-free 30-day trial today</a>. </p> </div> '
    },
    PL0M: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterData.default = e.filterData.default || {}, e.filterData.default.field = e.filterData.default.field || e.filters.default.field[0].key, e.filterData.default.value = e.filterData.default.value || ["", ""], e.filterData.default.operator = e.filters.default.operator
                }],
                template: a("4Ez/")
            }
        }
    },
    POzk: function(e, t) {
        e.exports = '<div class=performance-link-wrapper> <a target=_self data-ng-href="[[ getLink() ]]"> <i class=bc-glyph-usd></i> </a> </div> '
    },
    PSYn: function(e, t, a) {
        "use strict";

        function i(e, t) {
            this.hideAdsInPage = !1;
            var a = {};
            this.renderAdsOnPage = function() {
                this.hideAdsInPage && (this.hideAdsInPage = !1, Object.keys(a).forEach(function(i) {
                    angular.element(document.getElementById(i)).html(t(a[i])(e))
                }), setTimeout(function() {
                    window.dispatchEvent(new Event("resize"))
                }))
            }, this.removeAdsOnPage = function() {
                this.hideAdsInPage || (this.hideAdsInPage = !0, a = {}, setTimeout(function() {
                    var e = document.querySelectorAll(".magic-wrapper");
                    e.length && e.forEach(function(e) {
                        a[angular.element(e).attr("id")] = e.innerHTML, angular.element(e).find("script") && angular.element(e).find("script").remove(), angular.element(e).find("div") && angular.element(e).find("div").remove()
                    })
                }))
            }
        }
        i.$inject = ["$rootScope", "$compile"], e.exports = i
    },
    PSo9: function(e, t, a) {
        "use strict";
        var i = "OverviewCharts";
        angular.module(i, []).factory("OverviewChartsApiFactory", a("kRDL")).factory("StocksMajorIndicesOverviewChartsConfig", a("oasL")).factory("OverviewChartsHighChartConfig", a("P8Xz")).directive("stocksMajorIndicesOverviewCharts", a("ZVtc")).directive("overviewChart", a("KvAG")).directive("majorMarketsOverviewCharts", a("3pFJ")).directive("majorMarketsChartComponent", a("Cl9Z")).controller("configureSymbolsModalCtrl", a("0qO5"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    PUYv: function(e, t, a) {
        "use strict";
        angular.module("Options", []).directive("options", a("1Y+h"));
        e.exports = {
            enable: !0,
            name: "Options"
        }
    },
    PVyy: function(e, t) {
        e.exports = '<div class="bc-cmdty-ads-block [[ customClass ]]" data-ng-hide=hideContent> <div class=modal-close-wrapper data-ng-click=close()> <i class=bc-glyph-times></i> </div> <div class=content> <div class=header>Join the commodity industry at <span class=underline>cmdtyExchange<span class=show-for-large-up> by Barchart</span></span>. <span>May 8-10 in Chicago. <a class="bold show-for-small-only" data-ng-click=gotoLink()>Learn More</a></span> </div> <p class=show-for-medium-up> A one-of-a-kind event focused on the data and technology impacting commodity markets. </p> </div> <div class="bc-cmdty-ads-block__button show-for-medium-up"> <a data-ng-click=gotoLink()>Learn More</a> </div> </div> '
    },
    PYpY: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e) {
                return String(e).replace(/<[^>]+>/gm, "")
            }
        }
    },
    PZfr: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            return {
                restrict: "A",
                controller: ["$scope", "dataProvider", function(e, t) {
                    e.rowsDataLoading = !1, e.currentSym = null;
                    var n = !1;
                    e.templateString = a("/Xqz"), e.$on("reorderDataTable", function(t, a) {
                        void 0 !== a.guid && e.guid !== a.guid || e.hideSymbolRows()
                    }), e.filterExcludeHeader = function(e) {
                        var t = [],
                            a = this.options.resetExclude || this.excludedFields;
                        return a.push("symbol"), angular.forEach(e, function(e) {
                            ~a.indexOf(e) || t.push(e)
                        }), t
                    }, e.getNewLineLink = function(e) {
                        return i.route(window.config.routes["quotes.sectors"], {
                            sector: "stocks",
                            symbol: e.symbol
                        })
                    }, e.getNewLineSymbolName = function(t) {
                        return e.symbols[t.symbol]
                    }, e.hasNewRows = function(e) {
                        return n || (n = JSON.parse(this.options.newRowsSymbols)), Object.keys(n[e.symbol]).length
                    }, e.getNewRowsData = function(a) {
                        e.rowsDataLoading = !0;
                        var s = angular.copy(this.apiConfig.api);
                        s.symbols = Object.keys(n[a]).join(","), e.symbols = n[a];
                        var l = {
                            fields: this.apiConfig.api.fields.split(","),
                            options: this.options.exclude
                        };
                        t.call(i.buildUrl(o.API_URL + "/quotes/get", s), r.GET).then(function(t) {
                            e.rowsDataLoading = !1, e.newContent = t.data, e.options = l, e.appendNewRows({
                                symbol: a
                            })
                        }, function(t) {
                            console.log("GOT ERROR: ", t), e.currentSym = null, e.rowsDataLoading = !1
                        })
                    }, e.addNewRows = function(t, a) {
                        e.rowsDataLoading || (null !== e.currentSym && e.hideAnimateRows(), e.currentSym = a, e.symbolRowsExpanded = !0, e.getNewRowsData(t.symbol))
                    }, e.hideSymbolRows = function() {
                        e.hideAnimateRows(), e.currentSym = null, e.symbolRowsExpanded = !1
                    }, e.$on("datatableResetExpandWidgets", function() {
                        e.currentSym = null
                    })
                }],
                link: function(a, i) {
                    var r;
                    a.$on("tableHasBeenSorted", function() {
                        r && r.remove(), i[0].querySelectorAll(".expand-new-rows").length && (i[0].querySelectorAll(".expand-new-rows").forEach(function(e) {
                            e.style.display = "none", a.newContent = [], angular.element(e).remove()
                        }), a.currentSym = null, a.symbolRowsExpanded = !1)
                    }), a.showAnimateRows = function(t) {
                        e(t, "slideDown", {
                            duration: 300,
                            display: "table-row"
                        })
                    }, a.hideAnimateRows = function() {
                        i[0].querySelectorAll(".expand-new-rows").length && (r.remove(), i[0].querySelectorAll(".expand-new-rows").forEach(function(e) {
                            e.remove()
                        }))
                    }, a.appendNewRows = function(e) {
                        var o = angular.element(i[0].querySelector('[data-current-index="' + a.currentSym + '"]')),
                            n = angular.element(a.templateString);
                        r = t(n)(a), o.after(r), a.showAnimateRows(r)
                    }
                }
            }
        }
        i.$inject = ["Velocity", "$compile", "utils", "httpVerbs", "apiConfig"], e.exports = i
    },
    PgTq: function(e, t, a) {
        "use strict";
        var i = "MoreFuturesContracts";
        angular.module(i, []).controller(i + ".moreFuturesContractsCtrl", a("eP72"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    Pia3: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i, r) {
                    if (e.isMobileOnly()) {
                        i.remove();
                        var o = t.getFilterCollection();
                        o.length > 0 ? o.forEach(function(e) {
                            "viewName" === e.name && "chart" === e.value && a.$evalAsync(function() {
                                t.filterName("viewName", "main")
                            })
                        }) : a.$evalAsync(function() {
                            t.filterName("viewName", "main")
                        })
                    }
                }
            }
        }
        i.$inject = ["utils", "barchartDatatableFilterUrl"], e.exports = i
    },
    Pizc: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                scope: {},
                bindToController: {
                    savedScreener: "=",
                    type: "@",
                    filters: "="
                },
                controller: ["$modal", "Notification", "screenerPermissionService", "$scope", "events", "limitsService", "utils", "$window", function(e, t, i, r, o, n, s, l) {
                    var c, d = this,
                        u = {
                            STK: "stocks",
                            ETF: "etfs",
                            FUND: "funds"
                        };
                    d.beforeSaveCheck = d.beforeSaveCheck || function() {
                        return !0
                    }, r.$on(o.ON_SCREENER_APPLY_EMPTY_TEMPLATE, function() {
                        d.savedScreener = null
                    }), d.saveScreenerModal = function(r) {
                        if (i.checkPermissions()) {
                            if ((!d.savedScreener || !d.savedScreener.name) && n.screeners()) return !1;
                            c = d.savedScreener ? d.savedScreener.name : null, e.open({
                                template: a("/2vM"),
                                controller: "Screener.ModalSaveScreenerCtrl",
                                windowClass: "bc-light-modal ",
                                resolve: {
                                    savedScreenerName: function() {
                                        return c
                                    },
                                    savedScreener: function() {
                                        return d.savedScreener
                                    },
                                    screenerType: function() {
                                        return d.type
                                    },
                                    filters: function() {
                                        return d.filters
                                    },
                                    organisePage: function() {
                                        return !1
                                    }
                                }
                            }).result.then(function(e) {
                                if ("OK" === e.status) {
                                    d.savedScreener = e.screener;
                                    var a = s.route(l.config.routes["my.screeners"], {
                                        tab: u[d.type] || "options"
                                    });
                                    t.success("Screener " + d.savedScreener.name + ' saved. <br/><a target="_self" href="' + a + '">Organize your Saved Screeners</a>.')
                                }
                            })
                        }
                    }, r.$on("bcScreenerSaveReport", function() {
                        d.saveScreenerModal(!0)
                    })
                }],
                controllerAs: "$ctrl",
                template: a("qNC6")
            }
        }
    },
    PkTC: function(e, t) {
        e.exports = '<div class=market-performance-chart> <div class="throbber-wrapper ng-hide" data-ng-show=$ctrl.loading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=market-performance-chart__header data-ng-hide=$ctrl.loading> S&P 500 Index vs S&P Sectors: 1-Year Performance </div> <div class=market-performance-chart__control-panel data-ng-hide=$ctrl.loading> <div class="toggler show-for-medium-down"> <a data-ng-click=$ctrl.showMenu() data-ng-hide=$ctrl.menuVisible> Legend <i class=bc-glyph-chevron-down></i> </a> <a data-ng-click=$ctrl.closeMenu() data-ng-show=$ctrl.menuVisible> Legend <i class=bc-glyph-chevron-up></i> </a> </div> <div class="symbols-wrapper js-market-performance-chart-controls"> <div class=symbol-item data-ng-repeat="item in $ctrl.symbolsList track by $index"> <div class=input-checkbox> <input checked=checked id="cb-[[ $index ]]" data-checklist-model=$ctrl.symbolToCompare data-checklist-value=item.symbol data-ng-disabled="item.default === true" type=checkbox> <label for="cb-[[ $index ]]"> <span class=bc-glyph-check></span> <span class=symbol data-ng-style="{\'background-color\': item.color}">[[ item.symbol ]]</span> <span class=symbol-name>[[ item.symbolName ]]</span> </label> </div> </div> </div> </div> <div class=market-performance-chart__chart> <div id=bc-interactive-chart__chart-container-tooltip></div> <div class=chart-wrapper> <div id=bc-interactive-chart__chart-container class=chart-container></div> </div> </div> </div>'
    },
    Plls: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                getData: function(r, o) {
                    var n = {
                        fields: "date,eventType,value",
                        orderBy: "date",
                        orderDir: "desc",
                        symbol: r,
                        startDate: o,
                        meta: "field.description,field.shortName"
                    };
                    return e.call(a.buildUrl(i.API_URL + "/corporateActions", n), t.GET)
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig"], e.exports = i
    },
    Pn3t: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.storeFlipchartsSimpleChartData = function(e, a, i, r, o) {
                var n = {
                    direction: r,
                    date: e,
                    action: a,
                    price: i,
                    title: o
                };
                t.set("flipcharts.classicChartData", JSON.stringify(n))
            }
        }
        i.$inject = ["$scope", "localStorageService"], e.exports = i
    },
    Pq7Y: function(e, t, a) {
        "use strict";
        var i = a("urOV"),
            r = a("7MCi");
        angular.module(i.name).config(["$interpolateProvider", "$compileProvider", function(e, t) {
            e.startSymbol("[["), e.endSymbol("]]"), t.debugInfoEnabled("production" !== r.NODE_ENV)
        }]).config(["$httpProvider", function(e) {
            e.defaults.useXDomain = !0, e.defaults.withCredentials = !0, e.defaults.headers = {
                "Content-Type": "application/json;charset=utf-8"
            }, e.useApplyAsync(!0)
        }]).config(["$logProvider", function(e) {
            e.debugEnabled("production" !== r.NODE_ENV)
        }]).config(["localStorageServiceProvider", function(e) {
            e.setPrefix("barchart")
        }]).config(["highchartsNGProvider", function(e) {
            e.lazyLoad([e.HIGHSTOCK, "highcharts-more.js", "maps/modules/map.js", "mapdata/countries/us/us-all.js", "modules/solid-gauge.js"])
        }]).config(["NotificationProvider", function(e) {
            e.setOptions({
                delay: 6e3,
                templateUrl: "bc-notification.html"
            })
        }]).config(["$tooltipProvider", function(e) {
            var t = navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry)/);
            angular.extend(e.defaults, {
                trigger: t ? "none" : "hover",
                templateUrl: "bc-tooltip.html"
            })
        }]), angular.showWatchers = function() {
            var e = [];
            ! function t(a) {
                angular.forEach(["$scope", "$isolateScope"], function(t) {
                    a.data() && a.data().hasOwnProperty(t) && angular.forEach(a.data()[t].$$watchers, function(t) {
                        e.push(t)
                    })
                }), angular.forEach(a.children(), function(e) {
                    t(angular.element(e))
                })
            }(angular.element(document.getElementsByTagName("body")));
            var t = [];
            angular.forEach(e, function(e) {
                t.indexOf(e) < 0 && t.push(e)
            }), console.log(t.length)
        }
    },
    PqZ3: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-ads-modal bc-survey-modal"> <input type=hidden /> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <div class=bc-ads-modal__header><h3>We Welcome Your Feedback</h3></div> <div class=bc-ads-modal__content> <br/> <p>Help us improve your experience on Barchart.com by taking our short survey. Your answers will help direct the development of future site features.</p> <br/> <div class="control-buttons row"> <div class="medium-6 column"> <div class="button-wrapper text-center"> <a class="btn bc-button light-blue bc-ads-modal__button grey" data-ng-click=close()> No Thanks</a> </div> </div> <div class="medium-6 column"> <div class="button-wrapper text-center"> <a target=_blank data-ng-click=goToLink() class="btn bc-button bc-ads-modal__button trial">Give Feedback</a> </div> </div> </div> </div> </div>'
    },
    Ptny: function(e, t, a) {
        "use strict";
        var i = "TimePeriodInfo";
        angular.module(i, []).constant("timeFramesConfig", a("Q2JL")).controller("timePeriodInfoCtrl", a("SjjQ"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    PtyM: function(e, t) {
        e.exports = '<div class="dashboard-grid-bar-type-drop-down tools-dropdown tools-dropdown-bartype"> <bc-dropdown-flexible data-label-font=$ctrl.labelFont data-label-img=$ctrl.label data-dropdown-id=bc-dashboard-grid-dropdown-bartype data-remove-mobile-touch=true class=js-bc-dashboard-grid-dropdown-bartype> <div class=tools-dropdown-content> <ul> <li data-ng-repeat="item in $ctrl.typeList" data-ng-click=$ctrl.changeBarType(item)> <i class="icon bc-glyph-check" data-ng-show="$ctrl.selectedBarType.curveStyle === item.key && $ctrl.selectedBarType.curveAttribute === item.attr"> </i> <div class=label> [[ ::item.value ]] </div> </li> </ul> </div> </bc-dropdown-flexible> </div>'
    },
    PvqW: function(e, t, a) {
        "use strict";
        e.exports = [{
            key: "100",
            value: "Small"
        }, {
            key: "150",
            value: "Medium"
        }, {
            key: "200",
            value: "Large"
        }]
    },
    Pwom: function(e, t) {
        e.exports = '<div class=social-component> <ul class=social-list> <li class="social-icon icon-facebook" title="Log in with Facebook "> <a class="[[ getSocialClass(\'facebook\') ]] [[ ref ? \'ref_\'+ref : \'\' ]]" data-ng-click="socialLogin(links.facebook, ref)"> <i class=bc-glyph-facebook></i> <span> Facebook </span> </a> </li> <li class="social-icon icon-linkedin" title="Log in with LinkedIn"> <a class="[[ getSocialClass(\'linkedIn\') ]] [[ ref ? \'ref_\'+ref : \'\' ]]" data-ng-click=socialLogin(links.linkedin)> <i class=bc-glyph-linkedin></i> <span>LinkedIn </span> </a> </li> <li class="social-icon icon-google" title="Log in with Google"> <a class="[[ getSocialClass(\'google\') ]] [[ ref ? \'ref_\'+ref : \'\' ]]" data-ng-click="socialLogin(links.google, ref)"> <span class=google-wrapper><i class=bc-glyph-google></i></span> <span> Google </span> </a> </li> <li class="social-icon icon-twitter" title="Log in with Twitter"> <a class="[[ getSocialClass(\'twitter\') ]] [[ ref ? \'ref_\'+ref : \'\' ]]" data-ng-click=socialLogin(links.twitter)> <i class=bc-glyph-twitter></i> <span>Twitter </span> </a> </li> </ul> </div>'
    },
    Q2JL: function(e, t, a) {
        "use strict";
        e.exports = {
            timeFramesList: {
                today: {
                    title: "Daily",
                    desc: "previous price"
                },
                "5d": {
                    title: "5-Day",
                    desc: "the price 5-days ago"
                },
                "1m": {
                    title: "1-Month",
                    desc: "the price 1 month ago"
                },
                "3m": {
                    title: "3-Month",
                    desc: "the price 3 months ago"
                },
                "6m": {
                    title: "6-Month",
                    desc: "the price 6 months ago"
                },
                "9m": {
                    title: "9-Month",
                    desc: "the price 9 months ago"
                },
                "12m": {
                    title: "52-Week",
                    desc: "the price 12 months ago"
                },
                "1y": {
                    title: "52-Week",
                    desc: "the price 12 months ago"
                },
                ytd: {
                    title: "Year-To-Date",
                    desc: "Dec 31st"
                },
                "2y": {
                    title: "2-Year",
                    desc: ""
                },
                "3y": {
                    title: "3-Year",
                    desc: ""
                },
                "5y": {
                    title: "5-Year",
                    desc: ""
                },
                "10y": {
                    title: "10-Year",
                    desc: ""
                },
                "20y": {
                    title: "20-Year",
                    desc: ""
                },
                alltime: {
                    title: "all time",
                    desc: ""
                }
            },
            names: {
                current: "Latest",
                daily: "End-of-Day",
                weekly: "Weekly",
                monthly: "Monthly",
                "3y": 3,
                "5y": 5,
                "10y": 10
            },
            periods: {
                current: "days",
                daily: "days",
                weekly: "weeks",
                monthly: "months"
            }
        }
    },
    Q9yX: function(e, t, a) {
        "use strict";

        function i(e) {
            e.submit = function(t) {
                var a = e.newsSearchForm.symbol.$modelValue || "any",
                    i = e.newsSearchForm.keyword.$modelValue;
                if ("any" !== a || "" !== i) {
                    var r = t + "/" + a;
                    i && (r = r + "/" + i), document.location.href = r
                }
            }
        }
        i.$inject = ["$scope"], e.exports = i
    },
    QBb1: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                require: "ngModel",
                scope: {
                    existedNames: "=uniqueName"
                },
                link: function(e, t, a, i) {
                    "string" == typeof e.existedNames && (e.existedNames = JSON.parse(e.existedNames)), i.$parsers.unshift(function(t) {
                        var a = -1 === e.existedNames.indexOf(t);
                        return i.$setValidity("uniqueName", a), t
                    }), i.$formatters.unshift(function(t) {
                        return i.$setValidity("uniqueName", -1 === e.existedNames.indexOf(t)), t
                    })
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    QBnE: function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };

        function o(e, t, i, o, n, s) {
            var l = !1,
                c = [];
            return {
                restrict: "E",
                scope: {
                    formData: "=",
                    calculateSpread: "=",
                    fullScreen: "=",
                    error: "=",
                    symbol: "@"
                },
                controller: ["$scope", function(d) {
                    var u = !0;
                    d.formData = d.formData || s.spread, d.fields = t, d.months = a("YnPF"), d.years = a("6Oom"), d.operators = a("M73E").operators, d.spreadData = angular.copy(a("M73E").spreadData), d.commonSpreads = a("kiY7"), d.commonSpread = "", l ? d.symbols = c : i.call(e.buildUrl(o.API_URL + "/quotes/get?lists=futures.category.us.all&fields=symbol,symbolRoot,category,symbolName&groupBy=category"), n.GET).then(function(e) {
                        "object" === r(e.data) && (d.symbols = e.data, c = e.data, l = !0)
                    }), d.$watch(function() {
                        return d.commonSpread
                    }, function() {
                        "" !== d.commonSpread.trim() && (d.formData[t.EXPRESSION] = d.commonSpread, u = !0, d.spreadData = angular.copy(a("M73E").spreadData))
                    }), d.$watch(function() {
                        return d.spreadData
                    }, function() {
                        u ? u = !1 : "" === d.commonSpread.trim() && "" === d.formData[t.EXPRESSION].trim() || (d.commonSpread = "", d.formData[t.EXPRESSION] = "")
                    }, !0), d.$on("applySpreadSettings", function() {
                        if (d.spreadForm.$invalid) return d.spreadForm.$setSubmitted(), void(d.error.spreadForm = 'To build a valid expression fill entire "Symbol-Month-Year" for each leg');
                        if (d.spreadForm.$setPristine(), d.error.spreadForm = null, "" === d.commonSpread.trim() && "" === d.formData[t.EXPRESSION].trim()) {
                            var e = function() {
                                for (var e, t, a, i, r, o = "", n = 1; n <= 3; ++n)
                                    if (e = d.spreadData["symbol" + n], t = d.spreadData["monthPeriod" + n], a = d.spreadData["yearPeriod" + n], i = d.spreadData["multiplier" + n], r = n > 1 ? d.spreadData["operator" + n] : "", e && t && ("Y" === t || a)) {
                                        var s = "Y" === t ? e + "Y00" : e + t + a;
                                        i && (-1 === i ? s = "-" + s : 1 !== i && (s = i + "*" + s)), o = o + r + s
                                    } return o
                            }();
                            d.formData[t.EXPRESSION] = "" === e ? d.symbol : e
                        }
                    }), d.$on("clearSettings", function() {
                        d.commonSpread = "", d.spreadData = angular.copy(a("M73E").spreadData)
                    })
                }],
                template: a("TVv7")
            }
        }
        o.$inject = ["utils", "technicalChartFields", "dataProvider", "apiConfig", "httpVerbs", "technicalChartSettingsService"], e.exports = o
    },
    QKxi: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                require: "ngModel",
                transclude: !0,
                compile: function(e, t) {
                    return e.after("<i>x</i>"),
                        function(e, t, a, i) {
                            t.val() && i.$setViewValue(t.val()), t.next().on("click", function() {
                                t.val(""), i.$setViewValue(""), e.$apply(), t[0].focus()
                            }), e.$watch(function() {
                                return i.$modelValue
                            }, function(e) {
                                i.$isEmpty(e) ? t.removeClass("close-button") : t.addClass("close-button")
                            })
                        }
                }
            }
        }
        i.$inject = ["$window"], e.exports = i
    },
    QO0c: function(e, t) {
        e.exports = '<div class="tooltip in bc-tooltip bc-watchlist-tooltip" data-ng-class="{\'with-notes\': notes}" data-ng-show="notes || high_flag ||  low_flag"> <div class="tooltip-inner clearfix"> <ul class=notes data-ng-class=full> <li data-ng-if=high_flag data-ng-class="{\'bold\' : lastPrice > raw.high_flag }">High Flag: [[ high_flag ]]</li> <li data-ng-if=low_flag data-ng-class="{\'bold\' : lastPrice < raw.low_flag }">Low Flag: [[ low_flag ]]</li> <li data-ng-if=notes>Notes: [[ notes ]]</li> </ul> </div> </div> '
    },
    QOqO: function(e, t, a) {
        "use strict";
        var i = angular.element("#bc-dynamic-config");
        window.config = JSON.parse(i[0].innerHTML), window.players = [], i.remove();
        var r = a("urOV"),
            o = a("7MCi"),
            n = [];
        a("vkwz").forEach(function(e) {
            e.enable && n.push(e.name)
        });
        var s = !1;
        if (window.location.hash) {
            var l = decodeURIComponent(window.location.hash);
            ["screener", "timeFrame", "viewName", "moneyness", "future", "dropdown1"].forEach(function(e) {
                -1 !== l.indexOf("#/" + e) && (window.location.href = decodeURIComponent(window.location.href).replace("#/", window.location.search ? "&" : "?"), s = !0)
            }), -1 !== l.indexOf("#/technical-chart") && (window.location.href = decodeURIComponent(window.location.href).replace("#/technical-chart", ""), s = !0)
        }
        window.PropertyError = a("3bCC").PropertyError, window.PropertyRequiredError = a("3bCC").PropertyRequiredError, window.InvalidTypeError = a("3bCC").InvalidTypeError, window.InvalidJSONStateError = a("3bCC").InvalidJSONStateError;
        var c = ["lodash", "ngRoute", "enquireModule", "velocityModule", "rql", "ngSanitize", "taiPlaceholder", "adv", "realtime", "ngTouch", "mm.foundation.dropdownToggle", "mm.foundation.tpls", "mm.foundation.modal", "mgcrea.ngStrap.datepicker", "mm.foundation.accordion", "mm.foundation.offcanvas", "mm.foundation.tabs", "dom", "common", "api", "dataTable", "charts", "authentication", "MyBarchart", "highcharts-ng", "ng-iscroll", "ui.tree", "checklist-model", "pasvaz.bindonce", "LocalStorageModule", "ui-notification", "sly", "ipCookie", "vcRecaptcha", "ngTagsInput", "ui.calendar", "ngCookies"];
        c = c.concat(n), window.angularIsReady = !1, angular.module(r.name, c), a("Pq7Y"), a("avaJ"), a("kQx8"), a("OMIF"), a("HEC/"), a("8qNZ"), a("CSAf"), a("RrHy"), a("ANsi"), a("3KkX"), a("n4yS"), a("zLPB"), a("rm9P"), a("RHEN"), angular.module(r.name).config(["authServiceProvider", function(e) {
            e.userAuthData = window.config.user.data
        }]).config(["$locationProvider", function(e) {
            e.html5Mode(!0)
        }]).constant("ENV", "production" === o.NODE_ENV ? "production" : "development").constant("DEFAULT_REF", "myBC").constant("appConfig", {
            grecaptchaKey: "6LfrMQQTAAAAADQxd0W9emE7BU7OmXSWO_OaljnR",
            grecaptchaInvisibleKey: "6LcNsloUAAAAAC__s4May65JH2njdXm5khSqc3Hr",
            SUBSCRIPTIONS: {
                SIMPLE_USER: 1,
                PREMIUM_USER: 2
            }
        }).run(function() {
            setTimeout(function() {
                window.angularIsReady = !0
            }, 0)
        }), s || angular.element(document).ready(function() {
            angular.bootstrap(document, [r.name], {
                strictDi: !0
            })
        })
    },
    QTit: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.close = function(e) {
                t.close(e)
            }
        }
        i.$inject = ["$scope", "$modalInstance"], e.exports = i
    },
    QfW6: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = [];
            this.onInit = function(e) {
                r = Array.prototype.slice.call(e)
            }, this.changeScreener = function(i, n, s) {
                var l = e.find(r, {
                    id: i
                });
                n.target.value !== l[s] && (l[s] = n.target.value, l.description = o(l.description), t.update(i, l).then(function() {
                    a.success("Screener has been updated.")
                }))
            }, this.showType = function(e) {
                return i[e] || e
            };
            var o = function(e) {
                return (e + "").replace(/\\(.?)/g, function(e, t) {
                    switch (t) {
                        case "\\":
                            return "\\";
                        case "0":
                            return "\0";
                        case "":
                            return "";
                        default:
                            return t
                    }
                })
            }
        }
        i.$inject = ["_", "screenerApiService", "Notification", "screenerNames"], e.exports = i
    },
    Qi0S: function(e, t, a) {
        "use strict";
        e.exports = function(e) {
            var t = [{
                    value: "L",
                    title: e.TWO_MONTHS
                }, {
                    value: "ML",
                    title: e.THREE_MONTHS
                }, {
                    value: "O",
                    title: e.FOUR_MONTHS
                }, {
                    value: "M",
                    title: e.SIX_MONTHS
                }, {
                    value: "H",
                    title: e.NINE_MONTHS
                }, {
                    value: "YTD",
                    title: e.YEAR_TO_DATE
                }, {
                    value: "X",
                    title: e.ONE_YEAR
                }],
                a = [{
                    value: "L",
                    title: e.ONE_YEAR
                }, {
                    value: "O",
                    title: e.TWO_YEARS
                }, {
                    value: "M",
                    title: e.THREE_YEARS
                }, {
                    value: "H",
                    title: e.FOUR_YEARS
                }, {
                    value: "X",
                    title: e.FIVE_YEARS
                }],
                i = [{
                    value: "L",
                    title: e.FIVE_YEARS
                }, {
                    value: "O",
                    title: e.SEVEN_YEARS
                }, {
                    value: "M",
                    title: e.TEN_YEARS
                }, {
                    value: "H",
                    title: e.FIFTEEN_YEARS
                }, {
                    value: "X",
                    title: e.TWENTY_YEARS
                }];
            return {
                defaultTimePeriods: {
                    I: "L",
                    DO: "M",
                    DN: "M",
                    DC: "M",
                    WO: "L",
                    WN: "L",
                    WC: "L",
                    MO: "L",
                    MN: "L",
                    MC: "L"
                },
                timePeriods: {
                    I: [{
                        value: "L",
                        title: e.ONE_DAY
                    }, {
                        value: "O",
                        title: e.TWO_DAYS
                    }, {
                        value: "M",
                        title: e.THREE_DAYS
                    }, {
                        value: "H",
                        title: e.FOUR_DAYS
                    }, {
                        value: "X",
                        title: e.FIVE_DAYS
                    }, {
                        value: "M60",
                        title: e.TEN_DAYS_60_MIN
                    }, {
                        value: "M90",
                        title: e.FIFTEEN_DAYS_90_MIN
                    }, {
                        value: "H90",
                        title: e.TWENTY_DAYS_60_MIN
                    }, {
                        value: "M120",
                        title: e.TWENTY_FIVE_DAYS_120_MIN
                    }, {
                        value: "H120",
                        title: e.ONE_MONTH
                    }],
                    DO: t,
                    DN: t,
                    DC: t,
                    WO: a,
                    WN: a,
                    WC: a,
                    MO: i,
                    MN: i,
                    MC: i
                }
            }
        }
    },
    Qj9k: function(e, t) {
        e.exports = '<div class=bc-screener__filter-percent-from> Within <div class=bc-screener__input-group-wrapper> <div class=input-group> <span class=input-group-prefix data-ng-if=filters.default.prepend data-ng-bind-html=filters.default.prepend></span> <input type=number class=bc-screener__filter-percent-from-input data-ng-model=filterData.default.value /> <span class=input-group-suffix data-ng-if=filters.default.append data-ng-bind-html=filters.default.append></span> </div> </div> <span>of</span> <div class="bc-dropdown styled bc-screener__filter-percent-from-dropdown"> <select data-ng-model=filterData.default.field data-ng-options="item.key as item.value for item in filters.default.field"></select> </div> </div>'
    },
    QjFd: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            function r(t) {
                t.forEach(function(t) {
                    t.optionType ? (e.result[t.optionType.toLowerCase() + "Volume"] = e.result[t.optionType.toLowerCase() + "Volume"] + t.raw.volume, e.result[t.optionType.toLowerCase() + "OpenInterest"] = e.result[t.optionType.toLowerCase() + "OpenInterest"] + t.raw.openInterest) : t.optionType_left && t.optionType_right && (e.result[t.optionType_left.toLowerCase() + "Volume"] = e.result[t.optionType_left.toLowerCase() + "Volume"] + t.raw.volume_left, e.result[t.optionType_left.toLowerCase() + "OpenInterest"] = e.result[t.optionType_left.toLowerCase() + "OpenInterest"] + t.raw.openInterest_left, e.result[t.optionType_right.toLowerCase() + "Volume"] = e.result[t.optionType_right.toLowerCase() + "Volume"] + t.raw.volume_right, e.result[t.optionType_right.toLowerCase() + "OpenInterest"] = e.result[t.optionType_right.toLowerCase() + "OpenInterest"] + t.raw.openInterest_right)
                })
            }
            e.$on("initQuotesOptionsExpiration", function(e, t) {}), e.$on("onBarchartDataTableRendered", function(t, a) {
                (a.middleware || a.data[0].openInterest_left) && (e.result = {
                    putVolume: 0,
                    callVolume: 0,
                    volumeRatio: 0,
                    putOpenInterest: 0,
                    callOpenInterest: 0,
                    openInterestRatio: 0
                }, a.data.Call ? (r(a.data.Call), r(a.data.Put)) : r(a.data), e.result.volumeRatio = e.result.putVolume / e.result.callVolume, e.result.volumeRatio = e.result.volumeRatio.toFixed(2), e.result.openInterestRatio = e.result.putOpenInterest / e.result.callOpenInterest, e.result.openInterestRatio = e.result.openInterestRatio.toFixed(2), e.result.putVolume = e.result.putVolume.toFixed().toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","), e.result.callVolume = e.result.callVolume.toFixed().toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","), e.result.putOpenInterest = e.result.putOpenInterest.toFixed().toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","), e.result.callOpenInterest = e.result.callOpenInterest.toFixed().toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","))
            }), e.init = function(t) {
                e.apiConfig = t
            }
        }
        i.$inject = ["$scope", "$rootScope", "$location", "$timeout"], e.exports = i
    },
    QnJG: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            return {
                restrict: "A",
                link: function(o, n, s) {
                    var l = s.bcModalLogin || null,
                        c = s.bcModalRedirect || !1,
                        d = s.bcNeedPremier || !1,
                        u = !0,
                        p = "true" === s.stayOnPage,
                        m = "click";
                    "true" === s.removeTouchStart || (m += " touchstart"), n.bind(m, function(n) {
                        if (e.isLoggedIn() || d) !d || e.isLoggedIn() && e.getUserData().is_premier || (n.preventDefault(), a.setRedirectPath(s.href), r.showPremier(l || "advOptions"));
                        else {
                            if (n.preventDefault(), o[s.loginCallback]) {
                                i.onLogin.push(function() {
                                    o[s.loginCallback]()
                                });
                                var m = i.onLogin.length - 1,
                                    h = o.$on("authModalHasBeenClosed", function() {
                                        h(), i.onLogin.splice(m, 1)
                                    })
                            }
                            p && (s.href = window.location.href, c = !0), t.goToLogin(l), u && c ? (a.setRedirectPath(s.href), u = !1) : c || a.setRedirectPath(null)
                        }
                    })
                },
                $attrs: {
                    bcModalLogin: "@",
                    bcModalRedirect: "@",
                    bcNeedPremier: "@",
                    href: "@",
                    loginCallback: "@",
                    stayOnPage: "@",
                    removeTouchStart: "@"
                }
            }
        }
        i.$inject = ["authService", "authRouteService", "authRedirectService", "authCallbacks", "bcModalLoginSrv"], e.exports = i
    },
    QnWM: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("bhZJ"),
                controller: ["$scope", "quotesService", function(e, t) {
                    e.lists = {
                        left: [{
                            field: "peRatioTrailing",
                            label: "Price/Earnings ttm"
                        }, {
                            field: "peRatioForward",
                            label: "Price/Earnings forward"
                        }, {
                            field: "pegRatio",
                            label: "Price/Earnings to Growth"
                        }, {
                            field: "returnOnEquity"
                        }, {
                            field: "returnOnAssets"
                        }, {
                            field: "profitMargin"
                        }],
                        right: [{
                            field: "debtEquity"
                        }, {
                            field: "priceSales"
                        }, {
                            field: "priceCashFlow"
                        }, {
                            field: "priceBook"
                        }, {
                            field: "bookValue"
                        }, {
                            field: "interestCoverage"
                        }]
                    }, e.data = e.widgetData.data[0], e.sector = t.getSector(e.data.symbolType), e.meta = e.widgetData.meta.field.name, e.filterEmptyRows = function(t) {
                        return null !== e.data.raw[t.field]
                    }
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    Qqjl: function(e, t) {
        e.exports = '<div class="modal-content-wrapper news-subscription-widget-modal"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <h5 class=bold>Free Futures E-Book</h5> <p> Fill out the form below for your free copy of my e-book, <b>â€œWhat Lies Beneath ALL Trends?â€</b> to begin learning how to use the COT to make money. </p> <div data-ng-cloak class="bc-news-subscription bc-commitment-of-traders-ebook"> <div data-ng-if=!message class=form-wrapper> <form method=post name=futureEbookForm class=news-subscription-form data-ng-submit="submit(futureEbookForm, $event)" novalidate> <div class=input-wrapper> <label for=ebook-first-name>Name:</label> <input type=text required id=ebook-first-name data-ng-model=user.first_name data-ng-class="{\'error-input\': futureEbookForm.first_name.$invalid && futureEbookForm.$submitted}" name=first_name> </div> <div class="input-wrapper phone"> <label for=ebook-phone-number>Phone:</label> <input type=text required id=ebook-phone-number data-ng-model=user.phone data-ng-class="{\'error-input\': futureEbookForm.phone.$invalid && futureEbookForm.$submitted}" name=phone> </div> <div class="input-wrapper clearfix"> <label for=ebook-email-adress>Email:</label> <input type=email required id=ebook-email-adress data-ng-model=user.email data-bc-ng-email-validation data-ng-class="{\'error-input\': futureEbookForm.email.$invalid && futureEbookForm.$submitted}" name=email> </div> <div data-vc-recaptcha data-size=invisible required=false data-key="[[ grecaptchaInvisibleKey ]]" on-create=onRender(widgetId) on-success=onSuccess(response)> </div> <div></div> <div class="error-messages-wrapper clearfix" data-ng-if=errors> <div class=error-messages> <div class="fieldset error" data-ng-repeat="(key, val) in errors">Error: [[ val ]]</div> </div> </div> <div class="fieldset clearfix text-center"> <input class="bc-button sign-up-button" type=submit value=Submit> </div> </form> <div class=text-center>Opt-out any time.</div> <div class=subscription-footer> Brought to you by Barchart.com<br/> 209 W. Jackson - Chicago, IL 60606 </div> </div> <div data-ng-cloak data-ng-if=message class="body-content message" data-ng-bind=message></div> </div> </div> '
    },
    QuLI: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    smsPublishier: "=",
                    timezoneList: "="
                },
                link: function(a, i, r) {
                    a.addPhoneNumber = function() {
                        e.openModalAddPhoneNumber(a.smsPublishier).result.then(function(e) {
                            e && "VALIDATION_SUCCESS" === e.result && (a.smsPublishier.default_recipient_hmac = e.hmac, t.assignPublisherTypeDefault(a.smsPublishier))
                        })
                    }, a.removePhone = function() {
                        e.openModalRemovePhone().result.then(function(e) {
                            "continue" === e && (a.smsPublishier.default_recipient = "", a.smsPublishier.default_recipient_hmac = "", a.smsPublishier.active_alert_types = [], t.assignPublisherTypeDefault(a.smsPublishier))
                        })
                    }
                },
                template: a("2EU9")
            }
        }
        i.$inject = ["alertsModalFactory", "alertManagerService"], e.exports = i
    },
    Qyzc: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=$ctrl.close();></i> </div> <div class=modal-inner-wrapper> <div class=register-block> <div data-ng-hide=$ctrl.success> <h2 class=header>Free Membership</h2> <form novalidate name=registerForm class="bc-form bc-login-form" data-ng-submit=$ctrl.register(registerForm)> <div class=form-group> <input type=text class="form-input form-field-login" name=first_name placeholder="First Name" data-ng-model=$ctrl.user.first_name> </div> <div class=form-group> <input type=text class="form-input form-field-login" name=last_name placeholder="Last Name" data-ng-model=$ctrl.user.last_name> </div> <div class="form-group exta-margin" data-ng-class="{\'error-input\':registerForm.email.$invalid && registerForm.$submitted}"> <input type=email data-ng-class="{\'remove-chrome-highlight\':registerForm.email.$invalid && registerForm.$submitted}" class="form-input form-field-login" placeholder="Email Address" name=email required autofocus data-ng-model=$ctrl.user.email data-bc-ng-email-validation> </div> <div class="form-group field-password-wrapper" data-ng-class="{\'error-input\':registerForm.password.$invalid && registerForm.$submitted}"> <input type=password data-hj-masked id=login-form-password data-ng-class="{\'remove-chrome-highlight\':registerForm.password.$invalid && registerForm.$submitted}" class="form-input form-field-login" name=password placeholder=Password required data-ng-minlength=6 data-ng-model=$ctrl.user.password> <data-show-password password-id="\'login-form-password\'" class=peek-at-password></data-show-password> </div> <p class=help-text>*Password must be at least 6 characters</p> <div class=form-group> <div class=input-checkbox> <input id=chartOfTheDay name=chartOfTheDay data-ng-model=$ctrl.user.chartOfTheDay type=checkbox checked=checked> <label for=chartOfTheDay> <span class=bc-glyph-check></span> Send me your daily Chart-of-the-Day email. </label> </div> </div> <errors-component class=error-block data-ng-show=$ctrl.hasErrors data-form=registerForm data-errors=$ctrl.errors></errors-component> <button type=submit class="form-field-submit create-account-btn">Create a free account</button> </form> <p class=back-link> <a href="" class="bc-button white-with-border login-button premier-login-btn" data-ng-click=$ctrl.goToLogin()>I have an account. Log me in.</a> </p> <div class=social-block> <div class=use-email-text>Or, Create an Account with: </div> <div class=block-for-social> <data-social-component></data-social-component> </div> <span class=social-text-small>(We won\'t post to your account)</span> </div> <p class=policy-text> By signing up you indicate that you have read and agree to the <a target=_self class=link data-ng-href="[[ ::$ctrl.termServiceLink ]]">Terms of Service</a> and <a target=_self class=link data-ng-href="[[ ::$ctrl.privacyPolicyLink ]]">Privacy Policy</a>. </p> </div> <div class=activate-block data-ng-show=$ctrl.success> <h2 class=header>Activate Your Account</h2> <p class=forgot-text>Please check your inbox for a link to activate your My Barchart Account.</p> <p class=forgot-text>If you do not receive the email within a few minutes check your spam folder or <a href="" data-ng-click=$ctrl.goToContact()>contact our support team</a> for assistance.</p> <button class="form-field-submit create-account-btn" data-ng-click=$ctrl.close()>ok</button> </div> </div> </div> </div> </div> '
    },
    R2xK: function(e, t, a) {
        "use strict";

        function i() {
            var e = !1;
            return {
                restrict: "CA",
                link: function(t, a, i) {
                    a.bind("load", function() {
                        var t = a.attr("width"),
                            r = a.attr("height");

                        function o() {
                            if (t && r) n();
                            else {
                                var e = new Image;
                                e.src = a.attr("src"), e.addEventListener("load", function() {
                                    void 0 === e.src && (e.src = a.attr("ng-src")), t || (t = e.width), r || (r = e.height), n()
                                })
                            }
                        }

                        function n() {
                            var o = a[0].clientWidth / 100,
                                n = a[0].clientHeight / 100,
                                s = i.usemap.replace("#", ""),
                                l = "coords";
                            angular.forEach(angular.element(document.querySelector('map[name="' + s + '"]')).find("area"), function(e, a) {
                                var i = angular.element(e);
                                i.data(l) || i.data(l, i.attr(l));
                                for (var s = i.data(l).split(","), c = new Array(s.length), d = 0; d < c.length; ++d) c[d] = d % 2 == 0 ? parseInt(s[d] / t * 100 * o) : parseInt(s[d] / r * 100 * n);
                                i.attr(l, c.toString())
                            }), e = !1
                        }
                        o(), window.addEventListener("resize", function() {
                            e || (e = !0, setTimeout(function() {
                                o()
                            }, 1e3))
                        }, !0)
                    })
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    R37q: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = function e(t) {
                var a = angular.element(t.target);
                if (!a.hasClass("expanded")) {
                    do {
                        if ((a = a.parent()).hasClass("bc-dropdown-fix")) return
                    } while (a && "BODY" !== a[0].nodeName);
                    angular.element(document.querySelector(".expanded")).triggerHandler("click"), angular.element(document).off("touchstart", e)
                }
            };
            return {
                restrict: "A",
                link: function(a, i, r) {
                    i.on("touchstart", function() {
                        e(function() {
                            i.hasClass("expanded") ? angular.element(document).on("touchstart", t) : angular.element(document).off("touchstart", t)
                        }, 500)
                    })
                }
            }
        }
        i.$inject = ["$timeout"], e.exports = i
    },
    R6Lc: function(e, t, a) {
        "use strict";
        e.exports = function(e, t) {
            var a = {
                futures: [{
                    value: "contract",
                    title: e.VOLUME_CONTRACT
                }, {
                    value: "total",
                    title: e.VOLUME_TOTAL
                }, {
                    value: "0",
                    title: e.VOLUME_OFF
                }],
                default: [{
                    value: "total",
                    title: e.VOLUME_ON
                }, {
                    value: "0",
                    title: e.VOLUME_OFF
                }]
            };
            return {
                symbolVolume: a[t] || a.default
            }
        }
    },
    RHEN: function(e, t, a) {
        "use strict";

        function i(e) {
            var t;
            switch (e.toUpperCase()) {
                case "CT":
                    if (6 === (t = new Date((new Date).toLocaleString("en-US", {
                            timeZone: "America/Chicago"
                        }))).getDay()) return !1;
                    if (0 === t.getDay() && t.getHours() < 17) return !1;
                    if (5 === t.getDay() && t.getHours() >= 17) return !1;
                    break;
                case "ET":
                    if (6 === (t = new Date((new Date).toLocaleString("en-US", {
                            timeZone: "America/New_York"
                        }))).getDay() || 0 === t.getDay()) return !1;
                    if (1 === t.getDay() && t.getHours() < 7) return !1;
                    if (5 === t.getDay() && t.getHours() >= 19) return !1
            }
            return !0
        }

        function r() {
            window.angularIsReady ? window.config.disabledAutoRefresh || window.config.runAutoRefreshPage() : setTimeout(r, 300)
        }
        window.config.reRunAutoRefresh = !1, window.config.runAutoRefreshPage = function() {
            var e = 12e5,
                t = angular.element(document).injector().get("authService").getUserData(),
                a = "always";
            if (null !== t && t.is_premier) {
                if (t.preferences.refresh_timeout && "never" === t.preferences.refresh_timeout) return;
                if (e = 1e3 * t.preferences.refresh_timeout * 60 || e, !i(a = t.preferences.refresh_trading_time || "always")) return void setTimeout(function() {
                    window.config.runAutoRefreshPage()
                }, 6e4)
            }
            window.config.autoRefreshTimer = setTimeout(function() {
                !document.querySelectorAll(".reveal-modal input, .reveal-modal textarea")[0] ? i(a) && window.location.reload() : window.config.runAutoRefreshPage()
            }, e)
        }, window.config.disableAutoRefreshPage = function() {
            window.config.autoRefresh && (window.config.autoRefresh = !1, window.config.reRunAutoRefresh = !0, window.config.autoRefreshTimer && clearTimeout(window.config.autoRefreshTimer))
        }, document.addEventListener("DOMContentLoaded", function() {
            window.config.autoRefresh && (window.angularIsReady ? window.config.runAutoRefreshPage() : r())
        })
    },
    RHGn: function(e, t, a) {
        "use strict";
        e.exports = [{
            value: "TrendSpotter is a Buy",
            condition: {
                property: {
                    property_id: 26,
                    description: ["Trendspotter"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Buy",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "TrendSpotter is a Sell",
            condition: {
                property: {
                    property_id: 26,
                    description: ["Trendspotter"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Sell",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "TrendSpotter is a Hold",
            condition: {
                property: {
                    property_id: 26,
                    description: ["Trendspotter"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Hold",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "MACD 20-50 Day is a Buy",
            condition: {
                property: {
                    property_id: 30,
                    description: ["20-50 Day MACD Oscillator"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Buy",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "MACD 20-50 Day is a Sell",
            condition: {
                property: {
                    property_id: 30,
                    description: ["20-50 Day MACD Oscillator"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Sell",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "MACD 20-50 Day is a Hold",
            condition: {
                property: {
                    property_id: 30,
                    description: ["20-50 Day MACD Oscillator"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Hold",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "MACD 20-100 Day is a Buy",
            condition: {
                property: {
                    property_id: 51,
                    description: ["20-100 Day MACD Oscillator"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Buy",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "MACD 20-100 Day is a Sell",
            condition: {
                property: {
                    property_id: 51,
                    description: ["20-100 Day MACD Oscillator"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Sell",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "MACD 20-100 Day is a Hold",
            condition: {
                property: {
                    property_id: 51,
                    description: ["20-100 Day MACD Oscillator"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Hold",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "MACD 50-100 Day is a Buy",
            condition: {
                property: {
                    property_id: 37,
                    description: ["50-100 Day MACD Oscillator"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Buy",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "MACD 50-100 Day is a Sell",
            condition: {
                property: {
                    property_id: 37,
                    description: ["50-100 Day MACD Oscillator"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Sell",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "MACD 50-100 Day is a Hold",
            condition: {
                property: {
                    property_id: 37,
                    description: ["50-100 Day MACD Oscillator"],
                    group: "Opinion"
                },
                operator: {
                    operator_id: 4,
                    operand: "Hold",
                    operand_type: "string",
                    display: {
                        long: "equals",
                        short: "="
                    }
                }
            }
        }, {
            value: "Makes New 52-Week High",
            condition: {
                property: {
                    property_id: 1,
                    description: ["Last"],
                    group: "Quote",
                    category: ["Price"]
                },
                operator: {
                    operator_id: 11,
                    operand: "52-Week High",
                    operand_type: "string",
                    display: {
                        long: "greater than",
                        short: ">"
                    }
                }
            }
        }, {
            value: "Makes New 52-Week Low",
            condition: {
                property: {
                    property_id: 1,
                    description: ["Last"],
                    group: "Quote",
                    category: ["Price"]
                },
                operator: {
                    operator_id: 12,
                    operand: "52-Week Low",
                    operand_type: "string",
                    display: {
                        long: "less than",
                        short: "<"
                    }
                }
            }
        }]
    },
    RLW8: function(e, t, a) {
        "use strict";

        function i() {
            this.name = "", this.alert_type = null, this.user_notes = null, this.automatic_reset = !1, this.conditions = [], this.publishers = [], this.user_id = null, this.alert_system = null
        }

        function r(e) {
            this.property = {
                property_id: null,
                target: {
                    identifier: null
                }
            }, this.operator = {
                operator_id: null,
                operand: null
            }, e && (this.property = e.property, this.operator = e.operator, this.condition_id = e.condition_id)
        }

        function o() {
            this.type = {
                publisher_type_id: null
            }, this.use_default_recipient = !0, this.recipient = "", this.format = ""
        }
        r.prototype.validate = function() {
            return "Opinion" === this.property.group && "percent" !== this.property.type ? null : "Opinion" === this.property.group && "percent" === this.property.type && this.property.description[1] && "Hold" === this.property.description[1] ? null : this.operator.operand ? Array.isArray(this.operator.modifiers) && this.operator.modifiers.length > 0 && !this.operator.modifiers[0].value ? "modifierInvalid" : "Highs/Lows" === this.property.category[0] ? null : /^(-?)([0-9]*)([\.\-']?)([0-9]*?)$/.test(this.operator.operand) ? null : "operandInvalid" : "operandError"
        }, e.exports = function() {
            return {
                AlertModel: i,
                AlertConditionModel: r,
                AlertPublisherModel: o
            }
        }
    },
    RWfe: function(e, t) {
        e.exports = '<div class="tools-dropdown tools-dropdown-period"> <bc-dropdown-flexible data-label=getLabel() data-dropdown-id=bc-interactive-chart-dropdown-period> <div class=tools-dropdown-content> <ul> <li data-ng-repeat="item in periods[settings.aggregation.unit]" data-ng-click=changePeriod(item.period) data-ng-class="{\'active\': settings.period === item.period}"> [[ ::item.label ]] </li> </ul> </div> </bc-dropdown-flexible> </div>'
    },
    RXyB: function(e, t) {
        e.exports = ""
    },
    RaUo: function(e, t) {
        e.exports = '<div> <a target=_self data-ng-href="/[[ ::quotesService.getSector(currentSymbol.symbolType) ]]/quotes/[[ ::currentSymbol.symbol ]]/news"> <div class="module headlines-module"> <h4>Headlines</h4> <ul data-bc-news-feed="[[ ::\'headlineExpandWidget\' ]]" data-feed-items="[[ ::itemList ]]"> <li data-ng-repeat="item in ::data track by $index"> <a data-ng-show="[[ ::filter_var(item.raw.isExternal) ]]" data-ng-href="[[ ::item.url ]]" target=_blank data-ng-bind="::item.title | characterLimit:40"></a> <a data-bc-modal-set-feed="[[ ::\'headlineExpandWidget\' ]]" data-ng-hide="[[ ::filter_var(item.raw.isExternal) ]]" data-ng-href="/story[[ currentURL ]]/[[ ::item.id ]]/[[ ::item.slug ]]" data-ng-bind="::item.title | characterLimit:40"></a> </li> </ul> </div> </a> </div> '
    },
    Rd4j: function(e, t, a) {
        "use strict";
        var i = "SearchPanel";
        angular.module(i, []).directive("mobileSearchPanel", a("vLBM")).controller(i + ".Search", a("4ZpX")).factory("symbolSearchFactory", a("qp6g"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    ReF2: function(e, t, a) {
        "use strict";
        angular.module("MyBarchart", []).service("MyBarchartInputService", a("0L7Y")).service("MyBarchartModalService", a("6YH7")).directive("uniqueName", a("QBb1")).controller("MyBarchart.MyBarchartModalErrorCtrl", a("4JBA"))
    },
    "Rf+P": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-adv"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close();></i> </div> <div class=modal-inner-wrapper> <adv-form-component data-user-email="[[ userEmail ]]" data-close=close()></adv-form-component> </div> </div> </div> '
    },
    RrHy: function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["Notification", "$window", function(e, t) {
            t.config.user_reactivate && e.success("Your account has been reactivated.")
        }])
    },
    RrvE: function(e, t) {
        e.exports = '<div class=forgot-block> <div data-ng-hide=success> <h1 class=header>I Forgot My Password</h1> <p class=forgot-text>Please enter your email address. We will send you an email with instructions to reset your password.</p> <form novalidate name=forgotForm class="bc-form bc-login-form" data-ng-submit=sendPass(forgotForm)> <div class="form-group group-pass-submit row collapse"> <div class="small-12 columns field-password-wrapper" data-ng-class="{\'error-input\':forgotForm.email.$invalid && forgotForm.$submitted}"> <input type=email class=form-input data-ng-class="{\'remove-chrome-highlight\':forgotForm.email.$invalid && forgotForm.$submitted}" placeholder=Email name=email required data-ng-pattern=/^[_a-z0-9]+(\\.[_a-z0-9]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/i data-ng-model=user.email> </div> <br> <br> <div data-vc-recaptcha data-size=invisible required=false data-key="[[ grecaptchaInvisibleKey ]]" on-create=onRender(widgetId) on-success=onSuccess()> </div> <br/> <errors-component class=error-block data-ng-show=hasErrors data-form=forgotForm data-errors=errors> </errors-component> <div class="small-12 columns"> <input type=submit data-ng-class="{\'increase-line-height\':forgotForm.email.$invalid && forgotForm.$submitted}" class=form-field-submit value=SUBMIT> </div> </div> </form> <p class=back-link data-ng-show=!user.id> <a href="" data-ng-click=backToLogin()><i class=bc-glyph-chevron-left></i> Back to Login</a> </p> </div> <div data-ng-show=success> <div class=activate-block> <h1 class=header>Check Your Inbox</h1> <p class=forgot-text>Please check your inbox for instructions to reset your password.</p> <p class=forgot-text>If you do not receive the email within a few minutes check your spam folder or <a href="" data-ng-click=goToContact()>contact our support team</a> for assistance.</p> <button class="form-field-submit create-account-btn" data-ng-click=close()>ok</button> </div> </div> </div>'
    },
    Rsdk: function(e, t, a) {
        "use strict";
        var i = "MarketPerformance";
        angular.module(i, []).directive("marketPerformanceChart", a("g4ez"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    Rw3y: function(e, t) {
        e.exports = '<div class=interactive-chart__mobile-tab-studies> <div class=study-mobile-modal__study-data> <div data-ng-if="currentStudies && currentStudies.length"> <div class=label>Current Studies</div> <ul class="study-mobile-modal__studies-list current-studies-list"> <li class=study-mobile-modal__studies-list-item data-ng-repeat="study in currentStudies track by $index"> <i class=bc-glyph-times data-ng-click=removeStudy($index)></i> <a data-ng-click="updateStudy(study, $index)" title="[[ ::groupedStudies[study.studyId][0].meta.title ]]"> [[ ::study.title ]] </a> </li> </ul> <div class=separator></div> </div> <div class=clear-button-wrapper> <input type=text data-bc-auto-focus=desktop placeholder="Search for studies..." data-ng-model=searchItem.name data-barchart-clear-input> </div> <div class=label data-ng-hide="!studiesOverlay.length || !filteredOverlayStudies.length">Overlay</div> <ul class=study-mobile-modal__studies-list data-ng-show=studiesOverlay.length> <li class=study-mobile-modal__studies-list-item data-ng-repeat="studyItem in studiesOverlay | filter:searchItem as filteredOverlayStudies track by $index"> <div data-ng-click=addStudy(studyItem)>[[ studyItem.meta.title ]]</div> </li> </ul> <div class=separator data-ng-hide="!studiesIndicators.length || !filteredOverlayStudies.length || !filteredIndicatorStudies.length"></div> <div class=label data-ng-hide="!studiesIndicators.length || !filteredIndicatorStudies.length">Indicators</div> <ul class=study-mobile-modal__studies-list data-ng-show=studiesIndicators.length> <li class=study-mobile-modal__studies-list-item data-ng-repeat="studyItem in studiesIndicators | filter:searchItem as filteredIndicatorStudies track by $index"> <div data-ng-click=addStudy(studyItem)>[[ studyItem.meta.title ]]</div> </li> </ul> </div> </div> '
    },
    S2d2: function(e, t) {
        e.exports = '<div class=interactive-chart-vertical-share> <div class=modal-share-group> <p>Share</p> <ul bc-social-chart-share> <li class=facebook title="Share on Facebook"> <a data-bc-facebook-share-chart data-dynamic-title=$ctrl.socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=interactive data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.currentSymbol.symbol data-t-chart-data=""> <i class=bc-glyph-facebook></i> </a> </li> <li class=twitter title="Share on Twitter"> <a bc-twitter-share-chart data-dynamic-title=$ctrl.socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=interactive data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.currentSymbol.symbol> <i class=bc-glyph-twitter></i> </a> </li> <li class=linkedin title="Share on LinkedIn"> <a bc-linkedin-share-chart data-dynamic-title=$ctrl.socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=interactive data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=redirectUrl data-symbol=$ctrl.currentSymbol.symbol> <i class=bc-glyph-linkedin></i> </a> </li> <li class=google-plus title="Share on Google+"> <a bc-gplus-share-chart data-dynamic-title=$ctrl.socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=interactive data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.currentSymbol.symbol> <i class=bc-glyph-google-plus></i> </a> </li> <li class=email title="Share via Email"> <a data-bc-mail-share-chart data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=interactive data-t-chart-data=chartData data-current-symbol=$ctrl.currentSymbol data-use-default-title=true data-ref-link=$ctrl.redirectUrl class=emailShare> <i class=bc-glyph-envelope-o></i> </a> </li> <li class=print title=Print> <a bc-print-share data-container-id=bcModalFlipchartContent> <i class=bc-glyph-print></i> </a> </li> </ul> </div> </div>'
    },
    S3lD: function(e, t, a) {
        "use strict";
        angular.module("SymbolHeader", []).controller("symbolHeaderCtrl", a("cTMC"));
        e.exports = {
            enable: !0,
            name: "SymbolHeader"
        }
    },
    S4Zv: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "A",
                require: "ngModel",
                link: function(e, t, a, i) {
                    var r = /\s/,
                        o = !0;
                    i.$parsers.unshift(function(e) {
                        return o = !e || !r.test(e.trim()), i.$setValidity("invalidOneword", o), o ? e : void 0
                    })
                }
            }
        }
    },
    S5Gc: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            var l = t.getParameterByName("mode") || "daily",
                c = t.getUrlInfo().pathname.match(/\/.*\/quotes\/(.*\/)/);
            if (!Array.isArray(c)) return !1;
            var d = c[1].replace(/\//, "");
            d = (d = d.replace(/%24/, "$")).replace(/%5E/, "^");
            var u = {
                    daily: "P1Y",
                    weekly: "P5Y",
                    monthly: "P10Y"
                },
                p = {
                    daily: "1-Year Performance",
                    weekly: "5-Year Performance",
                    monthly: "10-Year Performance"
                };
            e.viewName = l, e.toolbar = !0, e.chartTitle = p[n.search().mode || "daily"], e.period = u[n.search().mode || "daily"];
            var m = !1;
            e.complexTable = {
                content: [],
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["open", "high", "low", "last", "change", "%chg"]
                    },
                    colorize: ["change", "%chg"]
                }
            };
            e.$on("filterChange", function(t, l) {
                if ("mode" === l.name) {
                    if (e.error = !1, m && (o.filterName("mode", l.value), r.trackPage()), e.chartTitle = p[n.search().mode || "daily"], e.period = u[n.search().mode || "daily"], h = s.getChart(d), g = {
                            id: "Period",
                            context: {
                                period: e.period
                            }
                        }, h && h.change(g), !a.hasOwnProperty(l.value)) return e.dataLoading = !1, void(e.error = "The " + l.value + " view doesn't exist");
                    e.header = a[l.value].header, e.dataLoading = !0;
                    var c = a[l.value];
                    c.api.api.symbols = d, i.getData(c.api).then(function(t) {
                        e.dataLoading = !1, t.count = t.data.length, e.complexTable.content[0] = t
                    }), m = !0
                }
                var h, g
            })
        }
        i.$inject = ["$scope", "utils", "performanceConfig", "performanceApiFactory", "gaAnalyticsService", "barchartDatatableFilterUrl", "$location", "bcChartFactory"], e.exports = i
    },
    S682: function(e, t, a) {
        "use strict";
        e.exports = {
            flipcharts: {
                header: "FlipCharts",
                content: "<p>Page through charts of all the symbols displayed on any quoteboard.</p><p>You can even customize the FlipChart style by applying a Chart Template, another free tool available with a free My Barchart membership.</p>"
            },
            excel: {
                header: "Spreadsheet Download",
                content: "<p>Download quoteboard data for use in Excel or similar spreadsheet programs.</p><p>Available with a free My Barchart membership, download data from all major pages. Create your own customized spreadsheets with advanced calculations.</p>"
            },
            custom: {
                header: "Create Custom Views",
                content: "<p>Build your own custom column configurations for use on quoteboards.</p> <p>My Barchart members can choose from over 75 different data fields including historical price change, moving averages, Barchart Opinions, and other technicals. Apply to any data table on the website. </p>"
            },
            icharts: {
                header: "Login for All Charting Features",
                content: "<p>A free My Barchart membership gives you access to all features of the Interactive Charts: apply templates, save your custom settings, studies, and tools.</p><p>Chart creation becomes easier as your personal preferences are automatically saved in your account.</p>"
            },
            compare: {
                header: "Add Comparison Fields",
                content: "<p>Your free My Barchart membership allows you to customize the fields to display on the Stock and ETF Comparison pages.</p><p>Choose from dozens of Price, Historical, Fundamental and Technical Analysis data fields.</p>"
            },
            watchlist: {
                header: "Watchlists",
                content: "<p>Use our free Watchlist tool to keep track of symbols you are following.</p> <p>Your My Barchart membership gives you access to Watchlists where you can monitor market changes for symbols you follow. Your free membership also lets you request an End-of-Day Watchlist recap to be sent via email. </p>"
            },
            templates: {
                header: "Chart Templates",
                content: "<p>Save time when displaying charts by applying your own custom Chart Template.</p><p>Create custom chart templates with a free My Barchart membership and save your preferred time periods, bar types, technical indicators and studies.</p>"
            },
            alerts: {
                header: "Price & News Alerts",
                content: "<p>Your free My Barchart membership lets you set alerts, so you are notified when favorite symbols reach your target price or when mentioned in breaking news stories.</p> <p>Receive email notification or push notifications on your mobile device using the Barchart App.</p>"
            },
            options: {
                header: "View Volatility & Greeks",
                content: "<p>Option traders know that analysis of volatility is essential.</p> <p>Get detailed information and calculated variables with a My Barchart membership, such as Implied Volatility and the Greeks (Theoretic Value, Delta, Gamma, Rho, Theta, Vega) ... essential information for option trading.</p>"
            },
            portfolio: {
                header: "Free Advanced Portfolio",
                content: "<p>Manage your shareholdings while using Barchart's unique suite of analysis tools.</p> <p>My Barchart membership lets you track your equities, futures and forex positions in one place, and have a wealth of market data and news at your fingertips to help you with your investment decisions.</p>"
            },
            publicPortfolios: {
                header: "View Shared Portfolios",
                content: "<p>My Barchart members can see how other investors use Barchart tools to build and maintain their own portfolios.</p> <p>Follow other investors' performance, and browse through their Notes and Commentary about their stock picks.</p>"
            },
            preferences: {
                header: "Site Preferences",
                content: "<p>My Barchart membership lets you save your site preferences, such as default chart type, chart template and FlipChart style.</p>"
            },
            membership: {
                header: "Free My Barchart Membership",
                content: "<p>A free My Barchart membership gives you immediate access to even more tools, more data, and even more custom content.</p>"
            },
            historical: {
                header: "Historical Price Data",
                content: "<p>A free My Barchart membership lets you download up to 2 years of daily price history (prior to today's date) on any currently active stock or commodity contract, the 50 latest trades, or view Corporate Actions on equities (earnings, splits, dividends). <strong>Barchart Premier</strong> members have access to data back to Jan 1, 2000.</p>"
            },
            strategies: {
                header: "Trading Strategies",
                content: "<p>A free My Barchart membership gives you access to a symbol's Trading Strategies and Indicator Performance, showing hypothetical trades for each indicator analyzed by the Barchart Opinions.</p>"
            },
            screener: {
                header: "Custom Screeners",
                content: "<p>Barchart's Stock, ETFs amd Mututal Funds Screeners allow you to quickly find symbols that match your trading objectives and specific investment criteria.</p> <p>A free My Barchart membership lets you perform extensive research in just a matter of seconds.</p>"
            },
            screenerStocks: {
                header: "Stock Screener",
                content: "<p>The Stock Screener allow you to quickly find equities that match your trading objectives and specific investment criteria.</p> <p>A free My Barchart membership lets you perform extensive research in just a matter of seconds.</p>"
            },
            screenerEtfs: {
                header: "ETFs Screener",
                content: "<p>The ETFs Screener allow you to quickly find Exchange Traded Funds that match your trading objectives and specific investment criteria.</p> <p>A free My Barchart membership lets you perform extensive research in just a matter of seconds.</p>"
            },
            screenerFunds: {
                header: "Mutual Funds Screener",
                content: "<p>The Mutual Funds Screener allow you to quickly find Funds that match your trading objectives and specific investment criteria.</p> <p>A free My Barchart membership lets you perform extensive research in just a matter of seconds.</p>"
            },
            highsLows: {
                header: "Personalize Your Site Experience",
                content: "<p>Once logged in as a My Barchart member, you may set your preferred page to load each time you come to the New Highs/Lows page.</p> <p>Jump directly to the 52-Week Highs page, the All-Time Lows page... it's your choice!</p> "
            },
            highsLowsTabs: {
                header: "Personalize Your Site Experience",
                content: "<p>Once logged in as a My Barchart member, you may set your preferred page to load each time you come to the New Highs/Lows page.</p> <p>Jump directly to the category/tab of your choice, and timeframe of choice... it's saves you time when navigating the site!</p> "
            },
            percentChange: {
                header: "Personalize Your Site Experience",
                content: "<p>Once logged in as a My Barchart member, you may set your preferred page to load each time you come to the Percent Change page.</p> <p>Jump directly to the 5-Day Advances page, the 52-Week Declines page... it's your choice!</p> "
            },
            optionsView: {
                header: "Personalize Your Site Experience",
                content: "<p>Once logged in as a My Barchart member, you may set your preferred page view to load each time you back to this page.</p> <p>Remember your Moneyness or View setting... it's your choice!</p> "
            },
            futuresPerformance: {
                header: "Personalize Your Site Experience",
                content: "<p>Once logged in as a My Barchart member, you may set your preferred page to load each time you come to the Performance Leaders page.</p> <p>Jump directly to the 5-Day Performance Leaders page, the 52-Week Leaders page... it's your choice!</p> "
            },
            mostActiveFutures: {
                header: "Personalize Your Site Experience",
                content: "<p>Once logged in as a My Barchart member, you may set your preferred page to load each time you come to the Most Active Futures page.</p> <p>Jump directly to the Grains tab, set the Technical View as your layout... it's your choice!</p> "
            },
            eodBasicReports: {
                header: "End-of-Day Email Reports",
                content: "<p>A free My Barchart membership lets you receive an email report each night of the day's top symbols found on the Price Surprises, Top Securities to Own, Commodity Groups, and Most Active Options pages.</p> <p>These reports are designed to provide a high-level overview of market action for the day.</p>"
            },
            dashboard: {
                header: "Login for the Full Dashboard Experience",
                content: "A free My Barchart membership gives you access to <strong>streaming chart updates</strong>, customizable tools and studies saved to each chart, plus <strong>realtime Cboe BZX prices for U.S. equities</strong>.</p><br/><br/> <p>Analyze full-sized charts for your Watchlists and Portfolios for high-level research on the markets you follow.</p>"
            },
            etfLeverage: {
                header: "Screen by ETF Leverage",
                content: "A free My Barchart membership allows you to customize many of the ETF Ranking and Performance Leader pages by specific ETF Leverages. <b>Login to continue</b>, or create your account with one-click.</p> "
            },
            freeAccount: {
                header: "Sign up for a FREE My Barchart Account",
                content: "<p><strong>My Barchart</strong> users get</p> <ul><li>less advertising banners...</li><li>custom <strong>Watchlists</strong> of symbols you follow...</li><li>have your Watchlists emailed to you each day...</li><li>your own <strong>Chart Templates</strong> and saved settings...</li><li>customizable <strong>Flipcharts</strong> and data <strong>downloads</strong>...</li><li>a personalized Barchart experience, and MORE.</li></ul>"
            },
            stream: {
                header: "Streaming Interactive Charts",
                content: "<p>Stream realtime Cboe BZX price updates into your charts for U.S. equities, or get streaming delayed price updates for all other symbols.</p> <p>Login with your My Barchart or Barchart Premier membership to receive streaming price updates to Interactive Charts.</p>"
            },
            realtime: {
                header: "Realtime Cboe BZX Prices for U.S. Equities",
                content: "<p>When logged in as a My Barchart or Barchart Premier member, your Interactive Charts can be configured to use realtime prices for U.S. equity symbols from the Cboe BZX exchange.</p> <p>In addition, your Dashboard will stream these realtime prices into charts for U.S. equities.</p>"
            }
        }
    },
    S9AJ: function(e, t, a) {
        "use strict";
        e.exports = {
            TYPE: "style",
            STYLE: "plot",
            VOLUME: "volume",
            FREQUENCY: "data",
            TIME_PERIOD: "density",
            PRICEBOX: "pricesOn",
            PRICE_SCALE: "asPctChange",
            SCALE: "logscale",
            MINUTES_PERIOD: "im",
            DATE_FROM: "startDate",
            DATE_TO: "endDate",
            DATE_RANGE: "daterange",
            INDICATORS: "indicators",
            INDICATORS_OBJECT: "inticatorsObjects",
            GRID: "grid",
            HEIGHT: "height",
            STUDYHEIGHT: "studyheight",
            COMMON_SPREAD_VALUE: "commonSpreadValue",
            EXPRESSION: "sym",
            IS_SPREAD: "isSpread",
            COMPARE_FIRST_SYMBOL_VALUE: "overlay1",
            SHOW_FIRST_SYMBOL_PRICE: "axis1",
            COMPARE_SECOND_SYMBOL_VALUE: "overlay2",
            SHOW_SECOND_SYMBOL_PRICE: "axis2",
            COMPARE_THIRD_SYMBOL_VALUE: "overlay3",
            SHOW_THIRD_SYMBOL_PRICE: "axis3",
            IS_COMPARISON: "isComparison",
            SYMBOL: "sym"
        }
    },
    S9Zk: function(e, t) {
        e.exports = "<span>[[ label ]]</span>"
    },
    SDYH: function(e, t, a) {
        "use strict";
        var i = "RatesMap";
        angular.module(i, []).controller(i + ".RatesMapCtrl", a("9sS7")).factory("RatesMapApiFactory", a("txET")).directive("averageRateMap", a("Ow8I"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    SHuS: function(e, t, a) {
        "use strict";
        var i = "CompetitorsTable";
        angular.module(i, []).factory("symbolCompetitorsApiFactory", a("gqqT")).directive("symbolCompetitorsSectorData", a("9mD1")).directive("symbolCompetitorsSectorChart", a("HM0t"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    SLIB: function(e, t) {
        e.exports = '<div class=bc-screener__filter-checkboxes> <div data-ng-if="filters.default.value.length > 6"> <div class=bc-screener__checkboxes-table> <div class="bc-screener__checkboxes-table-header clearfix"> <div class=bc-screener__checkboxes-table-checkbox> <input id="cb-filter-checkboxes-all-[[ filterIndex ]]" data-ng-checked=ifAllSelected() data-ng-click=toggleSelectionAll() type=checkbox> </div> <div class=bc-screener__checkboxes-table-label> <label for="cb-filter-checkboxes-all-[[ filterIndex ]]"> Select All </label> </div> </div> <div class=bc-screener__checkboxes-table-body> <div class="bc-screener__checkboxes-table-row clearfix" data-ng-repeat="checkboxItem in filters.default.value track by $index"> <div class=bc-screener__checkboxes-table-checkbox> <input id="cb-filter-checkboxes-[[ filterIndex ]]-[[ $index ]]_" data-ng-checked="filterData.default.value.indexOf(checkboxItem.key) > -1" data-ng-click="toggleSelection(checkboxItem.key, $event)" type=checkbox> </div> <div class=bc-screener__checkboxes-table-label> <label for="cb-filter-checkboxes-[[ filterIndex ]]-[[ $index ]]_"> <span data-ng-bind=checkboxItem.value></span> </label> </div> </div> </div> </div> </div> <div data-ng-if="filters.default.value.length <= 6"> <div class=input-checkbox data-ng-repeat="checkboxItem in filters.default.value track by $index"> <input id="cb-filter-checkboxes-[[ filterIndex ]]-[[ $index ]]" data-ng-checked="filterData.default.value.indexOf(checkboxItem.key) > -1" data-ng-click="toggleSelection(checkboxItem.key, $event)" type=checkbox> <label for="cb-filter-checkboxes-[[ filterIndex ]]-[[ $index ]]"> <i class=bc-glyph-check></i> <span data-ng-bind=checkboxItem.value></span> </label> </div> </div> </div>'
    },
    SOqy: function(e, t) {
        e.exports = '<div class="modal-content-wrapper change-password-form deactivate-account account"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <p data-ng-show=waiting>Please wait .. processing your request.</p> <div class=throbber-wrapper data-ng-show=waiting> <img src=/img/throbber.gif alt="Please wait... processing your request."> </div> <div class="inner-form bc-form" data-ng-hide=waiting> <form name=deactivateForm novalidate data-ng-submit=deactivateAccount(deactivateForm)> <p data-ng-show="type === \'deactivate\'">To suspend your account, please confirm by entering your password below.</p> <p data-ng-show="type === \'deactivate\'">Once deactivated, you may reactivate your account simply by logging in again.</p> <p data-ng-show="type === \'delete\'">This option completely removes all data associated with your Barchart account. Please confirm by entering your password below.</p> <p data-ng-show="type === \'delete\'">This action cannot be reversed.</p> <div class=input-inner-wrapper data-ng-show=!user.socialOnly> <input class=form-input placeholder="Enter password" data-ng-required=!user.socialOnly id=current_password type=password data-ng-model=password name=password /> <data-show-password password-id="\'current_password\'" class=peek-at-password></data-show-password> </div> <div class=form-buttons> <button type=submit class="bc-button light-blue upper" data-ng-disabled=waiting>[[ type ]] account</button> <div class=forgot-link-wrapper data-ng-show=!user.socialOnly> <a data-ng-click=openYellowModal()>Forgot Password?</a> </div> </div> <div class=form-item-errors> <span data-ng-if="deactivateForm.password.$error.required && deactivateForm.$submitted"> Complete required fields to continue. </span> <span data-ng-if=deactivateForm.error> Something went wrong. Check data and try again. </span> <span data-ng-if=deactivateForm.incorrectPassword> Password does not match account. Please re-enter current password. </span> </div> </form> </div> <div data-ng-if=forgotPasswordModal class=yellow-modal> <div class=inner-wrapper> <i data-ng-click=closeYellowModal() class="bc-glyph-times form-close"></i> <div class=content> Instructions on how to reset your password were sent to <span class=bold>[[ user.email ]]</span> </div> </div> </div> </div>'
    },
    SPLB: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = e.API_URL + "/chart-templates";
            return {
                getChartTemplatesList: function() {
                    var e = r;
                    return a.call(e, t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                getChartTemplate: function(e) {
                    var i = r + "/" + e;
                    return a.call(i, t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                saveChartTemplate: function(e) {
                    var i = r;
                    return a.call(i, t.POST, e).then(function(e) {
                        return e.data
                    }, function(e) {
                        return e
                    })
                },
                updateChartTemplate: function(e) {
                    var i = r + "/" + e.id;
                    return a.call(i, t.PUT, e).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                deleteChartTemplate: function(e) {
                    var i = r + "/" + e;
                    return a.call(i, t.DELETE).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                updateChartTemplatesOrder: function(e) {
                    var i = r + "/order",
                        o = {
                            ids: e
                        };
                    return a.call(i, t.POST, o).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider", "_"], e.exports = i
    },
    SZXs: function(e, t) {
        e.exports = '<div class="bc-portfolio-visualization-opinion-pie chart-wrapper"> <highchart data-config=config></highchart> </div>'
    },
    Sc3C: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login technical-chart-display-settings-content study-modal"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=modalSettingsClose()></i> </div> </div> <div class=settings> <form novalidate data-ng-submit=saveStudy()> <p class=study-name>[[ changeStudyItem.name ]]</p> <p class=no-parameters data-ng-if="changeStudyItem.parameters.length === 0">No parameters</p> <div class=bc-study-data-row data-ng-repeat="parameterItem in changeStudyItem.parameters"> <label for="bc-study-parameter-[[ $index ]]">[[ parameterItem.name ]]:</label> <input id="bc-study-parameter-[[ $index ]]" data-ng-model=parameterItem.default data-is-number data-is-number-ignore=\'{"Label":"[[ parameterItem.name ]]"}\' type="[[ parameterItem.inputType ]]"/> </div> <div class=button-wrapper> <button class="bc-button ok light-blue" type=submit>Ok</button> </div> </form> </div> </div>'
    },
    Sh0l: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u) {
            return {
                restrict: "E",
                scope: {},
                link: function(a, p, m) {
                    a.pendingRemoveView = null, a.screeners = JSON.parse(m.screeners), a.tab = m.screenerTab;
                    var h = null;
                    a.isPremier = o.getUserData().is_premier, a.checkPremier = function() {
                        a.isPremier || n.showPremier("eodScreeners")
                    }, a.editScreener = function(e) {
                        if (a.isPremier) {
                            var t = [];
                            d.parseFiltersAsync(JSON.parse(e.filters), e.type).then(function() {
                                c.prepareFilters(c.getFilters(), t).then(function() {
                                    u.setFilterViewFields(t), l.open({
                                        templateUrl: "bc-saved-screener-modal.html",
                                        controller: "Screener.ModalSaveScreenerCtrl",
                                        windowClass: "bc-light-modal ",
                                        resolve: {
                                            savedScreenerName: function() {
                                                return e.name
                                            },
                                            savedScreener: function() {
                                                return e
                                            },
                                            screenerType: function() {
                                                return e.type
                                            },
                                            filters: function() {
                                                return JSON.parse(e.filters)
                                            },
                                            organisePage: function() {
                                                return !0
                                            }
                                        }
                                    }).result.then(function(t) {
                                        "OK" === t.status && s.success("Screener " + e.name + " saved.")
                                    })
                                })
                            })
                        } else n.showPremier("eodScreeners")
                    }, a.$on("onUpdateScreener", function(t, i) {
                        var r = e.findIndex(a.screeners, {
                            id: i.screener.id
                        });
                        a.screeners[r] = angular.copy(i.screener)
                    }), a.updateReport = function(e, i) {
                        a.isPremier ? i.send_report ? (i.send_report = 0, a.editScreener(i)) : t.update(e, i).then(function() {
                            s.success("End of Day Email preferences have been saved.")
                        }) : n.showPremier("eodScreeners")
                    }, a.treeOptions = {
                        dropped: function(i) {
                            setTimeout(function() {
                                if (h !== i.dest.index) {
                                    var r = e.pluck(a.screeners, "id");
                                    t.order(r).then(function(e) {
                                        return e
                                    }, function(e) {
                                        console.error(e)
                                    })
                                }
                            })
                        },
                        dragStart: function(e) {
                            h = e.dest.index
                        }
                    }, a.removeScreener = function(e) {
                        a.pendingRemoveView = e
                    }, a.confirmRemoveScreener = function(e, i) {
                        t.remove(e.id).then(function(e) {
                            a.screeners.splice(i, 1), a.pendingRemoveView = null
                        })
                    }, a.showType = function(e) {
                        return r[e] || e
                    }, a.cancelRemoveScreener = function() {
                        a.pendingRemoveView = null
                    }, a.createLink = function(e, t) {
                        switch (e) {
                            case "STK":
                                return i.config.routes["stocks.screener"] + "?tab=result&screener=" + t;
                            case "ETF":
                                return i.config.routes["etfs-funds.etfsScreener"] + "?tab=result&screener=" + t;
                            case "FUND":
                                return i.config.routes["etfs-funds.fundsScreener"] + "?tab=result&screener=" + t;
                            case "CCALL":
                                return i.config.routes["options.coveredCalls"] + "?screener=" + t;
                            case "NPUT":
                                return i.config.routes["options.nakedPuts"] + "?screener=" + t;
                            case "BEARC":
                                return i.config.routes["options.callSpreadsBear"] + "?screener=" + t;
                            case "BEARP":
                                return i.config.routes["options.putSpreadsBear"] + "?screener=" + t;
                            case "BULLC":
                                return i.config.routes["options.callSpreadsBull"] + "?screener=" + t;
                            case "BULLP":
                                return i.config.routes["options.putSpreadsBull"] + "?screener=" + t;
                            case "OPT":
                                return i.config.routes["options.optionsScreener"] + "?screener=" + t;
                            default:
                                return i.config.routes["stocks.screener"] + "?tab=result&screener=" + t
                        }
                    }
                },
                template: a("twMf")
            }
        }
        i.$inject = ["_", "screenerApiService", "$window", "screenerNames", "authService", "bcModalLoginSrv", "Notification", "$modal", "screenerFilterService", "screenerParseService", "screenerCurrentConfigService"], e.exports = i
    },
    ShbH: function(e, t) {
        e.exports = '<div data-ng-cloak class=bc-news-subscription data-ng-class="{\'only-button\': buttonOnly || link}"> <div class=form-wrapper data-ng-show=!link> <div class=subscription-text data-ng-show="title && list !== \'barchartWebinars\'"> Get <b data-ng-if=!landing data-ng-bind-html=title></b> <span data-ng-if=landing>it</span> delivered to your inbox for FREE: </div> <div class=subscription-text data-ng-if="title && list === \'barchartWebinars\'" data-ng-bind-html=title> </div> <div class=text-center> <button class="bc-button sign-up-button link" data-ng-click=subscribe()>Sign Me Up!</button> </div> </div> <a data-ng-show=link data-ng-click=subscribe() class="[[ classes ]]" data-ng-bind-html=link></a> </div> '
    },
    SiIE: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "authService", "watchlistEditApiFactory", "watchlistFormModalService", "_", "Notification", "bcModalLoginSrv", "limitsService", "$window", "textFactory", function(e, t, a, i, r, o, n, s, l, c) {
                e.watchlist = JSON.parse(e.watchlistData), e.watchlist.symbols = e.watchlist.symbols.map(function(e) {
                    return e.replace(/\s/g, "")
                }), e.isNewEodDisabled = t.getEodReportsNumber("watchlists", "email") >= l.config.limits.reportsLimit, e.disabledAutoFocus = !!e.watchlist.id, e.defaultView = e.watchlist.view_id ? e.watchlist.view_id.toLowerCase() : "default", e.watchlist.default_timeframe = e.watchlist.default_timeframe ? e.watchlist.default_timeframe : "intraday";
                var d = e.defaultView;
                e.pendingSymbolDelete = null, e.userEnteredSymbols = "", e.watchlist.eod_view || (e.watchlist.eod_view = "main"), e.treeSymbols = [], e.watchlist.symbols.length && (e.watchlist.symbols.forEach(function(t) {
                    e.treeSymbols.push({
                        symbol: "~" === t ? "" : t,
                        symbolName: "",
                        updated: !1,
                        errorDuplicated: !1,
                        errorInvalid: !1
                    })
                }), a.getSymbolNames(g()).then(function(t) {
                    e.treeSymbols.forEach(function(e) {
                        if (!t.errors || !t.errors.invalidSymbols || -1 === t.errors.invalidSymbols.indexOf(e.symbol)) {
                            if ("" !== e.symbol && -1 !== e.symbol.indexOf("*")) {
                                var a = e.symbol.split("*")[0];
                                t.data.forEach(function(t) {
                                    t.symbolRoot !== a || (e.symbolName = t.symbolName)
                                })
                            }
                            "" !== e.symbol && t.data.forEach(function(t) {
                                t.symbol !== e.symbol || (e.symbolName = t.symbolName)
                            })
                        }
                    })
                })), e.updateSubscription = function(t) {
                    e.isNewEodDisabled && (t ? (e.watchlist.email = 0, o.warning({
                        message: c("MAX_EOD_REPORTS"),
                        delay: 8e3
                    })) : e.isNewEodDisabled = !1)
                };
                var u = t.getWatchlists();

                function p() {
                    var t = !1;
                    return e.treeSymbols.forEach(function(e) {
                        !0 === e.updated && (t = !0)
                    }), t
                }

                function m() {
                    var t = r.filter(g(), function(e, t, a) {
                        return r.includes(a, e, t + 1)
                    });
                    e.treeSymbols.forEach(function(e) {
                        e.errorDuplicated = -1 !== t.indexOf(e.symbol)
                    })
                }

                function h(t) {
                    var a = e.returnUrl;
                    t && (a += "?watchlist=" + t), window.location.href = a
                }

                function g() {
                    var t = [];
                    return e.treeSymbols.forEach(function(e) {
                        "" !== e.symbol && t.push(e.symbol)
                    }), t
                }
                e.watchlistsNames = [], u.forEach(function(t) {
                    e.watchlist.id && e.watchlist.id === t.id || e.watchlistsNames.push(t.name)
                }), e.cancelUrl = e.returnUrl, e.watchlist.id && (e.cancelUrl += "?watchlist=" + e.watchlist.id), e.resetChanges = function() {
                    window.onbeforeunload = null, window.location.href = e.cancelUrl
                }, e.invalidSymbolsAlreadyInList = [], e.invalidSymbolsNotFound = [], e.watchlistLimitReached = !1, e.watchlistLastSymbol = !1, e.saveAttempted = !1, e.treeValidated = !0, e.$watch("watchlist.eod_view", function(a, i) {
                    a !== i && -1 === ["main", "custom_create_view"].indexOf(a) && (t.getUserData().is_premier || (e.watchlist.eod_view = "main", n.showPremier("watchEmail")), f())
                }), e.$watch("defaultView", function(a, i) {
                    "tile" !== a || t.getUserData().is_premier || (e.defaultView = i, n.showPremier("tileView"))
                }), e.$watchGroup(["watchlist.name", "defaultView", "watchlist.email"], function(e, t) {
                    r.difference(e, t).length && f()
                }), e.attachCsv = function() {
                    t.getUserData().is_premier || (e.watchlist.csv_attachment = 0, n.showPremier("csvWatchlist")), f()
                }, e.addSymbolsToTree = function() {
                    if (f(), !e.userEnteredSymbols) return !1;
                    if (!e.watchlist.id && s.watchlist()) return !1;
                    e.watchlistLimitReached = !1, e.treeValidated = !1;
                    var t = e.userEnteredSymbols.trim().replace(/\s/g, ",").replace(/(,+)/g, ",").toUpperCase().split(",");
                    e.userEnteredSymbols = "";
                    var i = [],
                        r = 1e3;
                    e.treeSymbols.length >= 1e3 ? e.watchlistLimitReached = "Watchlist has reached its maximum of 1000 symbols/rows." : (r -= e.treeSymbols.length, a.validateWatchlistSymbols(t).then(function(a) {
                        if (e.invalidSymbolsNotFound = [], e.invalidSymbolsAlreadyInList = [], t.forEach(function(t) {
                                -1 === a.invalidSymbols.indexOf(t) ? -1 === g().indexOf(t) ? a.validSymbols[t] && (i.length < r ? (! function(t, a) {
                                    e.treeSymbols.push({
                                        symbol: t,
                                        symbolName: a,
                                        updated: !1,
                                        errorDuplicated: !1,
                                        errorInvalid: !1
                                    })
                                }(t, a.validSymbols[t].name), i.push(t)) : e.watchlistLimitReached = "Watchlist has reached its maximum of 1000 symbols.") : e.invalidSymbolsAlreadyInList.push(t) : e.invalidSymbolsNotFound.push(t)
                            }), i.length) {
                            var n = 1 === i.length ? "Symbol " : "Symbols ";
                            n += i.join(", ") + " added to the bottom of the list.", o.success(n)
                        }
                        e.treeValidated = !0
                    }))
                }, e.addBlankRow = function() {
                    f(), e.treeSymbols.push({
                        symbol: "",
                        symbolName: "",
                        updated: !1
                    }), o.success("A blank row has been added to the bottom of the list.")
                }, e.treeSymbolChanged = function(t) {
                    f(), e.treeValidated = !1, t.updated = !0, t.symbolName = "", t.errorDuplicated = null, t.errorInvalid = null
                }, e.treeSymbolUpdated = function(t) {
                    f(), t.symbol && t.updated ? (t.symbol = t.symbol.toUpperCase(), m(), t.symbolName || (e.treeValidated = !1, a.validateWatchlistSymbols(t.symbol).then(function(a) {
                        a.validSymbols[t.symbol] ? t.symbolName = a.validSymbols[t.symbol].name : t.errorInvalid = !0, t.updated = !1, p() || (e.treeValidated = !0)
                    }))) : (t.updated = !1, p() || (e.treeValidated = !0))
                }, e.forceSymbolUpdateValidation = function(t, a) {
                    13 === t.which && e.treeSymbolUpdated(a)
                }, e.moveSymbolTop = function(t) {
                    f(), e.treeSymbols.splice(0, 0, e.treeSymbols.splice(t, 1)[0])
                }, e.removeSymbol = function(t) {
                    f(), e.treeSymbols.splice(t, 1), m()
                }, e.saveWatchlist = function() {
                    if (!e.watchlist.id && s.watchlist()) return !1;
                    e.saveAttempted = !0, e.invalidSymbolsAlreadyInList = [], e.invalidSymbolsNotFound = [], e.watchlist.symbols = [], e.treeSymbols.forEach(function(t) {
                        t.errorDuplicated && -1 === e.invalidSymbolsAlreadyInList.indexOf(t.symbol) && e.invalidSymbolsAlreadyInList.push(t.symbol), t.errorInvalid && -1 === e.invalidSymbolsNotFound.indexOf(t.symbol) && e.invalidSymbolsNotFound.push(t.symbol), "" !== t.symbol && (t.errorDuplicated || t.errorInvalid) || ("" === t.symbol ? e.watchlist.symbols.push("~") : e.watchlist.symbols.push(t.symbol))
                    }), e.watchlist.name && e.watchlist.symbols.length && !e.invalidSymbolsAlreadyInList.length && !e.invalidSymbolsNotFound.length && (e.watchlist.view = e.defaultView, e.watchlist.id ? a.saveWatchlist(e.watchlist).then(function(e) {
                        h(e.data[0].id)
                    }, function(t) {
                        var a = t.error && t.error.message ? t.error.message : {};
                        a.symbols && a.symbols[0] && (e.invalidSymbolsInRequest = a.symbols), console.warn("Update watchlist fail:", t)
                    }) : a.createWatchlist(e.watchlist).then(function(e) {
                        h(e.data[0].id)
                    }, function(t) {
                        var a = t.error && t.error.message ? t.error.message : {};
                        a.symbol && a.symbol[0] && (e.invalidSymbolsInRequest = t.symbol[0]), console.warn("Create watchlist fail:", t)
                    }), window.onbeforeunload = null)
                }, e.deleteWatchlist = function() {
                    i.watchlistDeleteConfirm("watchlist").then(function() {
                        a.deleteWatchlist(e.watchlist.id).then(function() {
                            h()
                        }, function(e) {
                            console.warn("Delete watchlist fail:", e)
                        })
                    })
                }, e.sortRows = function() {
                    f(), e.treeSymbols = r.sortBy(e.treeSymbols, function(t) {
                        return t[e.sortOrder]
                    }, ["asc"]), e.sortOrder = ""
                };
                var f = function() {
                    window.onbeforeunload = function() {
                        return setTimeout(function() {
                            "custom_create_view" === e.defaultView && (e.defaultView = d, e.$digest())
                        }, 0), !0
                    }
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    watchlistData: "@",
                    returnUrl: "@"
                },
                template: a("jhP+"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    SjjQ: function(e, t, a) {
        "use strict";

        function i(e, t) {
            function a(t) {
                e.basedOn = "", -1 !== ["3y", "5y"].indexOf(t) ? e.basedOn = t.toUpperCase() + " figures based on Weekly data." : -1 !== ["2y", "10y", "20y"].indexOf(t) && (e.basedOn = t.toUpperCase() + " figures based on Monthly data.")
            }
            e.timeframe = "Latest", e.prefixes = {
                Latest: " as of " + window.moment(new Date).format("ddd, MMM Do, YYYY"),
                "End-of-Day": ", based on end-of-day data",
                Weekly: ", based on weekly data",
                Monthly: ", based on monthly data"
            }, e.basedOn = "sss", e.timeFramesList = t.timeFramesList, e.signalsConfig = {
                current: "current",
                daily: "end-of-day"
            }, e.periodTitle = t.periods, e.rawTimeFrame = "today", e.init = function(i) {
                i && (e.rawTimeFrame = i, e.timeframe = t.names[i]), a(i)
            }, e.$on("filterChange", function(i, r) {
                "timeFrame" === r.name && (e.rawTimeFrame = r.value, t.names[r.value] ? e.timeframe = t.names[r.value] : e.timeframe = "Latest", a(r.value))
            })
        }
        i.$inject = ["$scope", "timeFramesConfig"], e.exports = i
    },
    "Sk/9": function(e, t, a) {
        "use strict";
        e.exports = function(e, t) {
            var a = {
                futures: [{
                    value: "I",
                    title: e.INTRADAY
                }, {
                    value: "DO",
                    title: e.DAILY_CONTRACT
                }, {
                    value: "DN",
                    title: e.DAILY_NEAREST
                }, {
                    value: "DC",
                    title: e.DAILY_CONTINUATION
                }, {
                    value: "WO",
                    title: e.WEEKLY_CONTRACT
                }, {
                    value: "WN",
                    title: e.WEEKLY_NEAREST
                }, {
                    value: "WC",
                    title: e.WEEKLY_CONTINUATION
                }, {
                    value: "MO",
                    title: e.MONTHLY_CONTRACT
                }, {
                    value: "MN",
                    title: e.MONTHLY_NEAREST
                }, {
                    value: "MC",
                    title: e.MONTHLY_CONTINUATION
                }],
                default: [{
                    value: "I",
                    title: e.INTRADAY
                }, {
                    value: "DO",
                    title: e.DAILY
                }, {
                    value: "WO",
                    title: e.WEEKLY
                }, {
                    value: "MO",
                    title: e.MONTHLY
                }]
            };
            return {
                frequency: a[t] || a.default
            }
        }
    },
    SlVd: function(e, t) {
        e.exports = '<div class="barchart-symbol-widget widget-investment-info-etf"> <div class=barchart-symbol-widget__title> Investment Information <a data-ng-href="[[ \'/etfs-funds/quotes/\' + symbol + \'/profile\' ]]" class="bc-button small white-with-border right" target=_blank> Full Profile </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href="[[ \'/etfs-funds/quotes/\' + symbol + \'/profile\' ]]" target=_blank> <div class=barchart-symbol-widget__columns> <div class=barchart-symbol-widget__left-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.left | filter:filterEmptyRows"> <span class=right> [[ ::data[item.field] ]] </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> <div class=barchart-symbol-widget__right-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.right | filter:filterEmptyRows"> <span class=right> [[ ::data[item.field] ]] </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> </div> </a> </div>'
    },
    "Sm/n": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {
                    isTechnical: "="
                },
                replace: !0,
                bindToController: {},
                controller: ["$scope", "authService", "ipCookie", "$window", function(e, t, a, i) {
                    var r = this;
                    r.isTechnical = e.isTechnical, r.isNotPremier = !t.isLoggedIn() || t.isLoggedIn() && !t.getUserData().is_premier, r.premierLink = i.config.routes["my.barchartPremier"] + "?chartDownload", r.isNotPremier ? r.hideContent = !!a("bcInteractiveChartPremierAds") : r.hideContent = !0, r.close = function() {
                        a("bcInteractiveChartPremierAds", !0, {
                            expires: window.config.premierChartAdsCookie,
                            path: "/"
                        }), r.hideContent = !0
                    }
                }],
                controllerAs: "$ctrl",
                template: a("qSXD")
            }
        }
    },
    Smk6: function(e, t, a) {
        "use strict";

        function i() {
            return {
                require: "ngModel",
                scope: {
                    otherModelValue: "=compareTo"
                },
                link: function(e, t, a, i) {
                    i.$validators.compareTo = function(t) {
                        return t === e.otherModelValue
                    }, e.$watch("otherModelValue", function() {
                        i.$validate()
                    })
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    SpxS: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    allowedBarTypes: "=",
                    barTypeModel: "="
                },
                controller: ["$scope", function(a) {
                    a.typeList = [], e.types.forEach(function(e) {
                        (!a.allowedBarTypes || a.allowedBarTypes.length > 0 && a.allowedBarTypes.indexOf(e.key) > -1) && a.typeList.push(e)
                    }), a.selectedBarType = {
                        model: {}
                    };
                    var i = {
                        key: a.barTypeModel.style
                    };
                    a.barTypeModel.curveAttribute && (i.attr = a.barTypeModel.curveAttribute), a.selectedBarType.model = t.find(a.typeList, function(e) {
                        return e.key === a.barTypeModel.style && e.attr === a.barTypeModel.curveAttribute
                    }), a.changeBarType = function(e) {
                        a.barTypeModel.style = e.model.key, e.model.attr ? a.barTypeModel.curveAttribute = e.model.attr : delete a.barTypeModel.curveAttribute, a.barTypeModel.colors = angular.copy(e.model.defaultColors)
                    }
                }],
                template: a("Tszq")
            }
        }
        i.$inject = ["interactiveChartSettingsConfig", "_"], e.exports = i
    },
    SqBK: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c) {
            var d = ["$scope", function(a) {
                a.dataLoading = !0, a.isHovered = !1, a.pagination = {
                    currentPage: parseInt(n.search().page) || 1
                };
                var i = c.getUserData() || {},
                    d = i.preferences ? i.preferences.charts_style : "interactive",
                    u = !1;
                a.$on("onBarchartDataTableRendered", function(e, i) {
                    a.data = [];
                    var r = [];
                    a.total = i.total, i.data.forEach(function(e) {
                        e.symbol && (a.data.push(e), r.push(e.symbol))
                    }), t.isMobileAndTablet() ? a.dataLoading = !1 : s.addInlineDataForSymbols(r.join(",")).then(function() {
                        a.dataLoading = !1
                    })
                }), a.loadPage = function() {
                    a.dataLoading = !0, a.pagination.currentPage = parseInt(n.search().page), l.$broadcast("getNewPageData", a.pagination.currentPage)
                }, a.openFullChart = function(e, t) {
                    t.stopPropagation(), window.open(a.getFullChartLink(e), "_blank")
                }, a.$on("setDownloadConfig", function() {
                    a.dataLoading = !0
                }), a.setColor = function(e) {
                    return t.setColor(e)
                }, a.gotoSymbol = function(e) {
                    var a = r.getSector(e.symbolType);
                    o.location.href = t.route(o.config.routes["quotes.sectors"], {
                        sector: a,
                        symbol: e.symbol
                    })
                }, a.getClass = function(e) {
                    return (e + 1) % 7 == 0 ? "last" : ""
                }, a.hoverIn = function(e) {
                    if (!t.isMobileAndTablet()) {
                        if (u === e) return;
                        u = e, e ? setTimeout(function() {
                            u === e && (a.isHovered = e)
                        }, 250) : a.isHovered = e
                    }
                }, a.getChartLink = function(e) {
                    var a = r.getSector(e.symbolType);
                    return t.route(o.config.routes["quotes.sectors." + d + "Chart"], {
                        symbol: e.symbol,
                        sector: a
                    })
                }, a.getFullChartLink = function(e) {
                    var a = r.getSector(e.symbolType),
                        i = d.charAt(0).toUpperCase() + d.slice(1);
                    return t.route(o.config.routes["quotes.full" + i + "Chart"], {
                        symbol: e.symbol,
                        sector: a
                    })
                }, a.$on("filterChange", function(t, a) {
                    "viewName" === a.name && (a.value === e.TILE ? (angular.element(document.querySelector(".js-main-content-wrapper")).addClass("bc-hide-headers-for-chart-view"), angular.element(document.querySelector(".js-main-content-wrapper .bc-tile-view")).removeClass("hide")) : (angular.element(document.querySelector(".js-main-content-wrapper .bc-tile-view")).addClass("hide"), angular.element(document.querySelector(".js-main-content-wrapper")).removeClass("bc-hide-headers-for-chart-view")))
                })
            }];
            return {
                restrict: "E",
                scope: {},
                template: a("IHsK"),
                controller: d
            }
        }
        i.$inject = ["viewsConstants", "utils", "_", "quotesService", "$window", "$location", "bcInlineData", "$rootScope", "authService"], e.exports = i
    },
    "St/a": function(e, t) {
        e.exports = '<div class=bc-portfolio__show-notes> <div data-ng-show="data && (data.notes || data.low_flag || data.high_flag)" data-bs-tooltip=data data-placement=left data-template-url=bc-tooltip-watchlist.html> <i class=bc-glyph-sticky-note data-ng-click=editExtraData()></i> </div> <i class=bc-glyph-sticky-note-o data-ng-hide="data && (data.notes || data.low_flag || data.high_flag)" data-ng-click=editExtraData()></i> </div> '
    },
    SwUg: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "$rootScope", "authService", "_", "watchlistEditApiFactory", function(e, t, a, i, r) {
                var o = a.getWatchlists(),
                    n = i.find(o, "id", e.watchlistId);
                e.showWatchlistNotes = n.display_notes, t.showWatchlistNotes = e.showWatchlistNotes, setTimeout(function() {
                    t.$broadcast("addNotesToDownload", !!n.display_notes && n.notes)
                }), e.showNotesTrigger = function() {
                    t.showWatchlistNotes = e.showWatchlistNotes, n.display_notes = e.showWatchlistNotes, t.$broadcast("addNotesToDownload", !!n.display_notes && n.notes), r.saveWatchlist(n)
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    watchlistId: "="
                },
                template: a("D/ng"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    T63w: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g, f) {
            var b;

            function v(e, t) {
                var a = s.defer();
                return e.incorrectPassword = !1, o.checkPassword(t).then(function(t) {
                    t.data.success ? a.resolve(!0) : (e.incorrectPassword = !0, a.resolve(!1))
                }), a.promise
            }
            e.user = t.getUserData(), e.dataLoading = !1, e.forgotPasswordModal = !1, e.routes = n.config.routes, e.waiting = !1, e.user.subscription === u.SUBSCRIPTIONS.PREMIUM_USER && h.getSubscriptionInfo().then(function(t) {
                e.premier = t.data
            }), e.editName = function() {
                b = r.open({
                    template: a("kRxm"),
                    scope: e,
                    windowClass: "bc-light-modal"
                })
            }, e.cancelSubscriptionModal = function() {
                b && b.close(), h.getSubscriptionInfo().then(function(e) {
                    e.data && (b = p.cancelSubscriptionModal(e.data))
                })
            }, e.changePasswordModal = function() {
                e.user.socialOnly ? b = r.open({
                    template: a("K/Ru"),
                    scope: e,
                    windowClass: "bc-light-modal"
                }) : (b = r.open({
                    template: a("4vrj"),
                    scope: e,
                    windowClass: "bc-light-modal"
                })).result.then(function(t) {
                    e.forgotPasswordModal = !1
                })
            }, e.goToContact = function() {
                b.close(), f.goToContact(null)
            }, e.sendPass = function(t) {
                if (e.hasErrors = t.$invalid, e.hasErrors) return !1;
                m.sendPass(e.user.email.toLowerCase()).then(function() {
                    e.success = !0
                }, function(t) {
                    e.success = !1, e.errors = t.error.message, e.hasErrors = !0
                })
            }, e.deactivateAccountModal = function(t) {
                e.type = t, e.user.subscription === u.SUBSCRIPTIONS.PREMIUM_USER ? b = r.open({
                    template: a("amBv"),
                    scope: e,
                    windowClass: "bc-light-modal"
                }) : (b = r.open({
                    template: a("SOqy"),
                    scope: e,
                    windowClass: "bc-light-modal"
                })).result.then(function() {}, function() {
                    e.forgotPasswordModal = !1
                })
            }, e.close = function() {
                e.closeYellowModal(), b.close(), e.newEmailSuccess = !1
            }, e.updateName = function(e) {
                e.$invalid || o.updateName(e).then(function(t) {
                    t.success ? (i.setFirstName(t.user.first_name), i.setLastName(t.user.last_name), b.dismiss(), l.success("The changes were saved.")) : e.error = !0
                })
            }, e.changePassword = function(e) {
                e.$invalid || e.new.$$rawModelValue !== e.confirm_new.$$rawModelValue || v(e, e.current.$$rawModelValue).then(function(t) {
                    t && o.updatePassword(e.new.$$rawModelValue).then(function(t) {
                        t.success ? (b.close("OK"), l.success("The changes were saved.")) : e.error = !0
                    })
                })
            }, e.logoutUser = function() {
                n.location.href = "/logout"
            }, e.resendEmail = function(e) {
                o.resendEmail(e).then(function(t) {
                    !0 === t.success && l.success("A verification email has been sent to " + e + ".")
                }, function() {
                    l.success("Sorry, something went wrong. Please try again")
                })
            }, e.deactivateAccount = function(t) {
                t.$invalid || (e.user.socialOnly ? y() : v(t, t.password.$$rawModelValue).then(function(a) {
                    a && (e.waiting = !0, d.disableAlerts().then(function() {
                        "deactivate" === e.type ? o.deactivateAccount().then(function(e) {
                            e.data.success ? y() : t.error = !0
                        }, function() {
                            l.error("Sorry, something went wrong. Please try again")
                        }).finally(function() {
                            e.waiting = !1
                        }) : o.deleteAccount().then(function(e) {
                            e.data.success ? y() : t.error = !0
                        }, function() {
                            l.error("Sorry, something went wrong. Please try again")
                        }).finally(function() {
                            e.waiting = !1
                        })
                    }))
                }))
            };
            var y = function() {
                b.dismiss(), (b = r.open({
                    template: a("hiyD"),
                    scope: e,
                    windowClass: "bc-light-modal"
                })).result.then(function() {}, function() {
                    e.logoutUser()
                })
            };
            e.addNewEmail = function(t) {
                t.$invalid || v(t, t.password.$$rawModelValue).then(function(a) {
                    a && o.addNewEmail(e.newEmail, 0).then(function(a) {
                        a.success ? (e.newEmailSuccess = e.newEmail, e.newEmail = "", e.newEmailForm.$setPristine(), i.setEmails(a.emails)) : a.error ? t.error = a.error : t.error = "Something went wrong. Check data and try again."
                    })
                })
            }, e.openYellowModal = function() {
                o.forgotPassword(e.user.email).then(function() {
                    e.forgotPasswordModal = !0
                })
            }, e.closeYellowModal = function() {
                e.forgotPasswordModal = !1
            }, e.addNewEmailModal = function(t) {
                if (t.$invalid) return !1;
                b = r.open({
                    template: a("BUZo"),
                    scope: e,
                    windowClass: "bc-light-modal"
                })
            }, e.deleteEmailModal = function(t) {
                e.currentEmail = t, b = r.open({
                    template: a("mm/F"),
                    scope: e,
                    windowClass: "bc-light-modal"
                })
            }, e.deleteEmail = function() {
                o.deleteEmail(e.currentEmail).then(function(t) {
                    if (t.success) {
                        var a = g.findIndex(e.user.emails, {
                            email: e.currentEmail
                        });
                        e.user.emails.splice(a, 1), i.setEmails(e.user.emails), b.dismiss()
                    }
                })
            }, e.updatePrimary = function(t) {
                e.dataLoadingEmail = !0, o.updatePrimaryEmail(t.email).then(function(a) {
                    a.success && (i.setEmails(a.emails), e.user.email = t.email, l.success("Your primary email has been updated."), d.getEmailPublisherType(e.user.id).then(function(e) {
                        e.default_recipient = t.email, d.assignPublisherTypeDefault(e)
                    })), e.dataLoadingEmail = !1
                })
            }, e.getPrimaryEmail = function() {
                var t;
                return e.user.emails.forEach(function(e) {
                    e.primary && (t = e.email)
                }), t
            }
        }
        i.$inject = ["$scope", "authService", "userDataService", "$modal", "accountEditApiFactory", "$window", "$q", "Notification", "textsConstant", "alertManagerService", "appConfig", "barchartPremierModalService", "authApiService", "barchartPremierService", "_", "authRouteService"], e.exports = i
    },
    T8Qk: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e) {
                return "~" === e ? "" : e
            }
        }
    },
    TDrC: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = e.API_URL + "/watchlist";
            return {
                saveWatchlistSymbols: function(e, i) {
                    var o = r + "/" + e + "/add",
                        n = {
                            symbol: i.join()
                        };
                    return a.call(o, t.POST, n, {
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    })
                },
                saveWatchlistExtraData: function(e, i) {
                    var o = r + "/" + e + "/flags";
                    return a.call(o, t.POST, i, {
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    })
                },
                getSymbolData: function(r) {
                    var o = {
                        symbol: r,
                        fields: "symbol,symbolName,lastPrice,priceChange,percentChange,pointValue,unitCode",
                        raw: 1
                    };
                    return a.call(i.buildUrl(e.API_URL + "/quotes/get", o), t.GET)
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider", "utils"], e.exports = i
    },
    TGsO: function(e, t, a) {
        "use strict";
        angular.module("DataTable", []).directive("daysToExpiration", a("h7ix")).directive("showIndustries", a("FswG")).directive("fullScreenLink", a("qRbO")).directive("showWatchlistNotes", a("SwUg"));
        e.exports = {
            enable: !0,
            name: "DataTable"
        }
    },
    TJ6W: function(e, t) {
        e.exports = '<div class="barchart-symbol-widget widget-key-statistics-stocks"> <div class=barchart-symbol-widget__title> Key Statistics <a data-ng-href="[[  \'/\' + sector + \'/quotes/\' + symbol + \'/profile\' ]]" class="bc-button small white-with-border right" target=_blank> Full Profile </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href="[[  \'/\' + sector + \'/quotes/\'  + symbol + \'/profile\' ]]" target=_blank> <div class=barchart-symbol-widget__columns> <div class=barchart-symbol-widget__left-column> <div class="barchart-symbol-widget__title uppercase"> Overview: </div> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.left | filter:filterEmptyRows"> <span class=right> [[ ::data[item.field] ]] </span> [[ ::item.label ]] </li> </ul> </div> <div class=barchart-symbol-widget__right-column> <div class="barchart-symbol-widget__title uppercase"> Growth: </div> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.right | filter:filterEmptyRows"> <span class=right> [[ ::data[item.field] ]] </span> [[ ::item.label ]] </li> </ul> </div> </div> </a> </div>'
    },
    TJPE: function(e, t) {
        e.exports = '<div class=contact-block> <h2 class=header>Contact Support</h2> <div data-ng-hide=success> <p class=feedback-form-description>Can\'t find what you\'re looking for, have a question or a suggestion?</p> <form novalidate name=contactForm class="bc-form bc-login-form" data-ng-submit=contact(contactForm)> <div class=form-group> <textarea class=contact-textarea required data-ng-class="{\'remove-chrome-highlight\':contactForm.message.$invalid && contactForm.$submitted, \'error-input\':contactForm.message.$invalid && contactForm.$submitted}" name=message data-ng-model=user.message placeholder=Message></textarea> </div> <div class=form-group data-ng-class="{\'error\':contactForm.email.$invalid && contactForm.$submitted}"> <input type=email class="form-input form-field-login" placeholder=Email name=email required data-ng-class="{\'remove-chrome-highlight\':contactForm.email.$invalid && contactForm.$submitted, \'error-input\': contactForm.email.$invalid && contactForm.$submitted}" data-bc-ng-email-validation data-ng-model=user.email> </div> <div data-ng-if=!isLoggedIn data-vc-recaptcha data-size=invisible required=false data-key="[[ grecaptchaInvisibleKey ]]" on-create=onRender(widgetId) on-success=onSuccess()> </div> <errors-component class=error-block data-ng-show=hasErrors data-form=contactForm data-errors=errors></errors-component> <button type=submit class="form-field-submit create-account-btn">Submit</button> <div class="small-12 columns forgot-pass-link-centered"> <a href="" data-ng-click=goToForgot()>Click Here if you Forgot Your Password</a> </div> </form> </div> <div data-ng-show=success> <p class=forgot-text>Thank you for contacting us.</p> <p class=forgot-text>We\'ve received your request and will be in touch with you shortly.</p> <button type=button data-ng-click=close() class="form-field-submit create-account-btn">ok</button> </div> </div>'
    },
    TJpU: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b) {
            var v = ["$scope", function(a) {
                a.showDatePickerButtons = !0, a.existingTemplates = [], a.useRgba = !1, a.barTypes = e.types, a.aggregations = l.periodsFutures, a.periods = c.periods, a.periodSizes = u.periodSizes, a.expirationDays = o.createSelectListOptions(0, 25, 1, !1, {
                    singular: "Day",
                    plural: "Days"
                }), a.maxPaddingOptions = o.createSelectListOptions(5, 25, 5, !0), a.minPaddingOptions = o.createSelectListOptions(5, 25, 5, !0), a.chartTaxonomies = [];
                var v, y, w = s.getTaxonomies();
                w.studies.forEach(function(e) {
                    var t = {
                        name: e.meta.title,
                        item: e
                    };
                    t.type = e.meta.overlay ? "StudyOverlay" : "StudyIndicator", t.group = e.meta.overlay ? "--- Overlay ---" : "--- Indicators ---", "CSHO" !== e.id && "CSHB" !== e.id && a.chartTaxonomies.push(t)
                }), w.balanceSheets.forEach(function(e) {
                    a.chartTaxonomies.push({
                        name: e.name,
                        type: "BalanceSheet",
                        group: "--- Balance Sheet ---",
                        item: e
                    })
                }), w.incomeStatements.forEach(function(e) {
                    a.chartTaxonomies.push({
                        name: e.name,
                        type: "IncomeStatement",
                        group: "--- Income Statement ---",
                        item: e
                    })
                }), a.chartSizes = d.chartSizes, a.additionalPaneSizes = [{
                    key: 20,
                    value: "Small"
                }, {
                    key: 50,
                    value: "Medium"
                }, {
                    key: 70,
                    value: "Large"
                }], a.selectedBarType = {
                    model: {}
                }, a.selectedAggregation = {
                    model: {}
                }, a.formSubmitted = !1, a.templateModel = {};
                var C = JSON.parse(a.templateData);

                function S() {
                    if (v = a.templateModel.template.settings, console.log("-> CHART SETTINGS:", angular.copy(v)), y = a.templateModel.template.aggregation, v.barType && "Hollow" === v.barType.curveAttribute && (v.barType.curveStyle = "HollowCandles", delete v.barType.curveAttribute), v.barType && (a.selectedBarType.model = r.find(a.barTypes, function(e) {
                            return e.key === v.barType.curveStyle && e.attr === v.barType.curveAttribute
                        })), v.barType && !v.barType.colors && (v.barType.colors = angular.copy(a.selectedBarType.model.defaultColors)), "Area" === v.barType.curveStyle && (a.useRgba = !0), y) {
                        var e = {
                            unit: y.unit
                        };
                        y.spec && "Nearest" === y.spec && (e.spec = y.spec), a.selectedAggregation.model = r.find(a.aggregations, e)
                    }
                    v.contractRoll = v.contractRoll || "combined", v.daysToExpiration = v.daysToExpiration || 1, void 0 === v.batsData && (v.batsData = !1), v.maxPadding = v.maxPadding || t.settings.maxPadding, v.minPadding = v.minPadding || t.settings.minPadding, v.marginBars = void 0 !== v.marginBars ? v.marginBars : t.settings.marginBars, v.minorGridLines = v.minorGridLines || t.settings.minorGridLines, v.preventLabelOverlap = v.preventLabelOverlap || t.settings.preventLabelOverlap
                }

                function x() {
                    window.location.href = a.returnUrl
                }
                C.id ? p.getChartTemplatesList().then(function(e) {
                    var t = r.find(e.data, {
                        id: +C.id
                    });
                    e.data.forEach(function(e) {
                        e.name !== t.name && a.existingTemplates.push(e.name)
                    }), a.templateModel = {
                        id: t.id,
                        name: t.name,
                        description: t.description,
                        template: JSON.parse(t.template)
                    }, void 0 == a.templateModel.template.settings.navigator && (a.templateModel.template.settings.navigator = !0), m.updateTemplateByDefinition(t.definition).then(function(e) {
                        a.templateModel.template.taxonomies = e, S()
                    })
                }) : (a.templateModel = {
                    name: JSON.parse(a.templateData).name,
                    description: "",
                    template: t
                }, a.templateModel.template.taxonomies = {
                    studies: [],
                    fundamentals: []
                }, S()), a.changeBarType = function(e) {
                    v.barType.curveStyle = e.model.key, e.model.attr ? v.barType.curveAttribute = e.model.attr : delete v.barType.curveAttribute, "Line" !== e.model.key && (v.scaleValue = "price"), v.barType.colors = angular.copy(e.model.defaultColors), "Area" === e.model.key ? a.useRgba = !0 : a.useRgba = !1
                }, a.changeScaleType = function(e) {
                    "Logarithmic" === e && (v.scaleValue = "price")
                }, a.changeScaleValue = function(e) {
                    "percent" === e && (v.scaleType = "Linear", a.selectedBarType.model = r.find(a.barTypes, {
                        key: "Line"
                    }), a.changeBarType(a.selectedBarType))
                }, a.changeAggregation = function(e) {
                    y.unit = e.unit, y.size = e.size, e.spec ? y.spec = e.spec : y.spec = "Nearest" === y.spec ? "None" : y.spec;
                    var t = a.periods[y.unit]; - 1 === r.findIndex(t, {
                        period: a.templateModel.template.period
                    }) && (a.templateModel.template.period = t[0].period), a.changePeriod(a.templateModel.template.period)
                }, a.changePeriod = function(e) {
                    "Intraday" === y.unit && a.periodSizes[e] && (y.size = a.periodSizes[e])
                }, a.addStudyOrFundamental = function() {
                    if (-1 !== ["StudyOverlay", "StudyIndicator"].indexOf(a.selectedTaxonomy.type)) {
                        var e = angular.copy(a.selectedTaxonomy.item);
                        e.defaults.inputs && e.defaults.inputs.length || e.defaults.curves && e.defaults.curves.length || e.defaults.levels && e.defaults.levels.length ? f.studyModal(e).then(function(e) {
                            void 0 !== e.isContractVolume && (y.isContractVolume = e.isContractVolume), a.templateModel.template.taxonomies.studies.push({
                                name: e.name,
                                item: e.study
                            })
                        }) : a.templateModel.template.taxonomies.studies.push({
                            name: e.name,
                            item: e.item
                        })
                    }
                    if (-1 !== ["BalanceSheet", "IncomeStatement"].indexOf(a.selectedTaxonomy.type)) {
                        var t = angular.copy(a.selectedTaxonomy);
                        h.fundamentalModal(t.item).then(function(e) {
                            e.item.type = t.type, a.templateModel.template.taxonomies.fundamentals.push(e)
                        })
                    }
                    a.selectedTaxonomy = ""
                }, a.changeStudy = function(e, t) {
                    var i = b.convertStudyFromApi(e.item);
                    f.studyModal(i, t, !0).then(function(e) {
                        e.remove ? a.removeStudy(t) : (a.templateModel.template.taxonomies.studies[t] = {
                            name: e.name,
                            item: e.study
                        }, void 0 !== e.isContractVolume && (y.isContractVolume = e.isContractVolume))
                    })
                }, a.changeFundamental = function(e, t) {
                    h.fundamentalModal(e.item).then(function(e) {
                        a.templateModel.template.taxonomies.fundamentals[t] = e
                    })
                }, a.removeStudy = function(e) {
                    a.templateModel.template.taxonomies.studies.splice(e, 1)
                }, a.removeFundamental = function(e) {
                    a.templateModel.template.taxonomies.fundamentals.splice(e, 1)
                }, a.saveTemplate = function() {
                    a.formSubmitted = !0;
                    var e = angular.copy(a.templateModel);
                    return !(!e.id && g.chartTemplates()) && (a.settingsForm.dateFrom.$invalid || a.settingsForm.dateTo.$invalid ? (n.showError("invalidDateRange"), !1) : void i.resolve().then(function() {
                        var t = e.template.aggregation.size,
                            i = e.template.settings.marginBars;
                        "Intraday" === e.template.aggregation.unit && (!t || t < 1 || t > 480) ? n.showError("invalidMinutesInteractive") : void 0 === i || i < 0 || i > 25 ? n.showError("invalidMarginBarsInteractive") : m.getTemplateDefinition(e.template).then(function(t) {
                            e.definition = JSON.stringify(t), e.template = JSON.stringify(e.template);
                            var i = e.id ? function(e) {
                                return p.updateChartTemplate(e).then(function(e) {
                                    return e
                                }, function(e) {
                                    console.warn("Template could not be updated: " + e)
                                })
                            }(e) : function(e) {
                                return p.saveChartTemplate(e).then(function(e) {
                                    x()
                                }, function(e) {
                                    console.warn("Template could not be saved: " + e)
                                })
                            }(e);
                            a.formSubmitted = !1, i.then(function() {
                                x()
                            })
                        })
                    }, function(e) {
                        a.formSubmitted = !1, n.showError(e)
                    }))
                }, a.cancel = function() {
                    x()
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    templateData: "@",
                    returnUrl: "@"
                },
                template: a("7Pdw"),
                controller: v
            }
        }
        i.$inject = ["interactiveChartSettingsConfig", "interactiveChartDefaultConfig", "$q", "_", "utils", "MyBarchartModalService", "bcMarketDataChart", "interactiveChartAggregationConfig", "interactiveChartPeriodConfig", "interactiveChartDimensionsConfig", "interactiveChartPeriodSizeConfig", "interactiveChartTemplateApiFactory", "interactiveChartTemplateDefinitionService", "interactiveChartTemplateModals", "limitsService", "interactiveChartModals", "interactiveChartConverter"], e.exports = i
    },
    TKBx: function(e, t) {
        e.exports = '<div class="bc-portfolio-visualization-opinion-pie chart-wrapper"> <highchart data-config=config></highchart> </div>'
    },
    TKv1: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l) {
            var c = ["$scope", function(a) {
                function c() {
                    window.location.href = a.returnUrl
                }
                a.templateData = n.getTemplateData(JSON.parse(a.templateData)), a.template = t.merge(r.basic, a.templateData), a.existedNames = n.getExistedNames(a.template), a.formSubmitted = !1, a.saveTemplate = function(t) {
                    var r;
                    return a.$broadcast("applyBasicSettings"), !(!(r = angular.copy(a.template)).id && l.chartTemplates()) && (a.settingsForm.$setSubmitted(), a.formSubmitted = !0, a.settingsForm.dateFrom.$invalid || a.settingsForm.dateTo.$invalid ? (i.showError("invalidDateRange"), !1) : void
                        function(t) {
                            return e.all([n.validateBasicForm(t)])
                        }(r).then(function() {
                            var e;
                            o.mapData(r), e = r.id ? function(e) {
                                return s.updateChartTemplate(e).then(function(e) {
                                    return e
                                }, function(e) {
                                    console.warn("Update view error: " + e)
                                })
                            }(r) : function(e) {
                                return s.saveChartTemplate(e).then(function(e) {
                                    return e
                                }, function(e) {
                                    console.warn("Save view error: " + e)
                                })
                            }(r), a.formSubmitted = !1, e.then(function(e) {
                                c()
                            })
                        }, function(e) {
                            a.formSubmitted = !1, i.showError(e)
                        }))
                }, a.cancel = function() {
                    c()
                }, a.template.id && o.mapData(a.template)
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    templateData: "@",
                    returnUrl: "@"
                },
                template: a("rZiK"),
                controller: c
            }
        }
        i.$inject = ["$q", "_", "MyBarchartModalService", "technicalChartSettingsService", "technicalChartMappingService", "CustomChartTemplatesService", "CustomChartTemplatesApiFactory", "limitsService"], e.exports = i
    },
    TVp1: function(e, t) {
        e.exports = '<div class=quick-links-wrapper data-ng-class="{\'watchlist\': watchlist || (row.raw && row.raw.transactionId)}"> <div class=dropdown-toggler data-bc-dropdown-fix data-dropdown-toggle="#quick-links-dropdown-[[ tableId ]]-[[ guid ]]-[[ index ]]"> <i class=bc-glyph-ellipsis-v></i> <i class=bc-glyph-times></i> </div> <div id="quick-links-dropdown-[[ tableId ]]-[[ guid ]]-[[ index ]]" class="f-dropdown dropdown-container"> <div class="dropdown-inner quick-links-inner-wrapper"> <ul> <li data-ng-if=::showExpandedLink data-ng-switch data-on="expandedSymbol !== index"> <a data-ng-click=expandRow() data-ng-switch-when=true>Expand Row</a> <a data-ng-click=collapseRow() data-ng-switch-default>Collapse Row</a> </li> <li data-ng-repeat="link in links[0] track by $index" class=bc-dropdown-fix> <a target=_self href="[[ link.href ]]">[[ ::link.text ]]</a> </li> </ul> <ul> <li data-ng-repeat="link in links[1] track by $index" class=bc-dropdown-fix> <a target=_self href="[[ link.href ]]">[[ ::link.text ]]</a> </li> <li> <a data-ng-if=::isLoggedIn data-ng-click="addToWatchlist(symbol, symbolName)" class="button split"> Add to Watchlist </a> <a data-ng-if=::!isLoggedIn class="button split" data-bc-modal-login=watchlist> Add to Watchlist </a> </li> <li> <a data-ng-if=::isLoggedIn data-ng-click="addToPortfolio(symbol, symbolName)" class="button split"> Add to Portfolio </a> <a data-ng-if=::!isLoggedIn class="button split" data-bc-modal-login=portfolio> Add to Portfolio </a> </li> <li> <a data-ng-if=::isLoggedIn data-ng-click=initAlertsModal(symbol) class="button split"> Add Alert </a> <a data-ng-if=::!isLoggedIn class="button split" data-bc-modal-login=alerts> Add Alert </a> </li> <li data-ng-if=watchlist> <a data-ng-if=::isLoggedIn class="button split delete-from-watchlist" data-ng-click="removeFromWatchlist(symbol, watchlist)"> Delete from Watchlist </a> </li> <li data-ng-if="row.raw && row.raw.transactionId && !datatableOptions.portfolioPublicView"> <a data-ng-if=::isLoggedIn class="button split delete-from-watchlist" data-ng-click=removeFromPortfolio(row.raw.transactionId)> Delete from Portfolio </a> </li> </ul> </div> </div> </div> '
    },
    TVv7: function(e, t) {
        e.exports = '<div class=technical-chart-spread-settings> <div class="first-group chart-form-section border-bottom"> <div class=error-block data-ng-show=error.expression> <span class=error-msg data-ng-bind=error.expression></span> </div> <div class=error-block data-ng-show=error.spreadForm> <span class=error-msg data-ng-bind=error.spreadForm></span> </div> <label class=section-label>Spreads:</label> <div class=drop-down-common-spread> <div class="bc-dropdown filter select"> <select name=style data-ng-model=commonSpread data-ng-options="item.value as item.label for item in commonSpreads"> <option value="">Select a Spread</option> </select> </div> </div> <div class=expression> <span class=or>or</span> <div class=input-expression-wrapper> <input data-ng-class="{\'error-input\': error.expression}" type=text placeholder="Enter an Expression" name=expression data-ng-model=formData[fields.EXPRESSION] /> </div> </div> </div> <div class="second-group chart-form-section border-bottom"> <form name=spreadForm novalidate> <div class="row collapse"> <div class="small-12 columns symbol-group" data-ng-class="{\'medium-4\': !fullScreen}"> <div class=first-symbol-wrapper> <div class=symbol-wrapper> <div class="bc-dropdown filter select"> <select name=firstSymbolValue data-ng-class="{\'error-input\': spreadForm.firstSymbolValue.$invalid && spreadForm.$submitted}" data-ng-required="spreadData.monthPeriod1 || spreadData.yearPeriod1" data-ng-model=spreadData.symbol1> <option value="">1st Symbol</option> <optgroup data-ng-repeat="(key, data) in symbols" label="[[ key ]]"> <option data-ng-repeat="item in data" value="[[ item.symbolRoot ]]"> [[ item.symbolRoot ]] - [[ item.symbolName ]] </option> </optgroup> </select> </div> </div> <div class=month-wrapper> <div class="bc-dropdown filter select"> <select name=firstSymbolMonthPeriod data-ng-model=spreadData.monthPeriod1 data-ng-required="spreadData.symbol1 || spreadData.yearPeriod1" data-ng-class="{\'error-input\': spreadForm.firstSymbolMonthPeriod.$invalid && spreadForm.$submitted}" data-ng-options="item.value as item.label for item in months"> <option value="">Month</option> </select> </div> </div> <div class=year-wrapper> <div class="bc-dropdown filter select"> <select name=firstSymbolYearPeriod data-ng-model=spreadData.yearPeriod1 data-ng-required="spreadData.symbol1 || spreadData.monthPeriod1" data-ng-class="{\'error-input\': spreadForm.firstSymbolYearPeriod.$invalid && spreadForm.$submitted}" data-ng-options="item.value as item.label for item in years"> <option value="">Year</option> </select> </div> </div> </div> <div class=multiplier> <span class=multiplier-text>Multiplier:</span> <div class=multiplier-input-wrapper> <input type=text name=firstSymbolMultiplier data-ng-model=spreadData.multiplier1 /> </div> </div> </div> <div class="small-12 columns symbol-group" data-ng-class="{\'medium-4\': !fullScreen}"> <div class=second-symbol-wrapper> <div class=symbol-wrapper> <div class="bc-dropdown filter select"> <select name=secondSymbolValue data-ng-model=spreadData.symbol2 data-ng-required="spreadData.monthPeriod2 || spreadData.yearPeriod2" data-ng-class="{\'error-input\': spreadForm.secondSymbolValue.$invalid && spreadForm.$submitted}"> <option value="">2nd Symbol</option> <optgroup data-ng-repeat="(key, data) in symbols" label="[[ key ]]"> <option data-ng-repeat="item in data" value="[[ item.symbolRoot ]]"> [[ item.symbolRoot ]] - [[ item.symbolName ]] </option> </optgroup> </select> </div> </div> <div class=month-wrapper> <div class="bc-dropdown filter select"> <select name=secondSymbolMonthPeriod data-ng-model=spreadData.monthPeriod2 data-ng-required="spreadData.symbol2 || spreadData.yearPeriod2" data-ng-class="{\'error-input\': spreadForm.secondSymbolMonthPeriod.$invalid && spreadForm.$submitted}" data-ng-options="item.value as item.label for item in months"> <option value="">Month</option> </select> </div> </div> <div class=year-wrapper> <div class="bc-dropdown filter select"> <select name=secondSymbolYearPeriod data-ng-model=spreadData.yearPeriod2 data-ng-required="spreadData.symbol2 || spreadData.monthPeriod2" data-ng-class="{\'error-input\': spreadForm.secondSymbolYearPeriod.$invalid && spreadForm.$submitted}" data-ng-options="item.value as item.label for item in years"> <option value="">Year</option> </select> </div> </div> </div> <div class=multiplier> <div class="bc-dropdown filter select multiplier-select"> <select name=secondSymbolOperator data-ng-model=spreadData.operator2 data-ng-options="item.value as item.label for item in operators"> </select> </div> <span class=multiplier-text>Multiplier:</span> <div class=multiplier-input-wrapper> <input type=text name=secondSymbolMultiplier data-ng-model=spreadData.multiplier2 /> </div> </div> </div> <div class="small-12 columns symbol-group" data-ng-class="{\'medium-4\': !fullScreen}"> <div class=third-symbol-wrapper> <div class=symbol-wrapper> <div class="bc-dropdown filter select"> <select name=thirdSymbolValue data-ng-model=spreadData.symbol3 data-ng-required="spreadData.monthPeriod3 || spreadData.yearPeriod3" data-ng-class="{\'error-input\': spreadForm.thirdSymbolValue.$invalid && spreadForm.$submitted}"> <option value="">3rd Symbol</option> <optgroup data-ng-repeat="(key, data) in symbols" label="[[ key ]]"> <option data-ng-repeat="item in data" value="[[ item.symbolRoot ]]"> [[ item.symbolRoot ]] - [[ item.symbolName ]] </option> </optgroup> </select> </div> </div> <div class=month-wrapper> <div class="bc-dropdown filter select"> <select name=thirdSymbolMonthPeriod data-ng-model=spreadData.monthPeriod3 data-ng-required="spreadData.symbol3 || spreadData.yearPeriod3" data-ng-class="{\'error-input\': spreadForm.thirdSymbolMonthPeriod.$invalid && spreadForm.$submitted}" data-ng-options="item.value as item.label for item in months"> <option value="">Month</option> </select> </div> </div> <div class=year-wrapper> <div class="bc-dropdown filter select"> <select name=thirdSymbolYearPeriod data-ng-model=spreadData.yearPeriod3 data-ng-required="spreadData.symbol3 || spreadData.monthPeriod3" data-ng-class="{\'error-input\': spreadForm.thirdSymbolYearPeriod.$invalid && spreadForm.$submitted}" data-ng-options="item.value as item.label for item in years"> <option value="">Year</option> </select> </div> </div> </div> <div class=multiplier> <div class="bc-dropdown filter select multiplier-select"> <select name=thirdSymbolOperator data-ng-model=spreadData.operator3 data-ng-options="item.value as item.label for item in operators"> </select> </div> <span class=multiplier-text>Multiplier:</span> <div class=multiplier-input-wrapper> <input type=text name=thirdSymbolMultiplier data-ng-model=spreadData.multiplier3 /> </div> </div> </div> </div> </form> </div> </div>'
    },
    TWCX: function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-premier__form-modal success-subscribe-modal"> <div class=form-close-wrapper> <i data-ng-click=close() class="bc-glyph-times form-close"></i> </div> <div class=success-subscribe-modal__header> <i class=bc-glyph-check></i> Success! Thank you for subscribing. </div> <div class=success-subscribe-modal__content> <p>With Barchart Premier you have access to everything My Barchart has to offer with the addition of exclusive features like:</p> <ul class=list> <li>No Ads for a cleaner, optimized experience!</li> <li>Custom and Exclusive End-of-Day Reports</li> <li>Unlimited Watchlists, Portfolios, and other site Tools</li> <li>Advanced Screener Functionality</li> <li>Expanded Site Preferences, and More!</li> </ul> </div> <div class=text-center> <a class="bc-button light-blue save" data-ng-click=close()>Start my Barchart Premier experience</a> </div> </div> '
    },
    TaWy: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            function i(e) {
                var t = Object.create(e);
                return t.phone && (t.phone = t.phone.toString()), t.code && (t.code = t.code.toString()), t
            }
            e || console.warn(["You included smsValidationManager as dependency, but there is no appropriate library.", "By default it is included only in alerts settings", "look at views/pages/my/alerts/settings.blade.php"].join(" ")), this.createValidation = function(t) {
                var r = a.defer(),
                    o = {
                        phone: t.toString()
                    };
                return (o = i(o)).system = "Barchart.com", e.createValidation(o).then(function(e) {
                    r.resolve(e)
                }).catch(function(e) {
                    console.error(e), r.reject(e)
                }), r.promise
            }, this.confirmValidation = function(t) {
                if (void 0 === t.phone || void 0 === t.code) throw new PropertyRequiredError("confirmValidation expects object with two required fields: phone and code");
                var r = a.defer(),
                    o = i(t);
                return e.confirmValidation(o).then(function(e) {
                    r.resolve(e)
                }).catch(function(e) {
                    console.error(e), r.reject(e)
                }), r.promise
            }, this.lookupPhone = function(t) {
                return e.lookupPhone({
                    phone: t
                })
            }
        }
        i.$inject = ["smsValidationManager", "assert", "$q"], e.exports = i
    },
    TdAT: function(e, t, a) {
        "use strict";

        function i(e) {
            var t, a = new Barchart.Instruments.SearchManager(e.config.services.instruments.host, 443, "rest"),
                i = e.config.settings.markets[config.user.market].uri;
            this.getSearchResults = function(e) {
                return a.searchInstruments(e, i)
            }, this.connect = function() {
                return t || (t = a.connect()), t
            }
        }
        i.$inject = ["$window"], e.exports = i
    },
    Tjxd: function(e, t) {
        e.exports = '<div> <div class="modal-mobile-navigation hide-for-medium-up"> <div class=modal-prev data-ng-show=!cleanChart> <a data-ng-click="goTo(\'prev\')" data-ng-if="flipChartPrevSymbol && !dataLoading"> <i class=bc-glyph-chevron-left></i> Previous </a> <span data-ng-if="!flipChartPrevSymbol || dataLoading"> <i class=bc-glyph-chevron-left></i> Previous </span> </div> <div class=modal-next data-ng-show=!cleanChart> <a data-ng-click="goTo(\'next\')" data-ng-if="flipChartNextSymbol && !dataLoading"> Next <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if="!flipChartNextSymbol || dataLoading"> Next <i class=bc-glyph-chevron-right></i> </span> </div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class="modal-sidebar-left show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-prev data-ng-show=!cleanChart> <a data-ng-click="goTo(\'prev\')" data-ng-if="flipChartPrevSymbol && !dataLoading"> <i class=bc-glyph-chevron-left></i> </a> <span data-ng-if="!flipChartPrevSymbol || dataLoading"> <i class=bc-glyph-chevron-left></i> </span> </div> </div> <div class="modal-sidebar-right show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> <div class=modal-next data-ng-show=!cleanChart> <a data-ng-click="goTo(\'next\')" data-ng-if="flipChartNextSymbol && !dataLoading"> <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if="!flipChartNextSymbol || dataLoading"> <i class=bc-glyph-chevron-right></i> </span> </div> </div> <div class=modal-share-group data-ng-if="!dataLoading && flipChartSymbol"> <p>Share</p> <barchart-social-share data-url="[[ flipChartSharingUrl ]]" data-title="[[ flipChartSharingTitle ]]" data-container-id=bcModalFlipchartContent></barchart-social-share> </div> <div class=modal-inner> <div class=modal-content> <div class="bc-flipchart cot-chart"> <div class=bc-flipchart__symbols-scroller> <div data-ng-if=symbols.length> <bc-scrollbar> <ul class=bc-flipchart__scroller-list> <li class=bc-flipchart__scroller-item data-ng-class="{\'active\': symbolData.symbol === flipChartSymbol.symbol}" data-ng-click=loadChartForSymbol(symbolData) data-ng-repeat="symbolData in symbols" data-scroll-item-id="[[ symbolData.symbol ]]">[[ symbolData.symbol ]]</li> </ul> </bc-scrollbar> </div> </div> <div class=throbber-wrapper data-ng-show=dataLoading> <img alt="Loading, please wait..." src=/img/throbber.gif /> </div> <div id=bcModalFlipchartContent> <div class=row data-ng-if="cleanChart && !dataLoading"> <h4>[[ symbol.symbolName ]] ([[ symbol.symbol]])</h4> </div> <div class=row> <div class="column small-12 medium-10"> <technical-chart-quick-chart data-ng-hide=dataLoading data-on-chart-period-changed=chartPeriodChanged(period) data-exclude=excludeQuickChart data-default-period="[[ ::chartPeriod ]]" data-symbol-sector=futures class=technical-chart-quick-links-component> </technical-chart-quick-chart> </div> <div class="column small-12 medium-2 text-right" data-ng-hide=dataLoading> <a target=_self class="bc-button white-with-border extra" href="[[ fullTechnicalChartUrl ]]"> Go to COT Chart </a> </div> </div> <technical-chart-tooltip-row data-ng-hide=shouldMapBeShown() data-tooltip-data=tooltipData data-tooltip-base-data=tooltipBaseData> </technical-chart-tooltip-row> <div class=bc-flipchart__chart data-ng-show=!dataLoading> <img data-bc-responsive-image-map data-ng-mouseleave=hideTooltip() data-bc-click-outside=hideTooltip() width=1060 data-ng-src="[[ flipChartData.image ]]" alt=Flipchart usemap=#bcFlipchartsMap class="bc-flipchart__chart-image js-chart-image"> <map id=bc-technical-chart-image-map data-bc-image-map-tooltip=technical-chart-image-tooltip data-image-class=js-chart-image data-offset-scroll-y=170 data-top=30 data-tablet-offset data-delayed-id name=bcFlipchartsMap></map> </div> </div> <div class="bc-flipchart__text-block clearfix" data-ng-show=!dataLoading> <div class=text-block__item data-ng-show="!study || study === \'COTLC\'"> <h5>The Commitment of Traders Report</h5> <div class=report-list> <p class=red-line> <span></span>Commercials, consisting of Producer/Merchant/Processor/User and Swap Dealers (<span>Red Line</span>)</p> <p class=green-line> <span></span>Non-Commercials or Large Speculators, consisting of Managed Money and Other Reportables (<span>Green Line</span>)</p> <p class=blue-line> <span></span>Small Speculators (<span>Blue Line</span>)</p> </div> </div> <div data-ng-show="!showLegendTTF() && study !== \'COTLC\'" class=text-block__item> <h5>The Commitment of Traders Disaggregated Report</h5> <div class=report-list> <p class=red-line><span></span>Commercials - Producer/Merchant/Processor/User (<span>Red Line</span>)</p> <p class=green-line><span></span>Swap Dealers (<span>Green Line</span>)</p> <p class=blue-line><span></span>Non-Commercial - Managed Money (<span>Blue Line</span>)</p> <p class=orange-line><span></span>Non-Commercials - Other Reportables (<span>Orange Line</span>)</p> </div> </div> <div data-ng-show=showLegendTTF() class=text-block__item> <h5>The Commitments of Traders Financial Traders (TFF) Report</h5> <div class=report-list> <p class=red-line><span></span>Dealer Intermediary (<span>Red Line</span>)</p> <p class=green-line><span></span>Asset Manager/Institutional (<span>Green Line</span>)</p> <p class=blue-line><span></span>Leveraged Funds (<span>Blue Line</span>)</p> <p class=orange-line><span></span>Other Reportables (<span>Orange Line</span>)</p> </div> </div> </div> </div> </div> </div> <technical-chart-tooltip-box data-ng-show=shouldMapBeShown() data-id=technical-chart-image-tooltip data-class=technical-chart-image-tooltip data-tooltip-data=tooltipData data-show-tooltip=showTooltip data-tooltip-base-data=tooltipBaseData> </technical-chart-tooltip-box> </div> '
    },
    TrvR: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = ["$scope", "authService", "bcSavePreferencesService", function(t, a, i) {
                var r = !!a.isLoggedIn() && a.getUserPreferences();
                t.categoriesList = JSON.parse(t.categories), t.apiConfigParams = JSON.parse(t.apiConfig), t.filters = [{
                    category: "pivots",
                    label: "Pivots"
                }, {
                    category: "stochastics",
                    label: "Stochastics"
                }, {
                    category: "fibonacci",
                    label: "Fibonacci"
                }, {
                    category: "movingAverages",
                    label: "Moving Averages"
                }, {
                    category: "highsLows",
                    label: "Highs/Lows"
                }, {
                    category: "rsi",
                    label: "RSI"
                }, {
                    category: "hlc",
                    label: "HLC"
                }], t.mobileColumnClass = "support-resistance-visible", t.visibleCategories = ["pivots", "stochastics", "fibonacci", "movingAverages", "highsLows", "rsi", "hlc"], r && r.cheatSheet && (t.visibleCategories = JSON.parse(r.cheatSheet));
                var o = function() {
                    for (var e = [], a = 0; a < t.visibleCategories.length; a++) e = e.concat(t.categoriesList[t.visibleCategories[a]]);
                    return e.join()
                };
                t.apiConfigParams.fields = o(), setTimeout(function() {
                    e.$broadcast("setDownloadConfig", t.apiConfigParams)
                }, 0), t.setMobileColumn = function(e) {
                    t.mobileColumnClass = e
                }, t.updateVisible = function(r) {
                    var n = t.visibleCategories.indexOf(r);
                    n > -1 ? t.visibleCategories.splice(n, 1) : t.visibleCategories.push(r), t.apiConfigParams.fields = o(), e.$broadcast("setDownloadConfig", t.apiConfigParams), a.isLoggedIn() && i.savePreference("cheatSheet", JSON.stringify(t.visibleCategories))
                }, t.categoryFilter = function(e) {
                    return !("showAlways" !== e.category && t.visibleCategories.indexOf(e.category) < 0) && e
                }
            }];
            return {
                restrict: "E",
                scope: {
                    cheatSheetData: "=",
                    categories: "@",
                    apiConfig: "@"
                },
                template: a("pj+p"),
                controller: t
            }
        }
        i.$inject = ["$rootScope"], e.exports = i
    },
    Tszq: function(e, t) {
        e.exports = '<div class=interactive-chart-bar-type-selector> <div class=label>Bar Type</div> <div class="bc-dropdown styled"> <select data-ng-model=selectedBarType.model data-ng-options="type.value disable when (allowedBarTypes && allowedBarTypes.indexOf(type.key) === -1) for type in typeList" data-ng-change=changeBarType(selectedBarType)></select> </div> <bc-color-picker data-color-model=barTypeModel.colors[0]></bc-color-picker> <bc-line-width-selector data-line-width-model=barTypeModel.lineWidth></bc-line-width-selector> </div>'
    },
    "Tu+W": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                scope: {},
                replace: !0,
                bindToController: {},
                controller: ["$window", function(e) {
                    var t = this;
                    t.optionsScreenerList = {}, t.optionsScreenerList[e.config.routes["options.coveredCalls"]] = "Covered Calls", t.optionsScreenerList[e.config.routes["options.nakedPuts"]] = "Naked Puts", t.optionsScreenerList[e.config.routes["options.callSpreadsBull"]] = "Bull Call Spreads", t.optionsScreenerList[e.config.routes["options.callSpreadsBear"]] = "Bear Call Spreads", t.optionsScreenerList[e.config.routes["options.putSpreadsBear"]] = "Bear Put Spreads", t.optionsScreenerList[e.config.routes["options.putSpreadsBull"]] = "Bull Put Spreads";
                    var a = e.location.pathname.replace(/ca\/|us\//, "");
                    Object.keys(e.config.routes).every(function(i) {
                        return !~e.config.routes[i].indexOf(a) || (t.optionScreener = e.config.routes[i], !1)
                    }), t.changeOptionScreener = function() {
                        e.location.href = t.optionScreener
                    }
                }],
                controllerAs: "$ctrl",
                template: a("1Ji1")
            }
        }
    },
    TzHL: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: !0,
                bindToController: {
                    series: "=",
                    config: "="
                },
                controller: ["$scope", "$timeout", function(e) {
                    var t = this;
                    t.config = t.config || {}, t.config.chartType = t.config.chartType || "monthly";
                    var a = "%m/%e/%Y";
                    switch (t.config.chartType) {
                        case "daily":
                            a = "%I:%M %p"
                    }
                    if (t.chartConfig = {
                            options: {
                                chart: {
                                    height: 220,
                                    style: {
                                        fontFamily: '"Droid Sans", Arial, sans-serif'
                                    }
                                },
                                title: {
                                    text: ""
                                },
                                xAxis: {
                                    type: "datetime"
                                },
                                yAxis: {
                                    title: {
                                        text: ""
                                    },
                                    labels: {
                                        zIndex: 1,
                                        style: {
                                            color: "#000000"
                                        }
                                    },
                                    opposite: !0
                                },
                                legend: {
                                    enabled: !1
                                },
                                plotOptions: {
                                    series: {
                                        marker: {
                                            enabled: !1
                                        },
                                        states: {
                                            hover: {
                                                lineWidth: 2
                                            }
                                        }
                                    }
                                },
                                tooltip: {
                                    formatter: function() {
                                        return "<div>" + Highcharts.dateFormat(a, new Date(this.x)) + "</div><br/><b>" + this.point.tooltipValue + "</b>"
                                    }
                                },
                                credits: {
                                    enabled: !1
                                }
                            },
                            series: []
                        }, t.config.previousPrice && (t.chartConfig.options.yAxis.plotLines = [{
                            color: "#909090",
                            width: 1,
                            value: t.config.previousPrice
                        }]), t.config.backgroundColor && (t.chartConfig.options.chart.backgroundColor = t.config.backgroundColor), t.config.chartHeight && (t.chartConfig.options.chart.height = t.config.chartHeight), t.config.sectorFinder && (t.chartConfig.options.yAxis.gridLineWidth = 0, t.chartConfig.options.xAxis = {
                            type: "datetime",
                            units: [
                                ["month", [1]]
                            ],
                            gridLineWidth: 1,
                            lineColor: "transparent"
                        }), "daily" === t.config.chartType) {
                        var i = new Date,
                            r = (new Date).getTimezoneOffset() / 60;
                        i.setMinutes(0);
                        var o = 10 + (r = r < 0 ? Math.abs(r) : r > 0 ? -Math.abs(r) : r),
                            n = 16 + r;
                        if (void 0 === t.config.fullTime) {
                            var s = 12 + r,
                                l = 14 + r;
                            t.chartConfig.options.xAxis = {
                                type: "datetime",
                                gridLineWidth: 0,
                                dateTimeLabelFormats: {
                                    hour: "%l",
                                    minute: "%M"
                                },
                                tickWidth: 0,
                                tickPositioner: function() {
                                    var e = [i.setHours(o), i.setHours(s), i.setHours(l), i.setHours(n)];
                                    return e.info = {
                                        unitName: "hour",
                                        higherRanks: {}
                                    }, e
                                },
                                min: i.setHours(o),
                                max: i.setHours(n)
                            }
                        } else t.chartConfig.options.yAxis.plotLines = [{
                            color: "#C40000",
                            width: 1,
                            zIndex: 2,
                            value: t.config.previousPrice,
                            label: {
                                text: t.config.previousPrice,
                                align: "right",
                                x: 50,
                                y: 5,
                                style: {
                                    backgroundColor: "#2284DD",
                                    color: "#FFFFFF",
                                    padding: 3,
                                    textShadow: "inherit"
                                },
                                useHTML: !0,
                                zIndex: 10
                            }
                        }], t.chartConfig.options.yAxis.gridLineWidth = 0, t.chartConfig.options.xAxis = {
                            type: "datetime",
                            gridLineWidth: 1,
                            dateTimeLabelFormats: {
                                hour: "%l %p"
                            },
                            tickWidth: 0,
                            tickInterval: 36e5,
                            startOnTick: !0,
                            lineColor: "transparent",
                            min: i.setHours(o),
                            max: i.setHours(n)
                        }
                    }
                    var c = function() {
                        for (var e = {
                                data: [],
                                color: "#2284DD"
                            }, a = 0, i = t.series.length; a < i; a++)
                            if (t.series[a].tradeTime && t.series[a].lastPrice) {
                                var r = [0, 0, 0],
                                    o = [0, 0, 0];
                                if ("N/A" !== t.series[a].tradeTime) {
                                    var n = t.series[a].tradeTime.split(" ")[0].replace(/(\d\d)$/, "20$1"),
                                        s = t.series[a].tradeTime.split(" ")[1];
                                    r = n.split("/"), o = s.split(":")
                                }
                                var l = {
                                    x: Date.UTC(Number(r[2]), Number(r[0] - 1), Number(r[1]), Number(o[0]), Number(o[1]), Number(o[2])),
                                    y: Number(t.series[a].lastPrice),
                                    tooltipValue: t.series[a].lastPrice
                                };
                                if (i - a == 1 && void 0 === t.config.fullTime) {
                                    l.dataLabels = {
                                        enabled: !0,
                                        crop: !1,
                                        overflow: "none",
                                        align: "left",
                                        backgroundColor: "#2284DD",
                                        color: "#FFFFFF",
                                        padding: 3,
                                        zIndex: 10,
                                        style: {
                                            textShadow: "inherit"
                                        },
                                        x: 16,
                                        y: 8
                                    };
                                    var c = (t.series[a].lastPrice.split(".")[1] || []).length;
                                    t.chartConfig.options.yAxis.labels.format = "{value:." + c + "f}"
                                }
                                e.data.push(l)
                            } t.chartConfig.series[0] = e
                    };
                    c(), e.$watch(function() {
                        return t.series
                    }, function() {
                        c()
                    })
                }],
                controllerAs: "chartController",
                template: a("jJzS")
            }
        }
        i.$inject = [], e.exports = i
    },
    "U/9D": function(e, t, a) {
        "use strict";
        var i = "symbol,symbolName,symbolType,symbolCode,unitCode,hasBats,pointValue,exchange,sicIndustry,lastPrice,priceChange,percentChange,openPrice,highPrice,lowPrice,tradeTime,contractName",
            r = {
                markets: [{
                    api: {
                        default: {
                            list: "stocks.indices.us",
                            fields: i,
                            orderBy: "symbol",
                            orderDir: "asc",
                            limit: null
                        },
                        usd: {
                            list: "stocks.indices.us"
                        },
                        cad: {
                            list: "stocks.indices.tsx"
                        },
                        asx: {
                            list: "stocks.indices.us"
                        },
                        lse: {
                            list: "stocks.indices.us"
                        }
                    },
                    title: "Market Indices",
                    key: "indices",
                    realtimeSector: "stocks"
                }, {
                    api: {
                        default: {
                            orderDir: "asc",
                            orderBy: "symbol",
                            limit: 50,
                            raw: 1,
                            fields: i,
                            meta: "field.shortName"
                        },
                        usd: {
                            lists: "stocks.volumeLeaders.price-volume.us"
                        },
                        cad: {
                            lists: "stocks.volumeLeaders.price-volume.tsx_tsxv"
                        },
                        lse: {
                            lists: "stocks.volumeLeaders.price-volume.lse"
                        },
                        asx: {
                            lists: "stocks.volumeLeaders.price-volume.asx"
                        }
                    },
                    title: "Stock Market Leaders",
                    key: "market_leaders",
                    realtimeSector: "stocks"
                }, {
                    api: {
                        default: {
                            symbols: "ES*0,VI*0,CL*0,RB*0,NG*0,GC*0,SI*0,HG*0,ZC*0,ZW*0,ZS*0,LE*0,HE*0,SB*0,KC*0,CC*0,DX*0,E6*0,BG*0,ZN*0,ZF*0"
                        }
                    },
                    title: "Major Commodities",
                    key: "commodities",
                    realtimeSector: "futures"
                }, {
                    api: {
                        default: {
                            lists: "forex.markets.all",
                            orderDir: "asc",
                            fields: i,
                            orderBy: "symbol",
                            limit: null
                        }
                    },
                    title: "Forex Pairs",
                    key: "forex_pairs",
                    realtimeSector: "forex"
                }, {
                    api: {
                        default: {
                            orderDir: "asc",
                            lists: "etfs.monitor.global,etfs.monitor.us_industries,etfs.monitor.specialty,etfs.monitor.fixed_income,etfs.monitor.producers,etfs.monitor.commodities,etfs.monitor.currencies",
                            fields: i,
                            page: 1,
                            limit: 100,
                            raw: 1,
                            meta: "field.shortName,field.description"
                        }
                    },
                    title: "Major ETFs",
                    key: "etfs",
                    usdOnly: !0,
                    realtimeSector: "etfs-funds"
                }, {
                    api: {
                        default: {
                            symbols: "^BTCUSD,^ETHUSD,^XRPUSD,^ETHBTC,^XRPBTC,^BCHBTC,^LTCBTC,^NEOBTC,^ADABTC,^XLMBTC,^EOSBTC,^IOTBTC,^DASHBTC,^XMRBTC,^ETCBTC,^XEMBTC,^TRXBTC,^VENBTC,^QTUMBTC,^LSKBTC,^OMGBTC,^ICXBTC,^ZECBTC,^BNBBTC,^BTCUSDT",
                            lists: "cryptos.major",
                            orderDir: "asc",
                            fields: i,
                            orderBy: "symbol",
                            meta: "field.shortName,field.type"
                        }
                    },
                    title: "CryptoCurrency Pairs",
                    key: "currency_pairs",
                    realtimeSector: "forex"
                }],
                defaultConfig: {
                    fields: i,
                    meta: "field.shortName,symbol.normalized",
                    raw: 1
                },
                defaultExclude: ["symbolName", "priceVolume", "symbolType", "symbolCode", "exchange", "sicIndustry", "contractName", "priceVolume", "hasBats", "pointValue", "unitCode"],
                mainFields: i,
                technicalFields: "symbol,symbolName,symbolType,symbolCode,unitCode,hasBats,pointValue,exchange,sicIndustry,lastPrice,opinion,relativeStrength20d,historicVolatility20d,averageVolume20d,lowPrice1y,highPrice1y",
                performanceFields: "symbol,symbolName,symbolType,symbolCode,unitCode,hasBats,pointValue,exchange,sicIndustry,lastPrice,weightedAlpha,percentChangeYtd,percentChange1m,percentChange3m,percentChange1y",
                requiredFields: "symbol,symbolName,symbolType,symbolCode,unitCode,hasBats,pointValue,exchange,sicIndustry"
            };
        e.exports = r
    },
    UAKT: function(e, t, a) {
        "use strict";
        e.exports = {
            GET: "GET",
            PUT: "PUT",
            POST: "POST",
            DELETE: "DELETE",
            PATCH: "PATCH"
        }
    },
    UCyu: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o = this;
            o.dataLoading = !1;
            var n = !1;
            o.loadPageOnInit = !1, o.init = function(e, t) {
                o.search = e, t && (o.loadPageOnInit = !0, o.dataLoading = !0)
            }, e.$on("onBarchartDataTableRendered", function(e, t) {
                o.loadPageOnInit && t.options.tableName && "stocks" === t.options.tableName && (o.search.symbol = r.pluck(t.data, "symbol").join(","), o.loadMoreStories(0, "news", "search", 0), o.loadPageOnInit = !1)
            }), o.loadMoreStories = function(s, l, c, d, u) {
                s = n || s, o.dataLoading = !0, a.loadMoreStories(s, l, c, o.search, d, u).then(function(a) {
                    if (a.items) {
                        var s = JSON.parse(r.unescape(a.items));
                        i.addItemsToFeed("mostRecentStories", s)
                    }
                    angular.element(document.querySelector(".most-recent-stories .stories-list")).append(t(a.content)(e)), o.dataLoading = !1, n = a.timestamp
                }).then(function() {
                    o.dataLoading = !1
                })
            }
        }
        i.$inject = ["$scope", "$compile", "newsFactory", "bcNewsFeedsSrv", "_"], e.exports = i
    },
    UEu6: function(e, t) {
        e.exports = '<div class=bc-screener__filter-exchanges> <div data-ng-repeat="checkboxItem in filters[key].value track by $index" class=input-checkbox> <input id="cb-exchange-[[ $index ]]" data-ng-checked="filterData[key].value.indexOf(checkboxItem.key) > -1" data-ng-disabled="checkboxItem.key === \'nonCommon\' && !nonCommonAvailable" data-ng-click="toggleSelection(checkboxItem.key, $event)" type=checkbox> <label for="cb-exchange-[[ $index ]]"> <span class=bc-glyph-check></span> <span data-ng-bind=checkboxItem.value></span> </label> </div> </div>'
    },
    UGCi: function(e, t) {
        e.exports = '<div> <a target=_self data-ng-href="/[[ ::PerformanceReportCtrl.quotesService.getSector(PerformanceReportCtrl.currentSymbol.symbolType) ]]/quotes/[[ ::PerformanceReportCtrl.currentSymbol.symbol ]]/performance"> <div class="module perfomance-report-module"> <h4>Performance Report</h4> <div class=module-table> <div class=module-row data-ng-repeat="item in ::PerformanceReportCtrl.data track by $index"> <div> [[ ::item.title ]]</div> <div data-ng-class=::PerformanceReportCtrl.utils.setColor(item.priceChange)> [[ ::item.priceChange ]]</div> <div data-ng-class=::PerformanceReportCtrl.utils.setColor(item.priceChange)> ([[ ::item.percentChange ]])</div> <div> since [[ ::item.date ]]</div> </div> </div> </div> </a> </div> '
    },
    UGlW: function(e, t) {
        e.exports = '<div class=bc-modal-content> <input type=hidden /> <div class=modal-header> Templates <i class="bc-glyph-times form-close" data-ng-click=modalDismiss()></i> </div> <div class=bc-modal-content-upper> <a data-ng-click=openSaveTemplateModal()> Save as Template </a> <a data-ng-href="[[ editChartLink ]]" target=_self> Manage Chart Templates </a> </div> <div class=bc-modal-content-inner> <div data-ng-click=applyTemplate(null)> <i class="icon bc-glyph-check" data-ng-show="config.template === null"> </i> <div class=label>None</div> </div> <div data-ng-repeat="template in templates track by $index" data-ng-click=applyTemplate(template)> <i class="icon bc-glyph-check" data-ng-show="config.template === template.id"> </i> <div class=label>[[ template.name ]]</div> </div> </div> </div> '
    },
    UJPW: function(e, t) {
        e.exports = '<div class="barchart-symbol-widget widget-key-statistics-etf"> <div class=barchart-symbol-widget__title> Key Statistics <a data-ng-href="[[ \'/\' + sector + \'/quotes/\' + symbol + \'/profile\' ]]" class="bc-button small white-with-border right" target=_blank> Full Profile </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href="[[ \'/\' + sector + \'/quotes/\' + symbol + \'/profile\' ]]" target=_blank> <div class=barchart-symbol-widget__columns> <div class=barchart-symbol-widget__left-column> <div class="barchart-symbol-widget__title uppercase"> Overview: </div> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.left | filter:filterEmptyRows"> <span class=right> [[ ::data[item.field] ]] </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> <div class=barchart-symbol-widget__right-column> <div class="barchart-symbol-widget__title uppercase"> Growth: </div> <ul class=barchart-symbol-widget__list> <li data-ng-repeat="item in lists.right | filter:filterEmptyRows"> <span class=right> [[ ::data[item.field] ]] </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> </div> </a> </div>'
    },
    UL0k: function(e, t) {
        e.exports = '<div class=tablelink> <a target=_self data-ng-href="[[ $ctrl.comparisonTableLink ]]">Use Comparison Table</a> </div>'
    },
    UNVz: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return function(r, o, n) {
                var s = r,
                    l = "",
                    c = "",
                    d = "",
                    u = s.match(/#(\^|\$|-)?\w*(\*\w*)?(\.\w{1,2})?/g),
                    p = [];
                return u && u.forEach(function(i) {
                    l = i.substring(1).toUpperCase(), o[l] && (c = '<span class="symbol-data">' + o[l].symbolName + ' (<a target="_self" href="' + function(i) {
                        if (o[i]) return e.route(t.config.routes["quotes.overview"], {
                            symbol: i,
                            sector: a.getSector(o[i].symbolType)
                        })
                    }(l) + '">' + l + "</a>)</span>", d = o[l].symbolName.replace(/\s/g, "_") + "_" + l + "_", p.push({
                        key: d,
                        string: c
                    }), s = s.replace(i, d))
                }), n && s.length > n && (s = function(e, t) {
                    var a = new RegExp("(?=[\t\n\v\f\r Â áš€á Žâ€€â€â€‚â€ƒâ€„â€…â€†â€‡â€ˆâ€‰â€Šâ€¯âŸ\u2028\u2029ã€€\ufeff])"),
                        i = 0;
                    return e.split(a).filter(function(e) {
                        return (i += e.length) <= t
                    }).join("")
                }(s, n), s += ' <a data-ng-click="showFull=true">... show more</a>'), p && p.forEach(function(e) {
                    s = s.replace(e.key, e.string)
                }), i.trustAsHtml(s)
            }
        }
        i.$inject = ["utils", "$window", "quotesService", "$sce"], e.exports = i
    },
    UOD9: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    portfolioTotals: "=",
                    portfolioCashValue: "="
                },
                controller: ["$scope", function(t) {
                    t.labels = e
                }],
                template: a("7p8Q")
            }
        }
        i.$inject = ["portfolioSettings"], e.exports = i
    },
    UQ3R: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            this.sequence = function() {
                var t = Array.prototype.slice.call(arguments);
                return e.all(t)
            }, this.checkNameLength = function(t) {
                return a.checkNameLength(t.name).then(function(e) {
                    return t
                }, function(t) {
                    return e.reject("viewNameLength")
                })
            }, this.checkNameUnique = function(t) {
                return a.checkNameUnique(t.name).then(function(e) {
                    return t
                }, function(t) {
                    return e.reject("viewNameUnique")
                })
            }, this.checkDescriptionLength = function(t) {
                return a.checkDescriptionLength(t.description, 80).then(function(e) {
                    return t
                }, function(t) {
                    return e.reject("viewDescriptionLength")
                })
            }, this.checkIsMandatoryColumnExists = function(a, i) {
                var r, o = e.defer();
                return t.forEach(i, function(e) {
                    r || (r = t.findWhere(a.fields, {
                        field: e
                    }))
                }), r ? o.resolve(a) : o.reject("viewMandatoryColumnAbsent"), o.promise
            }
        }
        i.$inject = ["$q", "_", "MyBarchartInputService"], e.exports = i
    },
    UTMm: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {},
                controller: ["interactiveChartAggregationConfig", "dashboardGridSettings", "$window", "_", "bcChartFactory", "dashboardGridChartApi", "$rootScope", "$scope", function(e, t, a, i, r, o, n, s) {
                    var l = this,
                        c = t.getSymbolsData()[0],
                        d = "futures" === a.config.symbols.mapping[c.symbolType];
                    l.isFuture = d, l.aggregations = e[d ? "periodsFutures" : "periods"], l.aggregation = t.getChartSettings().aggregation, l.changeAggregation = function(e) {
                        var a = t.getChartSettings().settings,
                            i = t.getChartSettings().aggregation;
                        l.aggregation.unit = e.unit, l.aggregation.size = e.size, l.aggregation.spec = a.extendedHours ? "FormT" : "None", d && (e.spec ? l.aggregation.spec = e.spec : l.aggregation.spec = "Nearest" === i.spec ? "None" : i.spec);
                        var s = angular.copy(l.aggregation);
                        d && (s.contractRoll = a.contractRoll, s.dividendsAdjust = a.dividendsAdjust, s.backAdjust = a.backAdjust, "expiration" === s.contractRoll && (s.daysToExpiration = a.daysToExpiration)), t.getSymbolsData().forEach(function(e) {
                            var a = r.getChart(e.symbol);
                            o.changeAggregation(a, s), t.setAggregationSettings(l.aggregation)
                        }), t.resetRangeSettings(), t.saveState(), n.$broadcast("gridChartChanged", {
                            action: "aggregation",
                            data: {
                                aggregation: angular.copy(l.aggregation)
                            }
                        })
                    }, l.getLabel = function() {
                        var e = {
                            unit: l.aggregation.unit
                        };
                        return d && "Intraday" !== l.aggregation.unit && "Nearest" === l.aggregation.spec && (e.spec = l.aggregation.spec), i.find(l.aggregations, e).label
                    }, s.$on("gridChartChanged", function(e, a) {
                        "fullAggregation" !== a.action && "aggregationAndPeriod" !== a.action && "template" !== a.action || (l.aggregation = t.getChartSettings().aggregation)
                    }), s.$on("dashboardGridHardReset", function() {
                        l.aggregation = t.getChartSettings().aggregation
                    })
                }],
                controllerAs: "$ctrl",
                template: a("g0jE")
            }
        }
    },
    UWid: function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <p data-ng-show="type===\'watchlist\'">Are you sure you want to delete this watchlist?</p> <p data-ng-show="type===\'symbols\'">Are you sure you want to delete the selected symbols? You will not be able to undo this action.</p> <div> <a class="bc-button grey ok ctxt" data-ng-click=cancel()>Cancel</a> <a class="bc-button light-blue ok ctxt" data-ng-click=confirm()>Ok</a> </div> </div>'
    },
    UbWl: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$rootScope", "$scope", "$location", "_", "utils", "dataTableConfig", function(e, t, a, i, r, o) {
                var n, s, l;
                n = JSON.parse(t.searchConfig), s = JSON.parse(t.marketsList), t.dataTableConfig = o, t.dataTableConfig.api = JSON.parse(t.apiConfig), t.search = n, t.markets = s, t.showMarketsFilter = !1, t.allMarketsSelected = !1, t.searchResultsEmpty = !1, t.loading = !1, t.toggleMarketsFilter = function() {
                    t.showMarketsFilter ^= !0
                }, t.selectAllMarkets = function() {
                    t.search.symbolCodes = t.allMarketsSelected ? angular.copy(l) : []
                }, t.findSymbol = function() {
                    t.searchData.q ? (t.searchData = angular.copy(t.search), t.loading = !0, e.$broadcast("advancedSymbolSearchEvent", t.searchData)) : (t.dataTableConfig.api.api.q = t.search.q, t.dataTableConfig.api.api.searchType = t.search.searchType, t.dataTableConfig.api.api.searchName = 1, t.dataTableConfig.api.api.symbolCodes = t.search.symbolCodes.join(), t.search.searchName = 1, t.searchData = angular.copy(t.search)), a.search("q", t.searchData.q)
                }, t.updateResults = function() {
                    t.searchData.symbolCodes = t.search.symbolCodes, t.searchData.q && (t.loading = !0, t.searchResultsEmpty = !1, e.$broadcast("advancedSymbolSearchEvent", t.searchData))
                }, t.$on("advancedSearchResponse", function(e, a) {
                    t.resultCount = a.count, t.searchResultsEmpty = 0 === a.count, t.loading = !1
                }), t.$watch("search.symbolCodes", function(e, a) {
                    t.allMarketsSelected = e.length === l.length, a && t.search.q && t.updateResults()
                }, !0), l = [], i.forEach(s, function(e) {
                    l = l.concat(i.pluck(e, "value"))
                }), t.search.q = a.search().q || "", t.dataTableConfig.api.api.q = t.search.q, t.dataTableConfig.api.api.searchName = 1, t.searchData = angular.copy(t.search), t.showMarketsFilter = !r.isMobileAndTablet()
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    searchConfig: "@",
                    marketsList: "@",
                    apiConfig: "@"
                },
                template: a("oCcP"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    UdV2: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    selected: "@"
                },
                link: {
                    pre: function(e, t, a) {
                        e.premier = !!a.premier, e.offAuth = void 0 !== a.offAuth && a.offAuth
                    },
                    post: function(a, i, s) {
                        var l, c = void 0 !== s.needAuth,
                            d = void 0 !== s.premier,
                            u = void 0 !== s.ref ? s.ref : "advOptions";

                        function p() {
                            r.showPremier(u)
                        }

                        function m() {
                            a.selected = l, d ? r.showPremier(u) : t.goToLogin(u)
                        }
                        s.showModal, a.disabled = !1, a.premier = d, a.onChangeFn = null, c && !e.isLoggedIn() && (i.on("change", m), a.$on("destroy", function() {
                            i.off("change", m)
                        })), d && e.isLoggedIn() && 1 === e.getUserData().subscription && (a.onChangeFn = function() {
                            a.selected = l
                        }, i.on("change", p), a.$on("destroy", function() {
                            i.off("change", p)
                        })), d && e.isLoggedIn() && e.getUserData().is_premier && a.$watch(function() {
                            return a.selected
                        }, function() {
                            var e;
                            a.selected && (o.get("selectedExpiration") ? (e = JSON.parse(o.get("selectedExpiration"))).value = a.selected : e = {
                                value: a.selected,
                                expired: new Date((new Date).setDate((new Date).getDate() + 1))
                            }, o.set("selectedExpiration", JSON.stringify(e)))
                        }), a.expirations = [], a.selected && a.expirations.push(a.selected);
                        var h = a.$on("onBarchartDataTableRendered", function(t, i) {
                            if (void 0 !== i.meta && void 0 !== i.meta.expirations) {
                                if (i.meta.expirations.weekly && i.meta.expirations.monthly ? a.expirations = i.meta.expirations.weekly.concat(i.meta.expirations.monthly) : i.meta.expirations.monthly ? a.expirations = Array.prototype.slice.call(i.meta.expirations.monthly) : i.meta.expirations.weekly ? a.expirations = Array.prototype.slice.call(i.meta.expirations.weekly) : a.expirations = Array.prototype.slice.call(i.meta.expirations), a.expirations.sort(), o.get("selectedExpiration") && e.isLoggedIn() && e.getUserData().is_premier) {
                                    var r = JSON.parse(o.get("selectedExpiration"));
                                    Math.round(((new Date).getTime() - new Date(r.expired).getTime()) / 864e5) >= 1 ? o.remove("selectedExpiration") : a.selected = r.value
                                }
                                a.selected = ~a.expirations.indexOf(a.selected) ? a.selected : a.expirations[0], l = a.selected, a.disabled = !a.expirations.length
                            } else a.disabled = !0;
                            l && n.$broadcast("defaultExpirationDate", {
                                data: l
                            }), a.disabled || h()
                        });
                        a.$on("initQuotesOptionsExpiration", function(e, t) {
                            a.selected = t
                        })
                    }
                },
                template: a("q+UY")
            }
        }
        i.$inject = ["authService", "authRouteService", "$window", "bcModalLoginSrv", "localStorageService", "$rootScope"], e.exports = i
    },
    Ufqc: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                transclude: !0,
                link: function(a, i) {
                    var r, o = t.isLoggedIn() ? 0 : 45;

                    function n() {
                        $("#bc-dashboard-scroll-wrapper").css("height", $(window).height() - o + "px"), r.refresh(), a.arrowUp = r.y < 0, a.arrowDown = r.y > r.maxScrollY
                    }
                    o && $("#bc-dashboard-scroll-wrapper").css("height", $(window).height() - o + "px"), e.isMobileAndTablet() && (window.innerHeight < window.innerWidth && $("#bc-dashboard-scroll-wrapper").css("height", $(window).height() - o + "px"), $(window).on("orientationchange", n)), r = new IScroll("#bc-dashboard-scroll-wrapper", {
                        mouseWheel: !0,
                        scrollbars: !1
                    }), a.arrowUp = r.y < 0, a.arrowDown = r.y > r.maxScrollY, a.scrollDown = function() {
                        r.y > r.maxScrollY && (-r.maxScrollY + r.y < 300 ? r.scrollTo(0, r.maxScrollY, 400, IScroll.utils.ease.quadratic) : r.scrollBy(0, -300, 400, IScroll.utils.ease.quadratic))
                    }, a.scrollUp = function() {
                        -r.y < 300 ? r.scrollTo(0, 0, 400, IScroll.utils.ease.quadratic) : r.scrollBy(0, 300, 400, IScroll.utils.ease.quadratic)
                    }, r.on("scrollEnd", function() {
                        a.$evalAsync(function() {
                            a.arrowDown = r.y > r.maxScrollY, a.arrowUp = r.y < 0
                        })
                    }), a.$on("$destroy", function() {
                        $(window).off("orientationchange", n)
                    })
                },
                template: a("GZ4e")
            }
        }
        i.$inject = ["utils", "authService"], e.exports = i
    },
    UgkE: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d) {
            t.dropdown1options = [], t.dropdown2options = [], t.dropdown3options = [], t.dropdown4options = [], t.totalCount = -1, t.checkboxes = {
                "1x": "Long",
                "2x": "Double-Long",
                "3x": "Triple-Long",
                "-1x": "Short",
                "-2x": "Double-Short",
                "-3x": "Triple-Short"
            };
            var u, p = !1,
                m = !1,
                h = n.isLoggedIn() ? n.getUserPreferences() : {};

            function g(e, a, r) {
                t.link || (r ? i.search("leverage", t.leverages.join(",")) : a ? i.search("dropdown" + e, a) : i.search("dropdown" + e, null), n.isLoggedIn() && s.call(l.API_URL + "/preferences", c.PUT, {
                    name: "finderLeverage",
                    value: t.leverages.join(",")
                }))
            }

            function f() {
                var e;
                e = a.getLocationPathObject(), t.dropdown1options = t.options[0], t.dropdown1 = e.dropdown1 ? e.dropdown1 : t.dropdown1options[0].id, g(1, t.dropdown1), t.dropdown2options = t.options[t.dropdown1], t.dropdown2 = e.dropdown2 ? e.dropdown2 : null, t.dropdown3 = e.dropdown3 ? e.dropdown3 : null, t.dropdown4 = e.dropdown4 ? e.dropdown4 : null, e.leverage && (t.leverages = e.leverage.split(","))
            }
            h.finderLeverage ? t.leverages = h.finderLeverage.split(",") : t.leverages = Object.keys(t.checkboxes), e.$on("$locationChangeSuccess", function(e, a, r) {
                if (a !== r)
                    if (p) p = !1;
                    else {
                        var o = i.search();
                        0 === Object.keys(o).length ? f() : Object.keys(o).forEach(function(e) {
                            t[e] !== o[e] && (t[e] = o[e])
                        })
                    }
            }), t.init = function(e, a) {
                t.link = a, t.options = e, f()
            }, t.$on("barchartDataTableIsReady", function() {
                for (var a = t.dropdown1, i = 2; i < 5; i++) t["dropdown" + i] && (a = t["dropdown" + i]);
                e.$broadcast("etfsAssetClassesEvent", a), e.$broadcast("etfsLeverageEvent", {
                    leverages: t.leverages
                })
            }), t.$on("onBarchartDataTableRendered", function(e, a) {
                t.totalCount = a.total, m = !0
            }), t.updateOptions = function(a) {
                p = !0;
                var i = "dropdown" + a;
                if (t["dropdown" + (a + 1) + "options"] = t.options[t[i]], g(a, t[i]), t[i]) e.$broadcast("etfsAssetClassesEvent", t[i]);
                else {
                    for (var r; a > 0; a--)
                        if (t["dropdown" + a]) {
                            r = t["dropdown" + a];
                            break
                        } e.$broadcast("etfsAssetClassesEvent", r)
                }
            }, t.goToSearchPage = function() {
                for (var e, a = "#/dropdown1=" + t.dropdown1, i = 2; i < 5; i++) t[e = "dropdown" + i] && (a += "&" + e + "=" + t[e]);
                a += "&leverage=" + t.leverages.join(","), r.location.href = t.link + a
            }, t.$watch("dropdown1", function() {
                t.updateOptions(1)
            }), t.$watch("dropdown2", function() {
                t.updateOptions(2)
            }), t.$watch("dropdown3", function() {
                t.updateOptions(3)
            }), t.$watch("dropdown4", function() {
                t.updateOptions(4)
            }), t.changeLeverage = function() {
                g(!1, !1, !0), u && o.cancel(u), u = o(function() {
                    e.$broadcast("etfsLeverageEvent", {
                        leverages: t.leverages
                    })
                }, 1e3)
            }, t.checkUser = function() {
                if (m && !n.isLoggedIn()) return d.goToLogin("etfLeverage"), !1
            }
        }
        i.$inject = ["$rootScope", "$scope", "locationService", "$location", "$window", "$timeout", "authService", "dataProvider", "apiConfig", "httpVerbs", "authRouteService"], e.exports = i
    },
    UgtE: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n = angular.element(document.getElementsByClassName("js-main-content-wrapper")[0]);
            e.closeMenu = function() {
                null === i.get("leftMenuClosedNotification") && (a.isLoggedIn() ? r.success({
                    message: 'Barchart Premier Members: keep the side menu permanently closed by configuring your <a target="_self" href="' + o.config.routes["my.sitePreferences"] + '">site preferences.</a>',
                    delay: 8e3
                }) : r.success({
                    message: 'Barchart Premier Members can keep the side menu permanently closed and gain more desktop viewing space. <a target="_self" href="/my/barchart-premier">Start a Free Trial.</a>',
                    delay: 8e3
                }), i.set("leftMenuClosedNotification", !0)), n.addClass("no-menu"), t.$broadcast("leftMenuHidden")
            }, e.openMenu = function() {
                n.removeClass("no-menu"), t.$broadcast("leftMenuShown"), t.$broadcast("highchartsng.reflow")
            };
            var s = a.getUserData() || {};
            s.preferences && s.preferences.left_menu && "hide" === s.preferences.left_menu && (t.$broadcast("leftMenuHidden"), t.$broadcast("highchartsng.reflow"))
        }
        i.$inject = ["$scope", "$rootScope", "authService", "localStorageService", "Notification", "$window"], e.exports = i
    },
    "Uhh+": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login study-modal"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=modalDismiss()></i> </div> <div class=study-modal__study-data> <div class=study-modal__study-name>[[ ::fundamental.name ]]</div> <form class=bc-form data-ng-submit=addFundamentalConfirm()> <div class=study-modal__fundamentals-radios> <div class=input-radio> <input type=radio data-ng-model=fundamental.frequency name=fundamentalFrequencyRadio value=Year id=tools-dropdown-fundamentals-year> <label for=tools-dropdown-fundamentals-year> <span></span> Annual </label> </div> <div class=input-radio> <input type=radio data-ng-model=fundamental.frequency name=fundamentalFrequencyRadio value=Quarter id=tools-dropdown-fundamentals-quarter> <label for=tools-dropdown-fundamentals-quarter> <span></span> Quarterly </label> </div> <div> <bc-color-picker data-color-model=fundamental.curves[0].colors[0]></bc-color-picker> <bc-line-width-selector data-line-width-model=fundamental.curves[0].lineWidth></bc-line-width-selector> </div> </div> <div class=study-modal__study-form-buttons> <button type=submit class="bc-button ok light-blue">Apply</button> </div> </form> </div> </div> </div>'
    },
    UhhH: function(e, t, a) {
        "use strict";
        e.exports = {
            hasOptions: ["addHasOptionsColumn"]
        }
    },
    "UmQ+": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                subscribe: function(i) {
                    return a.call(e.API_URL + "/mailing-lists", t.POST, i, [])
                },
                unsubscribe: function(i) {
                    return a.call(e.API_URL + "/mailing-lists", t.DELETE, i, [])
                },
                updateSubscription: function(i) {
                    return a.call(e.API_URL + "/mailing-lists", t.PUT, i, [])
                },
                getSubscriptions: function(i) {
                    return a.call(e.API_URL + "/mailing-lists", t.GET, {
                        email: i,
                        onlyNewsletters: !0
                    }, [])
                },
                getLinkForSubscription: function(e) {
                    return a.call(window.config.routes.newsletter_getlink, t.POST, {
                        email: e
                    }, [])
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider"], e.exports = i
    },
    Uu2s: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    fullScreen: "=",
                    dashboardMode: "=",
                    currentSymbol: "=",
                    myChartsMode: "="
                },
                link: function(a) {
                    a.print = function() {
                        t.print()
                    }, a.exportTo = function(e) {
                        t.exportTo(e)
                    }, a.saveAsImage = function(e) {
                        var a = e.symbol + "_Barchart_Interactive_Chart_" + window.moment(new Date).format("MM/DD/YYYY"),
                            r = t.getSVGForExport();
                        i.saveAsImage(r, a)
                    }, a.openChartInNewWindow = function() {
                        e.openInNewWindow(a.currentSymbol, a.dashboardMode)
                    }, a.showExpandLink = function() {
                        return !!a.dashboardMode || !a.fullScreen && !a.myChartsMode
                    }, a.indicatorHelpLink = config.routes["education.technicalIndicators"]
                },
                template: a("kg/m")
            }
        }
        i.$inject = ["interactiveChartExpand", "interactiveChartApi", "interactiveChartUtils"], e.exports = i
    },
    UvNM: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u) {
            var p = !1,
                m = !1,
                h = "",
                g = s.getUserData();

            function f(e) {
                for (var t in e)
                    if (!1 === t) return !1;
                return !0
            }
            var b = {
                viewName: function(t) {
                    t || (t = n.MAIN, d.filterName("viewName", t)), this.watchStates.viewName = t;
                    var a = null,
                        r = null,
                        s = null;
                    if (this.excludedFields = angular.copy(this.receivedExcludedFields), g && void 0 !== g.custom_views && !e.hasOwnProperty(t)) {
                        var c = Number(t);
                        if (a = i.find(g.custom_views, function(e) {
                                return e.id === c
                            }), r = angular.copy(a)) {
                            if (s = angular.copy(e.default_options.options), ~r.fields.indexOf("symbol") || (r.fields.push("symbol"), this.excludedFields.push("symbol")), -1 !== r.fields.indexOf("hasOptions")) {
                                var u = this.excludedFields.indexOf("hasOptions");
                                this.excludedFields.splice(u, 1)
                            }
                            this.apiConfig.api.fields = r.fields.join(","), s = l.colorizeFields(s, r.fields)
                        }
                    }
                    a || (this.receivedApiConfig.api.fields && t === n.MAIN ? this.apiConfig.api.fields = this.receivedApiConfig.api.fields : e.hasOwnProperty(t) && (this.apiConfig.api.fields = e[t].api.fields), e.hasOwnProperty(t) && (s = e[t].options)), this.receivedOptions.watchlistFlags = this.options.watchlistFlags || !1;
                    var p = angular.copy(this.receivedOptions);
                    this.options = i.merge(p, s, function(e, t) {
                        if (i.isArray(e)) return e.concat(t)
                    }), this.receivedApiConfig.api.orderBy && (this.apiConfig.api.orderBy = this.receivedApiConfig.api.orderBy, this.apiConfig.api.orderDir = this.receivedApiConfig.api.orderDir), this.watchStates && "daily" === this.watchStates.timeFrame && (h = this.apiConfig.api.fields, o.handleEoDFilter.call(this, this.watchStates))
                },
                timeFrame: function(e) {
                    if (this.watchStates.timeFrame = e, f(this.watchStates) && this.receivedApiConfig.api.lists)
                        if (~this.receivedApiConfig.api.lists.indexOf("{%timeFrame%}")) this.apiConfig.api.lists = this.receivedApiConfig.api.lists.replace(/{%timeFrame%}/, this.watchStates.timeFrame);
                        else if (void 0 !== this.watchStates.screener) this.apiConfig.api.lists = this.receivedApiConfig.api.lists + "." + this.watchStates.timeFrame + "." + this.watchStates.screener;
                    else {
                        var a = this.receivedApiConfig.api.lists.split("."),
                            i = a.pop();
                        a.push(this.watchStates.timeFrame), a.push(i), this.apiConfig.api.lists = a.join(".")
                    }
                    t.hasOwnProperty(e) && (this.apiConfig.api.orderBy = t[e]), "daily" === e ? (h = this.apiConfig.api.fields, m = !0, o.handleEoDFilter.call(this, this.watchStates), this.watchStates.viewName === n.EXTENDED && (d.filterName("viewName", n.MAIN), this.apiConfig.api.fields = this.receivedApiConfig.api.fields)) : m && (m = !1, this.apiConfig.api.fields = h, h = "")
                },
                screener: function(e) {
                    if (this.watchStates.screener = e, f(this.watchStates)) {
                        var t = "";
                        t += this.watchStates.timeFrame ? "." + this.watchStates.timeFrame : "", t += this.watchStates.screener ? "." + this.watchStates.screener : "", this.receivedApiConfig.api.lists ? this.apiConfig.api.lists = this.receivedApiConfig.api.lists + t : "all" === this.watchStates.screener ? delete this.apiConfig.api.exchange : this.apiConfig.api.exchange = this.watchStates.screener
                    }
                },
                futuresOptionsTime: function(e) {
                    this.watchStates.futuresOptionsTime = e
                },
                quoteSectors: function(e) {
                    this.watchStates.quoteSectors = e
                },
                stocksBySector: function(e) {
                    this.watchStates.stocksBySector = e
                },
                future: function(e) {
                    this.watchStates.future = e
                },
                moneyness: function(e) {
                    this.options.handleContent = "inTheMoney" !== e ? "" : "processContentInMoney"
                }
            };

            function v(e, t, a) {
                var r = l.colorizeFields(e.options, a.api.fields);
                if (e.options = i.merge({}, e.options, r), e.watchStates.viewName === n.CHART) return c.$broadcast("renderChartView", {
                    data: t,
                    field: e.field,
                    fields: e.tooltipFields
                }), void(e.apiIsRunning = !1);
                e.processData(t), e.apiIsRunning = !1
            }

            function y(e, t) {
                e.content = [], e.apiIsRunning = !1, e.dataLoading = !1, void 0 !== t.error && (e.error = "Sorry, something went wrong. Try again.")
            }
            return {
                makeRequest: function(e) {
                    var t = this;
                    !0 !== t.apiIsRunning && t.watch && ~t.watch.indexOf(e.name) && b.hasOwnProperty(e.name) && (t.watchWait > 0 && --t.watchWait, b[e.name].call(t, e.value), t.applyHandlers.hasOwnProperty(e.name) && o.hasOwnProperty(t.applyHandlers[e.name]) && t.$applyAsync(function() {
                        o[t.applyHandlers[e.name]].call(t, e.value, t.watchStates)
                    }), 0 !== t.watchWait || e.avoidRequest || (p && (t.watchStates, r.trackPage()), void 0 !== t.options.pagination && "all" !== t.page && (t.page = parseInt(t.page), t.apiConfig.api.page = t.page || 1, t.paginationParams = {
                        currentPage: t.page || 1
                    }, t.apiConfig.api.limit = t.options.pagination), t.apiIsRunning = !0, t.dataLoading = !0, t.error = !1, t.$applyAsync(function() {
                        var i = t.apiConfig;
                        c.$broadcast("setDownloadConfig", t.apiConfig.api), t.watchStates.viewName !== n.CHART && t.watchStates.viewName !== n.TILE || (i = angular.copy(t.apiConfig), t.applyHandlers.hasOwnProperty(e.name) && "useReceivedApiConfig" === t.applyHandlers[e.name] && (i = t.receivedApiConfig), t.watchStates.viewName === n.CHART && delete i.api.limit), a.makeRequest(i).then(function(e) {
                            i.api.page && 1 !== i.api.page && 0 === e[0].count && e[0].total > e[0].count ? (t.page = 1, t.apiConfig.api.page = 1, t.paginationParams = {
                                currentPage: 1
                            }, u.clearPathParameter("page"), a.makeRequest(i).then(function(e) {
                                v(t, e, i)
                            }, function(e) {
                                y(t, e)
                            })) : v(t, e, i)
                        }, function(e) {
                            y(t, e)
                        }), p = !0
                    })))
                },
                reloadRequest: function() {
                    var e = this;
                    e.$applyAsync(function() {
                        a.makeRequest(e.apiConfig).then(function(t) {
                            e.processData(t)
                        })
                    })
                }
            }
        }
        i.$inject = ["viewApiConfig", "timeFrameConfig", "datatableApiFactory", "_", "gaAnalyticsService", "barchartDatatableFilterHandlers", "viewsConstants", "authService", "barchartDatatableColorize", "$rootScope", "barchartDatatableFilterUrl", "locationService"], e.exports = i
    },
    "V+Jd": function(e, t, a) {
        "use strict";

        function i(e, t) {
            var a = {},
                i = 0;
            e.dataLoading = !1, e.dataLoaded = !1, e.canLoadMore = !0, e.secFilingsData = [], e.secFillingsFilter = null, e.stockTransactionReport = !1, e.makeApiRequest = function() {
                if (a) {
                    e.dataLoading = !0;
                    var r = angular.copy(a);
                    e.secFillingsFilter && (r.api.forms = e.secFillingsFilter), e.stockTransactionReport && (r.api.transactions = 1), i && (r.api.skip = i), t.getData(r).then(function(t) {
                        e.canLoadMore = t.count >= a.api.limit, i += t.data.length, e.secFilingsData = e.secFilingsData.concat(t.data), e.dataLoading = !1, e.dataLoaded = !0
                    }, function(t) {
                        console.log("FILINGS DATA (ERROR):", t), e.dataLoading = !1
                    })
                }
            }, e.refreshTable = function() {
                i = 0, e.secFilingsData = [], e.makeApiRequest()
            }, e.$watch("::requestConfig", function(t) {
                t && (a = t, e.makeApiRequest())
            })
        }
        i.$inject = ["$scope", "secFilingsApiFactory"], e.exports = i
    },
    "V/2W": function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                transclude: !0,
                scope: {
                    yScroll: "=",
                    snap: "@",
                    showArrows: "@",
                    showShadows: "@",
                    showSeparator: "@",
                    links: "="
                },
                template: a("1hvb"),
                link: function(a, r, o) {
                    a.activeLink = 0, a.scrollWidgetsForward = function() {
                        l.x > l.maxScrollX && ("true" === a.snap ? l.next() : -l.maxScrollX + l.x < 300 ? l.scrollTo(l.maxScrollX, 0, 400, IScroll.utils.ease.quadratic) : l.scrollBy(-300, 0, 400, IScroll.utils.ease.quadratic), a.activeLink = l.currentPage && l.currentPage.pageX ? l.currentPage.pageX : 0)
                    }, a.arrowsVisible = void 0 === o.showArrows || JSON.parse(o.showArrows), a.shadowsVisible = void 0 === o.showShadows || JSON.parse(o.showShadows), a.separatorVisible = void 0 !== o.showSeparator && JSON.parse(o.showSeparator), a.scrollWidgetsBack = function() {
                        l.x < 0 && ("true" === a.snap ? l.prev() : -l.x < 300 ? l.scrollTo(0, 0, 400, IScroll.utils.ease.quadratic) : l.scrollBy(300, 0, 400, IScroll.utils.ease.quadratic), a.activeLink = l.currentPage && l.currentPage.pageX ? l.currentPage.pageX : 0)
                    }, a.goto = function(e) {
                        l.scrollTo(-700 * e, 0, 400, IScroll.utils.ease.quadratic), l.currentPage.pageX = e, a.activeLink = e
                    }, a.yScroll = void 0 === a.yScroll || a.yScroll, a.$on("bc-scrollbar-scroll-to-item", function(e, t) {
                        l.refresh();
                        var a = r[0].querySelector('[data-scroll-item-id="' + t + '"]');
                        l.scrollToElement(a, 300, !0)
                    }), a.$on("bc-scrollbar-refresh", function() {
                        l && (l.refresh(), a.scrollableBack = l.x < 0, a.scrollableForward = l.x > l.maxScrollX), a.linkWidth = l.pages ? 100 / l.pages.length + "%" : 0
                    });
                    var n = {
                            snap: "true" === a.snap,
                            mouseWheel: !!a.yScroll,
                            disableMouse: !0,
                            disablePointer: !0,
                            scrollX: !0,
                            eventPassthrough: !0,
                            scrollbars: "custom",
                            interactiveScrollbars: !0,
                            bounce: !1
                        },
                        s = r[0].querySelector(".bc-scroll-container"),
                        l = new IScroll(s, n);
                    t(function() {
                        s.children[0].style.minWidth = "auto", l.refresh(), a.scrollableBack = l.x < 0, a.scrollableForward = l.x > l.maxScrollX, a.linkWidth = l.pages ? 100 / l.pages.length + "%" : 0, a.showLinks = !0
                    }, 300), a.scrollableBack = l.x < 0, a.scrollableForward = l.x > l.maxScrollX;
                    var c = a.$watch("refresh", function(e) {
                        !0 === e && t(function() {
                            l.refresh(), a.scrollableBack = l.x < 0, a.scrollableForward = l.x > l.maxScrollX, c()
                        }, 0)
                    });
                    angular.element(e).bind("resize", function() {
                        a.$apply(function() {
                            a.scrollableBack = l.x < 0, a.scrollableForward = l.x > l.maxScrollX
                        })
                    }), l.on("scrollEnd", function() {
                        var e = this; - (e.maxScrollX - e.x) <= 200 && i.$broadcast("bcScrollbarApproachingRight"), -e.x <= 200 && i.$broadcast("bcScrollbarApproachingLeft"), a.$apply(function() {
                            a.scrollableBack = e.x < 0, a.scrollableForward = e.x > e.maxScrollX
                        })
                    })
                }
            }
        }
        i.$inject = ["$window", "$timeout", "$rootScope"], e.exports = i
    },
    V2K2: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "AE",
                replace: !0,
                scope: !0,
                bindToController: {
                    cellKey: "@",
                    cellValue: "@",
                    sortData: "=",
                    content: "="
                },
                controller: [function() {
                    var e = this;
                    e.isSortable = function() {
                        return !!(e.sortData && e.sortData.columns.indexOf(e.cellKey) > -1)
                    }
                }],
                controllerAs: "barchartTableHeaderCellTemplateCtrl",
                template: a("FfmW"),
                link: function(e, t, a) {}
            }
        }
        i.$inject = [], e.exports = i
    },
    V5Vc: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                openActionsModal: function(t, i, r) {
                    return e.open({
                        template: a("h6vz"),
                        controller: "interactiveChartModalActionsCtrl",
                        windowClass: "interactive-chart-actions",
                        resolve: {
                            currentSymbol: function() {
                                return t
                            },
                            saveChartCallback: function() {
                                return i
                            },
                            fullScreen: function() {
                                return r
                            }
                        }
                    }).result
                },
                resetDialog: function() {
                    return e.open({
                        template: a("jJYS"),
                        controller: "interactiveChartModalResetDialogCtrl",
                        windowClass: "interactive-chart-clear-settings"
                    }).result
                },
                savingMechanism: function() {
                    return e.open({
                        template: a("zRsR"),
                        controller: "interactiveChartModalSavingMechanismCtrl",
                        windowClass: "interactive-chart-modal-saving-mechanism",
                        backdrop: "static",
                        keyboard: !1
                    }).result
                },
                settingsModal: function(t, i, r) {
                    return e.open({
                        template: a("F7Us"),
                        controller: "interactiveChartModalSettingsCtrl",
                        windowClass: "interactive-chart-modal-settings",
                        resolve: {
                            symbolData: function() {
                                return t
                            },
                            fullScreen: function() {
                                return i
                            },
                            initialState: function() {
                                return r
                            }
                        }
                    }).result
                },
                aggregationModal: function(t, i) {
                    return e.open({
                        template: a("9fvB"),
                        controller: "interactiveChartModalAggregationCtrl",
                        windowClass: "interactive-chart-modal-aggregation",
                        resolve: {
                            isFutures: function() {
                                return t
                            },
                            defaultSettings: function() {
                                return i
                            }
                        }
                    }).result
                },
                studyModal: function(t, i, r, o) {
                    return e.open({
                        template: a("C3eh"),
                        controller: "interactiveChartModalStudyCtrl",
                        windowClass: "bc-light-modal interactive-chart-modal-study",
                        resolve: {
                            studyData: function() {
                                return t
                            },
                            studyIndex: function() {
                                return i
                            },
                            allowRemove: function() {
                                return !0 === r && void 0 !== i
                            },
                            isClone: function() {
                                return o
                            }
                        }
                    }).result
                },
                plotToolsModal: function(t) {
                    return e.open({
                        template: a("ZIwO"),
                        controller: "interactiveChartModalPlotToolsCtrl",
                        windowClass: "interactive-chart-modal-plot-tools",
                        resolve: {
                            initialState: function() {
                                return t
                            }
                        }
                    }).result
                },
                fundamentalModal: function(t, i, r, o) {
                    return e.open({
                        template: a("KuKU"),
                        controller: "interactiveChartModalFundamentalCtrl",
                        windowClass: "bc-light-modal interactive-chart-modal-study",
                        resolve: {
                            fundamentalData: function() {
                                return t
                            },
                            fundamentalType: function() {
                                return i
                            },
                            fundamentalIndex: function() {
                                return r
                            },
                            allowRemove: function() {
                                return !0 === o && void 0 !== r
                            }
                        }
                    }).result
                },
                comparisonModal: function() {
                    return e.open({
                        template: a("7dna"),
                        controller: "interactiveChartModalComparisonCtrl",
                        windowClass: "interactive-chart-modal-comparison"
                    }).result
                },
                templateModal: function(t, i) {
                    return e.open({
                        template: a("cuYa"),
                        controller: "interactiveChartModalTemplateCtrl",
                        controllerAs: "$ctrl",
                        windowClass: "interactive-chart-modal-template",
                        resolve: {
                            chartSettings: function() {
                                return t
                            },
                            symbolType: function() {
                                return i
                            }
                        }
                    }).result
                },
                expressionsListModal: function(t, i) {
                    return e.open({
                        template: a("uLLb"),
                        controller: "interactiveChartModalExpressionsListCtrl",
                        windowClass: "interactive-chart-modal-expressions-list",
                        resolve: {
                            fullScreen: function() {
                                return t
                            },
                            isDashboardMode: function() {
                                return i
                            }
                        }
                    }).result
                },
                expressionModal: function(t, i, r, o) {
                    return e.open({
                        template: a("zJPR"),
                        controller: "interactiveChartModalExpressionCtrl",
                        windowClass: "interactive-chart-modal-expression",
                        resolve: {
                            expression: function() {
                                return r
                            },
                            isDashboardMode: function() {
                                return i
                            },
                            expressionIndex: function() {
                                return o
                            },
                            fullScreen: function() {
                                return t
                            }
                        }
                    }).result
                },
                saveTemplateModal: function() {
                    return e.open({
                        template: a("0Tjz"),
                        controller: "interactiveChartModalSaveTemplateCtrl",
                        windowClass: "interactive-chart-modal-save-template"
                    }).result
                },
                updateTemplateModal: function(t) {
                    return e.open({
                        template: a("ZSxO"),
                        controller: "interactiveChartModalUpdateTemplateCtrl",
                        windowClass: "interactive-chart-modal-update-template",
                        resolve: {
                            templateData: function() {
                                return t
                            }
                        }
                    }).result
                },
                openShareModal: function(t) {
                    return e.open({
                        template: a("NKTc"),
                        controller: "interactiveChartModalShareCtrl",
                        controllerAs: "$ctrl",
                        windowClass: "technical-chart-clear-settings technical-chart-share-modal",
                        resolve: {
                            useDefaultPageLink: function() {
                                return t
                            }
                        }
                    }).result
                },
                openToolsModal: function() {
                    return e.open({
                        template: a("4TzK"),
                        controller: "interactiveChartModalToolsCtrl",
                        controllerAs: "$ctrl",
                        windowClass: "interactive-chart-modal-tools interactive-chart-modal-settings"
                    }).result
                },
                openAnnotationModal: function(t) {
                    return e.open({
                        template: a("jAUT"),
                        controller: "interactiveChartModalAnnotationCtrl",
                        windowClass: "bc-light-modal interactive-chart-modal-annotation",
                        resolve: {
                            annotationData: function() {
                                return t
                            }
                        }
                    }).result
                },
                openShareChartThoughMailModal: function(t, i, r, o) {
                    return e.open({
                        template: a("3p71"),
                        controller: "shareChartMailModalCtrl",
                        controllerAs: "$ctrl",
                        windowClass: "interactive-chart-modal-tools interactive-chart-modal-settings modal-width-380 share-mail-modal",
                        resolve: {
                            mailData: function() {
                                return t
                            },
                            modalTitle: function() {
                                return i
                            },
                            endPoint: function() {
                                return r
                            },
                            extraOptions: function() {
                                return o || {}
                            }
                        }
                    }).result
                },
                toolMiddleLine: function(t) {
                    return e.open({
                        template: a("7Qr+"),
                        controller: "interactiveChartModalToolMiddleLineCtrl",
                        windowClass: "interactive-chart-modal-tool-middle-line",
                        backdrop: !1,
                        resolve: {
                            annotationData: function() {
                                return t
                            }
                        }
                    }).result
                },
                toolProfitLoss: function(t) {
                    return e.open({
                        template: a("HcB1"),
                        controller: "interactiveChartModalToolProfitLossCtrl",
                        windowClass: "interactive-chart-modal-tool-profit-loss",
                        backdrop: !1,
                        resolve: {
                            annotationData: function() {
                                return t
                            }
                        }
                    }).result
                },
                toolRewardRisk: function(t) {
                    return e.open({
                        template: a("1S74"),
                        controller: "interactiveChartModalToolRewardRiskCtrl",
                        windowClass: "interactive-chart-modal-tool-reward-risk",
                        backdrop: !1,
                        resolve: {
                            annotationData: function() {
                                return t
                            }
                        }
                    }).result
                },
                applyTemplateModal: function(t) {
                    return e.open({
                        template: a("UGlW"),
                        controller: "interactiveChartModalApplyTemplateCtrl",
                        windowClass: "interactive-chart-modal-plot-tools interactive-chart-modal-apply-template",
                        resolve: {
                            useGrid: function() {
                                return t
                            }
                        }
                    }).result
                },
                showMarginSettingsModal: function() {
                    return e.open({
                        template: a("0Pw4"),
                        controller: "interactiveChartModalMarginSettingsCtrl",
                        windowClass: "interactive-chart-modal-plot-tools interactive-chart-modal-mini interactive-chart-modal-mini-margin"
                    }).result
                },
                showBarTypeSettingsModal: function() {
                    return e.open({
                        template: a("5tMe"),
                        controller: "interactiveChartModalBarTypeSettingsCtrl",
                        windowClass: "interactive-chart-modal-plot-tools interactive-chart-modal-mini interactive-chart-modal-mini-bar-type"
                    }).result
                },
                showSizeSettingsModal: function() {
                    return e.open({
                        template: a("3L7b"),
                        controller: "interactiveChartModalSizeSettingsCtrl",
                        windowClass: "interactive-chart-modal-plot-tools interactive-chart-modal-mini interactive-chart-modal-mini-size"
                    }).result
                },
                showContractRollSettingsModal: function() {
                    return e.open({
                        template: a("P2It"),
                        controller: "interactiveChartModalContractRollSettingsCtrl",
                        windowClass: "interactive-chart-modal-plot-tools interactive-chart-modal-mini interactive-chart-modal-mini-contract-roll"
                    }).result
                }
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    V6Rw: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d) {
            e.portfolioDefaultViews = [{
                value: "portfolio",
                label: "Portfolio View"
            }, {
                value: "detailed",
                label: "Detailed View"
            }, {
                value: "visual",
                label: "Visualization View"
            }, {
                value: "main",
                label: "Main View"
            }, {
                value: "technical",
                label: "Technical"
            }, {
                value: "performance",
                label: "Performance"
            }, {
                value: "default",
                label: "Use Site Default View"
            }], e.isPremier = o.getUserData().is_premier, e.portfolioCustomViews = [], o.getUserData().custom_views.forEach(function(t) {
                e.portfolioCustomViews.push({
                    value: "" + t.id,
                    label: t.name
                })
            }), e.portfolioData = {
                default_view: "portfolio",
                eod_view: "main"
            };
            var u = function() {
                    var a = i.pluck(e.portfolioEdit.items, "id"),
                        r = i.pluck(e.portfolio.items, "id"),
                        o = i.difference(r, a);
                    t.organizePortfolio(e.portfolio.id, a, o).then(function(t) {
                        t.data && t.data && t.data.success ? window.location.href = window.config.routes["my.portfolio"] + "?portfolio=" + e.portfolio.id : e.errors.bad_request = !0
                    }, function(e) {
                        p(e)
                    })
                },
                p = function(t) {
                    console.info(t), t && t.error && t.error.message ? e.errors.bad_request = t.error.message : e.errors.bad_request = !0
                };
            e.redirectToCustomViews = function() {
                "custom_create_view" === e.portfolioData.default_view && (r.location.href = r.config.routes["my.customViews"])
            }, e.submit = function() {
                if (e.errors = {}, e.error = !1, !e.editMode && s.portfolio()) return !1;
                e.editPortfolioForm.$invalid ? Object.keys(e.editPortfolioForm.$error).forEach(function(t) {
                    e.errors[t] = !0
                }) : e.editMode ? t.updatePortfolio(e.portfolio.id, e.portfolioData).then(function(t) {
                    t.data && t.data[0] && t.data[0].id ? e.portfolioEdit.items.length ? u() : window.location.href = window.config.routes["my.portfolio"] + "?portfolio=" + e.portfolio.id : e.errors.bad_request = !0
                }, function(e) {
                    p(e)
                }) : t.createPortfolio(e.portfolioData).then(function(t) {
                    t.data && t.data[0] && t.data[0].id ? window.location.href = window.config.routes["my.portfolio"] + "?portfolio=" + t.data[0].id : e.errors.bad_request = !0
                }, function(e) {
                    p(e)
                })
            }, e.deletePortfolio = function() {
                a.deletePortfolioConfirm(e.portfolio.caption).result.then(function() {
                    t.deletePortfolio(e.portfolio.id).then(function() {
                        window.location.href = window.config.routes["my.portfolio"]
                    })
                })
            }, e.checkPremier = function() {
                e.isPremier || (e.portfolioData.eod_view = "main", l.showPremier("portEmail"))
            }, e.isNewEodDisabled = o.getEodReportsNumber("portfolios", "eod_email") >= r.config.limits.reportsLimit, e.changeEod = function() {
                e.isNewEodDisabled && (e.portfolioData.eod_email ? (e.portfolioData.eod_email = 0, d.warning({
                    message: c("MAX_EOD_REPORTS"),
                    delay: 8e3
                })) : e.isNewEodDisabled = !1)
            }, e.$watch("portfolioData.eod_email", function(t, a) {
                void 0 !== a && t && !e.isPremier && (e.portfolioData.eod_view = "main")
            }), e.initEditing = function(a) {
                e.editMode = !0, e.dataLoading = !0, t.getPortfolioForEditForm(a).then(function(t) {
                    e.portfolio = t.data[0], e.isPremier || e.portfolio.eod_email || (e.portfolio.eod_view = "main", e.portfolio.raw.eod_view = "main"), e.portfolioEdit = angular.copy(e.portfolio), ["caption", "cash", "default_view", "eod_email", "eod_view"].forEach(function(t) {
                        angular.isUndefined(e.portfolio.raw[t]) || (e.portfolioData[t] = e.portfolio.raw[t])
                    }), e.portfolioData.cash = n("number")(e.portfolioData.cash, 2).replace(/,/g, ""), e.portfolioData.eod_email && 1 === e.portfolioData.eod_email && (e.portfolioData.eod_email = !0), e.dataLoading = !1
                })
            }
        }
        i.$inject = ["$scope", "portfolioApiFactory", "portfolioModalFactory", "_", "$window", "authService", "$filter", "limitsService", "bcModalLoginSrv", "textFactory", "Notification"], e.exports = i
    },
    V9Wx: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            function o(a) {
                e.profile[a.symbol] || (e.profile[a.symbol] = t.getMarketState().getProfile(a.symbol));
                var i = Object.create(a);
                e.symbols[i.symbol] = i
            }

            function n(e, a) {
                var i = [];
                (e.forEach(function(e) {
                    e.symbol && i.push(e.symbol)
                }), i.length) && (a ? t.getRealtime() : t).on("marketPriceChange", o, i)
            }
            return {
                realtimeListener: function(a, i) {
                    r.config.services.jerq_aggregator.updates && e.connect().then(function() {
                        a && (-1 !== ["etfs-funds", "options", "stocks"].indexOf(i) ? t.getMarketState().lookupExchange(e.exchange).then(function(i) {
                            i.getIsOpen() && n(a, !0), t.on("exchangeStatus", function(e) {
                                e.getIsOpen() ? n(a, !0) : function(e, a) {
                                    var i = [];
                                    if (e.forEach(function(e) {
                                            e.symbol && i.push(e.symbol)
                                        }), i.length) {
                                        var r = a ? t.getRealtime() : t;
                                        r.off("marketPriceChange", o, i)
                                    }
                                }(a)
                            }, e.exchange)
                        }) : n(a, "myBarchart" === i))
                    })
                }
            }
        }
        i.$inject = ["realtimeConnectService", "realtimeConnection", "_", "$rootScope", "$window"], e.exports = i
    },
    VJsW: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                updateName: function(e) {
                    var i = {
                        first_name: e.first_name.$viewValue,
                        last_name: e.last_name.$viewValue
                    };
                    return a.call("/user", t.POST, i, []).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                checkPassword: function(e) {
                    return a.call("/confirm-password ", t.POST, {
                        password: e
                    }, []).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                updatePassword: function(e) {
                    return a.call("/user", t.POST, {
                        password: e
                    }, []).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                deactivateAccount: function() {
                    return a.call("/deactivate", t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                deleteAccount: function() {
                    return a.call("/delete-user", t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                addNewEmail: function(e, i) {
                    return a.call("/users/email", t.POST, {
                        email: e,
                        primary: i
                    }).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                deleteEmail: function(e) {
                    return a.call("/users/email", t.DELETE, {
                        email: e
                    }).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                updatePrimaryEmail: function(e) {
                    return a.call("/users/update-primary", t.POST, {
                        email: e
                    }).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                forgotPassword: function(e) {
                    return a.call("/forgot-password", t.POST, {
                        email: e
                    }, {
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                        }
                    }).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                resendEmail: function(e) {
                    return a.call("/users/email/resend", t.POST, {
                        email: e
                    }).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider"], e.exports = i
    },
    VLmy: function(e, t, a) {
        "use strict";

        function i(e, t) {
            this.showModal = function() {
                var t = e.open({
                    template: a("pxzd"),
                    controller: ["$scope", function(e) {
                        e.close = function() {
                            t.close()
                        }
                    }],
                    windowClass: "bc-light-modal"
                })
            }
        }
        i.$inject = ["$modal", "$location"], e.exports = i
    },
    VNvu: function(e, t, a) {
        "use strict";
        var i = "InteractiveChart";
        angular.module(i, []).run(a("FRLq")).constant("interactiveChartSettingsConfig", a("8/3x")).constant("interactiveChartDefaultConfig", a("N/DK")).constant("interactiveChartAggregationConfig", a("EznM")).constant("interactiveChartPeriodConfig", a("GUvd")).constant("interactiveChartPeriodSizeConfig", a("l0cF")).constant("interactiveChartDimensionsConfig", a("VObL")).constant("interactiveChartAnnotationsConfig", a("kwiA")).constant("interactiveChartPopularSpreadsConfig", a("iZZI")).controller("interactiveChartModalActionsCtrl", a("3lPj")).controller("interactiveChartModalSettingsCtrl", a("Gk2o")).controller("interactiveChartModalAggregationCtrl", a("NBPq")).controller("interactiveChartModalResetDialogCtrl", a("FF2s")).controller("interactiveChartModalSavingMechanismCtrl", a("5koq")).controller("interactiveChartModalStudyCtrl", a("tEic")).controller("interactiveChartModalPlotToolsCtrl", a("9Pt1")).controller("interactiveChartModalFundamentalCtrl", a("K4T7")).controller("interactiveChartModalComparisonCtrl", a("1FBL")).controller("interactiveChartModalTemplateCtrl", a("qXPv")).controller("interactiveChartModalExpressionCtrl", a("pIhI")).controller("interactiveChartModalSaveTemplateCtrl", a("cWwe")).controller("interactiveChartModalUpdateTemplateCtrl", a("nh45")).controller("interactiveChartModalShareCtrl", a("tzpI")).controller("interactiveChartModalToolsCtrl", a("g7ou")).controller("interactiveChartModalAnnotationCtrl", a("zzQi")).controller("interactiveChartModalExpressionsListCtrl", a("l5hF")).controller("interactiveChartModalToolMiddleLineCtrl", a("1KkM")).controller("interactiveChartModalToolProfitLossCtrl", a("7gi1")).controller("interactiveChartModalToolRewardRiskCtrl", a("zNk/")).controller("interactiveChartModalApplyTemplateCtrl", a("FkQG")).controller("interactiveChartModalMarginSettingsCtrl", a("K6Cl")).controller("interactiveChartModalBarTypeSettingsCtrl", a("D1rL")).controller("interactiveChartModalSizeSettingsCtrl", a("JCjV")).controller("interactiveChartModalContractRollSettingsCtrl", a("YZNW")).controller("shareChartMailModalCtrl", a("D0dW")).directive("interactiveChart", a("XsNw")).directive("interactiveChartQuickSettings", a("1RNZ")).directive("interactiveChartBarTypeSelector", a("SpxS")).directive("interactiveChartSymbolSelector", a("ZxlB")).directive("interactiveChartTools", a("Uu2s")).directive("interactiveChartContextMenu", a("OstN")).directive("chartShare", a("IBv3")).directive("symbolAutocomplete", a("54Vg")).directive("interactiveChartVerticalShare", a("gL2y")).directive("interactiveChartMyChartFeatureAds", a("0fnK")).directive("interactiveChartScrollbarFeatureAds", a("rYpM")).directive("interactiveChartPremierAds", a("Sm/n")).directive("interactiveChartSelectTemplate", a("LE92")).directive("interactiveChartTemplateDropDown", a("pBMh")).directive("interactiveChartHamburgerDropDown", a("rpp4")).directive("interactiveChartDropDownAggregation", a("LvAn")).directive("interactiveChartDropDownPeriod", a("+5Mf")).directive("interactiveChartFieldMinutes", a("2MfX")).directive("interactiveChartDateRange", a("Wy08")).directive("interactiveChartModalTabStudies", a("9hnt")).directive("interactiveChartBarTypeDropDown", a("aSgt")).directive("interactiveChartModalTabFundamentals", a("XSGu")).directive("interactiveChartCalendar", a("Osi5")).directive("addToMyCharts", a("aSwB")).factory("interactiveChartFallback", a("/dU9")).service("interactiveChartApi", a("LlPw")).service("interactiveChartApiActionsService", a("om7t")).service("interactiveChartInitializationService", a("LMxz")).service("interactiveChartSettings", a("WBBN")).service("interactiveChartExpand", a("t1hJ")).service("interactiveChartModals", a("V5Vc")).value("interactiveChartFixedBarType", {
            type: null
        }).value("chartVisibility", {
            hasData: !0
        }).service("interactiveChartStateApi", a("klQE")).service("interactiveChartConverter", a("Y7jF")).service("interactiveChartEventSubscriber", a("+jbq")).service("interactiveChartStateService", a("k2cl")).service("interactiveChartTemplates", a("qbc3")).service("interactiveChartValidation", a("4MJh")).service("interactiveChartExpressionStorageService", a("lXe7")).service("interactiveChartSymbolDataService", a("hmGX")).service("interactiveChartUtils", a("u8kd")).service("interactiveChartExportFacade", a("usmz")).service("interactiveChartUserPreferencesApi", a("yhtt"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    VOGU: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@",
                    filterIndex: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterData.default = e.filterData.default || {}, e.filterData.default.value = e.filterData.default.value || e.filters.default.value[0].key
                }],
                template: a("L6nY")
            }
        }
    },
    VObL: function(e, t, a) {
        "use strict";
        e.exports = {
            chartSizes: [{
                value: 400,
                valueMobile: 400,
                label: "Small"
            }, {
                value: 500,
                valueMobile: 500,
                label: "Medium"
            }, {
                value: 650,
                valueMobile: 650,
                label: "Large"
            }, {
                value: 800,
                valueMobile: 800,
                label: "X-Large"
            }],
            additionalPaneSizes: [{
                value: 20,
                label: "Small"
            }, {
                value: 50,
                label: "Medium"
            }, {
                value: 70,
                label: "Large"
            }]
        }
    },
    VQbD: function(e, t) {
        e.exports = '<div class=bc-portfolio-comments> <div class="bc-comments__toolbar clearfix"> <div class=bc-comments__toolbar-checkbox> <bc-checkbox data-cb-model=onlyCommentary data-cb-label="\'Only Show Commentary\'" cb-click=reloadData() data-cb-id="\'show-only-commentary\'"></bc-checkbox> </div> <div class=bc-comments__toolbar-filter> <label>Filter by:</label> <div class="bc-dropdown styled"> <select name=symbolFilter data-ng-model=symbolFilter data-ng-change=reloadData()> <option value=all>All Symbols</option> <option data-ng-repeat="item in symbols" value="[[ item ]]">[[ item ]]</option> </select> </div> </div> </div> <div class=bc-comments__new-comment data-ng-show=!publicView> <form data-ng-submit=addComment()> <div class="error-text left" data-ng-if=errorMessage> <span class=error-msg data-ng-bind=errorMessage></span> </div> <div class=bc-comments__add-new> <textarea rows=10 placeholder="Enter a comment ... (Add hashtag to symbol to link to its quote page - #AAPL)" name=comment data-ng-model=newComment data-ng-maxlength=5000 maxlength=5000></textarea> </div> <div class=clearfix> <div class="left characters-counter" data-ng-show=newComment.length> <span>Characters left: [[ 5000 - newComment.length ]]</span> </div> <div class=right> <button type=submit class="btn bc-button light-blue">Add Comment</button> </div> </div> </form> </div> <div class=bc-comments__timeline data-ng-if=!loading> <div class=bc-comments__timeline-header>Timeline:</div> <div class=bc-comments__timeline-wrapper> <div class=bc-comments__timeline-row data-ng-repeat="row in timeline"> <portfolio-comment-row data-ng-if="row.type===\'comment\'" data-comment=row data-delete-comment=deleteComment(row.id) data-delete-pending=deletePending data-public-view=publicView data-symbols-data=symbolsData data-portfolio-id=portfolio.id data-editable-comment=editableComment></portfolio-comment-row> <portfolio-transaction-row data-ng-if="row.type !==\'comment\'" data-item=row data-public-view=publicView data-portfolio-id=portfolio.id data-symbols-data=symbolsData data-editable-comment=editableComment></portfolio-transaction-row> </div> <div class=empty data-ng-if=!timeline.length>There are no comments.</div> <div class=text-center data-ng-show="(total > timeline.length) && !loadingMore"> <a class="bc-button dark-blue extra" data-ng-click=loadMore()>Load More</a> </div> </div> </div> <div class=throbber-wrapper data-ng-show="loading || loadingMore"> <img src=/img/throbber.gif alt="Please wait..."> </div> </div>'
    },
    VWEr: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                getMarketData: function(i) {
                    return a.call(e.API_URL + "/quotes/get", t.GET, i, [])
                },
                getWatchlistData: function(i) {
                    return a.call(e.API_URL + "/quotes/get", t.POST, i, [])
                },
                getPortfolioData: function(r, o) {
                    var n = angular.copy(r),
                        s = [],
                        l = n.id,
                        c = i.defer();
                    return delete n.id, a.call(e.API_URL + "/portfolio/" + l, t.GET, n, []).then(function(e) {
                        var t = e.data[0].meta.field.shortName,
                            a = {};
                        "main" === o ? a = {
                            symbol: t.symbol,
                            lastPrice: t.lastPrice,
                            priceChange: t.priceChange,
                            percentChange: t.percentChange,
                            openPrice: t.openPrice,
                            highPrice: t.highPrice,
                            lowPrice: t.lowPrice,
                            tradeTime: t.tradeTime
                        } : e.data[0].meta.field.display.forEach(function(e) {
                            a[e] = t[e]
                        }), s = {
                            total: e.data[0].item_count,
                            meta: {
                                field: {
                                    shortName: a
                                }
                            },
                            data: e.data[0].items
                        }, c.resolve(s)
                    }), c.promise
                },
                saveDashboardSettings: function(i) {
                    return a.call(e.API_URL + "/preferences", t.PUT, i, [])
                },
                getNews: function(i) {
                    return a.call(e.API_URL + "/news/get", t.GET, i, [])
                },
                getSymbolData: function(i) {
                    return a.call(e.API_URL + "/quotes/get", t.GET, i, [])
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider", "$q"], e.exports = i
    },
    VfjX: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                $attrs: {
                    bcAutofocusPriority: "@",
                    bcDisableForTablet: "@",
                    bcAutofocusDisabled: "@"
                },
                link: function(t, a, i) {
                    var r = +i.bcAutofocusPriority || 0,
                        o = "true" === i.bcDisableForTablet,
                        n = "true" === i.bcAutofocusDisabled;
                    o && e.isTabletOnly() || n || setTimeout(function() {
                        a.focus()
                    }, r)
                }
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    VhAZ: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {
                    url: "=",
                    title: "@",
                    description: "@",
                    image: "@",
                    trimDesc: "@",
                    redirectUrl: "@"
                },
                require: "^bcSocialShare",
                link: function(a, i, r, o) {
                    if (o) {
                        var n, s, l = Object.create(t.linkedin.win),
                            c = a.image || e.location.origin + t.defaultNewsImage;
                        a.description && (n = o.getDescription(a.description), ("true" === a.trimDesc || a.description.length > o.descLimit) && (n = o.trimDesc(n))), s = a.url ? a.url : o.getShareLinkPartialEncoded({
                            title: a.title,
                            description: n,
                            disableUrl: !0,
                            image: c,
                            redirectUrl: a.redirectUrl || e.location.href
                        });
                        var d = {
                            winUrl: l.url,
                            url: s,
                            title: a.title,
                            description: n
                        };
                        l.url = o.getLink(d), i.on("click", u), a.$on("$destroy", function() {
                            i.off("click", u)
                        })
                    }

                    function u() {
                        window.dataLayer.push({
                            event: "socialInteraction",
                            socialNetwork: "Linkedin",
                            socialAction: "Share",
                            socialTarget: s
                        }), o.share(l)
                    }
                }
            }
        }
        i.$inject = ["$window", "bcShareConfig"], e.exports = i
    },
    "Vjk/": function(e, t, a) {
        "use strict";
        var i = "LeftHandNavigation";
        angular.module(i, []).directive("scrollLeftBar", a("ex+o")).controller("leftHandNavCtrl", a("UgtE"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    VkGB: function(e, t) {
        e.exports = '<div class="barchart-symbol-widget widget-investment-info-etf dashboard-widget-headline"> <div class=barchart-symbol-widget__title> Headlines </div> <div class="module headlines-module"> <ul data-bc-news-feed="[[ ::\'headlineExpandWidget\' ]]" data-feed-items="[[ ::$ctrl.itemList ]]"> <li data-ng-repeat="item in ::$ctrl.data track by $index"> <a data-ng-show="[[ ::$ctrl.filter_var(item.raw.isExternal) ]]" data-ng-href="[[ ::item.url ]]" target=_blank data-ng-bind="::item.title | characterLimit:80"></a> <a data-bc-modal-set-feed="[[ ::\'headlineExpandWidget\' ]]" data-ng-hide="[[ ::filter_var(item.raw.isExternal) ]]" data-ng-href="/story[[ $ctrl.currentURL ]]/[[ ::item.id ]]/[[ ::item.slug ]]" data-ng-click=$ctrl.selectNews() data-ng-bind="::item.title | characterLimit:80"></a> <p class=byline> <span class=author-name data-ng-show=item.author>[[ item.author ]] - </span> <span class=feed-title>[[ item.feed ]] - </span> <span class=published-time>[[ item.published ]]</span> </p> </li> </ul> <div data-ng-if=!$ctrl.data[0]>No stories to display.</div> </div> </div> '
    },
    "VoN/": function(e, t, a) {
        "use strict";

        function i(e) {
            this.processContentInMoney = function(t, a, i) {
                var r = t[0].data;
                return r.length - 1 - a[1] > 10 && (r = r.slice(0, a[1] + 10)), a[0] >= 10 && (r = r.slice(a[0] - 9)), t[0].data = r, setTimeout(function() {
                    e.$broadcast("customHandlerUpdate", {
                        tableName: i,
                        data: r
                    })
                }), t[0].meta.field.shortName.tradeTime && (t[0].meta.field.shortName.tradeTime = "Last Trade"), t
            }
        }
        i.$inject = ["$rootScope"], e.exports = i
    },
    VqJH: function(e, t) {
        e.exports = '<div class=bc-form> <screener-load-screener-toolbar data-filters=formData.filters data-type="[[ ::type ]]"></screener-load-screener-toolbar> <screener-filter-display data-display-fields=filterDisplayFields data-type="[[ ::type ]]"></screener-filter-display> <screener-row-filter data-ng-if="filter.type === \'exchange\'" data-filter-item=filter data-type="[[ ::type ]]" data-is-options=no data-ng-repeat="filter in formData.filters"> </screener-row-filter> <div class="row collapse ordering-header"> <div class=ordering-header-filter>Filter</div> <div class=ordering-header-order>Order</div> </div> <div class=screener-tree-wrapper ui-tree=treeOptions> <div class=screener-tree-wrapper__nodes ui-tree-nodes ng-model=formData.filters> <div class=screener-tree__row-wrapper data-ng-repeat="treeFilter in formData.filters" data-ng-if="treeFilter.type !== \'exchange\'" ui-tree-node data-ng-init="treeFilter.guid = getGuid(treeFilter)"> <screener-row-filter data-filter-item=treeFilter data-filter-index="[[ treeFilter.guid  ]]" data-type="[[ ::type ]]" data-is-options=no> </screener-row-filter> </div> </div> </div> <screener-add-filter-toolbar data-type="[[ ::type ]]" data-filters=formData.filters></screener-add-filter-toolbar> </div>'
    },
    VybF: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            if (e.isLoggedIn() && "1" === a.config.alerts_set_publisher) {
                var o, n = e.getUserData().id,
                    s = e.getUserData().email;
                t.getPublisherTypeDefaults(n).then(function(e) {
                    e.forEach(function(e) {
                        "email" === e.transport && (o = angular.copy(e))
                    }), o.active_alert_types = ["price", "news"], o.default_recipient = s, t.assignPublisherTypeDefault(o, n).then(function() {
                        i.call(a.config.routes["user.removeDefaultAlertPublisher"], r.POST), t.dispose()
                    })
                })
            }
        }
        i.$inject = ["authService", "alertManagerService", "$window", "dataProvider", "httpVerbs"], e.exports = i
    },
    W5lt: function(e, t) {
        e.exports = '<div class=ui-notification data-ng-class=modalClass> <div class="text-right ui-notification-header"> <i class="bc-glyph-times close-notification"></i> </div> <h3 data-ng-show=title data-ng-bind-html=title></h3> <div class=message data-ng-bind-html=message></div> </div>'
    },
    WBBN: function(e, t, a) {
        "use strict";

        function i(e) {
            var t, a, i, r, o = e,
                n = angular.copy(o);

            function s() {
                return o.template ? o.template : null
            }

            function l() {
                return angular.copy(o.aggregation)
            }

            function c() {
                return o.period
            }

            function d() {
                return angular.copy(o.range)
            }

            function u() {
                return angular.copy(o.settings)
            }

            function p() {
                var e = angular.copy(o.compareSymbols);
                return e || angular.copy(n.compareSymbols)
            }
            return {
                getChartGlobalConfig: function() {
                    return angular.copy(o)
                },
                setChartGlobalConfig: function(e) {
                    e.range || (e.range = n.range), void 0 === e.settings.batsData && (e.settings.batsData = !1), e.compareSymbols && 3 === e.compareSymbols.length && 5 === o.compareSymbols.length && (e.compareSymbols = e.compareSymbols.concat([o.compareSymbols[3], o.compareSymbols[4]])), o = angular.copy(e)
                },
                getChartDefaultGlobalConfig: function() {
                    return angular.copy(n)
                },
                getChartMainPlotExpression: function() {
                    return o.expression ? o.expression : null
                },
                setChartMainPlotExpression: function(e) {
                    return o.expression = e
                },
                getChartTemplate: s,
                setChartTemplate: function(e) {
                    o.template = e
                },
                getChartPeriod: c,
                setChartPeriod: function(e) {
                    o.period = e
                },
                getChartRange: d,
                setChartRange: function(e) {
                    o.range = angular.copy(e)
                },
                resetChartRange: function() {
                    o.range = angular.copy(n.range)
                },
                getChartAggregation: l,
                setChartAggregation: function(e) {
                    o.aggregation = angular.copy(e)
                },
                getChartSettings: u,
                setChartSettings: function(e) {
                    void 0 === e.batsData && (e.batsData = !1), o.settings = angular.copy(e)
                },
                getChartCompareSymbols: p,
                setChartCompareSymbols: function(e) {
                    o.compareSymbols = angular.copy(e)
                },
                resetChartGlobalConfig: function() {
                    o = angular.copy(n)
                },
                getSymbol: function() {
                    return t
                },
                setSymbol: function(e) {
                    t = e
                },
                updateChartCurrentConfig: function(e) {
                    e.template = s(), e.aggregation = l(), e.period = c(), e.range = d(), e.settings = u(), e.compare = p()
                },
                setIsFutureSymbol: function(e) {
                    a = e
                },
                getIsFutureSymbol: function() {
                    return a
                },
                getIsEquitySymbol: function() {
                    return i
                },
                setIsEquitySymbol: function(e) {
                    i = e
                },
                setIsEquityEtfMutual: function(e) {
                    r = e
                },
                getIsEquityEtfMutual: function() {
                    return r
                },
                setBarTypeSettings: function(e) {
                    o.settings.barType = angular.copy(e)
                }
            }
        }
        i.$inject = ["interactiveChartDefaultConfig"], e.exports = i
    },
    WGn9: function(e, t, a) {
        "use strict";

        function i(e) {
            e.put("bc-saved-screener-modal.html", a("/2vM"))
        }
        i.$inject = ["$templateCache"], e.exports = i
    },
    "WN/S": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.filters = "";
            var i = {};
            e.$on("filterChangeFromUrl", function(a, r) {
                r.hasOwnProperty("name") && r.hasOwnProperty("value") && "page" !== r.name && "ref" !== r.name && (i[r.name] = r.value), e.filters = t.buildFilterString(i)
            }), e.$on("onFreightMarketSectorChanged", function(t, a) {
                e.activeTab = a
            }), e.init = function(t) {
                e.activeTab = t, e.mobileNavigation = window.location.pathname, e.activeTab && -1 === e.mobileNavigation.indexOf(e.activeTab) && (e.mobileNavigation += "/" + e.activeTab)
            }, e.$watch("mobileNavigation", function(e) {
                a.path(e)
            })
        }
        i.$inject = ["$scope", "barchartDatatableFilterUrl", "$location"], e.exports = i
    },
    WOh9: function(e, t) {
        e.exports = "<div class=histogram-wrapper> <div class=low-price> [[ item['lowPrice' + timeFrame.postfix] ]] </div><div class=histogram> <span data-ng-style=\"{ width: getPriceRange() }\"> <a></a> </span> </div> <div class=high-price> [[ item['highPrice' + timeFrame.postfix] ]] </div> </div>"
    },
    WU3l: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                watchlistDeleteConfirm: function(t) {
                    return e.open({
                        template: a("UWid"),
                        controller: "MyBarchart.WatchlistEdit.watchlistModalController",
                        windowClass: "bc-light-modal error",
                        resolve: {
                            confirmType: function() {
                                return t
                            }
                        }
                    }).result
                },
                addToWatchlist: function(t, i, r) {
                    return e.open({
                        template: a("sIFy"),
                        controller: "MyBarchart.WatchlistEdit.addToWatchlistModalCtrl",
                        windowClass: "reveal-modal bc-tools__modal-with-header",
                        resolve: {
                            symbolData: function() {
                                return {
                                    symbol: t,
                                    name: i
                                }
                            },
                            dashboardMode: function() {
                                return r
                            }
                        }
                    }).result
                }
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    WWdW: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = e.API_URL + "/views";
            return {
                getViewsList: function() {
                    var e = r;
                    return a.call(e, t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                getView: function(e) {
                    var i = r + "/" + e;
                    return a.call(i, t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                saveView: function(e) {
                    var i = r;
                    return a.call(i, t.POST, e).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                updateView: function(e) {
                    var i = r + "/" + e.id;
                    return a.call(i, t.PUT, e).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                deleteView: function(e) {
                    var i = r + "/" + e;
                    return a.call(i, t.DELETE).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                updateViewsOrder: function(e) {
                    var i = r + "/order",
                        o = {
                            ids: e
                        };
                    return a.call(i, t.POST, o).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                updateDefaultView: function(i) {
                    return a.call(e.API_URL + "/preferences", t.PUT, {
                        name: "default_view",
                        value: i
                    }, [])
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider", "_"], e.exports = i
    },
    WYF3: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s) {
            var l = ["$scope", "timeFrameConfig", "majorMarketSectorsService", "$location", function(a, l, c, d) {
                var u;
                if (a.showTable = !0, "string" == typeof a.apiConfig && (a.apiConfig = JSON.parse(a.apiConfig)), a.sectorsData = {}, a.dataLoading = !0, a.expandedSector = null, a.timeFrames = l, a.timeFrame = n.find(l, "default"), d.search().timeFrame && "today" !== d.search().timeFrame) {
                    var p = d.search().timeFrame;
                    a.timeFrame = "matrix" !== p ? n.find(l, {
                        postfix: p
                    }) : n.find(l, {
                        name: "matrix"
                    })
                }

                function m() {
                    var t;
                    (t = angular.copy(a.apiConfig)).api.symbols = u, t.api.fields += "," + a.timeFrame.fields, t.api.orderBy += a.timeFrame.postfix || "", e.makeRequest(t).then(function(e) {
                        return function(e) {
                            var t, i, r, o, s;
                            return t = [], i = {}, r = c.getMarketSymbolsArr(), s = a.timeFrame, n.forEach(e[0].data, function(e) {
                                n.forEach(r, function(a) {
                                    e.symbol === a.symbol && (a.main ? o = e : t.push(e), a.index && (e.index = a.index), a.spec_index && (e.spec_index = a.spec_index)), a.groups && -1 !== a.groups.indexOf(e.symbol) && (i[a.symbol] || (i[a.symbol] = []), i[a.symbol].push(e))
                                })
                            }), n.forEach(t, function(e) {
                                i[e.symbol] && (e.groups = i[e.symbol])
                            }), t = c.setHeatmapColors(t, s), (t = c.setNames(t)).unshift(o), a.sectorsData.data = t, e
                        }(e)
                    }).then(function(e) {
                        return function(e) {
                            return a.sectorsData.meta = a.timeFrame.meta, e
                        }(e)
                    }).then(function() {
                        a.dataLoading = !1
                    })
                }
                u = c.getMarketSymbols(), a.getLink = function(e, t) {
                    return t && e.index ? o.route(s.config.routes["stocks.indices"], {
                        index: e.index,
                        specific_index: e.spec_index || ""
                    }) : "/" + r.getSector(e.symbolType) + "/quotes/" + e.symbol
                }, a.getValueClass = function(e) {
                    return i.getValueClass(e)
                }, a.isExpandable = function(e) {
                    var t, i;
                    return t = ["5year", "10year", "matrix"], i = a.timeFrame, !(!e.groups || -1 !== t.indexOf(i.name))
                }, a.showSectorGroups = function(e) {
                    var i, r, o, n;
                    a.expandedSector && (r = (i = document.querySelector('[data-expandable-symbol="' + a.expandedSector.symbol + '"]')).querySelectorAll(".expandable-table-wrapper"), t(r, "slideUp", {
                        duration: 300,
                        complete: function() {
                            angular.element(i).removeClass("expanded")
                        }
                    })), a.expandedSector !== e ? (a.expandedSector = e, n = (o = document.querySelector('[data-expandable-symbol="' + e.symbol + '"]')).querySelectorAll(".expandable-table-wrapper"), t(n, "slideDown", {
                        duration: 300,
                        begin: function() {
                            angular.element(o).addClass("expanded")
                        }
                    })) : a.expandedSector = null
                }, a.isMobileOnly = function() {
                    return o.isMobileOnly()
                }, a.isMobileOrTablet = function() {
                    return o.isMobileAndTablet()
                }, a.updateTimeFrame = function() {
                    a.timeFrame.postfix ? d.search("timeFrame", a.timeFrame.postfix) : "matrix" === a.timeFrame.name ? d.search("timeFrame", "matrix") : d.search("timeFrame", "today"), a.dataLoading = !0, m()
                }, a.$on("bc-stocks-sector-table-hide", function() {
                    a.showTable = !1
                }), a.$on("bc-stocks-sector-table-show", function() {
                    a.showTable = !0
                }), m()
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    apiConfig: "="
                },
                template: a("gdqT"),
                controller: l
            }
        }
        i.$inject = ["apiFactory", "Velocity", "bcDataService", "quotesService", "utils", "_", "$window"], e.exports = i
    },
    Wcda: function(e, t) {
        e.exports = '<div class=row> <div class="small-6 medium-6 large-3 columns overview-chart-column" data-ng-class=::OverviewChartsCtrl.setChartClass() data-ng-repeat="quotesItem in OverviewChartsCtrl.quotesData"> <div class=overview-chart-wrap> <p> <a target=_self class=chart-overview-symbol-title data-ng-href="/[[ ::OverviewChartsCtrl.quotesService.getSector(quotesItem.symbolType, quotesItem.symbolCode) ]]/quotes/[[ quotesItem.symbol ]]">[[ ::OverviewChartsCtrl.quotesData.description[quotesItem.symbol] ]]</a> <span data-ng-class=OverviewChartsCtrl.setColor(quotesItem.priceChange) class=arrow></span> </p> <p class=chart-overview-last-price> [[ quotesItem.lastPrice ]] </p> <p class=chart-overview-change> <span data-ng-class=OverviewChartsCtrl.setColor(quotesItem.priceChange)>[[ quotesItem.priceChange ]] </span> (<span data-ng-class=OverviewChartsCtrl.setColor(quotesItem.percentChange)>[[ quotesItem.percentChange ]]</span>) </p> <a class=link-chart-wrapper target=_self data-ng-href="/[[ ::OverviewChartsCtrl.quotesService.getSector(quotesItem.symbolType, quotesItem.symbolCode) ]]/quotes/[[ quotesItem.symbol ]]/[[ OverviewChartsCtrl.chartTypeLink ]]"> <simple-chart class=overview-symbols-charts data-symbol="[[ quotesItem.symbol ]]" data-x-axis-tick-pixel-interval=10 data-x-axis-gridlines-visible=false data-y-axis-visible=false data-y-axis-show-last=false data-show-previous=true data-tooltip-visible=false></simple-chart> </a> </div> </div> </div>'
    },
    WjxX: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v) {
            var y = Array.prototype.slice.call(u.getUserData().screeners),
                w = y.filter(function(e) {
                    return e.type.toLowerCase() === l.toLowerCase()
                });

            function C(t, i, r) {
                a.update(t, i).then(function(t) {
                    if (Array.isArray(t.data)) {
                        var a = n.findIndex(e.screeners, {
                            id: e.savedScreener.id
                        });
                        y[a] = angular.copy(t.data[0]), c.$broadcast("onUpdateScreener", {
                            screener: t.data[0]
                        }), r(t)
                    }
                }, function(t) {
                    e.error = t.error.message
                })
            }

            function S() {
                var e = [];
                return d.forEach(function(t) {
                    e.push({
                        key: t.key,
                        filters: t.data
                    })
                }), e
            }
            e.savedScreener = s, e.templateList = w, e.showAutocomplete = !1, e.isEdit = h, e.needConfirmation = !1, e.addViewAndSort = -1 !== ["stk", "etf", "fund"].indexOf(l.toLowerCase()), e.limitOptions = [{
                val: 10,
                label: "Top 10 Results"
            }, {
                val: 25,
                label: "Top 25 Results"
            }, {
                val: 50,
                label: "Top 50 Results"
            }], e.email = u.getUserData().primary_email, e.isNewDisabled = u.getEodReportsNumber("screeners", "send_report") >= g.config.limits.reportsLimit, e.checkEodCount = function(t) {
                e.isNewDisabled && (t ? (e.screener.send_report = 0, b.warning({
                    message: f("MAX_EOD_REPORTS"),
                    delay: 8e3
                })) : e.isNewDisabled = !1)
            }, e.limitReached = v.screeners(!0), setTimeout(function() {
                angular.element(document.querySelector(".js-check-premier")).bind("click touch", function() {
                    e.checkPremier()
                })
            }), setTimeout(function() {
                angular.element(document.querySelector(".js-check-premier-report")).bind("click touch", function() {
                    e.checkPremier("eodScreeners")
                })
            }), e.screener = {
                name: s ? s.name : null,
                description: s ? s.description : null
            }, e.changeName = function() {
                e.showConfirmation && (e.showConfirmation = !1), e.needConfirmation = !0
            }, e.addViewAndSort && (e.screener.view = s ? s.view : "filter_view", e.screener.order_by = s ? s.order_by : "symbol", e.screener.order_dir = s ? s.order_dir : "asc", e.screener.nbr_results = s ? s.nbr_results : 10, e.screener.send_report = !!s && s.send_report, e.screener.email_csv = !!s && s.email_csv), e.$watch("screener.view", function(t, a) {
                void 0 !== a && a !== t && (e.screener.order_by = "symbol")
            }), e.toggleAutocomplete = function() {
                e.showAutocomplete = !e.showAutocomplete
            }, e.applyExistingTemplateName = function(t) {
                e.showAutocomplete = !1, e.screener.name = t.name, e.screener.description = t.description || null, e.addViewAndSort && (e.screener.view = t.view || "filter_view", e.screener.order_by = t.order_by || "symbol", e.screener.order_dir = t.order_dir || "asc", e.screener.nbr_results = t.nbr_results || 10, e.screener.send_report = t.send_report || !1, e.screener.email_csv = t.email_csv || !1)
            }, e.startsWith = function(e, t) {
                return t || (t = ""), 0 === (e + "").toLowerCase().indexOf(t.toLowerCase())
            }, e.modalScreenerClose = function() {
                t.dismiss()
            }, e.showConfirmation = !1, e.saveScreener = function(r) {
                if (e.error = !1, r.$invalid) return !1;
                var o = n.find(e.templateList, {
                    name: r.screenerName.$modelValue
                });
                if (e.savedScreener = o, o && !e.isEdit && e.needConfirmation) e.showConfirmation ? (e.showConfirmation = !1, e.modalConfirmOk()) : e.showConfirmation = !0;
                else {
                    var s = S(),
                        d = new i({
                            name: r.screenerName.$modelValue,
                            type: l,
                            filters: !h && JSON.stringify(s),
                            id: e.savedScreener ? e.savedScreener.id : null,
                            description: r.screenerDesc.$modelValue,
                            view: e.addViewAndSort ? r.view.$modelValue : "main",
                            order_by: e.addViewAndSort ? r.order_by.$modelValue : "baseSymbol",
                            order_dir: e.addViewAndSort ? r.order_dir.$modelValue : "asc",
                            nbr_results: e.addViewAndSort ? r.nbr_results.$modelValue : 10,
                            send_report: !!e.addViewAndSort && r.send_report.$modelValue,
                            email_csv: !!e.addViewAndSort && r.email_csv.$modelValue
                        });
                    if (d.id && o) C(d.id, d, function(e) {
                        t.close({
                            status: "OK",
                            screener: e.data[0]
                        })
                    });
                    else {
                        try {
                            w.forEach(function(e) {
                                if (e.name === d.name) throw new Error("Screener " + e.name + " already exists")
                            })
                        } catch (t) {
                            return e.error = t.message, !1
                        }! function(t, i) {
                            a.save(t).then(function(e) {
                                Array.isArray(e.data) && (y = y.concat(e.data), u.getUserData().screeners = u.getUserData().screeners.concat(e.data), c.$broadcast("onSaveScreener", {
                                    screener: e.data
                                }), i(e))
                            }, function(t) {
                                e.error = t.error.message
                            })
                        }(d, function(e) {
                            t.close({
                                status: "OK",
                                screener: e.data[0]
                            })
                        })
                    }
                }
            }, e.isPremier = u.getUserData().is_premier, e.checkPremier = function(t) {
                e.isPremier || m.showPremier(t || "scrView")
            }, e.modalConfirmCancel = function() {
                (void 0).close()
            }, e.modalConfirmOk = function() {
                var a = S(),
                    o = new i({
                        name: r,
                        type: l,
                        filters: !h && JSON.stringify(a),
                        id: e.savedScreener.id,
                        description: e.screener.description,
                        view: e.screener.view,
                        order_by: e.addViewAndSort ? e.screener.order_by : "baseSymbol",
                        order_dir: e.screener.order_dir,
                        nbr_results: e.screener.nbr_results,
                        send_report: e.screener.send_report,
                        email_csv: e.screener.email_csv
                    });
                C(e.savedScreener.id, o, function(e) {
                    t.close({
                        status: "OK",
                        screener: e.data[0]
                    })
                })
            }
        }
        i.$inject = ["$scope", "$modalInstance", "screenerApiService", "ScreenerModel", "savedScreenerName", "$modal", "_", "savedScreener", "screenerType", "$rootScope", "filters", "authService", "screenerFilterService", "bcModalLoginSrv", "organisePage", "$window", "textFactory", "Notification", "limitsService"], e.exports = i
    },
    WulW: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {},
                link: function(a, i) {
                    function r() {
                        console.log(i.val());
                        var a = i.val();
                        t.location.href = e.appendQueryParam(e.getUrlInfo().origin + e.getUrlInfo().pathname, "group", a)
                    }
                    i.on("change", r), a.$on("$destroy", function() {
                        i.off("change", r)
                    })
                }
            }
        }
        i.$inject = ["utils", "$window"], e.exports = i
    },
    Wy08: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    settings: "="
                },
                controller: ["$scope", function(a) {
                    function o(e) {
                        var t = e.split("-");
                        return t.forEach(function(e, a) {
                            t[a] = parseInt(e)
                        }), t[1] = t[1] - 1, t
                    }
                    a.showDatePickerButtons = !0, a.checkDates = function() {
                        if (null === a.settings.range.from) {
                            t.setChartRange(a.settings.range);
                            var r = t.getChartAggregation();
                            e.changeAggregation(r).render(), i.save()
                        }
                    }, a.applyRange = function() {
                        if (a.settings.range.from) {
                            var n = o(a.settings.range.from),
                                s = {
                                    from: new Date(n[0], n[1], n[2]).getTime()
                                };
                            if (a.settings.range.to) {
                                var l = o(a.settings.range.to);
                                s.to = new Date(l[0], l[1], l[2]).getTime(), a.settings.aggregation && "Intraday" === a.settings.aggregation.unit && (s.to += 864e5)
                            }
                            r.hasData = !0, e.changeRange(s).render(), t.setChartRange(a.settings.range), t.setChartTemplate(null), a.settings.template = null, i.save()
                        } else a.settings.range.to = null
                    }
                }],
                template: a("+zsO")
            }
        }
        i.$inject = ["interactiveChartApi", "interactiveChartSettings", "interactiveChartStateService", "chartVisibility"], e.exports = i
    },
    X3Rc: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.portfolio = t, e.cancel = function() {
                a.dismiss()
            }, e.confirm = function() {
                a.close()
            }
        }
        i.$inject = ["$scope", "portfolio", "$modalInstance"], e.exports = i
    },
    XBcL: function(e, t) {
        e.exports = '<div class="bc-markets-table widget-table"> <div data-ng-show=watchlists.length> <div class=form-close-wrapper data-ng-click=closePanel()> <i class="bc-glyph-times form-close"></i> </div> <div class="drop-down-wrapper with-cog" data-ng-class="{\'noGridView\': !isGridViewEnabled}"> <div class="bc-dropdown styled"> <select name=currentList data-ng-model=watchlist data-ng-change="watchlistChanged(true, true)"> <option data-ng-repeat="item in watchlists" value="[[ item.id ]]">[[ item.name ]]</option> </select> </div> </div> <div class="drop-down-wrapper views-dropdown" data-ng-show=!isGridViewEnabled> <div class="bc-dropdown styled"> <select data-ng-model=view name=view data-show-custom-views-options data-ng-change=changeView()> <option value=main>Main View</option> <option value=technical>Technical</option> <option value=performance>Performance</option> </select> </div> </div> <div class=controller-cog data-ng-click=openControllerModal() data-ng-show=isGridViewEnabled> <i class=bc-glyph-cog></i> </div> <div class=throbber-wrapper data-ng-show=loading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=barchart-minitable-wrapper data-ng-show="content && !loading" bc-infinity-scroll=getMore()> <table> <thead> <tr> <th></th> <th data-ng-repeat="(columnKey, columnTitle) in content.meta.field.shortName track by $index" data-ng-if="options.exclude.indexOf(columnKey) === -1" data-ng-click=sortData(columnKey)> <div class=th-wrapper> <barchart-table-header-cell-template data-cell-key="{{ columnKey}}" data-cell-value="{{ columnTitle | bcReplacement:\'Last Price\':\'Price\' }}" data-content=content> </barchart-table-header-cell-template> <i data-ng-show="sort && sort.orderBy === columnKey && sort.orderDir=== \'asc\'" class="barchart-sort-asc bc-glyph-sort-asc"></i> <i data-ng-show="sort && sort.orderBy === columnKey && sort.orderDir=== \'desc\'" class="barchart-sort-desc bc-glyph-sort-desc"></i> </div> </th> </tr> </thead> <tbody data-ng-repeat="row in content.data"> <tr data-ng-class="{\'current\': currentSymbol.symbol === row.symbol}" data-ng-click=changeSymbol(row)> <td> <my-chart-quick-links data-symbol=row data-type=watchlist data-meta=content.meta.symbol.normalized></my-chart-quick-links> </td> <td data-ng-repeat="(columnKey, columnTitle) in content.meta.field.shortName track by $index" data-ng-if="options.exclude.indexOf(columnKey) === -1" data-ng-class="setClass(columnKey, row[columnKey], row)"> <barchart-table-cell-template data-cell-key="{{ columnKey }}" data-cell-value=row[columnKey] data-cells-to-colorize=options.colorize data-cells-to-colorize-opinion=options.opinion> </barchart-table-cell-template> </td> </tr> <tr data-ng-class="{\'current\': currentSymbol.symbol === row.symbol}" data-ng-click=changeSymbol(row)> <td></td> <td class=text-left colspan=18> <span>{{ row.symbolName }}</span> </td> </tr> </tbody> </table> <div class=throbber-wrapper data-ng-show=moreLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div data-ng-if=!content.data.length> No symbols found that match the requirements. </div> </div> </div> <div data-ng-if=!watchlists.length class=no-table> <div class=form-close-wrapper data-ng-click=closePanel()> <i class="bc-glyph-times form-close"></i> </div> You have no Watchlists. <div class="text-center button-wrapper"> <a data-bc-modal-login=watchlist target=_blank data-ng-href="[[ createWatchlistLink ]]" class="bc-button light-blue small"> <i class=bc-glyph-plus></i> New Watchlist </a> </div> </div> </div>'
    },
    XIDb: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    apiConfig: "=",
                    sticky: "=",
                    watchFor: "=",
                    applyHandlers: "=",
                    options: "=",
                    groupOptions: "=",
                    middlewareOptions: "=",
                    customHandlers: "=",
                    sharedSorting: "@"
                },
                controller: ["$scope", function(a) {
                    a.dataLoading = !0, a.empty = !1, a.datatableOptions = {}, a.receivedApiConfig = angular.copy(a.apiConfig), a.receivedOptions = angular.copy(a.options), a.options = a.options || {}, a.watch = "string" == typeof a.watchFor ? JSON.parse(a.watchFor) : a.watchFor, a.watch = a.watchFor || [], a.watchWait = a.watch.length, a.watchStates = {}, a.customHandlers = a.customHandlers || {}, t(function() {
                        e.observe.call(a)
                    }, 0);
                    0 === a.watchWait && i.makeRequest(a.apiConfig).then(function(e) {
                        a.processData(e)
                    }), a.excludeLastPrice = !1, a.$on("excludeLastPrice", function() {
                        a.excludeLastPrice = !0
                    }), a.processData = function(e) {
                        a.data = {}, a.meta = e[0].meta;
                        var t = e[0].data;
                        Object.keys(t).forEach(function(e) {
                            var i = a.options.groupNameKeys && a.options.groupNameKeys.hasOwnProperty(e) ? a.options.groupNameKeys[e] : e;
                            a.data[i] = function(e, t) {
                                if (e && a.options.handleContent && n.hasOwnProperty(a.options.handleContent)) switch (a.options.handleContent) {
                                    case "processContentInMoney":
                                        if (a.options.itm && "allRows" !== s.search().moneyness) {
                                            var i = (r = e[0].data, o = a.options.itm.compareWith, l = a.options.itm.lastPrice, c = !0, d = r[0].raw[o], u = r[r.length - 1].raw[o], p = 0, m = r.length - 1, r.forEach(function(e, t) {
                                                var a = e.raw[o]; + a > d && +a < l && (d = a, p = t), +a < u && +a >= l && (u = a, m = t)
                                            }), c ? [p, m] : [d, u]);
                                            return n[a.options.handleContent].call(a, e, i, t)
                                        }
                                        break;
                                    default:
                                        return n[a.options.handleContent].call(a, e, [], t)
                                }
                                var r, o, l, c, d, u, p, m;
                                return e
                            }([{
                                data: t[e],
                                meta: a.meta,
                                count: t[e].length
                            }], i), a.datatableOptions[i] = angular.copy(a.options), a.groupOptions.hasOwnProperty(i) && o.merge(a.datatableOptions[i], a.groupOptions[i]), a.datatableOptions[i].tableName = i.toLowerCase()
                        }), a.middlewareOptions && a.middlewareOptions.tablesOrder && function(e) {
                            var t, i = {};
                            e = JSON.parse(e);
                            for (var r, n = Object.keys(a.data), s = n.length, l = {}, c = o.transform(n, function(e, t) {
                                    e[t.toLowerCase()] = t
                                }); s--;) l[r = n[s]] = a.data[r];
                            for (var d = 0; d < e.length; d++) l[t = c[e[d]]] && (i[t] = l[t]);
                            a.data = i
                        }(a.middlewareOptions.tablesOrder), a.dataLoading = !1, a.empty = o.isEmpty(a.data), r.$broadcast("onBarchartDataTableRendered", {
                            api: a.apiConfig,
                            data: e[0].data,
                            middleware: !0,
                            meta: e[0].meta,
                            options: a.options
                        })
                    }, a.setContent = function(e, t) {
                        return [{
                            data: e,
                            meta: t,
                            count: e.length
                        }]
                    }, a.makeTabLink = function(e) {
                        var t;
                        return t = 0 === a.options.tabRoute.indexOf("/") ? a.options.tabRoute.replace(/{\w+}/, e.toLowerCase()) : c.route(l.config.routes[a.options.tabRoute], {
                            type: e.toLowerCase()
                        }), a.options.useDynamicUrl && (t += "#" + s.path()), t
                    }
                }],
                template: a("mIaS")
            }
        }
        i.$inject = ["barchartDatatableService", "$timeout", "datatableApiFactory", "$rootScope", "_", "barchartDatatableContentHandlers", "$location", "$window", "utils"], e.exports = i
    },
    XOIQ: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                require: "ngModel",
                link: function(e, t, a, i) {
                    var r = a.isNumberIgnore,
                        o = !1;
                    if (void 0 !== r && (r = JSON.parse(r), angular.isObject(r) && Object.keys(r).forEach(function(e) {
                            e !== r[e] || (o = !0)
                        })), o) return !0;
                    e.$watch(function() {
                        return i.$modelValue
                    }, function(e, t) {
                        if (void 0 !== e && null !== e) {
                            var a = String(e).split("");
                            if (0 === a.length) return;
                            if (1 === a.length && ("-" === a[0] || "." === a[0])) return;
                            if (2 === a.length && "-." === e) return;
                            isNaN(e) && (i.$setViewValue(t), i.$render())
                        }
                    })
                }
            }
        }
    },
    XQqj: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                updateWatchlists: function(t) {
                    return e.call("/api/v1/watchlist/batch", "POST", t, {
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    }).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                addWatchlist: function(t) {
                    return e.call("/api/v1/watchlist", "POST", t)
                }
            }
        }
        i.$inject = ["dataProvider", "_"], e.exports = i
    },
    XQzT: function(e, t) {
        e.exports = '<div> <div id="[[ ::id ]]" class=g-recaptcha></div> <input type=hidden name=grepatcha> </div>'
    },
    XSGu: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    parentModalInstance: "="
                },
                link: function(a, r, o) {
                    a.balanceSheets = [], a.incomeStatements = [], a.currentFundamentals = {}, t.getChartTaxonomy().then(function(e) {
                        a.balanceSheets = e.balanceSheets, a.incomeStatements = e.incomeStatements, a.currentFundamentals = t.getFundamentals()
                    }), a.addFundamental = function(e, t) {
                        var r = i.fundamentalModal(e, t);
                        a.parentModalInstance.close({
                            type: "add",
                            taxonomyModalPromise: r
                        })
                    }, a.updateFundamental = function(t, r, o) {
                        var n = null;
                        if ("BalanceSheet" === r && (n = angular.copy(e.find(a.balanceSheets, {
                                id: t.fundamentalId
                            }))), "IncomeStatement" === r && (n = angular.copy(e.find(a.incomeStatements, {
                                id: t.fundamentalId
                            }))), n.curves = t.curves, n.frequency = t.frequency, n) {
                            var s = i.fundamentalModal(n, r, o, !0);
                            a.parentModalInstance.close({
                                type: "update",
                                taxonomyModalPromise: s
                            })
                        }
                    }, a.removeFundamental = function(e, i) {
                        t.removeFundamental(e, i), a.parentModalInstance.close()
                    }, a.modalDismiss = function() {
                        a.parentModalInstance.dismiss()
                    }
                },
                template: a("9oRc")
            }
        }
        i.$inject = ["_", "interactiveChartApi", "interactiveChartModals"], e.exports = i
    },
    XSTz: function(e, t, a) {
        "use strict";

        function i(e) {
            angular.extend(e.defaults, {
                container: "body",
                autoclose: !0,
                useNative: !0,
                startWeek: 0,
                dateType: "string",
                dateFormat: "MM/dd/yy",
                modelDateFormat: "yyyy-MM-dd",
                templateUrl: "bc-datepicker.html",
                onShow: function(e) {
                    e.$scope.showDatePickerButtons = this.scope.showDatePickerButtons, e.$scope.showDatePickerButtons && (e.$scope.closeDatePicker || (e.$scope.closeDatePicker = function() {
                        e.$scope.$hide(), angular.element(document.activeElement).trigger("blur")
                    }), e.$scope.clearDatePickerField || (e.$scope.clearDatePickerField = function() {
                        e.$scope.$clear(), angular.element(document.activeElement).trigger("blur")
                    }), e.$scope.setToday || (e.$scope.setToday = function() {
                        e.$scope.$setToday(), angular.element(document.activeElement).trigger("blur")
                    }))
                }
            })
        }
        i.$inject = ["$datepickerProvider"], e.exports = i
    },
    XV5m: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {
                    url: "=",
                    title: "@",
                    description: "@",
                    image: "@",
                    trimDesc: "@",
                    redirectUrl: "@"
                },
                require: "^bcSocialShare",
                link: function(a, i, r, o) {
                    if (o) {
                        var n, s, l = Object.create(t.gplus.win),
                            c = a.image || e.location.origin + t.defaultNewsImage;
                        a.description && (n = o.getDescription(a.description), ("true" === a.trimDesc || a.description.length > o.descLimit) && (n = o.trimDesc(n))), s = a.url ? a.url : o.getShareLinkPartialEncoded({
                            title: a.title,
                            description: n,
                            image: c,
                            redirectUrl: a.redirectUrl || e.location.href
                        });
                        var d = {
                            winUrl: l.url,
                            url: s
                        };
                        l.url = o.getLink(d), i.on("click", u), a.$on("$destroy", function() {
                            i.off("click", u)
                        })
                    }

                    function u() {
                        window.dataLayer.push({
                            event: "socialInteraction",
                            socialNetwork: "Google+",
                            socialAction: "Share",
                            socialTarget: s
                        }), o.share(l)
                    }
                }
            }
        }
        i.$inject = ["$window", "bcShareConfig"], e.exports = i
    },
    XVxa: function(e, t) {
        e.exports = '<div class=bc-scroll-wrapper> <div class="wrapper bc-scroll-container" data-ng-transclude></div> <div class="scroll-control forward" data-ng-click=scrollWidgetsForward()><i class=bc-glyph-chevron-right></i> </div> <div class="scroll-control back" data-ng-class="{\'disabled\': disabledBackButton}" data-ng-click=scrollWidgetsBack()><i class=bc-glyph-chevron-left></i> </div> <div class="hint-shadow left" data-ng-class="{\'animate-show\': scrollableBack}"></div> <div class="hint-shadow right" data-ng-class="{\'animate-show\': scrollableForward}"></div> </div>'
    },
    Xla2: function(e, t, a) {
        "use strict";
        e.exports = {
            chartParameters: {
                options: {
                    chart: {
                        type: "area",
                        height: 120,
                        width: 330
                    },
                    credits: {
                        enabled: !1
                    },
                    title: {
                        text: ""
                    },
                    legend: {
                        display: !1
                    },
                    xAxis: {
                        gridLineWidth: 1,
                        type: "datetime",
                        minPadding: 0,
                        tickPositioner: function(e, t) {
                            var a = this.options,
                                i = this.normalizeTimeTickInterval(this.tickInterval, a.units),
                                r = this.getTimeTicks(i, e, t, a.startOfWeek, this.ordinalPositions, this.closestPointRange, !0);
                            return r.splice(1, 1), r.info = {
                                higherRanks: i.higherRanks,
                                unitName: i.unitName
                            }, r.splice(0, 1, e), r
                        },
                        min: null
                    },
                    yAxis: {
                        title: {
                            text: null
                        },
                        tickAmount: 2,
                        opposite: !0,
                        gridLineWidth: 1,
                        labels: {
                            formatter: function() {
                                return this.value.toFixed(2)
                            }
                        },
                        plotLines: [{
                            color: "#FF0000",
                            width: 1,
                            zIndex: 2,
                            value: 103.6934,
                            label: {
                                text: 10,
                                align: "right",
                                x: 52,
                                y: 5,
                                style: {
                                    color: "#606060"
                                }
                            }
                        }]
                    },
                    plotOptions: {
                        series: {
                            color: "rgba(0, 79, 136, 0.6)",
                            marker: {
                                enabled: !1
                            },
                            states: {
                                hover: {
                                    lineWidth: 1
                                }
                            }
                        },
                        line: {
                            lineWidth: 1
                        }
                    }
                },
                series: [{
                    name: "chart",
                    showInLegend: !1
                }]
            }
        }
    },
    XrBn: function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-alerts-settings__modal-form bc-sms-text-modal"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=$ctrl.close()></i> </div> <h5 class=modal-title>SMS Text Alerts</h5> <form novalidate name=textSettingsForm data-ng-submit=$ctrl.saveTextSettings(textSettingsForm)> <div class=modal-content-form-wrapper-input> <div class=bc-sms-text-modal-block> <span class=text-bold>Deliver text alerts to:</span> <div> <span>[[ ::$ctrl.smsPublisher.default_recipient ]]</span> <a data-ng-click=$ctrl.editMobilePhone()>Edit</a> <a class=margin-left-20 data-ng-click=$ctrl.removePhone()>Delete</a> </div> </div> <div class="bc-sms-text-modal-block extra-margin"> <span class=text-bold>Price Alerts:</span> <div class=input-checkbox> <input checked=checked id=bc-sms-text-modal-price-on data-checklist-model=$ctrl.smsPublisher.active_alert_types data-checklist-value="\'price\'" type=checkbox value=price class="ng-pristine ng-untouched ng-valid"> <label for=bc-sms-text-modal-price-on> <span class=bc-glyph-check></span>On </label> </div> </div> <div class="bc-sms-text-modal-block extra-margin"> <div class="bc-alerts-settings__fieldset-label text-bold">Send alerts between:</div> <div class="bc-dropdown styled arrow-black rounded bc-alerts-settings__select-time"> <select data-ng-model=$ctrl.smsPublisher.allow_window_start name=settingsTimeZone> <option data-ng-repeat="val in ::$ctrl.dateRange" value="[[ ::val ]]">[[ ::val ]]</option> </select> </div> <span>-</span> <div class="bc-dropdown styled arrow-black rounded bc-alerts-settings__select-time"> <select data-ng-model=$ctrl.smsPublisher.allow_window_end name=settingsTimeZone> <option data-ng-repeat="val in ::$ctrl.dateRange" value="[[ ::val ]]">[[ ::val ]]</option> </select> </div> </div> <div class="bc-sms-text-modal-block margin-top-10"> <span class=text-bold>Delivery time zone:</span> <div class=bc-alerts-settings__fieldset-content> <div class="bc-dropdown styled arrow-black rounded bc-alerts-settings__select-time-zone"> <select data-ng-model=$ctrl.smsPublisher.allow_window_timezone name=settingsTimeZone id=bc-alerts-settings__select-time-zone> <option data-ng-repeat="(key, val) in ::$ctrl.timezoneList" value="[[ ::key ]]">[[ ::val ]]</option> </select> </div> </div> </div> <div class="bc-form__buttons-block margin-top-10"> <input type=button class="bc-button save grey" data-ng-click=$ctrl.close() value=Cancel> <input type=submit class="bc-button save light-blue" value=Save> </div> </div> </form> </div>'
    },
    XsNw: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v, y, w, C, S, x, k, D, T, _, P, E, A, $) {
            return {
                restrict: "E",
                scope: {
                    currentSymbol: "=",
                    fullScreen: "=",
                    flipChartMode: "=",
                    dashboardMode: "=",
                    defaultMode: "=",
                    chartInitSettings: "=",
                    id: "@",
                    compareSymbols: "@",
                    fullTabScreen: "=",
                    tabChart: "=",
                    enableMyCharts: "=",
                    myChartsMode: "=",
                    realTime: "@",
                    showMyChartAds: "=",
                    showScrollbarFeatureAds: "=",
                    disableSymbolBox: "=",
                    elementId: "@",
                    forceLogin: "="
                },
                controller: ["$scope", function(a) {
                    var M, L, O = null,
                        I = null,
                        N = 1e3 * p.config.loginModalTiming.interactiveChartPage.first,
                        F = 1e3 * p.config.loginModalTiming.interactiveChartPage.every,
                        R = !1;
                    if (L = void 0 === a.realTime ? !!(a.dashboardMode && s.isLoggedIn() || a.isPremier && !a.flipChartMode) : "true" === a.realTime && a.currentSymbol.raw.hasJerq, a.tabChart && a.fullTabScreen) {
                        var B = s.getUserPreferences();
                        P.setChartTab(a.tabChart), B.isTab = !0, s.setUserPreferences(B)
                    }
                    if (a.templatesEditingLink = config.routes["my.customChartTemplates.interactive"], a.chartInitSettings && a.chartInitSettings.interactiveStudy && (a.readOnlyMode = !0), a.compareSymbols) {
                        var U = l.getChartCompareSymbols() || l.getChartDefaultGlobalConfig().compareSymbols;
                        I = y.merge(U, y.take(a.compareSymbols.split(","), 3).map(function(e) {
                            return {
                                symbol: e.toUpperCase()
                            }
                        })), O = I.map(function(e) {
                            return {
                                symbol: e.symbol,
                                curves: [{
                                    colors: [e.color]
                                }]
                            }
                        })
                    }
                    a.dashboardMode && c.switchToDashboardMode(), a.defaultMode && c.switchToDefaultMode(), a.fullScreen && c.fullScreenEnabled(), a.flipChartMode ? (c.switchToFlipChartsMode(), l.resetChartGlobalConfig()) : u.onRegister.push(function() {
                        var t = {
                            symbol: l.getSymbol(),
                            chartData: {
                                configuration: JSON.stringify(l.getChartGlobalConfig()),
                                state: e.save()
                            }
                        };
                        g.set("interactiveChart.onRegisterChartData", JSON.stringify(t))
                    }), t.isMobileOnly() && window.innerHeight > window.innerWidth && e.disableTitle(), t.isMobileOnly() && window.addEventListener("orientationchange", function(t) {
                        0 !== window.orientation || (screen.width || window.innerWidth) > (screen.height || window.innerHeight) ? e.enableTitle().render() : e.disableTitle().render()
                    }, !1), a.chartVisibility = f, a.saveChartCallback = function() {
                        u.preventLoginReload = !0;
                        var t = {
                            configuration: JSON.stringify(l.getChartGlobalConfig()),
                            state: e.save()
                        };
                        h.saveChartDataForSymbol(l.getSymbol(), t).then(function() {
                            p.location.reload()
                        })
                    }, a.isMobile = t.isMobile(), s.isLoggedIn() && (a.user = s.getUserData(), a.hasChartTemplates = a.user.interactive_chart_templates && a.user.interactive_chart_templates.length), l.setSymbol(a.currentSymbol.symbol), a.isFutureSymbol = -1 !== [2, 12, 13, 14].indexOf(a.currentSymbol.symbolType), a.isEquitySymbol = -1 !== ["1", "6:CA"].indexOf(a.currentSymbol.symbolTypeSpec), a.batsAvailable = -1 !== ["1", "7"].indexOf(a.currentSymbol.symbolTypeSpec) && a.currentSymbol.raw.hasBats, a.isPremier = s.isLoggedIn() && s.getUserData().is_premier;
                    var V = -1 !== ["UsEquity", "Etf", "MutualFund", "OtherInternationalEquities", "CanadianEquity", "InternationalMutualFund", "Trust"].indexOf(p.config.symbols.type_names[a.currentSymbol.symbolType]);
                    if (l.setIsFutureSymbol(a.isFutureSymbol), l.setIsEquitySymbol(a.isEquitySymbol), l.setIsEquityEtfMutual(V), E.setSymbolData(a.currentSymbol), e.initFeed(a.currentSymbol, L), !s.isLoggedIn() && a.forceLogin) {
                        setTimeout(q, N);
                        ! function e() {
                            M && clearTimeout(M), M = setTimeout(function() {
                                q(), e()
                            }, F)
                        }()
                    }

                    function q() {
                        A.goToLogin("icharts", !0)
                    }

                    function j(e) {
                        a.chartDataLoading = !0;
                        var t = k.defer();
                        if (a.id && (S.initializeChartForAnonymousUser(a.id).then(function(e) {
                                a.chartDataLoading = !1, t.resolve(e)
                            }), $.search("id", null)), s.isLoggedIn())
                            if (a.flipChartMode) a.chartInitSettings && a.chartInitSettings.interactiveStudy ? (a.chartDataLoading = !1, t.resolve({})) : a.myChartsMode ? S.initializeChartUsingStrategy("tab", e, {
                                compareSymbols: O
                            }, a.dashboardMode).then(function(e) {
                                a.chartDataLoading = !1, t.resolve(e)
                            }) : S.initializeChartAsFlipChart(e, !0).then(function(e) {
                                a.chartDataLoading = !1, t.resolve(e)
                            });
                            else {
                                var i = s.getUserPreferences();
                                i.interactive_charts_saving_mechanism ? (S.initializeChartUsingStrategy(i.isTab && !R ? "tab" : i.interactive_charts_saving_mechanism, e, {
                                    compareSymbols: O
                                }, a.dashboardMode).then(function(e) {
                                    a.chartDataLoading = !1, t.resolve(e)
                                }), R = !1) : n.savingMechanism().then(function(r) {
                                    i.interactive_charts_saving_mechanism = r, s.setUserPreferences(i);
                                    var o = 'Your Chart Saving Mechanism has been saved in your <a target="_self" href="' + config.routes["my.sitePreferences"];
                                    o += '">Site Preferences</a>. You may adjust these at any time.', C.success(o), S.initializeChartUsingStrategy(r, e, {
                                        compareSymbols: O
                                    }, a.dashboardMode).then(function(e) {
                                        a.chartDataLoading = !1, t.resolve(e)
                                    })
                                })
                            }
                        else a.chartDataLoading = !1, a.dashboardMode || a.defaultMode || a.fullScreen ? S.initializeLastViewedChartForAnnon().then(function(e) {
                            t.resolve(e)
                        }) : t.resolve({});
                        return t.promise
                    }

                    function H() {
                        e.removeAllTechnicalStudies(), e.getChartTaxonomy().then(function(t) {
                            var i = a.chartInitSettings.interactiveStudy;
                            i.id || "" === i ? Y(i, t.studies) : i.forEach(function(e) {
                                Y(e, t.studies)
                            }), a.chartInitSettings.dateRange && e.changeRange(a.chartInitSettings.dateRange).render()
                        })
                    }

                    function Y(t, a) {
                        var i = y.find(a, function(e) {
                            return e.id === t.id
                        });
                        i && t.values && t.values.length && t.values.forEach(function(e, t) {
                            i.defaults.inputs && i.defaults.inputs[t] && (i.defaults.inputs[t].value = e)
                        });
                        var r = {
                            id: i.id
                        };
                        i.defaults.inputs && i.defaults.inputs.length && (r.inputs = angular.copy(i.defaults.inputs)), e.addTechnicalStudy(r).render()
                    }

                    function G() {
                        if (-1 !== ["MutualFund", "InterestRates"].indexOf(p.config.symbols.type_names[a.currentSymbol.symbolType])) {
                            var t = l.getChartSettings();
                            t.barType.curveStyle = "Line", l.setChartSettings(t)
                        }
                        if (a.flipChartMode) {
                            var i = l.getChartPeriod(),
                                r = l.getChartAggregation(),
                                o = r.spec,
                                n = a.isFutureSymbol && -1 !== ["P6M", "P1Y", "P5Y", "P7Y", "P10Y", "P15Y", "P20Y", "P25Y", "P30Y", "P50Y"].indexOf(i) ? "Nearest" : "None";
                            r.spec !== n && o !== r.spec && (r.spec = n, l.setChartAggregation(r), e.changeAggregation(r), e.changePeriod(i), e.render())
                        }
                        a.currentChartSettings = l.getChartGlobalConfig(), m.$broadcast("interactiveChartUIRefreshed")
                    }

                    function W(t) {
                        var a, r, o = x.extractExpressionForSymbol(t);
                        o.expression && T.addInlineDataForSymbols((a = o.expression, r = a.match(/{([\w-.$^*]*)}/g), r.forEach(function(e, t) {
                            r[t] = e.slice(1, -1)
                        }), r)).then(function() {
                            l.setChartMainPlotExpression(o.expression), e.changeMainPlotToExpression(o.expression), o.config && ("Line" !== o.config.style && e.changeAxisType("price"), e.changeCurveStyle(o.config).render(), l.setBarTypeSettings(o.config)), i.type = ["Line", "Area"], c.save(), m.$broadcast("interactiveChartExpressionApplied")
                        })
                    }

                    function z() {
                        t.isMobileAndTablet() || (s.isLoggedIn() && s.getUserPreferences().contextMenuOnboardingCardDisabled ? g.get("contextMenuOnboardingCardDisabled") || g.set("contextMenuOnboardingCardDisabled", !0) : g.get("contextMenuOnboardingCardDisabled") || m.$broadcast("showContextMenuCard"))
                    }

                    function K() {
                        v.subscribeOnChartEvents(["CH_NODATAFORMAINSYMBOL", "CH_ANNOTATIONCHANGED", "CH_PANEHEIGHTSCHANGED", "CH_ANNNEEDSCONTEXTMENU", "CH_PANESREORDERED"])
                    }

                    function J(t, o) {
                        var n = null,
                            d = null;
                        a.flipChartMode && !a.myChartsMode && (n = l.getChartTemplate(), d = l.getChartPeriod(), console.log("apply template", n)), console.log("_updateDashboardChart", angular.copy(l.getChartGlobalConfig())), e.reset(), l.resetChartGlobalConfig(), a.currentChartSettings = l.getChartGlobalConfig(), j(t).then(function(t) {
                            var u, p = t.realTimeSymbol || l.getSymbol();
                            if (a.flipChartMode && n && (t.template = n), t && t.tabState && (u = JSON.parse(t.tabState.configuration), l.setChartGlobalConfig(u)), t && t.annonLastViewed && (u = JSON.parse(t.annonLastViewed.configuration), l.setChartGlobalConfig(u), u.expression && (initConfig.expression = u.expression, i.type = ["Line", "Area"], delete initConfig.symbol)), s.isLoggedIn() && a.batsAvailable && l.getChartSettings().batsData && (p += ".BZ"), o && (e.setCurrentChartSymbol(p), e.changeSymbol(p).render()), i.type = null, t && t.currentSymbolState && !t.tabState && c.applyStateAndConfig(t.currentSymbolState.state, t.currentSymbolState.configuration, {
                                    keepOldAnnotations: !1,
                                    keepNewAnnotations: !0,
                                    keepOldCompare: !1,
                                    keepNewCompare: !0
                                }), a.myChartsMode && t && t.lastUpdatedState && !t.tabState) {
                                var h = JSON.stringify(e.getDefaultTemplate());
                                e.loadDefinition(h, {
                                    keepOldAnnotations: !1,
                                    keepNewAnnotations: !0,
                                    keepOldCompare: !1,
                                    keepNewCompare: !0
                                }), c.applyStateAndConfig(t.lastUpdatedState.state, t.lastUpdatedState.configuration, {
                                    keepOldAnnotations: !0,
                                    keepNewAnnotations: !1,
                                    keepOldCompare: !1,
                                    keepNewCompare: !0
                                }, !0)
                            }
                            if (t && t.lastUpdatedState && t.lastUpdatedState.symbol !== l.getSymbol() && !t.tabState) c.applyStateAndConfig(t.lastUpdatedState.state, t.lastUpdatedState.configuration, {
                                keepOldAnnotations: !0,
                                keepNewAnnotations: !1,
                                keepOldCompare: !1,
                                keepNewCompare: !0
                            }, !0);
                            else if (t && t.tabState) {
                                if (R) {
                                    var g = JSON.parse(t.tabState.configuration);
                                    g.expression && delete g.expression, t.tabState.configuration = JSON.stringify(g), R = !1
                                }
                                c.applyStateAndConfig(t.tabState.state, t.tabState.configuration, {
                                    keepOldAnnotations: !1,
                                    keepNewAnnotations: !0,
                                    keepOldCompare: !1,
                                    keepNewCompare: !0
                                }, !1)
                            } else t && t.annonLastViewed && c.applyStateAndConfig(t.annonLastViewed.state, t.annonLastViewed.configuration, {
                                keepOldAnnotations: !1,
                                keepNewAnnotations: !1,
                                keepOldCompare: !1,
                                keepNewCompare: !0
                            }, !0);
                            a.flipChartMode || W(l.getSymbol()), t && t.template && r.applyTemplate(t.template, a.isFutureSymbol), a.flipChartMode && !n && d !== l.getChartPeriod() && m.$broadcast("triggerApplyPeriod", d), G(), m.$broadcast("interactiveChartInitialized")
                        })
                    }
                    j(a.currentSymbol.symbol).then(function(t) {
                        ! function(t) {
                            var o, n = {
                                    symbol: l.getSymbol()
                                },
                                d = !1;
                            e.setCurrentChartSymbol(n.symbol), t && t.currentSymbolState && !t.tabState && (n.template = t.currentSymbolState.state, void 0 === (o = JSON.parse(t.currentSymbolState.configuration)).settings.navigator && (o.settings.navigator = !0, d = !0), l.setChartGlobalConfig(o), o.expression && (n.expression = o.expression, i.type = ["Line", "Area"], delete n.symbol));
                            t && t.tabState && (n.template = t.tabState.state, o = JSON.parse(t.tabState.configuration), l.setChartGlobalConfig(o), o.expression && (n.expression = o.expression, i.type = ["Line", "Area"], delete n.symbol));
                            t && t.annonLastViewed && (n.template = t.annonLastViewed.state, (o = JSON.parse(t.annonLastViewed.configuration)).expression && delete o.expression, l.setChartGlobalConfig(o));
                            t && t.flipChartSymbolState && t.flipChartSymbolState.state && t.flipChartSymbolState.configuration && (c.setInitialFlipChartState(t.flipChartSymbolState), n.template = t.flipChartSymbolState.state, o = JSON.parse(t.flipChartSymbolState.configuration), l.setChartGlobalConfig(o));
                            s.isLoggedIn() && a.batsAvailable && l.getChartSettings().batsData && n.symbol && (n.symbol += ".BZ", e.setCurrentChartSymbol(n.symbol));
                            !s.isLoggedIn() && O ? T.updateInlineDataForSymbol(a.compareSymbols + "," + a.currentSymbol.symbol).then(function(t) {
                                e.initChart(a.currentSymbol, n, a.elementId).then(function() {
                                    l.setChartCompareSymbols(I), e.changeCompare(O.filter(function(e) {
                                        return e.symbol
                                    })).render(), G(), K(), z(), m.$broadcast("interactiveChartInitialized")
                                })
                            }) : (t && t.template && a.flipChartMode && (c.setCurrentFlipChartTemplate(t.template), n.template = JSON.stringify(r.getDefinition(t.template))), e.initChart(a.currentSymbol, n, a.elementId).then(function() {
                                if (a.myChartsMode && t && t.lastUpdatedState && !t.tabState) {
                                    var i = JSON.stringify(e.getDefaultTemplate());
                                    e.loadDefinition(i, {
                                        keepOldAnnotations: !1,
                                        keepNewAnnotations: !0,
                                        keepOldCompare: !1,
                                        keepNewCompare: !0
                                    }), c.applyStateAndConfig(t.lastUpdatedState.state, t.lastUpdatedState.configuration, {
                                        keepOldAnnotations: !0,
                                        keepNewAnnotations: !1,
                                        keepOldCompare: !1,
                                        keepNewCompare: !0
                                    }, !0)
                                }
                                if (t && t.lastUpdatedState && t.lastUpdatedState.symbol !== l.getSymbol()) c.applyStateAndConfig(t.lastUpdatedState.state, t.lastUpdatedState.configuration, {
                                    keepOldAnnotations: !0,
                                    keepNewAnnotations: !1,
                                    keepOldCompare: !1,
                                    keepNewCompare: !0
                                }, !0);
                                else if (t && t.tabState) c.applyStateAndConfig(t.tabState.state, t.tabState.configuration, {
                                    keepOldAnnotations: !1,
                                    keepNewAnnotations: !0,
                                    keepOldCompare: !1,
                                    keepNewCompare: !0
                                }, !0);
                                else if (t && t.annonLastViewed) c.applyStateAndConfig(t.annonLastViewed.state, t.annonLastViewed.configuration, {
                                    keepOldAnnotations: !1,
                                    keepNewAnnotations: !1,
                                    keepOldCompare: !1,
                                    keepNewCompare: !0
                                }, !0);
                                else if (t && t.flipChartSymbolState && !t.template && !a.chartInitSettings) {
                                    var o = {
                                        curveStyle: "OHLC",
                                        lineWidth: 1,
                                        colors: ["#000000"]
                                    };
                                    e.loadDefinition(JSON.stringify(e.getDefaultTemplate()), {
                                        keepOldAnnotations: !0,
                                        keepNewAnnotations: !1,
                                        keepOldCompare: !1,
                                        keepNewCompare: !1
                                    }), e.changeCompare([]), e.changeCurveStyle(o), l.setBarTypeSettings(o);
                                    var n = {
                                        configuration: JSON.stringify(l.getChartGlobalConfig()),
                                        state: JSON.stringify(e.getDefinition(!0))
                                    };
                                    t.flipChartSymbolState.state = n.state, t.flipChartSymbolState.configuration = n.configuration, c.setInitialFlipChartState(t.flipChartSymbolState), e.restoreCurrentSymbolPlot()
                                }
                                d && (e.changeNavigator(!0).render(), d = !1), a.flipChartMode || W(l.getSymbol()), t && t.template && (a.flipChartMode ? (c.setCurrentFlipChartTemplate(t.template), r.applyTemplate(t.template, a.isFutureSymbol, !0), setTimeout(function() {
                                    window.dispatchEvent(new Event("resize"))
                                })) : r.applyTemplate(t.template, a.isFutureSymbol)), G(), a.chartInitSettings && a.chartInitSettings.interactiveStudy && H(), !a.flipChartMode || t.template || a.chartInitSettings || a.myChartsMode || c.setCurrentFlipChartQuickSettings("P6M"), K(), z(), m.$broadcast("interactiveChartInitialized")
                            }))
                        }(t)
                    }), a.$watch("currentSymbol.symbol", function(t, o) {
                        t !== o && (a.isFutureSymbol = -1 !== [2, 12, 13, 14].indexOf(a.currentSymbol.symbolType), a.isEquitySymbol = -1 !== ["1", "6:CA"].indexOf(a.currentSymbol.symbolTypeSpec), a.batsAvailable = -1 !== [1, 7].indexOf(a.currentSymbol.symbolType) && a.currentSymbol.raw.hasBats, l.setIsFutureSymbol(a.isFutureSymbol), l.setIsEquitySymbol(a.isEquitySymbol), l.setSymbol(t), e.setSymbolData(a.currentSymbol), a.dashboardMode ? J(t, !0) : a.flipChartMode ? j(t).then(function(o) {
                            e.softReset();
                            var n = -1 !== [1, 7].indexOf(e.getSymbolData().symbolType) && e.getSymbolData().raw.hasBats;
                            if (s.isLoggedIn() && n && l.getChartSettings().batsData ? e.setCurrentChartSymbol(l.getSymbol() + ".BZ") : e.setCurrentChartSymbol(l.getSymbol()), e.changeSymbol(t), i.type = null, o && o.flipChartSymbolState) {
                                c.setInitialFlipChartState(o.flipChartSymbolState), c.applyStateAndConfig(o.flipChartSymbolState.state, o.flipChartSymbolState.configuration, {
                                    keepOldAnnotations: !1,
                                    keepNewAnnotations: !0,
                                    keepOldCompare: !1,
                                    keepNewCompare: !0
                                }, !1, !0);
                                var d = c.getFlipChartState();
                                null !== d && null === l.getChartTemplate() && c.applyStateAndConfig(d.state, d.configuration, {
                                    keepOldAnnotations: !0,
                                    keepNewAnnotations: !1,
                                    keepOldCompare: !1,
                                    keepNewCompare: !0
                                }, !1, !0), e.restoreCurrentSymbolPlot()
                            } else c.setInitialFlipChartState(null);
                            a.chartInitSettings && a.chartInitSettings.interactiveStudy && H();
                            var u = c.getCurrentFlipchartTemplate();
                            u ? r.applyTemplate(u, a.isFutureSymbol).then(function() {
                                a.$broadcast("flipChartSymbolChanged"), G()
                            }) : (e.render(), a.$broadcast("flipChartSymbolChanged"), G())
                        }) : (e.setCurrentChartSymbol(t), e.changeSymbol(t).render(), i.type = null))
                    }), a.actionsModal = function() {
                        n.openActionsModal(a.currentSymbol, a.saveChartCallback, a.fullScreen).then(function(e) {
                            switch (e) {
                                case "clear":
                                    a.resetDialog();
                                    break;
                                case "expression":
                                    a.openExpressionsListModal();
                                    break;
                                case "template":
                                    a.openTemplateModal();
                                    break;
                                case "saveTemplate":
                                    a.saveTemplateModal();
                                    break;
                                case "image":
                                    a.saveChartAsImage();
                                    break;
                                case "share":
                                    a.openShareChartModal();
                                    break;
                                case "compare":
                                    a.comparisonModal();
                                    break;
                                case "expand":
                                    D.openInNewWindow(a.currentSymbol);
                                    break;
                                case "premierModal":
                                    a.showPremierModal()
                            }
                        })
                    }, a.saveChartAsImage = function() {
                        var t = e.getSVGForExport();
                        Q(t)
                    }, a.openShareChartModal = function() {
                        n.openShareModal(!0)
                    }, a.resetDialog = function() {
                        n.resetDialog().then(function() {
                            ! function() {
                                l.resetChartGlobalConfig(), a.currentChartSettings = l.getChartGlobalConfig(), e.setCurrentChartSymbol(l.getSymbol()), e.changeSymbol(l.getSymbol()).render(), e.reset();
                                var t = s.isLoggedIn() ? s.getUserData().preferences.interactive_charts_saving_mechanism : null;
                                if (t && "template" === t) {
                                    var i = null;
                                    if (s.isLoggedIn()) {
                                        var n = a.flipChartMode ? "flipcharts_template_interactive" : "interactive_charts_template";
                                        i = s.getUserData().preferences[n]
                                    }
                                    i && "None" !== i ? r.applyTemplate(+i, a.isFutureSymbol).then(function() {
                                        a.currentChartSettings = l.getChartGlobalConfig(), c.save(), a.$broadcast(o.ON_INTERACTIVE_CHART_RESET)
                                    }) : (c.save(), a.$broadcast(o.ON_INTERACTIVE_CHART_RESET))
                                } else c.save(), a.$broadcast(o.ON_INTERACTIVE_CHART_RESET)
                            }()
                        })
                    }, a.showPremierModal = function() {
                        _.showPremier("stream")
                    }, a.openToolsModal = function() {
                        n.openToolsModal()
                    }, a.openExpressionsListModal = function() {
                        n.expressionsListModal(a.fullScreen, a.dashboardMode)
                    }, a.settingsModal = function(e) {
                        n.settingsModal(a.currentSymbol, a.fullScreen, e).then(function() {
                            l.setChartTemplate(null), a.currentChartSettings.template = null, a.currentChartSettings.aggregation = l.getChartAggregation(), a.currentChartSettings.settings = l.getChartSettings(), a.currentChartSettings.range = l.getChartRange(), c.save()
                        })
                    }, a.getCurrentChartHeight = function() {
                        var t = 650;
                        if (a.currentChartSettings && a.currentChartSettings.settings) {
                            var i = .2 * (t = a.currentChartSettings.settings.dimensions.chartHeight);
                            e.getStandaloneStudiesCount() > 2 && (t += i * (e.getStandaloneStudiesCount() - 1))
                        }
                        return t + "px"
                    }, a.comparisonModal = function() {
                        n.comparisonModal()
                    }, a.syncStudyChanges = function(t, i) {
                        if (t) {
                            if (t.remove && void 0 !== t.index && t.index >= 0) e.removeTechnicalStudy(t.index);
                            else if (void 0 !== t.index && t.index >= 0 && !i ? e.updateTechnicalStudy(t.study, t.index).render() : e.addTechnicalStudy(t.study).render(), a.isFutureSymbol && void 0 !== t.isContractVolume) {
                                var r = l.getChartAggregation();
                                r.isContractVolume = t.isContractVolume, l.setChartAggregation(r), e.changeAggregation(r).render();
                                var o = l.getChartRange();
                                if (null !== o.from) {
                                    var n = o.from + " 00:00:00",
                                        s = {
                                            from: new Date(n).getTime()
                                        };
                                    if (o.to) {
                                        var d = o.to + " 23:59:59";
                                        s.to = new Date(d).getTime()
                                    }
                                    e.changeRange(s).render()
                                } else e.changePeriod(l.getChartPeriod()).render()
                            }
                            l.setChartTemplate(null), a.currentChartSettings.template = null, c.save()
                        }
                    }, a.plotToolsModal = function(e) {
                        n.plotToolsModal(e).then(function(e) {
                            e && e.taxonomyModalPromise ? e.taxonomyModalPromise.then(function(e) {
                                try {
                                    e && (e.isClone ? n.studyModal(e.study, e.study.cloneIndex, !0, !0).then(function(e) {
                                        a.syncStudyChanges(e, !0)
                                    }) : a.syncStudyChanges(e, !1))
                                } catch (e) {
                                    C.error({
                                        message: e.message,
                                        delay: 1e4
                                    })
                                }
                            }) : (l.setChartTemplate(null), a.currentChartSettings.template = null, c.save())
                        })
                    }, a.$on(o.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED, function(e, t) {
                        t && !0 === t.updateState && (a.currentChartSettings.template = l.getChartTemplate(), a.currentChartSettings.aggregation = l.getChartAggregation(), a.currentChartSettings.period = l.getChartPeriod(), a.currentChartSettings.range = l.getChartRange(), a.currentChartSettings.settings = l.getChartSettings(), c.save())
                    }), a.$on("chartSettingsChanged", function() {
                        a.currentChartSettings.aggregation = l.getChartAggregation(), a.currentChartSettings.period = l.getChartPeriod(), a.currentChartSettings.range = l.getChartRange(), a.currentChartSettings.settings = l.getChartSettings(), a.chartVisibility.hasData = !0
                    }), a.$on("dashboardTabChanged", function(t, a) {
                        var i = a.symbol !== e.getSymbolData().symbol;
                        J(a.symbol, i)
                    }), a.$on("myChartsCreateNew", function() {
                        R = !0
                    }), a.openTemplateModal = function() {
                        n.templateModal(a.currentChartSettings, a.currentSymbol.symbolType).then(function(e) {
                            e.id ? r.applyTemplate(e.id, a.isFutureSymbol).then(function() {
                                l.updateChartCurrentConfig(a.currentChartSettings), c.save(), m.$broadcast(o.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED)
                            }) : (r.resetTemplate(), l.updateChartCurrentConfig(a.currentChartSettings), c.save(), m.$broadcast(o.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED))
                        })
                    }, a.saveTemplateModal = function() {
                        n.saveTemplateModal()
                    }, a.addToWatchlist = function() {
                        b.addToWatchlist(a.currentSymbol.symbol, a.currentSymbol.symbolName)
                    }, a.getSymbolSector = function(e) {
                        return d.getSector(e)
                    };
                    var Q = function(e) {
                        var t = document.createElement("form"),
                            a = document.createElement("input"),
                            i = document.createElement("input");
                        t.setAttribute("method", "post"), t.setAttribute("action", "/download/interactive-chart/image"), i.setAttribute("type", "hidden"), i.setAttribute("name", "image"), i.setAttribute("value", e), a.setAttribute("value", angular.element('meta[name="csrf-token"]').attr("content")), a.setAttribute("name", "_token"), a.setAttribute("type", "hidden"), t.appendChild(a), t.appendChild(i), document.getElementsByTagName("body")[0].appendChild(t), t.submit(), document.getElementsByTagName("body")[0].removeChild(t)
                    };

                    function X(e, t) {
                        switch (t.plot.type) {
                            case "Study":
                                var i = w.convertStudyFromApi(t.plot);
                                n.studyModal(i, t.plot.index, !0, !1).then(function(e) {
                                    e.isClone ? n.studyModal(i, t.plot.index, !0, !0).then(function(e) {
                                        a.syncStudyChanges(e, !0)
                                    }) : a.syncStudyChanges(e, !1)
                                });
                                break;
                            case "IncomeStatement":
                            case "BalanceSheet":
                                var r = w.convertFundamentalFromApi(t.plot, t.plot.type);
                                n.fundamentalModal(r, t.plot.type, t.plot.index, !0);
                                break;
                            case "Symbol":
                                a.comparisonModal();
                                break;
                            case "Expression":
                                n.expressionModal(a.fullScreen, a.dashboardMode, t.plot, t.plot.index)
                        }
                    }
                    Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_CARDPLOTCLICKED, X), a.$on("$destroy", function() {
                        v.unsubscribeOnChartEvents(["CH_NODATAFORMAINSYMBOL", "CH_ANNOTATIONCHANGED", "CH_PANEHEIGHTSCHANGED", "CH_ANNNEEDSCONTEXTMENU", "CH_PANESREORDERED"]), Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(X), c.resetMode(), e.destroyChart()
                    })
                }],
                template: a("NHqO")
            }
        }
        i.$inject = ["interactiveChartApi", "utils", "interactiveChartFixedBarType", "interactiveChartTemplates", "events", "interactiveChartModals", "authService", "interactiveChartSettings", "interactiveChartStateService", "quotesService", "authCallbacks", "$window", "$rootScope", "interactiveChartStateApi", "localStorageService", "chartVisibility", "watchlistFormModalService", "interactiveChartEventSubscriber", "_", "interactiveChartConverter", "Notification", "interactiveChartInitializationService", "interactiveChartExpressionStorageService", "$q", "interactiveChartExpand", "bcInlineData", "bcModalLoginSrv", "userChartTabService", "dashboardSymbolStorage", "authRouteService", "$location"], e.exports = i
    },
    Xupi: function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = ["$scope", "$window", function(e, t) {
                var a, i;
                this.flipChartSharingUrl = this.linkMp4, this.flipChartSharingTitle = this.title, t.addEventListener("resize", o, !0), e.$on("$destroy", function() {
                    a.dispose(), document.getElementById("bc-videocontent").innerHTML = "", t.removeEventListener("resize", o)
                }), t.config.disableAutoRefreshPage();
                var r = angular.element(document.querySelector(".bc-overlay-modal-wrapper .modal-content"));

                function o() {
                    var e = window.innerHeight + 10 + "px";
                    r.css("min-height", e)
                }
                r.css("min-height", window.innerHeight + 10 + "px"), i = document.getElementById("bc-video-template").innerHTML.replace("%linkMp4%", this.linkMp4), document.getElementById("bc-videocontent").innerHTML = i, a = t.videojs("bc-video", {}, function() {
                    this.play()
                })
            }];
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    hideOverlayModal: "&",
                    linkMp4: "@",
                    title: "@"
                },
                template: a("EpqY"),
                controller: e,
                controllerAs: "$ctrl"
            }
        }
    },
    Xxa5: function(e, t, a) {
        e.exports = a("1H6C")
    },
    Xxsq: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c) {
            var d = ["$scope", function(a) {
                var d = {},
                    u = "",
                    p = "",
                    m = ["timeFrame", "viewName", "view", "moneyness", "futuresOptionsView", "futuresOptionsTime"];
                a.key = a.key || "HighsLows", a.linkTitle = l.customLinkName[a.sector + a.key] || l.customLinkName.default, a.$on("filterChange", function(e, t) {
                    d[t.name] = t.value, "timeFrame" === t.name ? u = t.caption : "view" === t.name && (p = t.caption)
                });

                function h(e) {
                    return e.charAt(0).toUpperCase() + e.slice(1)
                }
                a.setDefaultPage = function() {
                        if (n.isLoggedIn()) {
                            if (a.tabName && (d.tab = a.tabName), n.isLoggedIn()) {
                                var e = a.sector + "Default" + a.key;
                                "stocks" !== a.sector || window.config.currentSymbol || (e += h(window.config.user.market)), t.call(i.API_URL + "/preferences", r.PUT, {
                                    name: e,
                                    value: JSON.stringify(d)
                                }).then(function() {
                                    o.success(function() {
                                        var e = "",
                                            t = "";
                                        a.tabName && (t = "forex" === a.sector ? l.forexTabName[a.tabName] : h(a.tabName));
                                        e = l.customSuccessMessage[a.sector + a.key] ? (e = (e = (e = l.customSuccessMessage[a.sector + a.key]).replace("%timeframe%", u)).replace("%tab%", t)).replace("%view%", p) : l.sectorName[a.sector] + " New " + u + " " + t + " page has been saved as your default Highs/Lows page.";
                                        return e
                                    }())
                                })
                            }
                        } else {
                            var c = l.refCodes[a.sector + a.key] || l.refCodes.default;
                            s.goToLogin(c)
                        }
                    },
                    function() {
                        if (n.isLoggedIn() && !e.getFilterCollection().length && "summary" !== a.tabName) {
                            var t = n.getUserData().preferences,
                                i = !1;
                            (i = "stocks" !== a.sector || window.config.currentSymbol ? t[a.sector + "Default" + a.key] : t[a.sector + "Default" + a.key + h(window.config.user.market)]) && (i = JSON.parse(i), m.forEach(function(e) {
                                i[e] && c.search(e, i[e])
                            }), "stocks" === a.sector && c.search("screener", i.screener))
                        }
                    }()
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    key: "@?",
                    tabName: "@?",
                    sector: "@"
                },
                template: a("Lnyf"),
                controller: d
            }
        }
        i.$inject = ["barchartDatatableFilterUrl", "dataProvider", "apiConfig", "httpVerbs", "Notification", "authService", "authRouteService", "preferencesSettings", "$location"], e.exports = i
    },
    "Y+ID": function(e, t, a) {
        "use strict";
        e.exports = {
            quickChartPeriods: [{
                period: "P1D",
                aggregation: {
                    unit: "Intraday",
                    size: 5,
                    spec: "None"
                },
                label: {
                    desktop: "1D",
                    mobile: "1D"
                }
            }, {
                period: "P5D",
                aggregation: {
                    unit: "Intraday",
                    size: 30,
                    spec: "None"
                },
                label: {
                    desktop: "5D",
                    mobile: "5D"
                }
            }, {
                period: "P1M",
                aggregation: {
                    unit: "Intraday",
                    size: 60,
                    spec: "None"
                },
                label: {
                    desktop: "1M",
                    mobile: "1M"
                }
            }, {
                period: "P3M",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "3M",
                    mobile: "3M"
                }
            }, {
                period: "P6M",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "6M",
                    mobile: "6M"
                }
            }, {
                period: "P1Y",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "1Y",
                    mobile: "1Y"
                }
            }, {
                period: "P5Y",
                aggregation: {
                    unit: "Week",
                    size: 1,
                    spec: "Nearest"
                },
                label: {
                    desktop: "5Y",
                    mobile: "5Y"
                }
            }, {
                period: "P20Y",
                aggregation: {
                    unit: "Month",
                    size: 1,
                    spec: "Nearest"
                },
                label: {
                    desktop: "20Y",
                    mobile: "20Y"
                }
            }]
        }
    },
    Y1RX: function(e, t, a) {
        "use strict";
        e.exports = function() {
            this.applyDailyStandardDeviation = function(e) {
                "standardDeviation" === e && (this.detailsFields = ["lastPrice", "priceChange", "highPrice", "lowPrice", "tradeTime"]), "dailyStandardDeviation" === e && (this.detailsFields = ["dailyLastPrice", "dailyPriceChange", "dailyHighPrice", "dailyLowPrice", "dailyDate1dAgo"])
            }
        }
    },
    Y53E: function(e, t) {
        e.exports = '<div class=contact-block> <h2 class=header>Advertise with Barchart</h2> <div data-ng-hide=success> <p>With approximately <span class=bold>20M monthly page views</span>, <span class=bold>1M site visitors per month</span>, and <span class=bold>250,000 users subscribing to our Newsletters</span>, Barchart offers advertisers access to active traders, casual investors and professionals.</p> <p>Please send inquiries below or <a href=https://orders.barchart.com/ target=_blank>click this link</a> to buy ads direct via our automated platform.</p> <form novalidate name=advForm class="bc-form bc-login-form" data-ng-submit=submit(advForm)> <div class=form-group> <input type=text class="form-input form-field-login" placeholder="Full Name (optional)" name=name data-ng-model=user.name> </div> <div class=form-group data-ng-class="{\'error\':advForm.email.$invalid && advForm.$submitted}"> <input type=email class="form-input form-field-login" placeholder=Email name=email data-ng-class="{\'remove-chrome-highlight error-input\':advForm.email.$invalid && advForm.$submitted}" data-bc-ng-email-validation required data-ng-model=user.email> </div> <div class=form-group> <input type=text class="form-input form-field-login" placeholder="Company (optional)" name=company data-ng-model=user.company> </div> <div class="form-group check-list"> <span>I\'m interested in</span> <div class=input-checkbox> <input id=display_advert name=display_advert data-ng-model=user.interest.display data-ng-required="!user.interest.display && !user.interest.email" type=checkbox> <label for=display_advert> <span class=bc-glyph-check data-ng-class="{\'error-input\':advForm.display_advert.$invalid && advForm.$submitted}"></span> Display Advertising </label> </div> <div class=input-checkbox> <input id=email_list_rental name=interest[email] data-ng-required="!user.interest.display && !user.interest.email" data-ng-model=user.interest.email type=checkbox> <label for=email_list_rental> <span class=bc-glyph-check></span> Email List Rental </label> </div> </div> <div class=form-group> <textarea class=contact-textarea data-ng-class="{\'remove-chrome-highlight\':advForm.message.$invalid && advForm.$submitted}" name=message data-ng-model=user.message placeholder="Message (optional)"></textarea> </div> <div data-ng-show=!isLoggedIn id=g-recapcha-contact class=g-recaptcha></div> <errors-component class=error-block data-ng-show=hasErrors data-form=advForm data-errors=errors></errors-component> <button type=submit class="form-field-submit create-account-btn">Submit</button> </form> </div> <div data-ng-show=success class=success> <p class=forgot-text>Thank you for your interest in advertising with us!</p> <p class=forgot-text>Your request will be reviewed within the next business day and a response made to the email address provided.</p> <button type=button data-ng-click=close() class="form-field-submit create-account-btn">ok</button> </div> </div> '
    },
    Y7jF: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            this.convertStudyFromApi = function(a) {
                var i = t.getTaxonomies(),
                    r = angular.copy(e.find(i.studies, {
                        id: a.studyId ? a.studyId : a.id
                    }));
                return (a.placement || a.defaults.placement) && (r.defaults.placement = a.placement || a.defaults.placement), void 0 !== a.isMainWindow && a.isMainWindow && (r.meta.overlay = a.isMainWindow && "overlay" === r.defaults.placement), !!r && (a.defaults && (r.defaults.inputs = a.defaults.inputs ? a.defaults.inputs : r.defaults.inputs, r.defaults.curves = a.defaults.curves ? a.defaults.curves : r.defaults.curves, r.defaults.levels = a.defaults.levels ? a.defaults.levels : r.defaults.levels, r.defaults.bands = a.defaults.bands ? a.defaults.bands : r.defaults.bands), r.defaults.inputs = a.inputs ? a.inputs : r.defaults.inputs, r.defaults.curves = a.curves ? a.curves : r.defaults.curves, r.defaults.levels = a.levels && a.levels.length ? a.levels : r.defaults.levels, r.defaults.bands = a.bands && a.bands.length ? a.bands : r.defaults.bands, r)
            }, this.convertFundamentalFromApi = function(a, i) {
                var r = t.getTaxonomies(),
                    o = null;
                return "BalanceSheet" === i && (o = angular.copy(e.find(r.balanceSheets, {
                    id: a.fundamentalId
                }))), "IncomeStatement" === i && (o = angular.copy(e.find(r.incomeStatements, {
                    id: a.fundamentalId
                }))), !!o && (o.curves = a.curves, o.frequency = a.frequency, o)
            }, this.convertStudyToApi = function(e) {
                var t = angular.copy(e);
                return {
                    id: t.item.id,
                    inputs: t.item.defaults.inputs,
                    curves: t.item.defaults.curves
                }
            }, this.convertFundamentalToApi = function(e) {
                var t = angular.copy(e);
                return {
                    type: t.item.type,
                    id: t.item.id,
                    frequency: t.item.frequency,
                    curves: t.item.curves
                }
            }, this.convertStudyLevelsToApi = function(e, t, i, r) {
                e.levels = angular.copy(t);
                var o = null,
                    n = null,
                    s = null;
                if (3 === e.levels.length && (e.levels.forEach(function(e) {
                        e.name && "oversold" === e.name.toLowerCase() ? n = e : e.name && "overbought" === e.name.toLowerCase() ? s = e : o = e
                    }), o && n && s && (o.value = (n.value + s.value) / 2)), !e.bands && 1 === e.curves.length) {
                    if ("DEMARK" === e.id) return 0 === e.levels[0].line.color.indexOf("rgba") && (e.levels[0].line.color = a.rgbaToHex(e.levels[0].line.color).color), 0 === e.levels[1].line.color.indexOf("rgba") && (e.levels[1].line.color = a.rgbaToHex(e.levels[1].line.color).color), e.levels[0].line.color = a.hexToRgba(e.levels[0].line.color, i), e.levels[1].line.color = a.hexToRgba(e.levels[1].line.color, r), e;
                    3 === e.levels.length ? (e.curves[0].zones[0].value = n.value, e.curves[0].zones[1].value = s.value, n.line.color = e.curves[0].colors[0], e.curves[0].colors[0] = a.hexToRgba(e.curves[0].colors[0], r)) : 2 === e.levels.length && (e.curves[0].zones[0].value = e.levels[0].value, e.curves[0].zones[1].value = e.levels[1].value, e.levels[0].line.color = e.curves[0].colors[0], e.curves[0].colors[0] = a.hexToRgba(e.curves[0].colors[0], r)), 3 === e.levels.length ? (s.line.color = e.curves[0].colors[3], e.curves[0].colors[3] = a.hexToRgba(e.curves[0].colors[3], i)) : (e.levels[1].line.color = e.curves[0].colors[3], e.curves[0].colors[3] = a.hexToRgba(e.curves[0].colors[3], i))
                }
                return e
            }
        }
        i.$inject = ["_", "bcMarketDataChart", "utils"], e.exports = i
    },
    Y91r: function(e, t, a) {
        "use strict";
        angular.module("Footer", []).directive("backTop", a("uU7e")), e.exports = {
            enable: !0,
            name: "Footer"
        }
    },
    Y9v9: function(e, t) {
        e.exports = '<div class="bc-expiration filter datepicker-wrapper" data-ng-cloak> <label>Exclude Expiring After: </label> <div class=bc-datepicker-item data-ng-click=showPremierModal(); data-ng-show=!isMobile> <input type=text autocomplete=off name=expiration class=bc-datepicker-control data-ng-model=expirationDate data-ng-class="{\'not-empty\': expirationDate}" data-ng-change=applyFiter() placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-min-date="[[ minDate ]]" data-ng-disabled=disabled data-bs-datepicker> <i class="bc-glyph-calendar calendar-icon"></i> </div> <div class=bc-datepicker-item data-ng-click=showPremierModal(); data-ng-show=isMobile> <input type=date autocomplete=off name=expiration class=bc-datepicker-control data-ng-model=expirationDateM data-ng-class="{\'not-empty\': expirationDateM}" data-ng-change=applyFiterMobile() data-ng-disabled=disabled /> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div>'
    },
    YErx: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "AE",
                replace: !0,
                scope: !0,
                bindToController: {
                    cellKey: "@",
                    cellValue: "@",
                    sortData: "=",
                    content: "="
                },
                controller: ["barchartTableSortService", function(e) {
                    var t = this;

                    function a() {
                        Array.isArray(t.content) ? t.content.forEach(function(e) {
                            e.data = i(e.data)
                        }) : t.content.data = i(t.content.data)
                    }

                    function i(a) {
                        return e.sort(a, t.sortData.column, t.sortData.dir)
                    }
                    t.getSortClass = function() {
                        var e = "";
                        return t.sortData.column === t.cellKey && (e = "arrow", "asc" === t.sortData.dir ? e += " sort-up" : e += " sort-down"), e
                    }, t.sort = function() {
                        t.sortData.column !== t.cellKey ? (t.sortData.column = t.cellKey, t.sortData.dir = "asc") : "asc" === t.sortData.dir ? t.sortData.dir = "desc" : t.sortData.dir = "asc", a()
                    }, t.sortData.column && t.sortData.column === t.cellKey && a()
                }],
                controllerAs: "barchartTableHeaderCellSortCtrl",
                template: a("vBKH"),
                link: function(e, t, a) {}
            }
        }
        i.$inject = [], e.exports = i
    },
    YFPR: function(e, t) {
        e.exports = '<div class=bc-interactive-chart-hamburger-drop-down title="Chart Menu"> <bc-dropdown-flexible data-label-font="\'bc-glyph-bars\'" data-dropdown-id=bc-interactive-chart-hamburger-template class="js-bc-interactive-chart-dropdown-hamburger bc-interactive-chart-dropdown-hamburger"> <div class=tools-dropdown-content> <div class=interactive-chart-actions> <div class=modal-header> Chart Menu <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.hide()></i> </div> <ul class=chart-actions> <li class=show-for-small-down data-ng-click=$ctrl.clearChart()> <a>Clear Chart</a> </li> <li data-ng-click=$ctrl.comparisonModal()> <a>Comparison Chart</a> </li> <li data-ng-click=$ctrl.openExpressionsListModal()> <a>Expressions & Spreads</a> </li> <li class=show-for-small-down data-ng-click=$ctrl.openApplyTemplateModal() data-bc-modal-login=icharts data-remove-touch-start=true data-stay-on-page=true> <a>Apply a Template</a> </li> <li class=show-for-small-down data-ng-click=$ctrl.saveTemplateModal() data-bc-modal-login=icharts data-remove-touch-start=true data-stay-on-page=true> <a>Save as Template</a> </li> <li data-bc-modal-login=alerts data-remove-touch-start=true data-bc-show-alerts-modal data-symbol="[[ $ctrl.symbol | json ]]" data-ng-click=$ctrl.hide()> <a>Set Alert</a> </li> <li data-ng-if=::$ctrl.isAuthenticated data-remove-touch-start=true data-ng-click=$ctrl.addToWatchlist()> <a>Add to Watchlist</a> </li> <li data-ng-if=::!$ctrl.isAuthenticated data-bc-modal-login=watchlist data-remove-touch-start=true data-stay-on-page=true> <a>Add to Watchlist</a> </li> <li data-ng-click=$ctrl.saveToMyCharts() data-remove-touch-start=true> <a>Save to My Charts</a> </li> <li data-bc-symbol-widgets-modal data-symbol-data=$ctrl.symbol data-remove-touch-start=true title="Additional Symbol Information"> <a>More Data</a> </li> <li data-ng-click=$ctrl.hide()> <chart-share data-type=interactive data-use-default-page-link=true data-label="Social Share"></chart-share> </li> <li data-ng-click=$ctrl.downloadChartData()> <a>Download Chart Data</a> </li> <li data-ng-click=$ctrl.saveChartAsImage()> <a>Save Chart as Image (.png)</a> </li> <li data-ng-show="!$ctrl.flipChartMode && !$ctrl.dashboardMode && !$ctrl.isPremier && !$ctrl.isAuthenticated" data-bc-modal-login=stream> <a>Auto-Update Chart</a> </li> </ul> </div> </div> </bc-dropdown-flexible> </div> '
    },
    "YFV/": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o = {
                    success: function(e, t, a, i) {},
                    error: function(e, t, a, i) {
                        404 === t && console.error("Page not found")
                    }
                },
                n = ["modules/content", "watchlist", "portfolio", "chart-templates", "eod-reports", "screeners", "preferences", "views", "user", "mailing-lists", "users", "interactive-chart-states", "interactive-chart-templates", "interactive-chart-preferences", "image/convert", "share/chart/mail", "get-subscription-info", "charts", "logout", "newsletter/auth/link", "interactive-chart/export/csv", "delete-user"];
            return {
                call: function(s, l, c, d) {
                    var u = t.defer();
                    (d = d || {}).headers = d.headers || {};
                    try {
                        var p;
                        n.forEach(function(e) {
                            var t = s.indexOf(i.API_URL + "/" + e),
                                a = s.indexOf(e);
                            if (-1 !== a && (d.headers["X-CSRF-TOKEN"] = r.find('meta[name="csrf-token"]').attr("content"), 0 === t || 0 === a)) throw new Error
                        }), i.API_HOST && (p = [i.API_HOST, i.API_EXTERNAL_PREFIX, i.API_EXTERNAL_VERSION].filter(function(e) {
                            return e
                        }).join("/"), s = s.replace(i.API_URL, p))
                    } catch (e) {}
                    return d.url = s, d.withCredentials = !1, d.method = l || a.GET, d[d.method === a.GET ? "params" : "data"] = c, d.headers.Accept = "application/json", d.headers["Content-Type"] = "application/json", e(d).success(function(e, t, a, i) {
                        o.success && o.success.apply(this, arguments), u && u.resolve(e)
                    }).error(function(e, t, a, i) {
                        o.error && o.error.apply(this, arguments), u && u.reject(e)
                    }), u.promise
                }
            }
        }
        i.$inject = ["$http", "$q", "httpVerbs", "apiConfig", "$document"], e.exports = i
    },
    YGab: function(e, t, a) {
        "use strict";
        var i = "AnalystRatingsAndEarningsEstimates";
        angular.module(i, []).directive("analystRatingPie", a("qqGh"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    YRpp: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l) {
            var c, d, u = [];

            function p() {
                u.display = "summary" === e.report ? "cotData" : "netPositions", "summary" === e.report ? (delete u.datePage, delete u.dateLimit) : (u.datePage = 1, u.dateLimit = 6)
            }

            function m() {
                u.type = e.type, u.datePage = e.page, e.loading = !0, a.getData(u).then(function(t) {
                    c = t.historyTotal, e.loading = !1, e.data = t.data, e.meta = t.meta.field.name,
                        function() {
                            var t = angular.copy(u);
                            t.datePage = 1, t.exclude = ["symbol", "category", "isFlip", "is52wLow", "is52wHigh"], "cotData" !== u.display ? t.dateLimit = 5e3 : t.exclude.push("date");
                            t.method = "commitment-of-traders", i.$broadcast("setDownloadConfig", t), i.$broadcast("paginationEnabled"), i.$broadcast("filterChange", {
                                name: "reportView",
                                caption: d[e.type]
                            })
                        }(), i.lastUpdate = t.meta.lastUpdate, i.cotView = d[e.type], "cotData" === u.display && Object.keys(e.data).forEach(function(t) {
                            e.data[t].symbol ? e.data[t].chart = h(e.data[t]) : e.data[t].forEach(function(e) {
                                e.chart = h(e)
                            })
                        }), e.loading = !1
                })
            }

            function h(e) {
                var t, a, i, r = {};
                t = "number" != typeof e.net52wHigh ? parseFloat(e.net52wHigh.replace(/,/g, "")) : e.net52wHigh, a = "number" != typeof e.net52wLow ? parseFloat(e.net52wLow.replace(/,/g, "")) : e.net52wLow, i = "number" != typeof e.net ? parseFloat(e.net.replace(/,/g, "")) : e.net;
                var o = t - a;
                return r.mark = 0, r.width = 0 === o ? 100 : (i - a) / o * 100, r
            }
            e.loading = !0, e.page = t.search().page ? parseInt(t.search().page) : 1, e.report = t.search().report ? t.search().report : "detailed", e.init = function(a, i, r) {
                u = JSON.parse(a), d = JSON.parse(i), e.study = r, e.type = t.search().view ? t.search().view : u.type, p(), m()
            }, e.changeType = function(a) {
                t.search("view", a), t.search().page && (t.search("page", null), e.page = 1), m()
            }, e.changeReportType = function(a) {
                t.search("report", a), t.search().page && (t.search("page", null), e.page = 1), p(), m()
            }, e.changePage = function(a, i) {
                !i && e.isLastPage() || (t.search("page", a), e.page = a, m())
            }, e.isLastPage = function() {
                return e.page * u.dateLimit > c - 1
            }, e.getColor = function(e) {
                return e ? e.is52wHigh ? "bc-cot-reports__legend-high" : e.is52wLow ? "bc-cot-reports__legend-low" : e.isNewPositive ? "bc-cot-reports__legend-positive" : e.isNewNegative ? "bc-cot-reports__legend-negative" : void 0 : ""
            }, e.setColor = function(e) {
                return n.setColor(e)
            }, e.getLink = function(e, t) {
                return 10 === t ? n.route(window.config.routes["quotes.sectors"], {
                    sector: "forex",
                    symbol: e
                }) : n.route(window.config.routes["quotes.allFutures"], {
                    symbol: e
                })
            }, e.showFlipcharts = function(t) {
                var a = t || !1,
                    r = [];
                Object.keys(e.data).forEach(function(t) {
                    e.data[t].symbol ? (a || (a = e.data[t].symbol), r[e.data[t].symbol] = {
                        symbolName: e.data[t].symbolName
                    }) : e.data[t].forEach(function(e) {
                        a || (a = e.symbol), r[e.symbol] = {
                            symbolName: e.symbolName
                        }
                    })
                }), i.$broadcast("bc-modal-show-cot-chart", {
                    currentSymbol: a,
                    symbols: r,
                    study: e.study
                })
            }
        }
        i.$inject = ["$scope", "$location", "cotReportsApiService", "$rootScope", "authRouteService", "authService", "utils", "BarchartMediaOverlayApiConfig", "technicalChartPeriodSettings"], e.exports = i
    },
    YTlT: function(e, t, a) {
        "use strict";

        function i(e) {
            e.subscribed = !1, e.signUp = function() {
                window.open("http://trygbe.com?email=" + e.email, "_blank")
            }
        }
        i.$inject = ["$scope"], e.exports = i
    },
    YV9C: function(e, t, a) {
        "use strict";
        var i = "BarchartMediaOverlay";
        angular.module(i, []).controller(i + ".barchartMediaOverlayCtrl", a("jaOF")).directive("mediaOverlayNews", a("8KPT")).directive("mediaOverlayFlipcharts", a("bJoJ")).directive("mediaOverlayCotChart", a("k9u6")).directive("mediaOverlayInteractiveCotChart", a("3cKZ")).directive("mediaOverlayVideo", a("Xupi")).directive("mediaOverlayEducation", a("3BS9")).directive("mediaOverlayClassicChart", a("/VwW")).directive("mediaOverlayMyChartFlipchart", a("ouFJ")).directive("barchartSocialShare", a("sV5u")).factory("BarchartMediaOverlayApiFactory", a("FT1v")).factory("BarchartMediaOverlayApiConfig", a("tK7W"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    YVt8: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.clearSettingsClose = function() {
                t.dismiss()
            }, e.applyClearSettings = function() {
                t.close("OK")
            }
        }
        i.$inject = ["$scope", "$modalInstance"], e.exports = i
    },
    YZ3k: function(e, t) {
        e.exports = '<div> <a target=_self data-ng-href="/[[ ::DetailedQuoteCtrl.quotesService.getSector(DetailedQuoteCtrl.currentSymbol.symbolType) ]]/quotes/[[ ::DetailedQuoteCtrl.currentSymbol.symbol ]]/performance"> <div class="module detailed-quotes-module"> <div class=module-table> <div class="module-row header"> <div> <h4>Detailed Quote</h4> </div> <div><span>Last</span></div> <div><span>CHG</span></div> <div><span>%CHG</span></div> </div> <div class=module-row data-ng-repeat="item in ::DetailedQuoteCtrl.data track by $index"> <div> [[ ::item.date ]]</div> <div> [[ ::item.lastPrice ]]</div> <div data-ng-class=::DetailedQuoteCtrl.utils.setColor(item.priceChange)> [[ ::item.priceChange ]]</div> <div data-ng-class=::DetailedQuoteCtrl.utils.setColor(item.percentChange)> [[ ::item.percentChange ]]</div> </div> </div> </div> </a> </div>'
    },
    YZNW: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            e.formData = a.getChartSettings(), e.expirationDays = r.createSelectListOptions(0, 25, 1, !1, {
                singular: "Day",
                plural: "Days"
            });
            var o = a.getIsFutureSymbol(),
                n = a.getIsEquityEtfMutual(),
                s = a.getChartAggregation();
            e.cancel = function() {
                t.dismiss()
            }, e.apply = function() {
                var r = a.getChartGlobalConfig();
                if (e.formData.contractRoll !== r.settings.contractRoll || "expiration" === e.formData.contractRoll && e.formData.daysToExpiration !== r.settings.daysToExpiration) {
                    var l = {
                        dividendsAdjust: e.formData.dividendsAdjust,
                        backAdjust: e.formData.backAdjust
                    };
                    n && (l.spec = e.formData.extendedHours ? "FormT" : "None"), o && (l.spec = s.spec, l.contractRoll = e.formData.contractRoll, "expiration" === e.formData.contractRoll && (l.daysToExpiration = e.formData.daysToExpiration)), a.resetChartRange(), i.changeAggregation(l), i.render(), a.setChartSettings(e.formData), a.setChartAggregation(s)
                }
                t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "interactiveChartSettings", "interactiveChartApi", "utils"], e.exports = i
    },
    Yg4J: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                scope: {
                    ref: "=",
                    isPage: "=",
                    instance: "="
                },
                replace: !0,
                link: function(a) {
                    a.showLoginButton = !1, a.close = function() {
                        a.instance.dismiss()
                    }, a.goToLogin = function() {
                        r.goToLogin(a.ref)
                    }, a.premierLink = e.config.routes["my.barchartPremier"] + "?ref=" + a.ref, t.hasOwnProperty(a.ref) && (a.header = t[a.ref].header, a.content = t[a.ref].content), i.isLoggedIn() || (a.showLoginButton = !0)
                },
                template: a("O6uj")
            }
        }
        i.$inject = ["$window", "bcLoginPremierRef", "authService", "authRouteService"], e.exports = i
    },
    Ym56: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                scope: {
                    namespace: "=",
                    module: "=",
                    secondSubsLevel: "="
                },
                link: function(a, r, o) {
                    a.secondSubsLevel = a.secondSubsLevel || !1, !i.isLoggedIn() || a.secondSubsLevel && 2 !== i.getUserData().subscription || t.getModule({
                        namespace: a.namespace,
                        module: a.module
                    }).then(function(t) {
                        var i = e(t)(a);
                        r.append(i)
                    })
                },
                template: a("C2OI")
            }
        }
        i.$inject = ["$compile", "bcModuleOverAuthApiFactory", "authService"], e.exports = i
    },
    YnPF: function(e, t, a) {
        "use strict";
        e.exports = [{
            value: "F",
            label: "F - Jan"
        }, {
            value: "G",
            label: "G - Feb"
        }, {
            value: "H",
            label: "H - Mar"
        }, {
            value: "J",
            label: "J - Apr"
        }, {
            value: "K",
            label: "K - May"
        }, {
            value: "M",
            label: "M - Jun"
        }, {
            value: "N",
            label: "N - Jul"
        }, {
            value: "Q",
            label: "Q - Aug"
        }, {
            value: "U",
            label: "U - Sep"
        }, {
            value: "V",
            label: "V - Oct"
        }, {
            value: "X",
            label: "X - Nov"
        }, {
            value: "Z",
            label: "Z - Dec"
        }, {
            value: "Y",
            label: "Y - Cash"
        }]
    },
    Yoh4: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                link: function(a) {
                    a.hiddenMenu = e.getParameter("hiddenMenu"), a.toggleMenu = function() {
                        a.hiddenMenu = !a.hiddenMenu, e.updateParameter("hiddenMenu", a.hiddenMenu), t.$broadcast("menuVisibilityChanged", a.hiddenMenu)
                    }, a.$on("dashboardMenuOpened", function() {
                        a.hiddenMenu && (a.hiddenMenu = !1, e.updateParameter("hiddenMenu", a.hiddenMenu))
                    })
                },
                template: a("vzS2")
            }
        }
        i.$inject = ["dashboardSettingsService", "$rootScope"], e.exports = i
    },
    "YpC/": function(e, t, a) {
        "use strict";
        var i = "MostRecentStories";
        angular.module(i, []).controller(i + ".newsCtrl", a("UCyu")).factory("newsFactory", a("ZO/H"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    Ywcj: function(e, t) {
        e.exports = '<div> <a target=_self data-ng-href="/[[ ::OverviewCtrl.quotesService.getSector(OverviewCtrl.currentSymbol.symbolType) ]]/quotes/[[ ::OverviewCtrl.currentSymbol.symbol ]]"> <div class="module overview-module"> <h4 data-ng-if="::OverviewCtrl.data.contractName && OverviewCtrl.data.contractName !== \'N/A\'">[[ ::OverviewCtrl.data.contractName | limitTo : 35 ]] </h4> <h4 data-ng-if="::!OverviewCtrl.data.contractName || OverviewCtrl.data.contractName === \'N/A\'">[[ ::OverviewCtrl.data.symbolName | limitTo : 35 ]]</h4> <div class=description> <div data-ng-repeat="(key, value) in ::OverviewCtrl.meta track by $index" data-ng-class-odd="\'odd\'" data-ng-if="::$index < 6"> <span>[[ ::value ]]</span><span data-ng-class=::OverviewCtrl.setColor(OverviewCtrl.data[key])>[[ ::OverviewCtrl.data[key] ]]</span> </div> </div> <div class=row> <div class="columns small-3"> 52Wk Range </div> <div class="columns small-9 range-block"> <barchart-row-chart data-approach=::OverviewCtrl.percent></barchart-row-chart> </div> <div class=row> <div class="columns small-4"> [[ ::OverviewCtrl.low ]] </div> <div class="columns small-4 last-pricely-block"> [[ ::OverviewCtrl.high ]] </div> </div> </div> </div> </a> </div>'
    },
    "Z+hj": function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-premier__form-modal"> <div class=form-close-wrapper> <i data-ng-click=closeModal() class="bc-glyph-times form-close"></i> </div> <form class=bc-form name=editName novalidate> <div class=input-inner-wrapper> <label for=premier_fname>First Name:</label> <input id=premier_fname type=text class=rounded data-ng-model=contactData.first_name /> </div> <div class=input-inner-wrapper> <label for=premier_lname>Last Name:</label> <input id=premier_lname type=text class=rounded data-ng-model=contactData.last_name /> </div> <div class=form-buttons> <a class="bc-button grey save" data-ng-click=closeModal()>Cancel</a> <a class="bc-button light-blue save" data-ng-click=saveModalData()>Save</a> </div> </form> </div>'
    },
    Z548: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    conditions: "=",
                    alertModel: "="
                },
                link: function(o, n, s) {
                    var l = t.properties.filter(function(e) {
                        return "symbol" === e.target.type && "equity" === e.target.description
                    });
                    o.popularAlerts = a("RHGn"), o.popularAlert = null, o.hidePopularAlert = !!o.popularAlert, o.setFocusInNotes = !r.isNotesFocused(), o.frequency = "schedule" === o.alertModel.alert_behavior ? "schedule" : "intraday", o.autoReset = o.alertModel.automatic_reset ? "1" : "0", o.conditionIsRequired = !0, o.alertModel.alert_id && (o.hidePopularAlert = !0, o.conditionIsRequired = !1);
                    var c = null;

                    function d() {
                        null !== c && (o.conditions.splice(c, 1), c = null), 0 === o.conditions.length && o.conditions.push(new e.AlertConditionModel)
                    }
                    o.shouldShowPopularAlert = function(e) {
                        0 === e && 1 === o.conditions.length && (o.hidePopularAlert = !1, o.popularAlert = null, d())
                    }, o.shouldHidePopularAlert = function(e) {
                        o.hidePopularAlert = !0
                    }, o.applyPopularAlert = function() {
                        if (d(), null === o.popularAlert) return !1;
                        var t = new e.AlertConditionModel;
                        i.merge(t, o.popularAlert.condition), t.popular = !0, 1 !== o.conditions.length || o.conditions[0].property_id || null !== o.conditions[0].operator.operand || o.conditions.splice(0), o.conditions[0] = t, c = o.conditions.indexOf(t), o.hidePopularAlert = !!o.popularAlert
                    };
                    var u = i.groupBy(l, "group");
                    u.hasOwnProperty("News") && delete u.News, o.properties = u, o.operators = i.indexBy(t.operators, "operator_id"), o.addCondition = function() {
                        var t = new e.AlertConditionModel;
                        o.conditions.push(t), o.conditions.length > 1 && (o.conditionIsRequired = !1)
                    }, o.removeCondition = function(e) {
                        o.conditions.splice(e, 1), 1 === o.conditions.length && (o.conditionIsRequired = !0), 0 === o.conditions.length && (o.hidePopularAlert = !1, o.conditionIsRequired = !0, o.addCondition())
                    }, o.changeFrequency = function() {
                        "intraday" === o.frequency && (o.alertModel.alert_behavior = "terminate", o.alertModel.schedules = void 0), "schedule" === o.frequency && (o.alertModel.alert_behavior = "schedule", o.alertModel.schedules = [{
                            time: "16:30",
                            day: "Monday",
                            timezone: "America/Chicago"
                        }, {
                            time: "16:30",
                            day: "Tuesday",
                            timezone: "America/Chicago"
                        }, {
                            time: "16:30",
                            day: "Wednesday",
                            timezone: "America/Chicago"
                        }, {
                            time: "16:30",
                            day: "Thursday",
                            timezone: "America/Chicago"
                        }, {
                            time: "16:30",
                            day: "Friday",
                            timezone: "America/Chicago"
                        }])
                    }, o.changeAutoReset = function() {
                        o.alertModel.automatic_reset = !!+o.autoReset
                    }
                },
                template: a("3wU/")
            }
        }
        i.$inject = ["alertModelFactory", "alertProperties", "_", "alertManagerService"], e.exports = i
    },
    Z6tb: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    lineWidthModel: "="
                },
                link: function(e, t, a) {
                    e.options = [{
                        label: "S",
                        width: 1
                    }, {
                        label: "M",
                        width: 2
                    }, {
                        label: "L",
                        width: 3
                    }], e.setLineWidth = function(t) {
                        e.lineWidthModel = t
                    }
                },
                template: a("7F6x")
            }
        }
        i.$inject = [], e.exports = i
    },
    Z9Am: function(e, t) {
        e.exports = '<div class="bc-portfolio-visualization-investment-weights chart-wrapper"> <highchart data-config=config></highchart> </div>'
    },
    ZBxF: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d) {
            var u, p, m = !0,
                h = 1e3 * r.config.loginModalTiming.dashboardPage.first,
                g = 1e3 * r.config.loginModalTiming.dashboardPage.every;
            if (e.isPremier = i.isLoggedIn() && i.getUserData().is_premier, e.isPremier && c.getGrid().then(function(e) {
                    if (e && e.data && e.data.length > 0) {
                        var t = JSON.parse(e.data[0].value);
                        d.setChartSettings(t.configuration), d.setState(JSON.stringify(t.state))
                    }
                }), e.isVisible = !0, !i.isLoggedIn()) {
                l(f, h);
                ! function e() {
                    u && l.cancel(u), u = l(function() {
                        f(), e()
                    }, g)
                }()
            }

            function f() {
                o.goToLogin("dashboard", !0)
            }
            t.showDropdown = !1;
            var b = n.isTabletOnly();
            e.notMobile = !n.isMobile();
            var v, y, w = 305,
                C = a.getParameter("horizontalSplit") || [80, 20];
            if (v ? C = v.getSizes() : b && (y = document.getElementsByTagName("body")[0].offsetWidth) * C[1] / 100 < w && (C[1] = Math.round(100 * w / y), C[0] = 100 - C[1]), e.hiddenMenu = !0, r.addEventListener("resize", k, !0), r.addEventListener("orientationchange", k, !0), k(), e.initProperties = function(e, t) {
                    a.toggleMyCharts(e), a.toggleGridView(t)
                }, e.$on("menuVisibilityChanged", function(t, i) {
                    i ? v.collapse(1) : (b ? v.setSizes(a.getParameter("horizontalSplit") || [60, 40]) : v.setSizes(a.getParameter("horizontalSplit") || [80, 20]), k()), e.hiddenMenu = i
                }), e.$evalAsync(function() {
                    (v = Split(["#bc-dashboard__grid-cell-1", "#bc-dashboard__grid-cell-2"], {
                        sizes: C,
                        minSize: [470, w],
                        gutterSize: 9,
                        onDrag: k,
                        onDragEnd: function() {
                            a.updateParameter("horizontalSplit", v.getSizes())
                        }
                    })).collapse(1), e.horizontalSplit = v, m = !1;
                    var i = a.getParameter("lastSymbol");
                    s.validateSymbol(i).then(function(e) {
                        if (!e.errors) {
                            var a = e.data[0];
                            t.$broadcast("chartCurrentSymbolChanged", a.symbol), t.$broadcast("dashboardCurrentSymbolChanged", e.data[0])
                        }
                    }).catch(function(e) {
                        console.log("[Dashboard Ctrl]: interactiveChartValidation.validateSymbol got error:", e)
                    }), document.querySelector(".js-bc-dashboard_content .gutter.gutter-horizontal").addEventListener("dblclick", D)
                }), e.$on("dashboardCurrentSymbolChanged", function(e, t) {
                    a.updateParameter("lastSymbol", t.symbol)
                }), e.$on("$destroy", function() {
                    document.querySelector(".js-bc-dashboard_content .gutter.gutter-horizontal").removeEventListener("dblclick", D)
                }), e.$on("changeGridView", function(t, a) {
                    1 !== a.gridView ? e.isVisible = !1 : e.isVisible = !0
                }), e.$on("dashboardResetGridView", function() {
                    e.isVisible = !0
                }), b) {
                var S = document.getElementsByTagName("body")[0].offsetHeight,
                    x = document.getElementsByClassName("bc-dashboard__header-symbol-info")[0].offsetHeight;
                document.getElementsByClassName("js-bc-dashboard_content")[0].style.height = S - x + "px"
            }

            function k() {
                if (m || !e.hiddenMenu) {
                    if (b) {
                        var a = document.getElementsByTagName("body")[0].offsetHeight,
                            i = document.getElementsByClassName("bc-dashboard__header-symbol-info")[0].offsetHeight;
                        document.getElementsByClassName("js-bc-dashboard_content")[0].style.height = a - i + "px"
                    }
                    v && (C = v.getSizes()), y = document.getElementsByTagName("body")[0].offsetWidth, p = C[1] * y / 100, e.hiddenMenu && !m && (e.hiddenMenu = !1, t.$broadcast("dashboardMenuOpened")), b && y * C[1] / 100 < w && (C[1] = Math.round(100 * w / y), C[0] = 100 - C[1], v.setSizes(C)), t.showDropdown = p < w
                }
            }

            function D() {
                t.$broadcast("closeRightPanel")
            }
        }
        i.$inject = ["$scope", "$rootScope", "dashboardSettingsService", "authService", "$window", "authRouteService", "utils", "interactiveChartValidation", "$timeout", "interactiveChartUserPreferencesApi", "dashboardGridSettings"], e.exports = i
    },
    ZGrD: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            var s = ["$scope", function(a) {
                var s, l = {},
                    c = 0,
                    d = a.options.waitFor || 1,
                    u = !0,
                    p = ["symbolType", "raw", "symbolCode", "hasOptions", "updatedFields"];
                a.dataLoading = !0, a.content = a.content || [], a.content[0] = a.content[0] || {}, a.content[0].data = a.content[0].data || [], a.content[0].count = a.content[0].count || 0, a.options = a.options || {}, a.options.exclude = a.options.exclude || [], a.rowData = [], a.isElementLink, a.options.quickLinks && (~p.indexOf("hasOptions") || p.push("hasOptions")), a.exclude = function(e) {
                    return !~p.indexOf(e)
                }, a.removeEmpty = function(e) {
                    return 0 !== e.raw[s] && "N/A" !== e[s]
                }, a.isLink = function(e) {
                    return a.isElementLink = "symbol" === e || void 0 !== a.options.link && ~a.options.link.indexOf(e), a.isElementLink
                }, a.setLink = function(e) {
                    return e.symbolType ? "/" + t.getSector(e.symbolType) + "/quotes/" + e.symbol : e.symbol
                }, a.setDataClasses = function(e) {
                    var t = "";
                    return "symbol" !== e && "symbolName" !== e || (t = " text-left"), t
                }, a.$watchCollection(function() {
                    return a.options.exclude
                }, function(e) {
                    void 0 !== e && (~p.indexOf(e) || (p = p.concat(e)))
                }), a.renderChart = function(e) {
                    return s === e
                }, a.clearSymbol = function(e) {
                    return e.replace(/\^/g, "")
                }, a.setChartClass = function(e, t) {
                    return e.raw[t] > 0 ? "bc-bg-up js-chart-up" : "bc-bg-down js-chart-down"
                }, a.setColor = function(e, t) {
                    return e.raw[t] ? e.raw[t] > 0 ? "up" : "down" : "unch"
                }, a.setColorForCustomField = function(e, t, a) {
                    if (t === a || ~t.search(/priceChange|percentChange/i)) return e.raw[t] ? e.raw[t] > 0 ? "up" : "down" : "unch"
                }, a.setWidth = function(e, t) {
                    return 90 * Math.abs(e.raw[t]) / c + "%"
                }, a.setMargin = function(e, t) {
                    var a = 90 * Math.abs(e.raw[t]) / c;
                    if (a < 100 && a >= 90) return "margin-for-last-chart"
                }, a.$on("renderChartView", function(e, t) {
                    if (d && (u && (t.field && (a.field = t.field), t.fields && (a.detailsFields = t.fields), a.dataLoading = !0, a.content[0].count = 0, a.content[0].data = []), a.content[0].meta = t.data[0].meta, a.content[0].count += t.data[0].count, a.content[0].data = a.content[0].data.concat(t.data[0].data), u = !1, 0 === --d)) {
                        var p = ~a.field.indexOf("|") ? a.field.split("|") : a.field;
                        Array.isArray(p) ? p.forEach(function(e) {
                            a.content[0].data[0].raw.hasOwnProperty(e) && (s = e)
                        }) : s = p, l = i.max(a.content[0].data, function(e) {
                            return Math.abs(e.raw[s])
                        }), c = Math.abs(l.raw[s]), d = a.options.waitFor || 1, u = !0, a.content[0].data = i.uniq(a.content[0].data, "symbol"), n.search().orderBy ? a.content[0].data = i.sortByOrder(a.content[0].data, function(e) {
                            return e.raw[n.search().orderBy]
                        }, [n.search().orderDir]) : a.content[0].data = i.sortByOrder(a.content[0].data, function(e) {
                            return e.raw[s]
                        }, ["desc"]), r.hasOwnProperty(a.applyHandler) && r[a.applyHandler].call(a, s), setTimeout(function() {
                            a.options.tableName = "chartView";
                            var e = angular.copy(a.content[0]);
                            e.options = a.options, o.$broadcast("onBarchartChartViewRendered", e)
                        }, 0), a.dataLoading = !1
                    }
                }), a.$on("filterChange", function(t, a) {
                    "viewName" === a.name && (a.value === e.CHART ? (angular.element(document.querySelector(".column-inner")).addClass("bc-hide-headers-for-chart-view"), angular.element(document.querySelector(".column-inner .bc-chart-datatable")).removeClass("hide")) : (angular.element(document.querySelector(".column-inner .bc-chart-datatable")).addClass("hide"), angular.element(document.querySelector(".column-inner")).removeClass("bc-hide-headers-for-chart-view")))
                })
            }];
            return {
                restrict: "E",
                scope: {
                    sticky: "=",
                    options: "=",
                    field: "=",
                    detailsFields: "=",
                    applyHandler: "@"
                },
                template: a("pXv4"),
                controller: s
            }
        }
        i.$inject = ["viewsConstants", "quotesService", "_", "barchartDatatableChartHandlers", "$rootScope", "$location"], e.exports = i
    },
    ZIwO: function(e, t) {
        e.exports = "<div class=bc-modal-content> <input type=hidden /> <div class=modal-header> +Study <i class=\"bc-glyph-times form-close\" data-ng-click=modalDismiss()></i> </div> <div class=bc-modal-content-inner> <div class=bc-tabs> <div class=bc-tabs__tab data-ng-class=\"{'active': currentTab === 'studies'}\" data-ng-click=\"currentTab = 'studies'\">Studies</div> <div class=bc-tabs__tab data-ng-show=isEquity data-ng-class=\"{'active': currentTab === 'fundamentals'}\" data-ng-click=\"currentTab = 'fundamentals'\">Fundamentals</div> </div> <div data-ng-if=\"currentTab === 'studies'\"> <interactive-chart-modal-tab-studies parent-modal-instance=modalInstance></interactive-chart-modal-tab-studies> </div> <div data-ng-if=\"currentTab === 'fundamentals' && isEquity\"> <interactive-chart-modal-tab-fundamentals parent-modal-instance=modalInstance></interactive-chart-modal-tab-fundamentals> </div> </div> </div> "
    },
    ZLaE: function(e, t) {
        e.exports = '<div class=invisible data-ng-class="{\'visible\':ready}"> <bc-scrollbar> <div class=chats-wrapper> <div class=chart-block data-ng-repeat="quotesItem in quotesData track by $index" data-ng-if=quotesData.description[quotesItem.symbol]> <p class=chart-header data-ng-bind=::quotesData.description[quotesItem.symbol]></p> <div class=quota-data> <h3 data-ng-class=::utils.setColor(quotesItem.lastPrice)> <span data-ng-bind=::quotesItem.lastPrice></span>% </h3> <a target=_self data-ng-href="/[[ ::quotesService.getSector(quotesItem.symbolType) ]]/quotes/[[ ::quotesItem.symbol ]]/[[ chartType ]]">Full Chart</a> </div> <div class=block-symbols-charts> <simple-chart class=block-item-chart-canvas data-type=thumbnail data-period=P1M data-aggregation-unit=Day data-aggregation-size=1 data-x-axis-tick-pixel-interval=50 data-symbol="[[ quotesItem.symbol ]]" data-x-axis-gridlines-visible=false data-y-axis-gridlines-visible=false data-y-axis-show-last=false data-y-axis-visible=false data-x-axis-visible=false></simple-chart> </div> </div> </div> </bc-scrollbar> </div>'
    },
    ZMek: function(e, t, a) {
        "use strict";
        e.exports = {
            quickChartPeriods: [{
                period: "P1D",
                aggregation: {
                    unit: "Intraday",
                    size: 5,
                    spec: "None"
                },
                label: {
                    desktop: "1D",
                    mobile: "1D"
                }
            }, {
                period: "P5D",
                aggregation: {
                    unit: "Intraday",
                    size: 30,
                    spec: "None"
                },
                label: {
                    desktop: "5D",
                    mobile: "5D"
                }
            }, {
                period: "P1M",
                aggregation: {
                    unit: "Intraday",
                    size: 60,
                    spec: "None"
                },
                label: {
                    desktop: "1M",
                    mobile: "1M"
                }
            }, {
                period: "P3M",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "3M",
                    mobile: "3M"
                }
            }, {
                period: "P6M",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "6M",
                    mobile: "6M"
                }
            }, {
                period: "P1Y",
                aggregation: {
                    unit: "Day",
                    size: 1,
                    spec: "None"
                },
                label: {
                    desktop: "1Y",
                    mobile: "1Y"
                }
            }, {
                period: "P5Y",
                aggregation: {
                    unit: "Week",
                    size: 1,
                    spec: "Nearest"
                },
                label: {
                    desktop: "5Y",
                    mobile: "5Y"
                }
            }, {
                period: "P20Y",
                aggregation: {
                    unit: "Month",
                    size: 1,
                    spec: "Nearest"
                },
                label: {
                    desktop: "20Y",
                    mobile: "20Y"
                }
            }]
        }
    },
    ZNtd: function(e, t) {
        e.exports = '<div class=bc-portfolio-comment-row> <div class=bc-comments__mark> <div class=circle> <i class=bc-glyph-comment></i> </div> </div> <div class="comment line-wrapper" data-ng-show=!isCurrentOpen()> <div class=row-header> Comment <span class=comment-date data-ng-show=comment.date>[[ comment.date ]]</span> <span class=comment-date data-ng-show=comment.updated_at>[[ comment.updated_at ]]</span> <div class="control-buttons right" data-ng-show="!publicView && !isCurrentOpen() && deletePending.comment != comment"> <i class=bc-glyph-pencil data-ng-click=editComment()></i> <i class="bc-glyph-minus-circle red" data-ng-click="deletePending.comment = comment"></i> </div> <div class=delete-comment data-ng-show="deletePending.comment === comment"> <span class=error-text> Delete Comment?</span> <a class="bc-button small light-blue" data-ng-click=deleteComment()>Yes</a> <a class="bc-button small grey" data-ng-click="deletePending.comment=false">No</a> </div> </div> <div class=row-content data-ng-show=!showFull data-compile-template data-ng-bind-html="comment.body | replaceSymbolsTagsFilter:symbolsData:400"></div> <div class=row-content data-ng-show=showFull data-ng-bind-html="comment.body | replaceSymbolsTagsFilter:symbolsData"></div> </div> <div class="edit-comment clearfix" data-ng-show=isCurrentOpen()> <div class="error-text left" data-ng-if=errorMessage> <span class=error-msg data-ng-bind=errorMessage></span> </div> <a class=right data-ng-click="commentModel=\'\'">Clear comment</a> <textarea name=commentModel rows=10 data-ng-model=commentModel data-ng-maxlength=5000 maxlength=5000 placeholder="Enter a comment... (Add hashtag to symbol to link to its quote page - #AAPL)"></textarea> <div class="left characters-counter" data-ng-show=commentModel.length> <span>Characters left: [[ 5000 - commentModel.length ]]</span> </div> <div class="buttons-wrapper right"> <button type=button class="bc-button grey save" data-ng-click=close()>Cancel</button> <button type=button class="bc-button save" data-ng-click=saveComment()>Save</button> </div> </div> </div>'
    },
    "ZO/H": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                loadMoreStories: function(t, a, i, r, o, n) {
                    return e.call("/news/load-more-stories", "POST", {
                        before: t,
                        section: a,
                        subSection: i,
                        search: r,
                        useThumbnail: !!o,
                        symbolType: n || !1
                    })
                }
            }
        }
        i.$inject = ["dataProvider"], e.exports = i
    },
    ZOWL: function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };
        e.exports = function() {
            var e = function(e) {
                    var t = e.length;
                    return 1 !== t && "/" === e[t - 1] && (e = e.substring(0, t - 1)), e
                },
                t = function(t) {
                    var a, i, r, o, n;
                    if (t) {
                        var s = document.createElement("a");
                        s.href = t, a = s.pathname, i = s.search, r = s.origin, o = s.protocol, n = s.hash
                    } else a = location.pathname, i = location.search, r = location.origin, o = location.protocol, n = location.hash;
                    return "/" !== a[0] && (a = "/" + a), {
                        pathname: a = e(a),
                        search: i,
                        origin: r,
                        protocol: o,
                        hash: n
                    }
                };

            function a(e) {
                var t = e.toString(16);
                return 1 == t.length ? "0" + t : t
            }
            var i = function(e) {
                switch (e) {
                    case "2":
                        return -1;
                    case "3":
                        return -2;
                    case "4":
                        return -3;
                    case "5":
                        return -4;
                    case "6":
                        return -5;
                    case "7":
                        return -6;
                    case "8":
                        return 0;
                    case "9":
                        return 1;
                    case "A":
                        return 2;
                    case "B":
                        return 3;
                    case "C":
                        return 4;
                    case "D":
                        return 5;
                    case "E":
                        return 6;
                    case "F":
                        return 7;
                    default:
                        return 0
                }
            };
            return {
                removeTrailingSlash: e,
                getUrlInfo: t,
                getRandomInt: function(e, t) {
                    return Math.floor(Math.random() * (t - e)) + e
                },
                appendQueryParam: function(e, t, a) {
                    return e + (-1 === e.indexOf("?") ? "?" : "&") + t + "=" + a
                },
                changeToHttpsIfNeeded: function(e) {
                    return "https:" === window.location.protocol && "http:" === t(e).protocol && (e = e.replace(/^http/, "https")), e
                },
                isMobile: function() {
                    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
                },
                isNumeric: function(e) {
                    return e - 0 == e && e.length > 0
                },
                getParameterByName: function(e) {
                    e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                    var t = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(location.search);
                    return null === t ? "" : decodeURIComponent(t[1].replace(/\+/g, " "))
                },
                isIE11: function() {
                    return !!navigator.userAgent.match(/Trident\/7\./)
                },
                isIE: function() {
                    var e = window.navigator.userAgent,
                        t = e.indexOf("MSIE "),
                        a = e.indexOf("Trident/");
                    if (t > 0) return parseInt(e.substring(t + 5, e.indexOf(".", t)), 10);
                    if (a > 0) {
                        var i = e.indexOf("rv:");
                        return parseInt(e.substring(i + 3, e.indexOf(".", i)), 10)
                    }
                    return !1
                },
                isChrome: function() {
                    return window.navigator.userAgent.toLowerCase().indexOf("chrome") > -1
                },
                isSafari: function() {
                    var e = navigator.userAgent.toLowerCase();
                    return -1 !== e.indexOf("safari") && -1 === e.indexOf("chrome")
                },
                isIphone: function() {
                    return /iPhone/i.test(window.navigator.userAgent)
                },
                isMobileChrome: function() {
                    return /CriOS/.test(window.navigator.userAgent)
                },
                isIOS: function() {
                    return /(iPad|iPhone|iPod)/g.test(navigator.userAgent)
                },
                isInternalLink: function(e) {
                    return 0 === e.indexOf("/") || -1 !== e.indexOf(window.location.host)
                },
                buildUrl: function(e, t, a) {
                    var i = "";
                    for (var r in t) {
                        var o = t[r];
                        i += encodeURIComponent(r) + "=" + encodeURIComponent(o) + "&"
                    }
                    return i.length > 0 && (e = e + "?" + (i = i.substring(0, i.length - 1))), a && "string" == typeof a && (e = ~e.search(/\?/) ? e + "&" + a : e + "?" + a), e
                },
                setColor: function(e) {
                    return e ? 0 === e.indexOf("-") ? "down" : "0" === e || "N/A" === e || "unch" === e ? "unch" : "up" : ""
                },
                guid: function() {
                    function e() {
                        return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1)
                    }
                    return e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e()
                },
                ucfirst: function(e) {
                    return e.charAt(0).toUpperCase() + e.slice(1)
                },
                isMobileAndTablet: function() {
                    var e, t = !1;
                    return e = navigator.userAgent || navigator.vendor || window.opera, (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4))) && (t = !0), t
                },
                isMobileOnly: function() {
                    var e, t = !1;
                    return e = navigator.userAgent || navigator.vendor || window.opera, (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4))) && (t = !0), t
                },
                isTabletOnly: function() {
                    var e = navigator.userAgent;
                    return /Tablet|iPad/i.test(e)
                },
                camelCaseToDash: function(e) {
                    return e.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()
                },
                convertToDecimal: function(e) {
                    return ~e.indexOf(".") && e.substr(e.indexOf(".") + 1).length >= 2 ? e : ~e.indexOf(",") && !~e.indexOf(".") ? e + ".00" : Number.prototype.toFixed.call(+e, 2)
                },
                route: function(e, t) {
                    return e.match(/%\w+%/g).forEach(function(a) {
                        var i = a.replace(/%/g, "");
                        e = e.replace(a, t[i])
                    }), encodeURI(e)
                },
                filter_var: function(e, t) {
                    switch (t) {
                        case "BOOLEAN":
                            switch (void 0 === e ? "undefined" : r(e)) {
                                case "boolean":
                                    return e;
                                case "string":
                                    var a = e.toUpperCase();
                                    return "FALSE" !== a && "NO" !== a && "NULL" !== a && "0" !== a && "off" !== a;
                                case "number":
                                    return 0 !== e
                            }
                            return !0
                    }
                },
                findFirstSentence: function e(t, a) {
                    if ("string" != typeof t) throw new Error("Invalid type, parameter must be string");
                    var i = t.length,
                        r = t.indexOf(".", a || 0);
                    if (-1 === r) return t;
                    if (r + 2 >= i) return t;
                    var o = t[r + 1],
                        n = t[r + 2];
                    return /\s/.test(o) && n === n.toUpperCase() ? t.substr(0, r + 1) : e(t, r + 1)
                },
                createSelectListOptions: function(e, t, a, i, r) {
                    var o = [];
                    a = a || 1;
                    for (var n = e; n <= t; n += a) o.push({
                        label: n.toString() + (r ? " " + (1 === n ? r.singular : r.plural) : ""),
                        value: i ? n / 100 : n
                    });
                    return o
                },
                hexToRgba: function(e, t) {
                    e = e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(e, t, a, i) {
                        return t + t + a + a + i + i
                    });
                    var a = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
                    return a ? "rgba(" + parseInt(a[1], 16) + ", " + parseInt(a[2], 16) + ", " + parseInt(a[3], 16) + ", " + t + ")" : null
                },
                rgbaToHex: function(e) {
                    var t = e.match(/^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+(\.\d+)?)\s*\)$/i);
                    return {
                        color: "#" + a(Number(t[1])) + a(Number(t[2])) + a(Number(t[3])),
                        opacity: Number(t[4])
                    }
                },
                baseCode2UnitCode: i,
                string2Decimal: function(e, t) {
                    var a = i(t);
                    if (-4 === a && (7 === e.length || 6 === e.length && "1" !== e.charAt(0)) && (a -= 1), a >= 0) {
                        var r = 1 * e;
                        return Math.round(r * Math.pow(10, a)) / Math.pow(10, a)
                    }
                    var o = -1 !== e.indexOf("-"),
                        n = Math.pow(2, Math.abs(a) + 2),
                        s = String(n).length,
                        l = e.length - s,
                        c = l;
                    "-" == e.substring(c - 1, c) && c--;
                    var d = 1 * e.substring(0, c),
                        u = 1 * e.substring(l, e.length);
                    return -5 === a && (n = o ? 320 : 128), d + u / n
                },
                usworlds: function(e) {
                    return e.replace(/(^([a-zA-Z\p{M}]))|([ -][a-zA-Z\p{M}])/g, function(e) {
                        return e.toUpperCase()
                    })
                },
                htmlEntities: function(e) {
                    return String(e).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;")
                },
                getUTCFromTime: function(e) {
                    return new Date(e + " 00:00:00").getTime()
                },
                getUTCToTime: function(e) {
                    return new Date(e + " 23:59:59").getTime()
                }
            }
        }
    },
    ZQbF: function(e, t) {
        e.exports = '<div class=exchanges-group> <div data-ng-repeat="(i, exchangeGroups) in exchangeGroups"> <h5>[[ exchangeGroups.title ]]</h5> <accordion close-others=false> <accordion-group data-ng-repeat="group in exchangeGroups.groups"> <accordion-heading> <div data-ng-click=loadSymbols(group.list)> <i class=bc-glyph-plus></i> <i class=bc-glyph-minus></i> <span>[[ group.title ]]</span> </div> </accordion-heading> <div data-ng-repeat="symData in symbolList[group.list]"> <a target=_self href="[[ baseUrl ]]/[[ group.alias ]]?future=[[ symData.symbolRoot ]]" class=commodity>[[ symData.symbolName ]]</a> </div> </accordion-group> </accordion> </div> </div> '
    },
    ZSxO: function(e, t) {
        e.exports = '<div class=bc-modal-content> <input type=hidden /> <h5>Are you sure you want to save?</h5> <p class=clear-text>A template with this name already exists. Do you want to replace it?</p> <div class=button-block> <button class="bc-button save grey" data-ng-click=cancel()>Cancel</button> <button class="bc-button ok light-blue" data-ng-click=confirm()>Replace</button> </div> </div>'
    },
    ZTad: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    userData: "=",
                    trialDays: "@",
                    countriesList: "=",
                    cardTypes: "=",
                    cardMonths: "=",
                    cardYears: "=",
                    notificationOnly: "="
                },
                controller: ["$scope", "$modal", "barchartPremierModalService", "Notification", function(e, t, i, r) {
                    e.cancelSubscriptionModal = function() {
                        i.cancelSubscriptionModal(e.userData.contact)
                    }, e.order = e.userData.order || {}, e.formatDate = function(e) {
                        return window.moment(e).format("MMM. DD, YYYY")
                    }, e.orderDate = e.formatDate(e.order.order_date), e.editContactModal = function() {
                        t.open({
                            template: a("Z+hj"),
                            controller: "barchartPremierModalContact",
                            windowClass: "bc-light-modal",
                            resolve: {
                                contactData: function() {
                                    return e.userData.contact
                                }
                            }
                        }).result.then(function(t) {
                            t && t.response.success && (r.success("The changes were saved."), e.userData.contact = t.data)
                        })
                    }, e.editAddressModal = function() {
                        t.open({
                            template: a("rx24"),
                            controller: "barchartPremierModalAddress",
                            windowClass: "bc-light-modal",
                            resolve: {
                                addressData: function() {
                                    return e.userData.order ? e.userData.order.address : {}
                                },
                                cardId: function() {
                                    return e.userData.order ? e.userData.order.credit_card_id : null
                                },
                                countriesList: function() {
                                    return e.countriesList
                                }
                            }
                        }).result.then(function(t) {
                            t && t.response.success && (r.success("The changes were saved."), e.userData.order.address = t.data)
                        })
                    }, e.editCardModal = function() {
                        t.open({
                            template: a("xC49"),
                            controller: "barchartPremierModalCard",
                            windowClass: "bc-light-modal",
                            resolve: {
                                cardData: function() {
                                    return e.userData.order ? e.userData.order.creditcard : {}
                                },
                                orderId: function() {
                                    return e.userData.order ? e.userData.order.order_id : null
                                },
                                cardTypes: function() {
                                    return e.cardTypes
                                },
                                cardMonths: function() {
                                    return e.cardMonths
                                },
                                cardYears: function() {
                                    return e.cardYears
                                }
                            }
                        }).result.then(function(t) {
                            t && t.response.success && (e.userData.order.creditcard = t.data, e.userData.order.creditcard.name = t.data.ccname, e.userData.order.creditcard.last_four = t.data.ccnum.substr(t.data.ccnum.length - 4), r.success("The changes were saved."))
                        })
                    }
                }],
                template: a("uPM/")
            }
        }
        i.$inject = [], e.exports = i
    },
    ZUan: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                $attrs: {
                    message: "@",
                    email: "@"
                },
                link: function(a, i, r) {
                    var o = r.email || null;

                    function n() {
                        e.openContactSupportModal(o, r.message)
                    }
                    null === o && t.isLoggedIn() && (o = t.getUserData().primary_email), i.on("click", n), a.$on("$destroy", function() {
                        i.off("click", n)
                    })
                }
            }
        }
        i.$inject = ["bcModalLoginSrv", "authService"], e.exports = i
    },
    ZVZX: function(e, t, a) {
        "use strict";
        var i = {
            main: {
                api: {
                    orderBy: "maxProfitPercent",
                    orderDir: "desc"
                },
                options: {
                    link: ["baseSymbol"],
                    exclude: ["baseSymbolType", "symbol"],
                    symbolDetails: !0,
                    symbolDetailsOptions: {
                        symbol: "baseSymbol",
                        symbolType: "baseSymbolType"
                    },
                    strike: ["strikePriceLeg1", "strikePriceLeg2"],
                    disabledRealtime: !0,
                    emptyText: "No symbols found that match the requirements."
                }
            },
            dividends_earnings: {
                api: {
                    orderBy: "dividendExDate",
                    orderDir: "desc"
                },
                options: {
                    link: ["baseSymbol"],
                    exclude: ["baseSymbolType", "symbol"],
                    symbolDetails: !0,
                    symbolDetailsOptions: {
                        symbol: "baseSymbol",
                        symbolType: "baseSymbolType"
                    },
                    strike: ["strikePriceLeg1", "strikePriceLeg2"],
                    disabledRealtime: !0,
                    emptyText: "No symbols found that match the requirements."
                }
            },
            filter_view: {
                api: {},
                options: {
                    link: ["baseSymbol"],
                    exclude: ["baseSymbolType"],
                    symbolDetails: !0,
                    disabledRealtime: !0,
                    strike: ["strikePriceLeg1", "strikePriceLeg2"],
                    emptyText: "No symbols found that match the requirements."
                }
            }
        };
        e.exports = {
            CCALL: {
                main: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,strikePrice,expirationDate,bidPrice,netDebit,breakEvenPercent,volume,openInterest,delta,volatility,potentialReturn,potentialReturnAnnual,tradeTime",
                        orderBy: "potentialReturn",
                        orderDir: "desc",
                        method: "/options/covered-calls"
                    },
                    options: {
                        link: ["baseSymbol"],
                        exclude: ["baseSymbolType", "symbol"],
                        symbolDetails: !0,
                        symbolDetailsOptions: {
                            symbol: "baseSymbol",
                            symbolType: "baseSymbolType"
                        },
                        disabledRealtime: !0,
                        emptyText: "No symbols found that match the requirements."
                    }
                },
                dividends_earnings: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,strikePrice,expirationDate,bidPrice,netDebit,breakEvenPercent,dividend,dividendExDate,earningsDate,delta,potentialReturn,potentialReturnAnnual,tradeTime",
                        orderBy: "potentialReturn",
                        orderDir: "desc",
                        method: "/options/covered-calls"
                    },
                    options: {
                        link: ["baseSymbol"],
                        symbolDetails: !0,
                        exclude: ["baseSymbolType", "symbol"],
                        symbolDetailsOptions: {
                            symbol: "baseSymbol",
                            symbolType: "baseSymbolType"
                        },
                        disabledRealtime: !0,
                        emptyText: "No symbols found that match the requirements."
                    }
                },
                filter_view: {
                    api: {
                        orderBy: "potentialReturn",
                        orderDir: "desc",
                        method: "/options/covered-calls"
                    },
                    options: {
                        link: ["baseSymbol"],
                        symbolDetails: !0,
                        exclude: ["baseSymbolType"],
                        disabledRealtime: !0,
                        emptyText: "No symbols found that match the requirements."
                    }
                }
            },
            NPUT: {
                main: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,strikePrice,expirationDate,bidPrice,breakEven,breakEvenPercent,volume,openInterest,delta,volatility,potentialReturn,potentialReturnAnnual,tradeTime",
                        orderBy: "potentialReturn",
                        orderDir: "desc",
                        method: "/options/naked-puts"
                    },
                    options: {
                        link: ["baseSymbol"],
                        symbolDetails: !0,
                        symbolDetailsOptions: {
                            symbol: "baseSymbol",
                            symbolType: "baseSymbolType"
                        },
                        exclude: ["baseSymbolType", "symbol"],
                        disabledRealtime: !0,
                        emptyText: "No symbols found that match the requirements."
                    }
                },
                dividends_earnings: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,strikePrice,expirationDate,bidPrice,breakEven,dividend,dividendExDate,earningsDate,delta,potentialReturn,potentialReturnAnnual,tradeTime",
                        orderBy: "potentialReturn",
                        orderDir: "desc",
                        method: "/options/naked-puts"
                    },
                    options: {
                        link: ["baseSymbol"],
                        exclude: ["baseSymbolType", "symbol"],
                        symbolDetails: !0,
                        symbolDetailsOptions: {
                            symbol: "baseSymbol",
                            symbolType: "baseSymbolType"
                        },
                        disabledRealtime: !0,
                        emptyText: "No symbols found that match the requirements."
                    }
                },
                filter_view: {
                    api: {
                        orderBy: "potentialReturn",
                        orderDir: "desc",
                        method: "/options/naked-puts"
                    },
                    options: {
                        link: ["baseSymbol"],
                        exclude: ["baseSymbolType"],
                        symbolDetails: !0,
                        disabledRealtime: !0,
                        emptyText: "No symbols found that match the requirements."
                    }
                }
            },
            BEARC: angular.merge({}, i, {
                main: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,maxProfit,maxProfitPercent,maxLoss,breakEven,breakEvenProbability,expirationDate,strikePriceLeg1,bidPriceLeg1,strikePriceLeg2,askPriceLeg2,tradeTime",
                        method: "/options/bear-calls-spread"
                    }
                },
                dividends_earnings: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,maxProfit,maxProfitPercent,maxLoss,dividend,dividendExDate,earningsDate,expirationDate,strikePriceLeg1,bidPriceLeg1,strikePriceLeg2,askPriceLeg2,tradeTime",
                        method: "/options/bear-calls-spread"
                    }
                },
                filter_view: {
                    api: {
                        method: "/options/bear-calls-spread"
                    }
                }
            }),
            BEARP: angular.merge({}, i, {
                main: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,maxProfit,maxProfitPercent,maxLoss,breakEven,breakEvenProbability,expirationDate,strikePriceLeg1,askPriceLeg1,strikePriceLeg2,bidPriceLeg2,tradeTime",
                        method: "/options/bear-puts-spread"
                    }
                },
                dividends_earnings: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,maxProfit,maxProfitPercent,maxLoss,dividend,dividendExDate,earningsDate,expirationDate,strikePriceLeg1,askPriceLeg1,strikePriceLeg2,bidPriceLeg2,tradeTime",
                        method: "/options/bear-puts-spread"
                    }
                },
                filter_view: {
                    api: {
                        method: "/options/bear-puts-spread"
                    }
                }
            }),
            BULLC: angular.merge({}, i, {
                main: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,maxProfit,maxProfitPercent,maxLoss,breakEven,breakEvenProbability,expirationDate,strikePriceLeg1,askPriceLeg1,strikePriceLeg2,bidPriceLeg2,tradeTime",
                        method: "/options/bull-calls-spread"
                    }
                },
                dividends_earnings: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,maxProfit,maxProfitPercent,maxLoss,dividend,dividendExDate,earningsDate,expirationDate,strikePriceLeg1,askPriceLeg1,strikePriceLeg2,bidPriceLeg2,tradeTime",
                        method: "/options/bull-calls-spread"
                    }
                },
                filter_view: {
                    api: {
                        method: "/options/bull-calls-spread"
                    }
                }
            }),
            BULLP: angular.merge({}, i, {
                main: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,maxProfit,maxProfitPercent,maxLoss,breakEven,breakEvenProbability,expirationDate,strikePriceLeg1,bidPriceLeg1,strikePriceLeg2,askPriceLeg2,tradeTime",
                        method: "/options/bull-puts-spread"
                    }
                },
                dividends_earnings: {
                    api: {
                        fields: "baseSymbol,baseSymbolType,lastPrice,maxProfit,maxProfitPercent,maxLoss,dividend,dividendExDate,earningsDate,expirationDate,strikePriceLeg1,bidPriceLeg1,strikePriceLeg2,askPriceLeg2,tradeTime",
                        method: "/options/bull-puts-spread"
                    }
                },
                filter_view: {
                    api: {
                        method: "/options/bull-puts-spread"
                    }
                }
            }),
            OPT: angular.merge({}, i, {
                main: {
                    api: {
                        fields: "baseSymbol,baseLastPrice,symbolType,baseSymbolType,strikePrice,daysToExpiration,expirationDate,bidPrice,midpoint,askPrice,lastPrice,volume,openInterest,volumeOpenInterestRatio,volatility,tradeTime",
                        orderBy: "baseSymbol",
                        orderDir: "asc",
                        method: "/options/get"
                    }
                },
                dividends_earnings: {
                    api: {
                        fields: "baseSymbol,symbolType,baseLastPrice,baseSymbolType,strikePrice,expirationDate,bidPrice,askPrice,lastPrice,dividend,dividendExDate,earningsDate,tradeTime",
                        orderBy: "baseSymbol",
                        orderDir: "asc",
                        method: "/options/get"
                    }
                },
                filter_view: {
                    api: {
                        method: "/options/get"
                    }
                }
            })
        }
    },
    ZVke: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d) {
            return {
                restrict: "E",
                replace: !0,
                link: function(a, u) {
                    var p = r.getUserData() || {};
                    a.sort = {};
                    var m = p.preferences ? p.preferences.charts_style : "interactive";
                    if (a.portfolios = r.isLoggedIn() ? r.getUserData().portfolios : [], a.portfolios.length) {
                        var h = t.find(a.portfolios, "id", parseInt(l.getParameter("portfolioId")));
                        a.portfolio = h ? String(h.id) : String(a.portfolios[0].id)
                    }
                    a.isGridViewEnabled = l.isGridViewEnabled(), a.loading = !0, a.currentSymbol = !1, a.createPortfolioLink = n.config.routes["portfolio.create"], a.options = {
                        colorize: ["priceChange", "percentChange", "total_price_change", "total_percent_change", "return", "daily_return"],
                        exclude: o.defaultExclude
                    }, a.view = l.getParameter("controllerView") || "portfolio", a.changeView = function() {
                        l.updateParameter("controllerView", a.view), i.$broadcast("updateControllerListData")
                    };
                    var g = {
                        view: "main",
                        excludeBlanks: !0
                    };
                    a.closePanel = function() {
                        i.$broadcast("closeRightPanel")
                    }, a.openControllerModal = function() {
                        c.openControllerModal()
                    }, a.sortData = function(e) {
                        a.sort.orderBy && a.sort.orderBy === e ? a.sort.orderDir = "desc" === a.sort.orderDir ? "asc" : "desc" : (a.sort.orderBy = e, a.sort.orderDir = "desc"), a.portfolioChanged(!0)
                    }, a.portfolioChanged = function(r, o) {
                        a.loading = !0;
                        var n = t.find(a.portfolios, "id", parseInt(a.portfolio));
                        n ? (!o && l.getParameter("controllerView") || (n && n.default_view && ("default" === n.default_view ? p && p.preferences && p.preferences.default_view && (a.view = p.preferences.default_view.toLowerCase()) : -1 !== ["detailed", "visual"].indexOf(p.preferences.default_view) ? a.view = n.default_view : a.view = "portfolio"), l.updateParameter("controllerView", a.view)), a.sort && a.sort.orderBy && (g.orderDir = a.sort.orderDir, g.orderBy = a.sort.orderBy), l.updateParameter("portfolioId", a.portfolio), g.id = n.id, e.setSettings(g, "getPortfolioData"), e.getData().then(function(e) {
                            setTimeout(function() {
                                angular.element(u).find(".barchart-minitable-wrapper")[0].scrollTop = 0
                            }), e.data[0] && (i.$broadcast("dashboardSymbolsListLoaded", e.data), r || (i.$broadcast("dashboardSymbolsListChanged"), a.changeSymbol(e.data[0]))), a.options = d.colorizeFields(a.options, Object.keys(e.meta.field.shortName))
                        })) : a.loading = !1
                    }, a.changeSymbol = function(e) {
                        a.currentSymbol = e, i.$broadcast("dashboardCurrentSymbolChanged", a.currentSymbol)
                    }, a.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        a.currentSymbol = t && t.newSymbol ? {} : t
                    }), a.$on("dashboardSymbolChangedFromSelector", function(e, t) {
                        "technical" === m && (a.currentSymbol = t)
                    }), a.$on("dashboardCurrentSymbolUpdated", function(e, t) {
                        a.currentSymbol = t && t.newSymbol ? {} : t
                    }), a.portfolioChanged(!0), a.getMore = function() {
                        e.needMore() && !a.moreLoading && (a.moreLoading = !0, e.getData())
                    }, a.$on("dashboardSymbolsListUpdated", function(e, t) {
                        a.content.data = t.data, a.content.meta = t.meta, a.moreLoading = !1, a.loading = !1, s.realtimeListener(a.content.data, "myBarchart")
                    }), a.$on("dashboardControlWidgetNextSymbol", function(e, t) {
                        a.changeSymbol(t)
                    }), a.$on("dashboardControlWidgetPrevSymbol", function(e, t) {
                        a.changeSymbol(t)
                    }), a.$on("updateControllerListData", function(e, t) {
                        t && t.useMasterDb && (g.useMasterDb = !0), a.portfolioChanged(!0)
                    }), a.setClass = function(e, t, a) {
                        var i = "";
                        return "symbol" === e && (i = "text-left"), a.updatedFields && ~["lastPrice", "percentChange", "priceChange", "highPrice", "lowPrice", "volume"].indexOf(e) && ~a.updatedFields.indexOf(e) && ("volume" === e ? i += " up-highlight" : a.lastPriceDirection && (i += " " + a.lastPriceDirection + "-highlight")), i
                    }
                },
                scope: {
                    content: "="
                },
                template: a("gYOq")
            }
        }
        i.$inject = ["dashboardDataService", "_", "$rootScope", "authService", "controlWidgetConfig", "$window", "barchartDatatableRealtime", "dashboardSettingsService", "dashboardModalsService", "barchartDatatableColorize"], e.exports = i
    },
    ZVtc: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            var o = [function() {
                var a = this,
                    o = JSON.parse(a.apiConfig);
                a.links = JSON.parse(a.linksConfig), a.dataLoading = !0, a.quotesService = i, a.chartTypeLink = r.getChartLink(), a.getPriceColor = function(e) {
                    return (e = isNaN(+e) ? parseFloat(e) : +e) > 0 ? "up" : e < 0 ? "down" : "unch"
                }, a.getOpinionColor = function(e) {
                    if (e) return e.search(/sell/i) > -1 ? "sell" : e.search(/buy/i) > -1 ? "buy" : "hold"
                }, a.quotesData = [], t.getQuotes(o.api.quotes).then(function(t) {
                    var i = [];
                    o.api.quotes.symbols.split(",").forEach(function(a) {
                        var r = e.find(t.data, {
                            symbol: a
                        });
                        r.chartTitle = r.symbolName + " (" + r.symbol + ")", i.push(r)
                    }), a.quotesData = i, a.quotesData.description = o.api.quotes.description.symbols, a.dataLoading = !1
                })
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: !0,
                bindToController: {
                    apiConfig: "@",
                    linksConfig: "@"
                },
                template: a("hG9l"),
                controller: o,
                controllerAs: "StocksMajorIndicesOverviewChartsCtrl"
            }
        }
        i.$inject = ["_", "OverviewChartsApiFactory", "quotesService", "userPreferencesService"], e.exports = i
    },
    ZfHQ: function(e, t, a) {
        "use strict";

        function i(e) {
            this.showChangesModal = function() {
                var t = e.open({
                    template: a("LViy"),
                    controller: ["$scope", "$window", function(e, a) {
                        e.premierLink = a.config.routes["my.barchartPremier"] + "?ref=moreViews", e.close = function() {
                            t.close()
                        }
                    }],
                    windowClass: "bc-fdn-modal changes-modal"
                })
            }, this.maxReportsModal = function() {
                var t = e.open({
                    template: a("+wVO"),
                    controller: ["$scope", "$window", function(e, a) {
                        e.close = function() {
                            t.close()
                        }
                    }],
                    windowClass: "bc-fdn-modal"
                })
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    "ZfM+": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = "optionType,strikePrice,openPrice,highPrice,lowPrice,lastPrice,percentChange,volume,openInterest,volatility",
                o = "";
            i(function() {
                e.optionsView = a.search().view || "stacked";
                var i = a.search().expiration || !1,
                    o = a.search().moneyness || "inTheMoney";
                "sbs_ohl" !== e.optionsView && "stacked_ohl" !== e.optionsView || (e.apiConfig.api.fields = r), "sbs" !== e.optionsView && "sbs_ohl" !== e.optionsView || t.$broadcast("initQuotesSbs", {
                    expiration: i,
                    moneyness: o,
                    view: e.optionsView
                }), i && (e.apiConfig.api.expirationDate = i, t.$broadcast("initQuotesOptionsExpiration", i))
            }), e.$on("onOptionsViewsChanged", function(a, i) {
                i.data && (e.optionsView = i.data, "sbs_ohl" === e.optionsView || "stacked_ohl" === e.optionsView ? e.apiConfig.api.fields = r : e.apiConfig.api.fields = o, "sbs_ohl" !== e.optionsView && "sbs" !== e.optionsView && t.$broadcast("onExpirationDateChanged", {
                    data: e.apiConfig.api.expirationDate
                }))
            }), e.init = function(t) {
                e.apiConfig = t, o = e.apiConfig.api.fields
            }
        }
        i.$inject = ["$scope", "$rootScope", "$location", "$timeout"], e.exports = i
    },
    "Zr9/": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            e.error = !1, e.success = !1, e.widgetId = !1, e.list = r, e.data = window.config.newsletters[e.list], e.grecaptchaInvisibleKey = o.grecaptchaInvisibleKey, e.subscribe = function(t, a) {
                a.preventDefault(), t.$valid && (e.email = t.email.$modelValue, e.check = t.check.$modelValue, n.execute(e.widgetId))
            }, e.onSuccess = function() {
                var i = {
                    email: e.email,
                    lists: [e.list]
                };
                e.check && (i.options = {
                    consent: !0
                }), t.subscribe(i).then(function(t) {
                    t.success ? (e.success = !0, e.currentEmail = t.email, a(function() {
                        e.close()
                    }, 6e3)) : t.message && (e.error = t.message)
                }, function(t) {
                    t.error && t.error.message && (e.error = t.error.message)
                })
            }, e.onRender = function(t) {
                e.widgetId = t
            }, e.close = function() {
                i.dismiss()
            }
        }
        i.$inject = ["$scope", "bcNewsSubscriptionApiFactory", "$timeout", "$modalInstance", "list", "appConfig", "vcRecaptchaService"], e.exports = i
    },
    Zw6a: function(e, t, a) {
        "use strict";
        var i = new Barchart.StreamingData.Connection;
        angular.module("realtime", []).factory("realtimeConnection", function() {
            return i
        }).service("realtimeConnectService", a("PD+q"))
    },
    "Zx+u": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {},
                controller: ["$window", "dashboardModalsService", "dashboardGridSettings", "bcChartFactory", "dashboardGridChartApi", "utils", "$rootScope", function(e, t, a, i, r, o, n) {
                    this.showAggregationModal = function() {
                        var s = a.getSymbolsData()[0],
                            l = "futures" === e.config.symbols.mapping[s.symbolType];
                        t.openAggregationGridModal(l).then(function(e) {
                            console.log(e);
                            var t = a.getChartSettings();
                            l ? e.aggregation.spec || (e.aggregation.spec = "Nearest" === t.aggregation.aggregation.spec ? "None" : t.aggregation.aggregation.spec) : e.aggregation.spec = t.settings.extendedHours ? "FormT" : "None", a.getSymbolsData().forEach(function(t) {
                                var n = i.getChart(t.symbol);
                                if (r.changeAggregation(n, e.aggregation), a.setAggregationSettings(e.aggregation), e.period && "CUSTOM" === e.period) {
                                    if (e.range && e.range.from) {
                                        var s = {
                                            from: o.getUTCFromTime(e.range.from)
                                        };
                                        e.range.to && (s.to = o.getUTCToTime(e.range.to)), r.changeRange(n, s)
                                    }
                                } else r.changePeriod(n, e.period);
                                a.setPeriodSettings(e.period), a.setAggregationSettings(e.aggregation), e.range ? a.setRangeSettings(e.range) : a.resetRangeSettings(), a.setTemplate(null)
                            }), a.saveState(), n.$broadcast("gridChartChanged", {
                                action: "fullAggregation",
                                data: {
                                    aggregation: a.getChartSettings().aggregation,
                                    period: a.getChartSettings().period,
                                    range: a.getChartSettings().range
                                }
                            })
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("Ei0W")
            }
        }
    },
    ZxlB: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    fullScreen: "=",
                    dashboardMode: "="
                },
                controller: ["$scope", "interactiveChartValidation", "interactiveChartSettings", "$filter", "$sce", "$rootScope", "utils", "quotesService", "$window", "Notification", "searchConnectionService", function(e, t, a, i, r, o, n, s, l, c, d) {
                    e.symbol = a.getSymbol(), e.invalidSymbol = !1, e.searchResultsVisible = !1, e.searchResults = null;
                    var u = !1,
                        p = n.isMobileOnly();
                    e.preSymbolEnter = function() {
                        e.symbol = ""
                    }, e.pastSymbolEnter = function() {
                        e.symbol = e.symbol || a.getSymbol()
                    }, e.keyboardNavigation = function(e) {
                        switch (e.keyCode) {
                            case 38:
                                o.$broadcast("autoCompleteMoveToPrevItem");
                                break;
                            case 40:
                                o.$broadcast("autoCompleteMoveToNextItem");
                                break;
                            case 13:
                                o.$broadcast("autoCompleteUseSelectedItem")
                        }
                    }, e.changeSymbol = function() {
                        if (!u) {
                            var i = e.symbol;
                            e.invalidSymbol = !1, i && i !== a.getSymbol() && (u = !0, t.validateSymbol(i).then(function(t) {
                                if (t.errors) e.invalidSymbol = !0, c.error("Invalid symbol. Please try again");
                                else {
                                    var a = t.data[0];
                                    if (e.searchResultsVisible && e.clearSearch(), e.dashboardMode) o.$broadcast("chartCurrentSymbolChanged", a.symbol), o.$broadcast("dashboardCurrentSymbolChanged", t.data[0]), o.$broadcast("dashboardSymbolChangedFromSelector", t.data[0]), document.querySelector(".js-interactive-chart-symbol-selector-input").blur();
                                    else {
                                        var i = e.fullScreen ? config.routes["quotes.fullInteractiveChart"] : config.routes["quotes.sectors.interactiveChart"];
                                        l.location.href = n.route(i, {
                                            sector: s.getSector(a.symbolType),
                                            symbol: a.symbol
                                        })
                                    }
                                }
                            }).finally(function() {
                                u = !1
                            }))
                        }
                    }, e.useSearch = function() {
                        var t;
                        p || (e.symbol ? (t = e.symbol, d.connect().then(function() {
                            d.getSearchResults(t).then(function(t) {
                                var a;
                                t.instruments.length > 0 ? (a = t.instruments, e.selectedItemIndex = null, e.searchResults = a, e.searchResultsVisible = !0) : e.searchResults = null, e.$digest()
                            })
                        })) : e.clearSearch())
                    }, e.selectSymbol = function(t) {
                        e.symbol = t.symbol, e.changeSymbol(), e.searchResultsVisible = !1, e.searchResults = null, e.selectedItemIndex = null
                    }, e.clearSearch = function() {
                        e.$evalAsync(function() {
                            e.search = null, e.searchResultsVisible = !1, e.searchResults = null
                        })
                    }, l.addEventListener("click", function() {
                        setTimeout(function() {
                            document.activeElement !== document.querySelector(".js-interactive-chart-symbol-selector-input") && e.symbol && e.searchResultsVisible && (document.activeElement.blur(), e.clearSearch())
                        }, 300)
                    }), e.$on("dashboardCurrentSymbolChanged", function(t, a) {
                        e.symbol = a.symbol
                    })
                }],
                template: a("MHU3")
            }
        }
    },
    ZzNa: function(e, t, a) {
        "use strict";

        function i(e, t) {
            function a(e, t) {
                return '<span style="margin-right: 0px;" class="js-dynamic-title-' + e + '">' + t + "</span>"
            }
            return {
                restrict: "A",
                $attrs: {
                    spanName: "@",
                    disable: "@"
                },
                link: function(i, r, o) {
                    var n, s = o.spanName;
                    if ("true" === o.disable) return !1;
                    if (void 0 === s) throw new Error("attribute data-span-name is required for bc-change-title");
                    var l = document.querySelector(".js-help-title span"),
                        c = document.querySelector(".js-main-title span");
                    e.config.titlePattern && (c.innerHTML = e.config.titlePattern, l.innerHTML = e.config.titlePattern), c && i.$watch(function() {
                        return r.val()
                    }, function(e) {
                        ! function(e) {
                            n = document.querySelector('option[value="' + e + '"]').text;
                            var i = document.querySelectorAll(".js-dynamic-title-" + s);
                            window.config.customTitlesMapping && window.config.customTitlesMapping[e.toLowerCase()] && (n = window.config.customTitlesMapping[e.toLowerCase()]); - 1 !== c.innerHTML.indexOf("{" + s + "}") ? c.innerHTML = c.innerHTML.replace("{" + s + "}", a(s, n)) : i.length && Array.prototype.forEach.call(i, function(e) {
                                e.innerHTML = n
                            }); - 1 !== l.innerHTML.indexOf("{" + s + "}") && (l.innerHTML = l.innerHTML.replace("{" + s + "}", a(s, n)));
                            var r = document.querySelector(".js-main-title span").textContent;
                            t.$broadcast("pageTitleChanged", r), document.querySelector("title").innerHTML = r + " - Barchart.com", document.querySelector('[name="twitter:title"]').setAttribute("content", r), document.querySelector('[property="og:title"]').setAttribute("content", r), document.querySelector('[itemprop="name"]').setAttribute("content", r)
                        }(e)
                    })
                }
            }
        }
        i.$inject = ["$window", "$rootScope"], e.exports = i
    },
    a1qb: function(e, t, a) {
        "use strict";
        var i = "CommitmentOfTraders";
        angular.module(i, []).controller(i + ".commitmentOfTradersFormCtrl", a("MFYR")).directive("compareTo", a("Smk6"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    a398: function(e, t) {
        e.exports = '<div> <p class=error-text data-ng-show=form.$error.required> Complete required fields to continue. </p> <p class=error-text data-ng-show="form.email.$invalid && !form.email.$error.required"> [[ errorMessages.email ]] </p> <p class=error-text data-ng-show=form.$error.invalidCaptcha> Please complete the reCAPTCHA to continue. </p> <p class=error-text data-ng-show=errors.required_captcha> Please complete the reCAPTCHA to continue. </p> <p class=error-text data-ng-show=form.$error.invalidEmail> Please enter a valid email </p> <p class=error-text data-ng-show=form.$error.invalidOneword> [[ errorMessages.invalidOneword ]] </p> <p class=error-text data-ng-show=errors.server_error> Oops, something went wrong. Please refresh the page and try again. </p> <p class=error-text data-ng-show="form.password.$error.minlength && !form.password.$error.required"> Password must be at least 6 characters. </p> <p class=error-text data-ng-show=errors.recaptcha> Please complete the reCAPTCHA to continue. </p> <p class=error-text data-ng-if=errors.email_does_not_exist> A membership does not exist for this email address, <a data-bc-go-to-register>please create an account.</a> </p> <p class=error-text data-ng-show=errors.password_email_does_not_exist> We could not locate an account that uses this email address. Try again, <a data-bc-go-to-register>create an account</a>, or <a href=/contact> contact our support team for assistance.</a> </p> <p class=error-text data-ng-show=errors.email data-bc-bind-unsafe=errors.email></p> <p class=error-text data-ng-show=errors.default data-ng-bind-html=errors.default></p> <p class=error-text data-ng-show=errors.unsafe_default data-bc-bind-unsafe=errors.unsafe_default></p> <p class=error-text data-ng-show=errors.password_does_not_match data-bc-bind-unsafe=errors.password_does_not_match></p> <p class=error-text data-ng-show=errors.not_found data-ng-bind-html=errorMessages.not_found></p> <p class="error-text js-incomplete" data-ng-show=errors.incomplete></p> <p class=error-text data-ng-if=errors.password_incomplete data-bc-bind-unsafe=errors.password_incomplete></p> </div>'
    },
    a4NH: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            var n = ["$scope", function(a) {
                var n = JSON.parse(a.apiConfig);
                a.quotesService = e, a.quotesData = [], a.utils = r, a.chartType = o.getChartLink(), n.api.quotes.symbols ? t.getQuotes(n.api.quotes).then(function(e) {
                    var t = [];
                    n.api.quotes.symbols.split(",").forEach(function(a) {
                        t.push(i.find(e.data, {
                            symbol: a
                        }))
                    }), a.quotesData = t, a.quotesData.description = n.api.quotes.description.symbols, a.ready = !0, a.refresh = !0
                }) : console.error("apiConfig.api.quotes.symbols is ", n.api.quotes.symbols)
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    apiConfig: "@"
                },
                template: a("ZLaE"),
                controller: n
            }
        }
        i.$inject = ["quotesService", "OverviewChartsApiFactory", "_", "utils", "userPreferencesService"], e.exports = i
    },
    a7nl: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@",
                    filterIndex: "@"
                },
                controller: ["$scope", function(t) {
                    t.filterData.days = t.filterData.days || {}, t.filterData.type = t.filterData.type || {}, t.filterData.days.value = t.filterData.days.value || [], t.filterData.type.value = t.filterData.type.value || [], t.isPremier = e.isLoggedIn() && 2 === e.getUserData().subscription, 0 === t.filterData.type.value.length && t.filters.type.value.forEach(function(e) {
                        e.default && t.filterData.type.value.push(e.key)
                    }), t.toggleSelection = function(a, r) {
                        if (o = !0, (!e.isLoggedIn() || e.isLoggedIn() && 2 !== e.getUserData().subscription) && (o = !1, i.showPremier("advOptions")), !o) return r.target.checked = !1, !1;
                        var o, n = t.filterData.type.value.indexOf(a);
                        n > -1 ? t.filterData.type.value.splice(n, 1) : t.filterData.type.value.push(a)
                    }
                }],
                template: a("6rGY")
            }
        }
        i.$inject = ["authService", "authRouteService", "bcModalLoginSrv"], e.exports = i
    },
    aCV7: function(e, t) {
        e.exports = '<div class="tools-dropdown tools-dropdown-bartype"> <bc-dropdown-flexible data-label-font=$ctrl.labelFont data-label-img=$ctrl.label data-dropdown-id=bc-interactive-chart-dropdown-bartype data-remove-mobile-touch=true class=js-bc-interactive-chart-dropdown-bartype> <div class=tools-dropdown-content> <ul> <li data-ng-repeat="item in $ctrl.typeList" data-ng-click=$ctrl.changeBarType(item)> <i class="icon bc-glyph-check" data-ng-show="$ctrl.selectedBarType.key === item.key && $ctrl.selectedBarType.attr === item.attr"> </i> <div class=label data-ng-class="{\'disable-item\': $ctrl.isExpression && [\'Line\', \'Area\'].indexOf(item.key) === -1}"> [[ ::item.value ]] </div> </li> </ul> </div> </bc-dropdown-flexible> </div>'
    },
    aGBN: function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = null;
            this.setChartData = function(t) {
                e = t
            }, this.getChartData = function() {
                return e
            }
        }
    },
    aIrt: function(e, t, a) {
        "use strict";

        function i(e) {
            this.openSaveMyChartModal = function(t, i, r) {
                return e.open({
                    template: a("5/KQ"),
                    controller: "dashboardSaveMyChartModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "dashboard-save-my-chart-modal",
                    resolve: {
                        createOnTheFly: function() {
                            return !!t
                        },
                        chartType: function() {
                            return i
                        },
                        currentGroup: function() {
                            return r
                        }
                    }
                }).result
            }, this.openDeleteMyChartModal = function(t, i) {
                return e.open({
                    template: a("up/T"),
                    controller: "dashboardDeleteMyChartModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "dashboard-delete-my-chart-modal",
                    resolve: {
                        chart: function() {
                            return t
                        },
                        group: function() {
                            return i
                        }
                    }
                }).result
            }, this.openDeleteSymbolFromWatchlistModal = function(t, i, r) {
                return e.open({
                    template: a("6dG3"),
                    controller: "deleteSymbolFromWatchlistModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "dashboard-delete-my-chart-modal",
                    resolve: {
                        watchlist: function() {
                            return t
                        },
                        symbol: function() {
                            return i
                        },
                        meta: function() {
                            return r
                        }
                    }
                }).result
            }, this.openRenameMyChartModal = function(t, i) {
                return e.open({
                    template: a("16iM"),
                    controller: "dashboardRenameMyChartModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "dashboard-save-my-chart-modal",
                    resolve: {
                        chart: function() {
                            return t
                        },
                        group: function() {
                            return i
                        }
                    }
                }).result
            }, this.openCopyMyChartModal = function(t, i, r) {
                return e.open({
                    template: a("4hWf"),
                    controller: "dashboardCopyMyChartModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "dashboard-save-my-chart-modal",
                    resolve: {
                        chart: function() {
                            return t
                        },
                        group: function() {
                            return i
                        },
                        allowChangeSymbol: function() {
                            return r
                        }
                    }
                }).result
            }, this.openQuickLinksModal = function(t, i, r, o, n, s) {
                return e.open({
                    template: a("qz5x"),
                    controller: "dashboardChartTabQuickLinkModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "dashboard-quick-links-modal",
                    resolve: {
                        chart: function() {
                            return t
                        },
                        group: function() {
                            return i
                        },
                        currentSymbol: function() {
                            return r
                        },
                        type: function() {
                            return o
                        },
                        meta: function() {
                            return n
                        },
                        allowChangeSymbol: function() {
                            return s
                        }
                    }
                }).result
            }, this.openAggregationGridModal = function(t) {
                return e.open({
                    template: a("9fmJ"),
                    controller: "dashboardAggregationModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "dashboard-aggregation-modal interactive-chart-modal-aggregation",
                    resolve: {
                        isFuture: function() {
                            return t
                        }
                    }
                }).result
            }, this.openControllerModal = function() {
                return e.open({
                    template: a("0Z+m"),
                    controller: "dashboardControllerModalCtrl",
                    controllerAs: "$ctrl",
                    windowClass: "interactive-chart-modal-settings dashboard-controller-modal"
                }).result
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    aSgt: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    currentChartSettings: "="
                },
                controller: ["interactiveChartSettingsConfig", "interactiveChartSettings", "_", "$scope", "interactiveChartApi", "interactiveChartStateService", function(e, t, a, i, r, o) {
                    var n = this;

                    function s() {
                        var e = t.getChartSettings();
                        if (e.barType && "Hollow" === e.barType.curveAttribute && (e.barType.curveStyle = "HollowCandles", delete e.barType.curveAttribute), e.barType) {
                            n.selectedBarType = a.find(n.typeList, function(t) {
                                return t.key === e.barType.curveStyle && t.attr === e.barType.curveAttribute
                            }), void 0 === n.selectedBarType && (n.selectedBarType = n.typeList[0]);
                            var i = r.getMainPlot()[0];
                            switch (n.isExpression = "Expression" === i.type, n.selectedBarType.key) {
                                case "OHLC":
                                    n.labelFont = "bc-glyph-ohlc", n.label = "/img/bar_types/ohlc.png", n.selectedBarType.attr && (n.labelFont = "bc-glyph-ohlc-colored", n.label = "/img/bar_types/ohlc-colored.png"), n.labelFont = null;
                                    break;
                                case "HLC":
                                    n.labelFont = "bc-glyph-hlc", n.label = "/img/bar_types/hlc.png", n.labelFont = null;
                                    break;
                                case "HollowCandles":
                                    n.labelFont = "bc-glyph-bar-candlestick-hollow", n.label = "/img/bar_types/hollow-candlesticks.png", n.labelFont = null;
                                    break;
                                case "Candlestick":
                                    n.labelFont = "bc-glyph-candlestick-colored", n.label = "/img/bar_types/candlesticks.png", n.labelFont = null;
                                    break;
                                case "HeikinAshi":
                                    n.labelFont = "bc-glyph-bar-candlestick", n.label = "/img/bar_types/heikin-ashi.png", n.labelFont = null;
                                    break;
                                case "ElderImpulseSystem":
                                    n.label = "/img/bar_types/elder.png", n.labelFont = null;
                                    break;
                                case "Line":
                                    n.labelFont = "bc-glyph-bar-line", n.label = "/img/bar_types/line.png", n.labelFont = null;
                                    break;
                                case "Area":
                                    n.labelFont = "bc-glyph-area", n.label = "/img/bar_types/area.png", n.labelFont = null
                            }
                        }
                    }
                    n.typeList = e.types, n.selectedBarType = null, n.labelFont = null, n.isExpression = !1, i.$on("chartChanged", function() {
                        s()
                    }), i.$on("onInteractiveChartTemplateApplied", function() {
                        s()
                    }), i.$on("onInteractiveChartReset", function() {
                        s()
                    }), i.$on("interactiveChartUIRefreshed", function() {
                        s()
                    }), i.$on("interactiveChartExpressionApplied", function() {
                        s()
                    }), i.$on("interactiveChartExpressionRemoved", function() {
                        s()
                    }), n.changeBarType = function(e) {
                        if (!n.isExpression || -1 !== ["Area", "Line"].indexOf(e.key)) {
                            var a = t.getChartSettings();
                            a.barType.curveStyle = e.key, e.attr ? a.barType.curveAttribute = e.attr : delete a.barType.curveAttribute, -1 === ["Line", "Area"].indexOf(e.key) && (a.scaleValue = "price"), a.barType.colors = angular.copy(e.defaultColors), r.changeCurveStyle(a.barType), r.render(), t.setChartSettings(a), o.save(), s(), i.$broadcast("bcDropdownFlexibleClose", !0)
                        }
                    }, s()
                }],
                controllerAs: "$ctrl",
                template: a("aCV7")
            }
        }
    },
    aSwB: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a) {
                    a.bind("click", function() {
                        e.$broadcast("microbarSaveToMyCharts")
                    })
                }
            }
        }
        i.$inject = ["$rootScope"], e.exports = i
    },
    amBv: function(e, t) {
        e.exports = '<div class="modal-content-wrapper change-password-form account message"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <div class="inner-form bc-form"> <p>We\'ll need to process a cancellation request for your Barchart Premier subscription before you can deactivate your free My Barchart account.</p> <div class=form-buttons> <button data-ng-click=cancelSubscriptionModal() class="bc-button light-blue upper">Cancel Subscription</button> </div> </div> </div>'
    },
    anFZ: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.submit = function(e) {
                t.screeners() && e.preventDefault()
            }
        }
        i.$inject = ["$scope", "limitsService"], e.exports = i
    },
    aqet: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    allowGrid: "="
                },
                controller: ["$rootScope", "$scope", "authService", "bcModalLoginSrv", "dashboardGridSettings", function(e, t, a, i, r) {
                    var o = this,
                        n = a.isLoggedIn() && a.getUserData().is_premier;

                    function s() {
                        switch (o.gridView) {
                            case 1:
                                o.imagePath = "/img/grid_types/1_on.png";
                                break;
                            case 2:
                                o.imagePath = "/img/grid_types/2h_on.png";
                                break;
                            case 3:
                                o.imagePath = "/img/grid_types/2v_on.png";
                                break;
                            case 4:
                                o.imagePath = "/img/grid_types/2x2_on.png";
                                break;
                            case 5:
                                o.imagePath = "/img/grid_types/3x3_on.png";
                                break;
                            case 6:
                                o.imagePath = "/img/grid_types/4x2_on.png"
                        }
                    }
                    o.imagePath = null, o.gridView = r.getView(), s(), o.loadGrid = function(t) {
                        n ? (o.gridView = t, r.setView(t), s(), e.$broadcast("changeGridView", {
                            gridView: t
                        })) : i.showPremier("dashCharts")
                    }, t.$on("dashboardResetGridView", function() {
                        o.loadGrid(1)
                    }), t.$on("dashboardHideRibbon", function() {
                        o.loadGrid(1)
                    })
                }],
                controllerAs: "$ctrl",
                template: a("oIXV")
            }
        }
    },
    au8E: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = 1,
                o = [],
                n = {
                    aggregation: {
                        unit: "Day",
                        size: 1,
                        spec: "None",
                        isContractVolume: void 0
                    },
                    settings: {
                        barType: {
                            curveStyle: "OHLC",
                            colors: ["#000000"],
                            lineWidth: 1
                        },
                        extendedHours: !1,
                        dividendsAdjust: !1,
                        backAdjust: !1,
                        contractRoll: "combined",
                        daysToExpiration: 1
                    },
                    period: "P6M",
                    range: {
                        from: null,
                        to: null
                    },
                    template: null
                },
                s = angular.copy(n),
                l = angular.copy(t);
            this.setView = function(e) {
                r = e
            }, this.getView = function() {
                return r
            }, this.setSymbolsData = function(e) {
                o = angular.copy(e)
            }, this.getSymbolsData = function() {
                return o
            }, this.setState = function(e) {
                null === e ? (l = angular.copy(t), a.clearGrid()) : l = angular.copy(e)
            }, this.getState = function() {
                return l
            }, this.saveState = function() {
                if (o.length > 0) {
                    var t = e.getChart(o[0].symbol).asTemplate({
                        main: !0,
                        annotations: !0
                    });
                    this.setState(t), a.saveGrid(s, t)
                }
            }, this.getChartSettings = function() {
                return s
            }, this.setChartSettings = function(e) {
                s = angular.copy(e)
            }, this.setAggregationSettings = function(e) {
                s.aggregation = angular.copy(e)
            }, this.setBarTypeSettings = function(e) {
                s.settings.barType = angular.copy(e)
            }, this.setPeriodSettings = function(e) {
                s.period = e
            }, this.setRangeSettings = function(e) {
                s.range = angular.copy(e)
            }, this.setSettings = function(e) {
                s.settings = angular.copy(e)
            }, this.resetRangeSettings = function() {
                s.range = {
                    from: null,
                    to: null
                }
            }, this.rasetChartSettings = function() {
                s = angular.copy(n)
            }, this.setTemplate = function(e) {
                s.template = e, i.updateParameter("gridTemplate", e)
            }, this.getTemplate = function() {
                return s.template
            }
        }
        i.$inject = ["bcChartFactory", "defaultGridChartState", "interactiveChartUserPreferencesApi", "dashboardSettingsService"], e.exports = i
    },
    avaJ: function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).config(["$routeProvider", function(e) {
            e.when("/story/:currentUrl*/:itemId/:itemSlug", {
                template: "",
                controller: ["$scope", "$routeParams", "$rootScope", "$window", "barchartDatatableFilterUrl", function(e, t, a, i, r) {
                    i.config.disableAutoRefreshPage(), a.currentURL = t.currentUrl.replace("?", "%3F"), a.initialTitle || (a.initialTitle = window.config.meta.title || document.querySelector("title").text);
                    try {
                        IC_ResetPage()
                    } catch (e) {
                        console.log("IC_ResetPage() error")
                    }
                    r.isPreventNextFiltersEvent(!0), a.$broadcast("bc-modal-show-news-or-video", {
                        id: t.itemId
                    })
                }]
            }).when("/:market?/:sector/commitment-of-traders/technical-charts/:symbol/:overview?", {
                template: "",
                controller: ["$scope", "$routeParams", "$rootScope", "$window", function(e, t, a, i) {
                    t.market ? a.currentURL = "/" + t.market + "/" + t.sector + "/commitment-of-traders" : a.currentURL = "/" + t.sector + "/commitment-of-traders", t.overview && (a.currentURL = "/" + t.sector + "/quotes/" + t.symbol), i.config.disableAutoRefreshPage(), a.$broadcast("bc-modal-show-cot-chart", {
                        currentSymbol: t.symbol
                    })
                }]
            }).when("/forgot", {
                template: "",
                controller: ["$window", function(e) {
                    e.config.disableAutoRefreshPage()
                }]
            }).when("/contact", {
                template: "",
                controller: ["$window", function(e) {
                    e.config.disableAutoRefreshPage()
                }]
            }).when("/login", {
                template: "",
                controller: ["$window", function(e) {
                    e.config.disableAutoRefreshPage()
                }]
            }).when("/register", {
                template: "",
                controller: ["$window", function(e) {
                    e.config.disableAutoRefreshPage()
                }]
            }).when("/:sector/quotes/:symbol/trading-strategies/:strategy/classic-charts/:date", {
                template: "",
                controller: ["$rootScope", "$routeParams", "$window", function(e, t, a) {
                    a.location.href = a.location.href.replace("classic-charts", "strategy-charts")
                }]
            }).when("/:sector/quotes/:symbol/trading-strategies/:strategy/strategy-charts/:date", {
                template: "",
                controller: ["$rootScope", "$routeParams", function(e, t) {
                    e.currentURL = "/" + t.sector + "/quotes/" + t.symbol + "/trading-strategies/" + t.strategy + "/", e.$broadcast("bc-modal-classic-chart", {
                        symbol: t.symbol,
                        strategy: t.strategy,
                        date: t.date
                    })
                }]
            }).when("/education/:type/:item", {
                template: "",
                controller: ["$rootScope", "$routeParams", function(e, t) {
                    "/my/barchart-premier" === window.previousPage ? e.currentURL = window.previousPage : e.currentURL = "/education/" + t.type, !e.initialTitle && window.config.initialTitle && (e.initialTitle = window.config.initialTitle), e.$broadcast("bc-modal-education", {
                        item: t.item,
                        type: t.type
                    })
                }]
            }).when("/stocks/sectors/freight-market/:item", {
                template: "",
                controller: ["$rootScope", "$routeParams", function(e, t) {
                    e.$broadcast("onFreightMarketSectorChanged", t.item)
                }]
            }).otherwise({
                resolve: {
                    load: ["$location", "bcModalLoginSrv", function(e, t) {
                        e.search().help && ("/login" === window.location.pathname ? window.sessionStorage && window.sessionStorage.setItem("showHelp", !0) : (angular.element(document.querySelector(".js-bc-extended-help-block")).toggleClass("visible"), e.search("help", null))), e.search().ref && "/my/barchart-premier" !== e.path() && "/my/barchart-try-premier" !== e.path() && (t.showPremier(e.search().ref), e.search("ref", null));
                        var a = document.querySelector(".modal-show .modal-overlay");
                        a && setTimeout(function() {
                            a.click()
                        }, 0)
                    }]
                }
            })
        }])
    },
    "b+om": function(e, t, a) {
        "use strict";

        function i(e) {
            this.setFirstName = function(t) {
                e.getUserData().fname = t
            }, this.getFirstName = function() {
                return e.getUserData().fname
            }, this.setLastName = function(t) {
                e.getUserData().lname = t
            }, this.getLastName = function() {
                return e.getUserData().lname
            }, this.setEmails = function(t) {
                e.getUserData().emails = t
            }, this.getEmail = function() {
                return e.getUserData().email
            }
        }
        i.$inject = ["authService"], e.exports = i
    },
    b0UC: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.contactData = angular.copy(a), e.unsubscribe = function(t) {
                if (t.$invalid) return !1;
                i.cancelSubscription(e.contactData).then(function(t) {
                    !0 === t.success && (e.success = !0)
                })
            }, e.closeModal = function() {
                t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "contactData", "barchartPremierService"], e.exports = i
    },
    b0xg: function(e, t, a) {
        "use strict";
        var i = "DataTable.CustomViews";
        angular.module(i, []).factory("CustomViewsApiFactory", a("WWdW")).service("CustomViewsService", a("UQ3R")).directive("customViewForm", a("CVpJ")).directive("customViewsList", a("f9M7")).controller(i + ".CustomViewsListCtrl", a("c+Tp"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    b9Jg: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n = "/chart",
                s = {
                    sym: "IBM"
                },
                l = {
                    width: "1120",
                    height: "500"
                },
                c = {};
            return {
                makeRequest: function(d, u, p, m) {
                    l.height = d.height || l.height, l.width = p && !m ? screen.width : o.document.querySelector(".js-chart-template").offsetWidth, u = u || [], d = d || s;
                    var h = r.merge({}, d, l);
                    ! function(e, t) {
                        Object.keys(e).forEach(function(a) {
                            (null === e[a] || "" === e[a] || ~t.indexOf(a)) && delete e[a], "axis1" !== a && "axis2" !== a && "axis3" !== a || !1 !== e[a] || delete e[a]
                        })
                    }(h, u);
                    var g = i.buildUrl(a.API_URL + n, h);
                    return (c = angular.copy(h)).indicators || (c.indicators = null), e.call(g, t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        throw new Error(e)
                    })
                },
                getApiSettings: function() {
                    return c
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "apiConfig", "utils", "_", "$window"], e.exports = i
    },
    bI3r: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                fundamentalModal: function(t) {
                    return e.open({
                        template: a("Uhh+"),
                        controller: "interactiveChartTemplateModalFundamentalCtrl",
                        windowClass: "bc-light-modal interactive-chart-modal-study",
                        resolve: {
                            fundamentalData: function() {
                                return t
                            }
                        }
                    }).result
                }
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    bIpk: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d) {
            var u, p, m, h, g = !1,
                f = 0,
                b = !1,
                v = !1,
                y = {};
            return {
                restrict: "A",
                link: function(w, C, S) {
                    if (w.apiConfig = [], w.reachedLimit = !1, w.alreadyDownloadedNumber = 0, w.is_premier = i.getUserData() && i.getUserData().is_premier, w.limit = o.config.limits.downloadLimit, w.premierLink = o.config.routes["my.barchartPremier"], w.customDate = !1, w.notes = !1, i.isLoggedIn()) var x = i.getUserPreferences();
                    var k = S.bcDownloadOrder;
                    k && (k = JSON.parse(k));
                    var D = w.ref || "excel";
                    S.apiConfig && (w.apiConfig = JSON.parse(S.apiConfig)), w.$on("setDownloadConfig", function(e, t) {
                        w.apiConfig = angular.copy(t)
                    }), w.$on("priceHistoryGetDailyPrice", function(e, t) {
                        w.apiConfig.endDate = t.dateTo, w.apiConfig.startDate = t.dateFrom
                    }), w.$on("priceHistoryAdjusted", function(e, t) {
                        w.apiConfig.splitAdjustment && delete w.apiConfig.splitAdjustment, w.apiConfig.dividendAdjustment && delete w.apiConfig.dividendAdjustment, "dividendAdjustment" === t ? w.apiConfig.dividendAdjustment = !0 : "splitAdjustment" === t && (w.apiConfig.splitAdjustment = !0)
                    }), w.$on("addNotesToDownload", function(e, t) {
                        w.notes = t
                    }), w.$on("onBarchartDataTableRendered", function(e, t) {
                        f = t.total, h = t.excluded ? t.excluded : [], t.options && !t.options.showSymbolType && h.push("symbolType"), t.options.watchlist && t.options.watchlistFlags && (v = t.options.watchlistFlags)
                    }), w.$on("notesHasBeenUpdated", function(e, t) {
                        v = t
                    }), w.$on("paginationEnabled", function() {
                        b = !0
                    }), w.$on("reloadPortfolioData", function() {
                        b = !0
                    }), w.$on("bcDownloadTitleChanged", function(e, t) {
                        S.bcDownloadButton = t, w.customDate = !0
                    }), w.$on("onExpirationDateChanged", function(e, t) {
                        t.data && (y.expiration = t.data)
                    }), w.$on("defaultExpirationDate", function(e, t) {
                        y.expiration = t.data
                    }), w.$on("initQuotesOptionsExpiration", function(e, t) {
                        y.expiration = t.data
                    }), w.$on("currentWatchlistName", function(e, t) {
                        u = "watchlist:" + t
                    }), w.$on("updateViewForDownload", function(e, t) {
                        m = t, y.view = t
                    }), w.$on("filterChange", function(e, t) {
                        void 0 !== t && t.name && ("timeFrame" === t.name && (p = t.caption ? t.caption : ""), "viewName" === t.name && (m = t.value), "view" === t.name && (k = "stacked" === t.value || "stacked_ohl" === t.value ? ["Calls", "Puts"] : ["sidebyside"]), y[t.name] = t.caption)
                    }), w.$on("tableSorted", function(e, t) {
                        w.apiConfig.orderBy = t.field, w.apiConfig.orderDir = t.dir ? "desc" : "asc"
                    }), w.errorClose = function() {
                        g && (g.dismiss(), g = !1, w.reachedLimit = !1, w.error = !1)
                    }, w.contact = function() {
                        w.errorClose(), r.goToContact()
                    }, C.bind("click", function() {
                        if (i.isLoggedIn()) {
                            if (!w.is_premier && !x.downloadChangedSettings) return c.showChangesModal(), x.downloadChangedSettings = !0, void d.savePreference("downloadChangedSettings", 1);
                            S.bcDownloadButton ? (u = S.bcDownloadButton, Object.keys(y).length && Object.keys(y).forEach(function(e) {
                                u = u.replace("%" + e + "%", y[e])
                            })) : u = angular.element(document.querySelector(".js-download-button")).text().trim(), "string" == typeof w.apiConfig && (w.apiConfig = JSON.parse(w.apiConfig)), w.apiConfig.limit && w.apiConfig.limit < w.limit && (w.apiConfig.limit = w.limit), -1 === ["main", "technical", "performance", "fundamental"].indexOf(m) && (w.apiConfig.customView = !0), w.pageTitle = document.querySelector(".js-main-title").textContent, e({
                                method: "POST",
                                url: "/my/download",
                                data: t({
                                    onlyCheckPermissions: !0
                                }),
                                headers: {
                                    "Content-Type": "application/x-www-form-urlencoded"
                                }
                            }).then(function(e) {
                                e.data && (e.data.error ? function(e) {
                                    w.error = e.data.error.message, g = a.open({
                                        templateUrl: "bc-download-button-error.html",
                                        scope: w,
                                        windowClass: "bc-download-button-error"
                                    })
                                }(e) : (w.alreadyDownloadedNumber = e.data.count, f <= w.limit && T(), S.csvLink ? _(S.csvDownloadLink) : w.downloadData ? P(JSON.stringify(w.downloadData)) : k ? P(JSON.stringify(n.getTablesData(k, w.apiConfig.customView))) : b || S.apiConfig || S.downloadFrom ? f > w.limit ? (w.reachedLimit = !0, g = a.open({
                                    templateUrl: "bc-download-button-error.html",
                                    scope: w,
                                    windowClass: "bc-download-button-error"
                                })) : w.redirectToDownload() : P(JSON.stringify(n.getTablesData(["default"], w.apiConfig.customView)))))
                            }), w.redirectToDownload = function(e) {
                                e && (w.errorClose(), T());
                                var t = angular.copy(u),
                                    a = angular.copy(w.apiConfig);
                                S.bcDownloadButton && p && -1 === t.indexOf(p) && (t += "-" + p), !a.limit && w.limit && (a.limit = w.limit), h && (a.exclude = h), w.customDate && (a.customDate = !0), w.notes && (a.notes = encodeURIComponent(w.notes)), S.downloadFrom && (a.startDate = S.downloadFrom), w.errorClose();
                                var i = [];
                                Object.keys(a).forEach(function(e) {
                                    a[e] || i.push(e)
                                }), i && !a.customGetParameters && (a.customGetParameters = i.join("&")), a.pageTitle = w.pageTitle, w.is_premier && f > 1e3 && (a.total = f), v && (a.watchlistFlags = JSON.stringify(v));
                                var r = document.createElement("form");
                                r.setAttribute("method", "post"), r.setAttribute("action", "/my/download"), E(r, "_token", angular.element('meta[name="csrf-token"]').attr("content")), E(r, "fileName", t.replace(new RegExp(/(&|\/)/, "g"), "")), Object.keys(a).forEach(function(e) {
                                    E(r, e, a[e])
                                }), document.getElementsByTagName("body")[0].appendChild(r), r.submit(), document.getElementsByTagName("body")[0].removeChild(r)
                            }
                        } else r.goToLogin(D)
                    });
                    var T = function() {
                            w.is_premier ? s.success(l("DOWNLOAD_CONFIRMATION_PREMIUM_USER", {
                                count: w.alreadyDownloadedNumber,
                                limit: o.config.limits.downloads
                            })) : s.success(l("DOWNLOAD_CONFIRMATION_SIMPLE_USER", {
                                link: o.config.routes["my.barchartPremier"],
                                limit: o.config.limits.downloads,
                                count: w.alreadyDownloadedNumber
                            }))
                        },
                        _ = function(e) {
                            var a = "";
                            w.apiConfig && (a = t(w.apiConfig)), S.downloadKey && (a = "downloadKey=" + S.downloadKey), o.location.href = e || o.location.protocol + "//" + o.location.hostname + o.location.pathname + "-download?" + a
                        },
                        P = function(e) {
                            var t = document.createElement("form"),
                                a = angular.copy(u);
                            p && S.bcDownloadButton && -1 === a.indexOf(p) && (a += "-" + p), t.setAttribute("method", "post"), t.setAttribute("action", "/my/download"), E(t, "_token", angular.element('meta[name="csrf-token"]').attr("content")), E(t, "downloadData", e), E(t, "fileName", a), E(t, "pageTitle", w.pageTitle), w.customDate && E(t, "customDate", w.customDate), w.notes && E(t, "notes", encodeURIComponent(w.notes)), document.getElementsByTagName("body")[0].appendChild(t), t.submit(), document.getElementsByTagName("body")[0].removeChild(t)
                        },
                        E = function(e, t, a) {
                            var i = document.createElement("input");
                            i.setAttribute("type", "hidden"), i.setAttribute("name", t), i.setAttribute("value", a), e.appendChild(i)
                        }
                },
                scope: {
                    downloadData: "=",
                    ref: "@"
                }
            }
        }
        i.$inject = ["$http", "$httpParamSerializerJQLike", "$modal", "authService", "authRouteService", "$window", "datatableAllDataService", "Notification", "textFactory", "bcCustomModalService", "bcSavePreferencesService"], e.exports = i
    },
    bJoJ: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$rootScope", "$scope", "authService", "BarchartMediaOverlayApiFactory", "utils", "events", "BarchartMediaOverlayApiConfig", "quotesService", "$location", "$timeout", "interactiveChartApi", "_", "bcInlineData", "technicalChartDrawService", "interactiveChartStateService", "technicalChartMappingService", "$window", "watchlistFormModalService", "interactiveChartSettings", "barchartTableSymbolsListService", function(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v, y, w) {
                var C, S;
                C = i.getUserData() || {}, b.config.disableAutoRefreshPage(), (S = angular.element(document.querySelector(".bc-overlay-modal-wrapper .modal-content"))).css("min-height", window.innerHeight + 10 + "px"), window.addEventListener("resize", function() {
                    var e = window.innerHeight + 10 + "px";
                    S.css("min-height", e)
                }, !0), t.quickSettings = a("1UwF"), t.currentQuickSettings = {
                    settings: t.quickSettings[4].settings,
                    template: {
                        pricesOn: "1"
                    }
                }, t.userChartTemplates = C.custom_chart_templates;
                var x = {
                    pricesOn: "1"
                };
                t.chartType = "interactive", t.socialDesctiprion = "Build and share your own charts with sophisticated technical studies and indicators for equities, futures, and more.", t.socialImageType = "svg", t.redirectUrl = "", t.flipChartData = null, t.tooltipData = null, t.showTooltip = !1, t.dataLoading = !1, t.flipChartSymbol = null, t.flipChartNextSymbol = null, t.flipChartPrevSymbol = null, t.waitingScrollbarSymbols = !1;
                var k = {};
                t.pagination.currentPage && (k.leftPage = t.pagination.currentPage, k.rightPage = t.pagination.currentPage), t.flipChartSymbolTechChartUrl = null, t.flipChartSymbolIntChartUrl = null, t.flipChartSharingUrl = null, t.flipChartSharingTitle = null, t.technicalTemplatesEditingLink = config.routes["my.customChartTemplates.technical"], t.tooltipBaseData = null;
                var D = ["open", "high", "low", "close", "Volume", "overlay1", "overlay2", "overlay3"];

                function T(e) {
                    var a, i;
                    t.dataLoading = !0, a = t.flipChartSymbol;
                    var n = angular.copy(x);
                    t.options && t.options.chartSettings && (a.chartSettings = t.options.chartSettings);
                    var l = s.getApiConfigFlipcharts(a, n);
                    !e && t.currentQuickSettings.settings && (i = angular.copy(t.currentQuickSettings.settings), l = s.applyQuickSettings(l, i)), r.getChart(l).then(function(e) {
                        t.chartData = e.data, t.socialTitle = a.symbol + " | Custom Technical Chart for " + a.symbolName, t.redirectUrl = function(e, t) {
                            var a, i = "";
                            return Object.keys(t.api).forEach(function(e) {
                                i += e + "=" + t.api[e] + "&"
                            }), a = (a = b.location.protocol + "//" + b.location.hostname + o.route(b.config.routes["quotes.sectors.technicalChart"], {
                                symbol: e.symbol,
                                sector: b.config.symbols.mapping[e.symbolType]
                            }) + "?" + i).substring(0, a.length - 1)
                        }(a, l);
                        var i = h.createImageMapMarkup(t.chartData.map, t);
                        angular.element(document.querySelector("#bc-technical-chart-image-map")).empty().append(i), t.flipChartData = e.data, t.dataLoading = !1
                    }, function() {
                        console.log("ERROR: Chart could not be loaded."), t.dataLoading = !1
                    })
                }

                function _(e) {
                    return b.location.protocol + "//" + b.location.hostname + o.route(b.config.routes["quotes.sectors.interactiveChart"], {
                        symbol: e.symbol,
                        sector: b.config.symbols.mapping[e.symbolType]
                    })
                }

                function P(e) {
                    var a = t.symbols.indexOf(e); - 1 === a && (a = p.findIndex(t.symbols, {
                        symbol: e.symbol
                    }), t.flipChartSymbol = t.symbols[a]), -1 !== a && t.symbols[a - 1] ? t.flipChartPrevSymbol = t.symbols[a - 1] : t.flipChartPrevSymbol = null, -1 !== a && t.symbols[a + 1] ? t.flipChartNextSymbol = t.symbols[a + 1] : t.flipChartNextSymbol = null
                }

                function E(e) {
                    t.flipChartSymbolTechChartUrl = "/" + l.getSector(e.symbolType) + "/quotes/" + e.symbol + "/technical-chart", t.flipChartSymbolIntChartUrl = "/" + l.getSector(e.symbolType) + "/quotes/" + e.symbol + "/interactive-chart", t.flipChartSharingUrl = c.protocol() + "://" + c.host() + t.flipChartSymbolTechChartUrl
                }
                t.interactiveChart = !0, C.preferences && C.preferences.flipcharts_style && "technical" === C.preferences.flipcharts_style && (t.interactiveChart = !1, t.socialImageType = "base64", t.chartType = "technical"), t.loadChartForSymbol = function(a) {
                    if (!t.dataLoading && a) {
                        if (d(function() {
                                e.$broadcast("bc-scrollbar-scroll-to-item", a.symbol)
                            }, 500), t.flipChartSharingTitle = a.symbol + " Chart", E(a), t.interactiveChart) t.updateInteractiveChart(a);
                        else t.flipChartSymbol = a, T(!(!x.id || !t.currentQuickSettings.template.id));
                        t.tooltipData = {}, P(a)
                    }
                }, t.addToWatchlist = function() {
                    v.addToWatchlist(t.flipChartSymbol.symbol, t.flipChartSymbol.symbolName)
                }, t.initInteractiveChart = function(a) {
                    if (!t.dataLoading && a) {
                        t.dataLoading = !0, d(function() {
                            e.$broadcast("bc-scrollbar-scroll-to-item", a.symbol)
                        }, 500), t.flipChartSharingTitle = a.symbol + " Chart", t.redirectUrl = _(a), t.socialTitle = a.symbol + " | Custom Interactive Chart for " + a.symbolName, E(a), P(a);
                        var i = a.symbol;
                        m.addInlineDataForSymbols(i).then(function(e) {
                            e.data && e.data.length && (a.symbolName = e.data[0].symbolName, a.symbolType = e.data[0].symbolType, a.raw = {
                                symbolName: e.data[0].raw.contractName || e.data[0].raw.symbolName,
                                hasBats: e.data[0].raw.hasBats
                            }), u.getDeferredChart().then(function() {
                                C.preferences && "None" === C.preferences.flipcharts_template_interactive && t.defaultPlot && "LINE" === t.defaultPlot.toUpperCase() && setTimeout(function() {
                                    var e = JSON.parse(u.save());
                                    e.panes[0].axes[0].plots[0].curves[0].style = "Line", e.panes[0].axes[0].plots[0].curves[0].fields = ["Close", "Change"], u.load(JSON.stringify(e))
                                }, 0), t.dataLoading = !1, t.socialImage = u.getSVGForExport()
                            }), t.flipChartSymbol = a
                        })
                    }
                }, t.updateInteractiveChart = function(e) {
                    !t.dataLoading && e && (t.dataLoading = !0, m.addInlineDataForSymbols(e.symbol).then(function(a) {
                        e && e.symbolName || !a.data || !a.data.length || (e.symbolName = a.data[0].symbolName, e.symbolType = a.data[0].symbolType), e.raw = e.raw || {}, e.raw = p.merge({}, e.raw, a.data[0].raw), u.setSymbolData(e), t.redirectUrl = _(e), t.socialTitle = e.symbol + " | Custom Interactive Chart for " + e.symbolName, t.flipChartSymbol = e, setTimeout(function() {
                            t.dataLoading = !1
                        }, 1e3)
                    }))
                }, t.applyChartTemplate = function(e) {
                    if (null === e) x = {
                        pricesOn: "1"
                    }, t.currentQuickSettings.settings = t.quickSettings[4].settings, T();
                    else {
                        x = angular.copy(e);
                        var a = p.findIndex(t.quickSettings, {
                            settings: {
                                data: e.data,
                                density: e.density
                            }
                        });
                        t.currentQuickSettings.settings = a > -1 ? t.quickSettings[a].settings : null, f.mapDateRange(e), T(!0)
                    }
                }, t.changeQuickSettings = function() {
                    t.currentQuickSettings.template = {
                        pricesOn: "1"
                    }, T()
                }, t.shouldMapBeShown = function() {
                    return "1" === x.pricesOn
                }, t.hideTooltip = function() {
                    t.showTooltip = !1
                }, t.closeThisModal = function(e) {
                    o.isMobileAndTablet() && (window.location.href = e), t.hideOverlayModal()
                };
                var A = !1,
                    $ = !1;
                t.hideTooltipData = function() {
                    A = !1, $ || (d(function() {
                        A || (t.showTooltip = !1), $ = !1
                    }, 300), $ = !0)
                }, t.showAreaInfo = function(e) {
                    A = !0, t.tooltipData = {}, t.tooltipBaseData = {}, t.tooltipBaseData.open = e.open, t.tooltipBaseData.high = e.high, t.tooltipBaseData.low = e.low, t.tooltipBaseData.close = e.close, t.tooltipBaseData.overlay1 = e.overlay1, t.tooltipBaseData.overlay2 = e.overlay2, t.tooltipBaseData.overlay3 = e.overlay3, t.tooltipBaseData.Volume = e.Volume, Object.keys(e).forEach(function(a) {
                        -1 === D.indexOf(a) && (t.tooltipData[a] = e[a])
                    }), d(function() {
                        t.showTooltip = !0
                    }, 100)
                }, t.openFullScreenTechnicalChart = function() {
                    var e = o.route(b.config.routes["quotes.fullTechnicalChart"], {
                        sector: b.config.symbols.mapping[t.flipChartSymbol.symbol],
                        symbol: t.flipChartSymbol.symbol
                    });
                    try {
                        i.isLoggedIn() && "None" !== i.getUserData().preferences.charts_template ? e += "?id=" + i.getUserData().preferences.charts_template : e += ""
                    } catch (e) {
                        console.log("Could not get default technical chart template:", e)
                    }
                    var a = ["height=" + screen.height, "width=" + screen.width, "fullscreen=yes", "resizable=yes", "scrollbars=yes"].join(",");
                    setTimeout(function() {
                        b.open(e, "", a).moveTo(0, 0)
                    }, 0)
                };
                var M = t.symbols[0] ? t.symbols[0] : t.currentSymbol;
                if (t.symbols[0]) {
                    if (C.preferences && C.preferences.flipcharts_template && "None" !== C.preferences.flipcharts_template && !t.interactiveChart && (!t.options || !t.options.chartSettings)) {
                        var L = p.find(t.userChartTemplates, "id", +C.preferences.flipcharts_template);
                        L && (x = angular.copy(L), t.currentQuickSettings.template = L);
                        var O = p.findIndex(t.quickSettings, {
                            settings: {
                                data: x.data,
                                density: x.density
                            }
                        });
                        t.currentQuickSettings.settings = O > -1 ? t.quickSettings[O].settings : null
                    }
                    t.currentSymbol && t.symbols.forEach(function(e) {
                        e.symbol === t.currentSymbol && (M = e)
                    })
                }
                t.pagination.currentPage && t.pagination.currentPage > 1 && (t.waitingScrollbarSymbols = !0, w.getAdditionalSymbols(t.pagination.currentPage - 1).then(function(a) {
                    k.leftPage -= 1, t.symbols = a.data[0].data.concat(t.symbols), d(function() {
                        e.$broadcast("bc-scrollbar-scroll-to-item", M.symbol), t.waitingScrollbarSymbols = !1
                    }, 300)
                })), t.interactiveChart ? t.initInteractiveChart(M) : t.loadChartForSymbol(M), t.$on(n.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED, function() {
                    if (null === y.getChartTemplate() && t.defaultPlot && "LINE" === t.defaultPlot.toUpperCase()) {
                        var e = JSON.parse(u.save());
                        e.panes[0].axes[0].plots[0].curves[0].style = "Line", e.panes[0].axes[0].plots[0].curves[0].fields = ["Close", "Change"], u.load(JSON.stringify(e))
                    }
                }), t.$on("bcScrollbarApproachingRight", function() {
                    !t.waitingScrollbarSymbols && k.rightPage && k.rightPage < t.pagination.totalPages && (t.waitingScrollbarSymbols = !0, w.getAdditionalSymbols(k.rightPage + 1).then(function(a) {
                        k.rightPage += 1, t.symbols = t.symbols.concat(a.data[0].data), d(function() {
                            e.$broadcast("bc-scrollbar-refresh"), t.waitingScrollbarSymbols = !1
                        }, 300)
                    }))
                }), t.$on("bcScrollbarApproachingLeft", function() {
                    !t.waitingScrollbarSymbols && k.leftPage && k.leftPage > 1 && (t.waitingScrollbarSymbols = !0, w.getAdditionalSymbols(k.leftPage - 1).then(function(a) {
                        k.leftPage -= 1;
                        var i = t.symbols[0].symbol;
                        t.symbols = a.data[0].data.concat(t.symbols), d(function() {
                            e.$broadcast("bc-scrollbar-scroll-to-item", i), t.waitingScrollbarSymbols = !1
                        }, 300)
                    }))
                })
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbols: "=",
                    options: "=",
                    currentSymbol: "=",
                    pagination: "=",
                    hideOverlayModal: "&",
                    defaultPlot: "@"
                },
                template: a("3hdP"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    bJsW: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            return {
                getPercentOfStocksAboveMovAvg: function(a) {
                    var o = a.method || "/historical/get";
                    return delete a.method, e.call(i.buildUrl(r.API_URL + o, a), t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "_", "utils", "apiConfig"], e.exports = i
    },
    bKSA: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@",
                    filterIndex: "@"
                },
                controller: ["$scope", function(t) {
                    var a = "cad" === config.user.market ? "ca" : "us";
                    t.filters[a] && (t.filters.default = t.filters[a]), t.filterData.default = t.filterData.default || {}, t.filterData.default.value = t.filterData.default.value || [], t.toggleSelection = function(a, i) {
                        if (!e.checkPermissions()) return i.target.checked = !i.target.checked, !1;
                        var r = t.filterData.default.value.indexOf(a);
                        r > -1 ? t.filterData.default.value.splice(r, 1) : t.filterData.default.value.push(a)
                    }, t.toggleSelectionAll = function() {
                        t.ifAllSelected() ? t.filterData.default.value = [] : t.filters.default.value.forEach(function(e) {
                            -1 === t.filterData.default.value.indexOf(e.key) && t.filterData.default.value.push(e.key)
                        })
                    }, t.ifAllSelected = function() {
                        var e = !0;
                        return t.filters.default.value.forEach(function(a) {
                            -1 === t.filterData.default.value.indexOf(a.key) && (e = !1)
                        }), e
                    }, t.filters.default && t.filters.default.selectAll && 0 === t.filterData.default.value.length && t.toggleSelectionAll()
                }],
                template: a("SLIB")
            }
        }
        i.$inject = ["screenerPermissionService"], e.exports = i
    },
    bUPr: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p, m) {
            e.user = s.getData() || {}, o.isLoggedIn() ? e.userEmail = o.getUserData().email : e.userEmail = e.user;
            var h, g, f = !1;

            function b(t) {
                return e.hasErrors = !!t.$invalid, !e.hasErrors && (!0 === e.errors.required_captcha ? (e.hasErrors = !0, !1) : (Object.keys(e.errors).forEach(function(t) {
                    e.errors[t] = !1
                }), !0))
            }

            function v() {
                e.errors.required_captcha = !1
            }

            function y() {
                e.errors.required_captcha = !0
            }
            e.state = a, e.ref = i, e.user.refcode = i || null, e.success = !1, e.hasErrors = !1, e.errors = {
                email: !1,
                server_error: !1,
                not_found: !1,
                default: !1,
                incomplete: !1,
                email_does_not_exist: !1,
                password_does_not_match: !1,
                required_captcha: !1
            }, h = s.getErrors(), (g = Object.keys(h)).length > 0 && (e.hasErrors = !0, g.forEach(function(t) {
                e.errors.hasOwnProperty(t) && (e.errors[t] = h[t] || !0)
            }), s.clearErrors()), e.login = function(t) {
                b(t) && n.login(e.user).then(function(t) {
                    if (t.success && t.firstLogin && (c.showModal(), e.close()), t.count && 1 === t.count && void 0 !== t.data) {
                        if (o.setLoggedIn(t.data), u.onLogin.forEach(function(e) {
                                e(t.data)
                            }), u.preventLoginReload) return e.close(), !1;
                        "/my/my-barchart" === l.location.pathname && (l.location.href = "/"), e.close(), null !== d.getRedirectPath() ? l.location.href = d.getRedirectPath() : setTimeout(function() {
                            l.location.reload()
                        })
                    }
                }, function(t) {
                    ! function(t, a) {
                        if (a = a || "login", void 0 !== t.error && void 0 !== t.error.message) {
                            if (e.hasErrors = !0, 429 === t.error.status_code) return e.errors.required_captcha = !0, void p.for("grecaptcha").then(function() {
                                f ? l.grecaptcha.reset() : (l.grecaptcha.render("g-login-component", {
                                    sitekey: m.grecaptchaKey,
                                    callback: v,
                                    "expired-callback": y
                                }), f = !0)
                            });
                            if (400 === t.error.code) return void(e.errors.default = "Your session has expired, please refresh the page and try again.");
                            angular.isString(t.error.message) ? e.errors.default = t.error.message : Object.keys(t.error.message).forEach(function(a) {
                                e.errors.hasOwnProperty(a) && (e.errors[a] = t.error.message[a] || !0)
                            })
                        } else angular.isObject(t) && t.error || (e.hasErrors = !0, e.errors.server_error = !0)
                    }(t)
                })
            }, e.goToRegister = function() {
                s.clearErrors(), s.setData(e.user), r.goToRegister(i)
            }, e.goToLogin = function(t) {
                s.clearErrors(), t && s.setErrors(t), s.setData(e.user), r.goToLogin(i)
            }, e.goToForgot = function() {
                s.clearErrors(), s.setData(e.user), r.goToForgot(i)
            }, e.goToContact = function() {
                s.clearErrors(), s.setData(e.user), r.goToContact(i)
            }, e.close = function() {
                s.clearErrors(), s.clear(), t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "state", "ref", "authRouteService", "authService", "authApiService", "userAuthFormData", "$window", "bcAgreementService", "authRedirectService", "authCallbacks", "waitService", "appConfig"], e.exports = i
    },
    bXYz: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            this.showModal = function() {
                var r = e.open({
                    template: a("lcp1"),
                    controller: ["$scope", function(e) {
                        e.close = function() {
                            r.close()
                        }, e.redirect = function() {
                            r.close(), t.location.href = t.config.routes["my.barchartPremier"] + "?ref=whitelist"
                        }
                    }],
                    windowClass: "bc-fdn-modal ad-block-modal"
                });
                r.result.finally(function() {
                    i("bcLightAds", !0, {
                        expires: t.config.adsCookieTime,
                        path: "/"
                    })
                })
            }
        }
        i.$inject = ["$modal", "$window", "ipCookie"], e.exports = i
    },
    bcWs: function(e, t) {
        e.exports = '<div class=bc-portfolio-transaction-row> <div class=bc-comments__mark> <div class=circle> <i class="bc-glyph-[[ setIconClass(item) ]]"></i> </div> </div> <div data-ng-if="item.type !==\'delete\'" class="entry line-wrapper"> <div class=row-header> <span data-ng-show="item.type === \'exit\'"> <span class=liquidated>Liquidated:</span> [[ actions[item.action] ]] </span> <span data-ng-show="item.type === \'entry\'" data-ng-class=setActionClass(item.action)>[[ actions[item.action] ]]</span> <span> [[ item.quantity ]] </span> <span data-ng-bind-html="\'#\' + item.symbol | replaceSymbolsTagsFilter:symbolsData"></span> <span class=bold> @ $ [[ item.price ]]</span> <div class=comment-date> [[ item.date ]] <div class="control-buttons with-padding right show-for-small-only" data-ng-if=!publicView> <i class=bc-glyph-pencil data-ng-click="editComment(item.item_id, item.type)" data-ng-hide="isCurrentOpen(item.item_id, item.type)"></i> </div> </div> <div class="control-buttons with-padding right show-for-medium-up" data-ng-if=!publicView> <i class=bc-glyph-pencil data-ng-click="editComment(item.item_id, item.type)" data-ng-hide="isCurrentOpen(item.item_id, item.type)"></i> </div> </div> </div> <div class="delete line-wrapper" data-ng-if="item.type ===\'delete\'"> <div class=row-header> <span data-ng-bind-html="\'Deleted #\' + item.symbol | replaceSymbolsTagsFilter:symbolsData"></span> <div class=comment-date> [[ item.date ]] <div class="control-buttons with-padding right show-for-small-only"> <i class=bc-glyph-pencil data-ng-click="editComment(item.item_id, item.type)" data-ng-hide="isCurrentOpen(item.item_id, item.type)"></i> </div> </div> <div class="control-buttons with-padding right show-for-medium-up" data-ng-if=!publicView> <i class=bc-glyph-pencil data-ng-click="editComment(item.item_id, item.type)" data-ng-hide="isCurrentOpen(item.item_id, item.type)"></i> </div> </div> </div> <div class="row-content inner-comment" data-ng-if=item.comment data-ng-hide="isCurrentOpen(item.item_id, item.type)"> <div class=row-header> Comment <span class=comment-date>[[ item.comment.updated_at ]]</span> </div> <div class=row-content data-ng-show=!showFull data-compile-template data-ng-bind-html="item.comment.body | replaceSymbolsTagsFilter:symbolsData:400"></div> <div class=row-content data-ng-show=showFull data-ng-bind-html="item.comment.body | replaceSymbolsTagsFilter:symbolsData"></div> </div> <div class="edit-comment clearfix" data-ng-show="isCurrentOpen(item.item_id, item.type) && !publicView"> <div class="error-text left" data-ng-if=errorMessage> <span class=error-msg data-ng-bind=errorMessage></span> </div> <a class=right data-ng-click="comment=\'\'">Clear comment</a> <textarea name=comment rows=2 data-ng-model=comment data-ng-maxlength=5000 maxlength=5000 placeholder="Enter a comment for this transaction... (Add hashtag to symbol to link to its quote page - #AAPL)"></textarea> <div class="left characters-counter" data-ng-show=comment.length> <span>Characters left: [[ 5000 - comment.length ]]</span> </div> <div class="buttons-wrapper right"> <button type=button class="bc-button grey save" data-ng-click=close()>Cancel</button> <button type=button class="bc-button save" data-ng-click=saveComment()>Save</button> </div> </div> </div>'
    },
    beDk: function(e, t, a) {
        "use strict";
        e.exports = function(e) {
            var t = {
                basic: {}
            };
            return t.basic[e.STYLE] = "BAR", t.basic[e.VOLUME] = "0", t.basic[e.FREQUENCY] = "DO", t.basic[e.TIME_PERIOD] = "M", t.basic[e.PRICEBOX] = "1", t.basic[e.PRICE_SCALE] = "0", t.basic[e.SCALE] = "0", t.basic[e.MINUTES_PERIOD] = null, t.basic[e.DATE_FROM] = null, t.basic[e.DATE_TO] = null, t.basic[e.DATE_RANGE] = "", t.basic[e.INDICATORS] = null, t.basic[e.INDICATORS_OBJECT] = null, t.basic[e.SYMBOL] = "", t.basic[e.GRID] = "1", t.basic[e.HEIGHT] = "500", t.basic[e.STUDYHEIGHT] = "100", t.spread = {}, t.spread[e.COMMON_SPREAD_VALUE] = "", t.spread[e.EXPRESSION] = "", t.spread[e.IS_SPREAD] = "1", t.comparison = {}, t.comparison[e.COMPARE_FIRST_SYMBOL_VALUE] = null, t.comparison[e.SHOW_FIRST_SYMBOL_PRICE] = !1, t.comparison[e.COMPARE_SECOND_SYMBOL_VALUE] = null, t.comparison[e.SHOW_SECOND_SYMBOL_PRICE] = !1, t.comparison[e.COMPARE_THIRD_SYMBOL_VALUE] = null, t.comparison[e.SHOW_THIRD_SYMBOL_PRICE] = !1, t.comparison[e.IS_COMPARISON] = "1", t
        }
    },
    bfi0: function(e, t) {
        e.exports = '<div class="bc-major-markets-chart-component [[ type ]]"> <div class=clearfix> <div class=symbol-header data-ng-show="type === \'scrapMetals\'"> <a target=_self data-ng-href="/[[ ::quotesService.getSector(itemData.symbolType, itemData.symbolCode) ]]/quotes/[[ itemData.symbol ]]" data-ng-bind=symbolTitle></a> </div> <div class="symbol-definition-block [[ type ]]"> <div class=symbol-header data-ng-show="type !== \'scrapMetals\'"> <a target=_self data-ng-href="/[[ ::quotesService.getSector(itemData.symbolType, itemData.symbolCode) ]]/quotes/[[ itemData.symbol ]]" data-ng-bind=symbolTitle></a> <span data-ng-class=setColor(itemData.raw.priceChange) class=arrow></span> </div> <div> <span data-ng-show="type === \'scrapMetals\'" data-ng-class=setColor(itemData.raw.priceChange) class=arrow></span> <div class="price-value last-price" data-ng-bind=itemData.lastPrice></div> <div class=price-value data-ng-class=setColorClass(itemData.priceChange)> <span data-ng-bind=itemData.priceChange></span> (<span data-ng-bind=itemData.percentChange></span>) </div> </div> </div> <div class=chart-block> <simple-chart class=major-market-overview-charts data-symbol="[[ itemData.symbol ]]" data-period="[[ chartParams.period ]]" data-aggregation-unit="[[ chartParams.aggregationUnit ]]" data-aggregation-size=1 data-x-axis-format="[[ chartParams.format  ]]" data-x-axis-gridlines-visible=false data-y-axis-visible=false data-y-axis-show-last=false data-show-previous=true data-x-axis-crosshair-enabled=false data-tooltip-visible=false></simple-chart> </div> </div> </div>'
    },
    bhZJ: function(e, t) {
        e.exports = "<div class=\"barchart-symbol-widget widget-ratios\"> <div class=barchart-symbol-widget__title> Ratios <a data-ng-href=\"[[  '/' + sector + '/quotes/'  + symbol + '/profile' ]]\" class=\"bc-button small white-with-border right\" target=_blank> Full Profile </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href=\"[[  '/' + sector + '/quotes/'  + symbol + '/profile' ]]\" target=_blank> <div class=barchart-symbol-widget__columns> <div class=barchart-symbol-widget__left-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat=\"item in lists.left | filter:filterEmptyRows\"> <span class=right> [[ ::data[item.field] ]] </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> <div class=barchart-symbol-widget__right-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat=\"item in lists.right | filter:filterEmptyRows\"> <span class=right> [[ ::data[item.field] ]] </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> </div> </a> </div>"
    },
    "c+Tp": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.viewName = "", e.createView = function(r) {
                if ((r = r || window.event).preventDefault(), i.customViews()) return !1;
                var o = {
                    name: e.viewName
                };
                a.sequence(a.checkNameLength(o), a.checkNameUnique(o)).then(function() {
                    document.getElementById("viewForm").submit()
                }, function(e) {
                    t.showError(e)
                })
            }
        }
        i.$inject = ["$scope", "MyBarchartModalService", "CustomViewsService", "limitsService"], e.exports = i
    },
    c2xY: function(e, t) {
        e.exports = '<div class=newsletter-unlock-subscription-form> <form name=subscribeForm> <div data-ng-if=$ctrl.invalidEmail class="error-messages fieldset error"> Error: Please enter a valid, non-disposable email and try again. </div> <div class="input-with-button-wrapper text-left"> <div class="input-with-button-wrapper-inner with-invisible-captcha"> <div class=input-inner-wrapper> <input required type=text name=email data-ng-model=$ctrl.email data-bc-ng-email-validation placeholder="Enter email address..."> </div> <button class="bc-button emails-button g-recaptcha" data-sitekey="[[ $ctrl.recaptchaKey ]]" data-ng-disabled=$ctrl.loading data-callback=submitNewsletters> Submit </button> </div> </div> <div class=newsletter-unlock-subscription-form__success-notification data-ng-show=$ctrl.successNotification> <p>A verification link was emailed to <b>[[ $ctrl.email ]]</b>. Please check your inbox (including your spam mailbox) for a verification link.</p> <p> <b>Why is verification important?</b><br/> This prevents others from using your email address for subscribing/unsubscribing to Barchart Newsletters. </p> </div> </form> </div>'
    },
    c3th: function(e, t, a) {
        "use strict";
        var i = "EtfsFinder";
        angular.module(i, []).controller(i + ".etfsFinderCtrl", a("UgkE"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "c6f/": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterData.default = e.filterData.default || {}, e.filterData.default.value = e.filterData.default.value || [], e.$on("screenerRangeInputChanged", function() {
                        e.$broadcast("screenerRangeHelperReset")
                    })
                }],
                template: a("B36u")
            }
        }
        i.$inject = [], e.exports = i
    },
    cHrA: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.type = a, e.confirm = function() {
                t.close()
            }, e.cancel = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "confirmType"], e.exports = i
    },
    "cIi/": function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e, t, a) {
                return e === t && a ? a : e
            }
        }
    },
    cMke: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            var s, l = {
                fields: "symbol,symbolName,sectors,lastPrice,priceChange,percentChange,lowPrice1y,priceChange,percentChange,openPrice,lastPrice1yAgo,openPrice1y,highPrice1y,marketCap,peRatioTrailing,earningsPerShare,annualNetIncome.format(millions;0),beta,dividendRateTrailing,dividendYieldTrailing",
                method: "/quotes/get",
                raw: 1,
                symbols: "IBM"
            };
            e.symbolNotFound = !1, e.utils = i, e.routes = n.config.routes, e.submit = function(i) {
                s !== e.symbol && (e.symbol = e.symbol.toUpperCase(), (s = e.symbol) ? (l.symbols = s, o.search("symbol", s), a.getSymbolData(l).then(function(a) {
                    a.count > 0 && a.data[0] ? (e.data = a.data[0], e.symbolNotFound = !1, t.$broadcast("bc-stocks-sector-table-hide")) : (e.data = !1, e.symbolNotFound = !0, t.$broadcast("bc-stocks-sector-table-show"))
                }, function(a) {
                    e.data = !1, e.symbolNotFound = !0, t.$broadcast("bc-stocks-sector-table-show")
                })) : t.$broadcast("bc-stocks-sector-table-show"))
            }, e.getChartWidth = function() {
                var t = e.data.raw,
                    a = t.highPrice1y - t.lowPrice1y || 1;
                return (t.lastPrice - t.lowPrice1y) / a * 100
            }, e.getChartMark = function() {
                var t = e.data.raw;
                return (t.lastPrice1yAgo - t.lowPrice1y) / (t.highPrice1y - t.lowPrice1y) * 100
            }, e.$watch("symbol", function(a) {
                e.symbolNotFound = !1, o.search("symbol", a || null), a || (e.data = !1, t.$broadcast("bc-stocks-sector-table-show"))
            }), e.symbol = o.search().symbol || "", e.symbol && e.submit()
        }
        i.$inject = ["$scope", "$rootScope", "stocksSectorFinderFactory", "utils", "locationService", "$location", "$window"], e.exports = i
    },
    cQku: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v, y, w, C) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    type: "@",
                    list: "@",
                    listData: "@",
                    customList: "@",
                    customListValue: "@"
                },
                controller: ["$scope", function(a) {
                    var S = "",
                        x = [],
                        k = n.config.user.market;
                    a.state = "filters", a.STATE_FILTERS = "filters", a.STATE_RESULTS = "results", a.report = 0;
                    (a.myScreenerLink = u.route(n.config.routes["my.screeners"], {
                        tab: {
                            STK: "stocks",
                            ETF: "etfs",
                            FUND: "funds"
                        } [a.type] || "options"
                    }), a.filterDisplayFields = [], a.removeExcludedFields = [], a.isLoggedIn = d.isLoggedIn(), a.isPremier = d.isLoggedIn() && d.getUserData().is_premier, isNaN(+i.search().viewName)) || -1 !== c.getFieldsByViewName(i.search().viewName).indexOf("hasOptions") && (a.removeExcludedFields = ["hasOptions"]);
                    if (!a.isLoggedIn) {
                        var D = n.config.settings.markets[n.config.user.market].uri,
                            T = n.config.defaultScreeners[a.type].markets[D] || n.config.defaultScreeners[a.type].markets.us;
                        g.setAuthRef(n.config.defaultScreeners[a.type].ref), i.search("popularScreener", T)
                    }
                    i.search().screener || i.search().popularScreener || a.list || a.customList && a.isPremier ? a.list && a.listData ? (r.addFilterByName("symbolList", {
                        filters: {
                            default: {
                                value: [a.list],
                                meta: JSON.parse(a.listData)
                            }
                        }
                    }), a.isPremier || g.enableOptionPermissionCheck().setIgnore(["reset"]).setPremierRef("listScreen")) : a.customList && a.customListValue && a.isPremier && (a.customListValue = parseInt(a.customListValue), r.addFilterByName(a.customList, {
                        filters: {
                            default: {
                                value: [a.customListValue]
                            }
                        }
                    })) : r.addFilterByName("exchange"), h.import(m), a.$on("$destroy", function() {
                        h.resetAll()
                    }), a.$on(l.ON_SCREENER_CLEAR, function() {
                        g.disableOptionPermissionCheck(), a.savedScreener = null, a.popularScreener = null, i.search("orderBy", null), i.search("orderDir", null)
                    });
                    var _ = this;
                    a.$on(l.ON_SCREENER_APPLY_SAVED, function(e, t) {
                        switch (g.disableOptionPermissionCheck(), a.state) {
                            case "results":
                                _.setSavedScreener(t.screener), setTimeout(function() {
                                    a.formData.filters = r.getFilters(), a.applyFilters()
                                }, 0);
                                break;
                            case "filters":
                                _.setSavedScreener(t.screener)
                        }
                        a.isNewDisabled = d.getEodReportsNumber("screeners", "send_report") >= n.config.limits.reportsLimit
                    }), a.$on(l.ON_SCREENER_APPLY_EMPTY_TEMPLATE, function() {
                        g.disableOptionPermissionCheck(), a.savedScreener = null
                    }), a.formData = {
                        filters: r.getFilters(),
                        market: {}
                    }, a.savedScreener = null, a.successConfirmation = !1, setTimeout(function() {
                        if ("result" === i.search().tab) {
                            a.state = "results";
                            var e = a.$watchCollection(function() {
                                return a.formData.filters
                            }, function(t) {
                                t.length > 0 && (e(), i.search("tab", null), setTimeout(function() {
                                    a.applyFilters()
                                }))
                            })
                        }
                    }), this.setSavedScreener = function(e) {
                        a.savedScreener = e ? Object.create(e) : null;
                        var i = JSON.parse(e.filters),
                            o = 1;
                        (s.find(i, {
                            key: "exchange"
                        }) || s.find(i, {
                            key: "symbolList"
                        })) && (o = 0), r.removeAllFilters(o), t.parseFilters(i, e.type)
                    }, this.applyPopularScreener = function(e) {
                        a.savedScreener = null, a.popularScreener = e, r.removeAllFilters();
                        var i = JSON.parse(e.filters);
                        a.$broadcast("popularScreenerApplied", e), t.parseFilters(i, e.type)
                    }, a.dataTable = p;
                    var P = angular.copy(a.dataTable);
                    a.applyFilters = function() {
                        if (a.isLoggedIn) {
                            ! function() {
                                var e = a.dataTable.options.pagination || !1,
                                    t = a.dataTable.options.currentPage || !1;
                                a.dataTable.options = angular.copy(P.options), e && (a.dataTable.options.pagination = e);
                                t && (a.dataTable.options.currentPage = t)
                            }();
                            var t = [];
                            t = t.concat(a.filterDisplayFields), a.formData.filters.forEach(function(e) {
                                h.emit(e.key, a.dataTable, e)
                            }), r.prepareFilters(a.formData.filters, t).then(function(r) {
                                0 === t.length && t.push("tradeTime");
                                var l = angular.copy(r),
                                    d = !1,
                                    u = s.find(l, {
                                        field: "exchange"
                                    });
                                u && u.value && -1 !== u.value.indexOf("nonCommon") && (u.value.splice(u.value.indexOf("nonCommon"), 1), d = !0);
                                var p = e.createQuery(l).toString(),
                                    m = i.search().viewName || "main",
                                    h = {
                                        orderBy: "symbol",
                                        orderDir: "asc"
                                    };
                                a.savedScreener && a.savedScreener.view && (m = a.savedScreener.view, i.search("viewName", m), h = {
                                    orderBy: a.savedScreener.order_by,
                                    orderDir: a.savedScreener.order_dir
                                });
                                var g = c.getFieldsByViewName(m) || t.join();
                                if (b.setFilterViewFields(t), a.dataTable.options = s.merge({}, a.dataTable.options, c.getOptionsByViewName(m)), a.dataTable.options.screenerFields = Array.prototype.slice.call(t), a.dataTable.options = f.colorizeFields(a.dataTable.options, t, !0), "usd" === k) switch (a.type) {
                                    case "STK":
                                        p += d ? "&in(symbolType,(1,11))" : "&eq(symbolType,1)";
                                        break;
                                    case "ETF":
                                        p += "&eq(symbolType,7)";
                                        break;
                                    case "FUND":
                                        p += "&eq(symbolType,5)"
                                } else "cad" === k && "FUND" === a.type ? p += "&eq(symbolType,15)" : "cad" === k && "ETF" === a.type ? p += "&eq(symbolType,7)" : p += "&eq(symbolType,6)";
                                p += "&ge(tradeDate," + window.moment().subtract(7, "days").format("YYYY-MM-DD") + ")", a.dataTable.apiConfig.api = o.getApiConfig(p, {
                                    fields: g ? g.split(",") : [],
                                    orderBy: h.orderBy,
                                    orderDir: h.orderDir
                                }), S !== p || b.orderChanged ? (b.orderChanged = !1, S = p, x = t, a.dataTable.options.currentPage = 1, a.$broadcast("renderBarchartDataTable")) : (x.sort().toString() !== t.sort().toString() || b.ignoreUrlChange) && (x = t, a.$broadcast("renderBarchartDataTable")), n.scrollTo(0, 0), a.state = "results", b.ignoreUrlChange = !1
                            })
                        } else C.goToLogin(g.getAuthRef())
                    }, a.backToFilter = function() {
                        a.state = "filters", i.search().page && i.search("page", null)
                    }, a.$watch("savedScreener.send_report", function(e) {
                        a.report = e
                    }), a.isNewDisabled = d.getEodReportsNumber("screeners", "send_report") >= n.config.limits.reportsLimit, a.sendReport = function(e) {
                        a.isPremier ? a.savedScreener && a.savedScreener.send_report && !e ? (a.savedScreener.send_report = 0, a.isNewDisabled = !1, o.update(a.savedScreener.id, a.savedScreener).then(function() {
                            y.success("End of Day Email preferences have been saved.")
                        })) : a.isNewDisabled ? y.warning({
                            message: w("MAX_EOD_REPORTS"),
                            delay: 8e3
                        }) : a.$broadcast("bcScreenerSaveReport") : v.showPremier("eodScreeners")
                    }
                }],
                template: a("mmuc")
            }
        }
        i.$inject = ["screenerQueryService", "screenerParseService", "$location", "screenerFilterService", "screenerApiService", "$window", "_", "events", "barchartDatatableFieldsService", "authService", "utils", "screenerDatatableConfig", "screenerFilterRegisters", "screenerModifierListener", "screenerPermissionService", "barchartDatatableColorize", "screenerCurrentConfigService", "bcModalLoginSrv", "Notification", "textFactory", "authRouteService"], e.exports = i
    },
    cTMC: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            e.item = [];
            var s = "",
                l = {},
                c = {};

            function d(e) {
                i.batSymbolsData[e.symbol] = e
            }

            function u(t) {
                20 !== e.item.symbolType && (t.bidPrice && c.formatPrice(t.bidPrice) !== e.item.bidPrice && (e.item.bidPrice = c.formatPrice(t.bidPrice), l.bidPrice = !0), t.bidSize && t.bidSize !== e.item.bidSize && (e.item.bidSize = t.bidSize, l.bidPrice = !0), t.askPrice && c.formatPrice(t.askPrice) !== e.item.askPrice && (e.item.askPrice = c.formatPrice(t.askPrice), l.askPrice = !0), t.askSize && t.askSize !== e.item.askSize && (e.item.askSize = t.askSize, l.askPrice = !0))
            }

            function p(t) {
                i.profile[e.item.symbol] || (i.profile[e.item.symbol] = r.getMarketState().getProfile(t.symbol)), i.symbols[t.symbol] = t
            }

            function m() {
                i.connect().then(function() {
                    e.item.symbol && e.useBatData && (r.getRealtime().on("marketPriceChange", d, e.item.symbol), i.useBatData = !0), r.on("marketPriceChange", p, e.item.symbol)
                }), e.$on("realtimeUpdate", function() {
                    var t = [];
                    if (c = i.profile[e.item.symbol], i.useBatData && i.batSymbolsData ? ((t = i.batSymbolsData[e.item.symbol]) && (t = function(t) {
                            return t && t.state ? ("p" === t.state ? e.session = "Pre-market" : e.session = "Post-market", t = i.symbols[e.item.symbol]) : e.session = "Realtime", i.marketStatus = e.session, t
                        }(t)), t && t.mode && "R" !== t.mode && "Realtime" !== e.session && (t = i.symbols[e.item.symbol])) : t = i.symbols[e.item.symbol], t) {
                        switch (e.session) {
                            case "Pre-market":
                                ! function(t) {
                                    e.realtimeIndicator = !1, t.previousSettlementPrice && e.item.lastPrice !== c.formatPrice(t.previousSettlementPrice, !1) && (e.item.lastPrice = c.formatPrice(t.previousSettlementPrice, !1), l.lastPrice = !0), null !== t.previousPriceChange && e.item.priceChange !== c.formatPriceChange(t.previousPriceChange, !0) && (e.item.priceChange = c.formatPriceChange(t.previousPriceChange, !0), l.priceChange = !0), null !== t.previousPercentChange && e.item.percentChange !== c.formatPercentChange(t.previousPercentChange, !0) && (e.item.percentChange = c.formatPercentChange(t.previousPercentChange, !0), l.percentChange = !0), t.premarketPrice && e.item.lastPriceExt !== c.formatPrice(t.premarketPrice, !1) && (e.item.lastPriceExt = c.formatPrice(t.premarketPrice, !1), l.lastPriceExt = !0), null !== t.premarketPriceChange && e.item.priceChangeExt !== c.formatPriceChange(t.premarketPriceChange, !0) && (e.item.priceChangeExt = c.formatPriceChange(t.premarketPriceChange, !0), l.priceChangeExt = !0), null !== t.premarketPercentChange && e.item.percentChangeExt !== c.formatPercentChange(t.premarketPercentChange, !0) && (e.item.percentChangeExt = c.formatPercentChange(t.premarketPercentChange, !0), l.percentChangeExt = !0), t.tradeTimeDisplay && e.item.tradeTimeExt !== t.tradeTimeDisplay && (e.item.tradeTimeExt = t.tradeTimeDisplay);
                                    var a = t.previousTimeDateDisplay || t.timeDateDisplay;
                                    a && e.item.tradeTime !== a && (e.item.tradeTime = a), t.sessionDateDisplayLong && (e.item.sessionDateDisplayLong = t.sessionDateDisplayLong), u(t)
                                }(t);
                                break;
                            case "Post-market":
                                ! function(t) {
                                    e.realtimeIndicator = !1, t.todayPrice && e.item.lastPrice !== c.formatPrice(t.todayPrice, !1) && (e.item.lastPrice = c.formatPrice(t.todayPrice, !1), l.lastPrice = !0), null !== t.priceChange && e.item.priceChange !== c.formatPriceChange(t.priceChange, !0) && (e.item.priceChange = c.formatPriceChange(t.priceChange, !0), l.priceChange = !0), null !== t.percentChange && e.item.percentChange !== c.formatPercentChange(t.percentChange, !0) && (e.item.percentChange = c.formatPercentChange(t.percentChange, !0), l.percentChange = !0), t.timeDisplay && e.item.tradeTime !== t.timeDisplay && (e.item.tradeTime = t.timeDisplay), t.postmarketPrice && e.item.lastPriceExt !== c.formatPrice(t.postmarketPrice, !1) && (e.item.lastPriceExt = c.formatPrice(t.postmarketPrice, !1), l.lastPriceExt = !0), null !== t.postmarketPriceChange && e.item.priceChangeExt !== c.formatPriceChange(t.postmarketPriceChange, !0) && (e.item.priceChangeExt = c.formatPriceChange(t.postmarketPriceChange, !0), l.priceChangeExt = !0), null !== t.postmarketPercentChange && e.item.percentChangeExt !== c.formatPercentChange(t.postmarketPercentChange, !0) && (e.item.percentChangeExt = c.formatPercentChange(t.postmarketPercentChange, !0), l.percentChangeExt = !0), t.tradeTimeDisplay && e.item.tradeTimeExt !== t.tradeTimeDisplay && (e.item.tradeTimeExt = t.tradeTimeDisplay), t.sessionDateDisplayLong && (e.item.sessionDateDisplayLong = t.sessionDateDisplayLong), u(t)
                                }(t);
                                break;
                            default:
                                ! function(t) {
                                    var a;
                                    e.realtimeIndicator = t.mode && "R" === t.mode || !1, t.lastPrice && ("s" === t.flag || "p" === t.flag ? (e.settled = !0, a = c.formatPriceForSettlement(t.lastPrice, !1)) : (e.settled = !1, a = c.formatPrice(t.lastPrice, !1)), e.item.lastPrice !== a && (e.item.lastPrice = a, l.lastPrice = !0)), null !== t.priceChange && e.item.priceChange !== c.formatPriceChange(t.priceChange, !0) && (e.item.priceChange = c.formatPriceChange(t.priceChange, !0), l.priceChange = !0), null !== t.percentChange && e.item.percentChange !== c.formatPercentChange(t.percentChange, !0) && (e.item.percentChange = c.formatPercentChange(t.percentChange, !0), l.percentChange = !0), t.sessionDateDisplayLong && (e.item.sessionDateDisplayLong = t.sessionDateDisplayLong), t.timeDisplay && e.item.tradeTime !== t.timeDisplay && (e.item.tradeTime = t.timeDisplay), u(t)
                                }(t)
                        }
                        t.lastPriceDirection && (s = t.lastPriceDirection), e.item.active = t.active
                    }
                    e.isReady = !0
                }), e.$on("realtimeDeleteClasses", function() {
                    l = {}
                })
            }

            function h(t) {
                e.session = "", e.item = !1, t.symbolTypeSpec = t.symbolType.toString();
                var i = t.symbolCode.match(/:(.*)$/g);
                i && i[0] && (t.symbolTypeSpec += i[0]), e.symbolUrl = a.route(o.config.routes["quotes.overview"], {
                    sector: n.getSector(t.symbolType),
                    symbol: t.symbol
                }), e.init(angular.copy(t))
            }
            e.setColor = a.setColor, e.useBatData = !1, e.session = "Realtime", e.isReady = !0, e.realtimeIndicator = !1, e.symbolTypesMapping = o.config.symbols.type_names, t.$on("getSymbolData", function() {
                t.$broadcast("setSymbolData", e.item)
            }), e.highlightValue = function(e) {
                if (e && l[e]) return s + "-highlight"
            }, e.init = function(t) {
                e.useBatData = !1, i.useBatData = !1, e.item = t, 1 !== e.item.symbolType && 6 !== e.item.symbolType && 7 !== e.item.symbolType || (e.useBatData = !0), t.fullscreen && (e.symbolUrl = a.route(o.config.routes["quotes.overview"], {
                    sector: n.getSector(e.item.symbolType),
                    symbol: e.item.symbol
                })), m()
            }, e.$on("dashboardCurrentSymbolChanged", function(e, t) {
                h(t)
            }), e.$on("dashboardHeaderSymbolChanged", function(e, t) {
                h(t)
            }), e.needAskBidPrice = function() {
                return "Futures" === e.symbolTypesMapping[e.item.symbolTypeSpec] ? !e.settled && e.item.bidPrice && e.item.askPrice : e.item.bidPrice && e.item.askPrice
            }
        }
        i.$inject = ["$scope", "$rootScope", "utils", "realtimeConnectService", "realtimeConnection", "$window", "quotesService"], e.exports = i
    },
    cUp1: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    content: "="
                },
                controller: ["$scope", function(t) {
                    var a = angular.copy(e.investment);
                    a.options.tooltip = {
                        formatter: function() {
                            return "<b>" + this.key.toUpperCase() + "</b>: <b>" + (100 * this.point.y).toFixed(2) + "%</b>"
                        }
                    }, t.config = a, t.$watch("content", function(e) {
                        e && (a.series[0].data = [], Object.keys(t.content).forEach(function(e) {
                            t.content[e] && a.series[0].data.push({
                                name: e,
                                y: t.content[e].percent,
                                value: t.content[e].value
                            })
                        }))
                    })
                }],
                template: a("+NOo")
            }
        }
        i.$inject = ["chartsSettings"], e.exports = i
    },
    cWwe: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            t.existingTemplates = [], t.template = {
                name: "",
                description: "",
                template: null,
                definition: null
            }, t.templates = [], t.showAutocompleteList = !1, o.getChartTemplatesList().then(function(e) {
                t.templates = e.data
            }), t.saveTemplate = function() {
                var l = angular.copy(t.template);
                o.getChartTemplatesList().then(function(t) {
                    var c = _.find(t.data, {
                        name: l.name
                    });
                    if (c) l.id = c.id, n.updateTemplateModal(l), a.close();
                    else {
                        if (i.chartTemplates()) return !1;
                        o.saveChartTemplate(r.createTemplate(l)).then(function(t) {
                            r.addTemplateToList(t), e.$broadcast("interactiveChartTemplatesListUpdated", {
                                template: t
                            }), s.success(l.name + " has been saved as a template."), a.close()
                        }, function(e) {
                            console.warn("Template could not be saved: " + e)
                        })
                    }
                })
            }, t.startsWith = function(e, t) {
                return 0 === (e + "").toLowerCase().indexOf(t.toLowerCase())
            }, t.toggleAutocompleteList = function() {
                t.showAutocompleteList = !t.showAutocompleteList
            }, t.applyExistingTemplate = function(e) {
                t.showAutocompleteList = !1, t.template.name = e.name
            }, t.modalDismiss = function() {
                a.dismiss()
            }
        }
        i.$inject = ["$rootScope", "$scope", "$modalInstance", "limitsService", "interactiveChartTemplates", "interactiveChartTemplateApiFactory", "interactiveChartModals", "Notification"], e.exports = i
    },
    caPe: function(e, t, a) {
        "use strict";
        angular.module("charts", []).directive("bcImageMapTooltip", a("y9C9")).directive("bcSemiCircleChart", a("nE1I")).service("bcMarketDataChart", a("xDN7").default)
    },
    cbB4: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                subscribe: function(r) {
                    return e.call(a.API_URL + "/eod-reports/subscribe", t.PUT, {
                        name: r,
                        market: i.config.user.market
                    }, [])
                },
                unsubscribe: function(i) {
                    return e.call(a.API_URL + "/eod-reports/unsubscribe", t.PUT, {
                        name: i
                    }, [])
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "apiConfig", "$window"], e.exports = i
    },
    cdia: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = this;
            t.dataLoading = !0;
            var a = {
                    method: "/historical/get",
                    type: "minutes",
                    fields: "tradeTime,lastPrice",
                    interval: 1440,
                    range: 30,
                    orderBy: "tradeTime",
                    orderDir: "asc"
                },
                i = [{
                    title: "S&P 500",
                    symbols: [{
                        name: "50 Day",
                        symbol: "$S5FI",
                        color: "#1E76CE"
                    }, {
                        name: "100 Day",
                        symbol: "$S5OH",
                        color: "#434348"
                    }],
                    data: []
                }, {
                    title: "Russell",
                    symbols: [{
                        name: "50 Day",
                        symbol: "$R2FI",
                        color: "#33B41A"
                    }, {
                        name: "100 Day",
                        symbol: "$R2OH",
                        color: "#DA6A1D"
                    }],
                    data: []
                }, {
                    title: "DOW",
                    symbols: [{
                        name: "50 Day",
                        symbol: "$DIFI",
                        color: "#8085E9"
                    }, {
                        name: "100 Day",
                        symbol: "$DIOH",
                        color: "#F15C80"
                    }],
                    data: []
                }];
            switch (t.selectSymbol = {
                symbol: ""
            }, config.user.market) {
                case "usd":
                    t.chartSymbolsData = i, t.selectSymbol.symbol = "S&P 500";
                    break;
                case "cad":
                    t.chartSymbolsData = [{
                        title: "TSX Comp",
                        symbols: [{
                            name: "50 Day",
                            symbol: "$TCFI",
                            color: "#1E76CE"
                        }, {
                            name: "100 Day",
                            symbol: "$TCOH",
                            color: "#434348"
                        }],
                        data: []
                    }, {
                        title: "TSX 60",
                        symbols: [{
                            name: "50 Day",
                            symbol: "$TSFI",
                            color: "#33B41A"
                        }, {
                            name: "100 Day",
                            symbol: "$TSOH",
                            color: "#DA6A1D"
                        }],
                        data: []
                    }], t.selectSymbol.symbol = "TSX Comp";
                    break;
                default:
                    t.chartSymbolsData = i, t.selectSymbol.symbol = "S&P 500"
            }
            t.chartConfig = {
                options: {
                    chart: {
                        height: 330,
                        style: {
                            fontFamily: '"Droid Sans", Arial, sans-serif'
                        }
                    },
                    title: {
                        text: ""
                    },
                    subtitle: {
                        text: "Moving Averages Key:",
                        style: {
                            color: "#000000"
                        },
                        x: -75,
                        y: 17
                    },
                    legend: {
                        verticalAlign: "top",
                        itemStyle: {
                            color: "#000000",
                            fontWeight: "400"
                        },
                        itemDistance: 3,
                        itemWidth: 75,
                        x: 70
                    },
                    xAxis: {
                        gridLineWidth: 1,
                        type: "datetime",
                        dateTimeLabelFormats: {
                            week: "%b %e",
                            month: "%b %e"
                        },
                        labels: {
                            style: {
                                color: "#000000"
                            }
                        },
                        tickInterval: 6912e5
                    },
                    yAxis: {
                        title: {
                            text: ""
                        },
                        labels: {
                            format: "{value} %",
                            style: {
                                color: "#000000"
                            }
                        },
                        opposite: !0
                    },
                    tooltip: {
                        shape: "square",
                        borderRadius: 0,
                        borderWidth: 0,
                        shadow: !1,
                        useHTML: !0,
                        style: {
                            color: "#ffffff",
                            padding: "0px"
                        },
                        formatter: function() {
                            return '<div class="tooltip" style="padding: 5px 7px; text-align: center; background-color:' + this.series.color + ';"><div>' + Highcharts.dateFormat("%m/%d/%y", new Date(this.x)) + "</div><b>" + this.y + " %</b></div>"
                        }
                    },
                    plotOptions: {
                        line: {
                            animation: !1
                        },
                        series: {
                            lineWidth: 2,
                            marker: {
                                enabled: !1
                            },
                            events: {
                                legendItemClick: function() {
                                    for (var e = !!this.visible, t = 0, a = 0, i = this.chart.series.length; a < i; a++) this.chart.series[a].visible && t++;
                                    return !e || t > 1
                                }
                            },
                            states: {
                                hover: {
                                    lineWidth: 2
                                }
                            }
                        }
                    },
                    credits: {
                        enabled: !1
                    }
                },
                series: t.chartSymbolsData[0].data
            }, t.setChartData = function(e) {
                t.chartConfig.series = e
            }, t.chartSymbolsData.forEach(function(i) {
                i.symbols.forEach(function(r) {
                    var o = angular.copy(a);
                    o.symbol = r.symbol, e.getPercentOfStocksAboveMovAvg(o).then(function(e) {
                        var a = {};
                        a.name = r.name, r.color && (a.color = r.color), a.data = [], e.data.forEach(function(e) {
                            var t = e.tradeTime.split(" ")[0].replace(/(\d\d)$/, "20$1").split("/"),
                                i = Date.UTC(Number(t[2]), Number(t[0] - 1), Number(t[1]));
                            a.data.push([i, Number(e.lastPrice)])
                        }), "50 Day" === a.name ? i.data.unshift(a) : i.data.push(a), t.dataLoading = !1
                    }, function(e) {
                        console.error("Percent of stocks above moving average widget error:", e), t.dataLoading = !1
                    })
                })
            })
        }
        i.$inject = ["PercentOfStocksAboveMovAvgApiFactory"], e.exports = i
    },
    ck8N: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n = 2e3;

            function s(r, o) {
                var s = angular.copy(r),
                    l = s.customGetParameters || "";
                if ("string" != typeof l) throw new Error("customGetParameters must be a string");
                return function(e) {
                    var t = "";
                    for (var a in e) t += a, t += e[a];
                    return t.length
                }(angular.copy(s)) > n ? (delete s.customGetParameters, function(r, o, n) {
                    var s = n.split("&");
                    return s.length && s.forEach(function(e) {
                        e && (r[e] = "")
                    }), e.call(a.buildUrl(i.API_URL + o), t.POST, r).then(function(e) {
                        return e
                    })
                }(s, o, l)) : (delete s.customGetParameters, e.call(a.buildUrl(i.API_URL + o, s, l), t.GET).then(function(e) {
                    return e
                }))
            }
            return {
                makeRequest: function(e, t) {
                    var a, i = [],
                        n = angular.copy(e),
                        l = Object.keys(n.api);
                    if (n.api.hasOwnProperty("method")) {
                        void 0 === n.api.raw && (n.api.raw = 1), "search" === n.api.method ? a = "/search" : "corporateActions" === n.api.method ? a = "/corporate-actions" : "signalGuide" === n.api.method ? a = "/signal-guide" : "portfolio" === n.api.method ? (a = "/portfolio/" + n.api.portfolioId, delete n.api.portfolioId) : a = "EtfConstituents" === n.api.method ? ~n.api.method.search(/^\//) ? n.api.method : "/" + n.api.method : ~n.api.method.search(/^\//) ? n.api.method : "/" + n.api.method + "/get", n.api.meta = n.api.meta || "field.shortName,field.type", ~n.api.meta.indexOf("field.description") || (n.api.meta += ",field.description"), delete n.api.method, n.api.fields && (~n.api.fields.indexOf("symbolCode") || (n.api.fields += ",symbolCode"), ~n.api.fields.indexOf("symbolType") || (n.api.fields += ",symbolType"), t || (null === n.api.fields.match(/lastPrice/i) ? (n.api.fields += ",lastPrice,dailyLastPrice", o.$broadcast("excludeLastPrice")) : o.$broadcast("removeFromExcludeLastPrice"))), n.api.hasOptions && (~n.api.fields.indexOf("hasOptions") || (n.api.fields += ",hasOptions"));
                        var c = s(n.api, a);
                        i.push(c)
                    } else !n.api.hasOwnProperty("method") && angular.isObject(n.api[l[0]]) && l.forEach(function(e) {
                        var t = n.api[e];
                        if (t && t.hasOwnProperty("method")) {
                            void 0 === t.raw && (t.raw = 1), t.meta = t.meta || "field.shortName,field.type", ~t.meta.indexOf("field.description") || (t.meta += ",field.description"), ~t.fields.indexOf("symbolCode") || (t.fields += ",symbolCode"), ~t.fields.indexOf("symbolType") || (t.fields += ",symbolType"), t.hasOptions && (~t.fields.indexOf("hasOptions") || (t.fields += ",hasOptions")), a = ~t.method.search(/^\//) ? t.method : "/" + t.method + "/get", delete t.method;
                            var r = s(t, a);
                            i.push(r)
                        }
                    });
                    return r.all(i)
                },
                query: s
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig", "$q", "$rootScope"], e.exports = i
    },
    cmPK: function(e, t, a) {
        "use strict";
        e.exports = function() {
            this.saveAsImage = function(e, t) {
                var a = document.createElement("form"),
                    i = document.createElement("input"),
                    r = document.createElement("input"),
                    o = document.createElement("input");
                a.setAttribute("method", "post"), a.setAttribute("action", "/download/technical-chart/image"), o.setAttribute("type", "hidden"), o.setAttribute("name", "image"), o.setAttribute("value", e), r.setAttribute("type", "hidden"), r.setAttribute("name", "title"), r.setAttribute("value", t), i.setAttribute("value", angular.element('meta[name="csrf-token"]').attr("content")), i.setAttribute("name", "_token"), i.setAttribute("type", "hidden"), a.appendChild(i), a.appendChild(o), a.appendChild(r), document.getElementsByTagName("body")[0].appendChild(a), a.submit(), document.getElementsByTagName("body")[0].removeChild(a)
            }
        }
    },
    csI6: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e, t) {
                var a = e;
                return void 0 !== e && (a = {}, Object.keys(e).forEach(function(i) {
                    ~t.indexOf(i) || (a[i] = e[i])
                })), a
            }
        }
    },
    cuNM: function(e, t, a) {
        "use strict";
        e.exports = {
            apiConfig: {},
            options: {
                class: "no-top-border",
                colorize: ["priceChange", "percentChange"],
                symbolDetails: !0,
                quickLinks: !0,
                tableName: "default",
                paginationHideShowAll: !0,
                disabledRealtime: !0,
                emptyText: "No symbols found that match the requirements."
            }
        }
    },
    cuYa: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class=modal-header> &nbsp; <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.close();></i> </div> <div class="modal-settings-row row-bar-type"> <label class=label for=bc-interactive-chart__select-mobile-template>Template:</label> <div class="bc-dropdown styled"> <select name=selectInteractiveChartTemplate id=bc-interactive-chart__select-mobile-template data-ng-model=$ctrl.selectedTemplate data-ng-change=$ctrl.apply() data-ng-options="template.id as template.name for template in $ctrl.templates"> <option value="">None</option> </select> </div> <div class=text-center> <a target=_self data-ng-href="[[ $ctrl.link ]]">Create Chart Template</a> </div> </div> </div>'
    },
    cwIa: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a, i) {
                    var r = i.linkMp4,
                        o = i.title;

                    function n() {
                        t.$root.$broadcast("bc-modal-show-video", {
                            linkMp4: r,
                            title: o
                        })
                    }
                    e.isMobileAndTablet() ? (a.on("touchstart", n), t.$on("$destroy", function() {
                        a.off("touchstart", n)
                    })) : (a.on("click", n), t.$on("$destroy", function() {
                        a.off("click", n)
                    }))
                },
                $attrs: {
                    linkMp4: "@",
                    title: "@"
                }
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    "d/bi": function(e, t, a) {
        "use strict";
        angular.module("ExtendedHelp", []).directive("toggleExtendedHelp", a("6JP8")).directive("shareHelpViaEmail", a("7g+z"));
        e.exports = {
            enable: !0,
            name: "ExtendedHelp"
        }
    },
    d0kw: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                replace: !0,
                scope: {
                    items: "="
                },
                controller: ["$scope", function(e) {
                    var t = function(t) {
                        for (var a = 0, i = e.items[0].data, r = 0; r < i.length; r++) i[r].raw[t] && (a += +i[r].raw[t]);
                        return a
                    };
                    e.$watch("items", function() {
                        e.totalVolume = t("volume"), e.totalOpenInterest = t("openInterest")
                    }, !0)
                }],
                template: a("9OXA")
            }
        }
        i.$inject = [], e.exports = i
    },
    d7E3: function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-technical-chart-template-name-modal"> <h5>Save Chart Template</h5> <div class=modal-content-container> <form novalidate class=bc-form name=templateNameForm data-ng-submit="templateNameForm.$valid && save()"> <div class=form-items> <div class="form-item clear-button-wrapper"> <input type=text name=templateName data-ng-model=template.name data-unique-name=existedNames data-ng-maxlength=20 data-barchart-clear-input placeholder="Enter a name..." required> </div> <div class=form-item-errors> <span class=ng-hide data-ng-show=templateNameForm.templateName.$error.maxlength> Name must be between 1 and 20 characters </span> <span class=ng-hide data-ng-show=templateNameForm.templateName.$error.uniqueName> A Template already exists with that name. Please enter a new name. </span> </div> </div> <div class=form-buttons> <input type=submit class="bc-button save light-blue" value=Save> </div> </form> </div> </div>'
    },
    d7lb: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            return {
                restrict: "E",
                scope: {
                    formData: "=",
                    symbolSector: "=",
                    isSpread: "@",
                    technicalChartForm: "=form",
                    formSubmitted: "=",
                    disableAutoYearFill: "@"
                },
                controller: ["$scope", "_", function(s, l) {
                    s.formData = s.formData || r.basic;
                    var c = e.isMobileOnly() ? i.mobile : i.desktop,
                        d = "true" === s.disableAutoYearFill;
                    s.fields = t, s.isSpread = !!s.isSpread, s.chartStyle = a("k9MA")(c, t, s.isSpread).chartStyle, s.switchVolume = a("k9MA")(c, t, s.isSpread).switchVolume, s.extraSettings = a("k9MA")(c, t, s.isSpread).extraSettings, s.frequency = a("Sk/9")(c, s.symbolSector).frequency, s.defaultTimePeriods = a("Qi0S")(c).defaultTimePeriods, s.timePeriods = a("Qi0S")(c).timePeriods, s.symbolVolume = a("R6Lc")(c, s.symbolSector).symbolVolume, s.chartSizes = a("mNZ6"), s.showDatePickerButtons = !0, s.extraSettings.pricebox = s.formData[t.PRICEBOX], s.timePeriodsList = s.timePeriods[s.formData[t.FREQUENCY]], e.isMobileOnly() && !o.search()[t.HEIGHT] && (s.formData[t.HEIGHT] = "500"), s.disableVolume = !1, s.isSpread && (s.formData[t.STYLE] = "LINE", s.disableVolume = !0), s.changeFrequency = function() {
                        if (s.formData[t.TIME_PERIOD] = s.defaultTimePeriods[s.formData[t.FREQUENCY]], s.timePeriodsList = s.timePeriods[s.formData[t.FREQUENCY]], "I" === s.formData[t.FREQUENCY] ? s.formData[t.MINUTES_PERIOD] = 15 : s.formData[t.MINUTES_PERIOD] = "", s.formData[t.DATE_FROM] && s.formData[t.DATE_TO] && (s.formData[t.DATE_FROM] = null, s.formData[t.DATE_TO] = null), "futures" === s.symbolSector) switch (s.formData[t.FREQUENCY]) {
                            case "DO":
                            case "DC":
                            case "WO":
                            case "WC":
                            case "MO":
                            case "MC":
                                s.formData[t.VOLUME] = "contract";
                                break;
                            case "DN":
                            case "WN":
                            case "MN":
                                s.formData[t.VOLUME] = "total"
                        }
                    }, s.changeTimePeriod = function() {
                        switch ("I" === s.formData[t.FREQUENCY] && "H120" !== s.formData[t.TIME_PERIOD] && (s.formData[t.MINUTES_PERIOD] = 15), s.formData[t.TIME_PERIOD]) {
                            case "M60":
                                s.formData[t.MINUTES_PERIOD] = 60;
                                break;
                            case "M90":
                            case "H90":
                                s.formData[t.MINUTES_PERIOD] = 90;
                                break;
                            case "M120":
                                s.formData[t.MINUTES_PERIOD] = 120
                        }
                    }, s.$watch(function() {
                        return s.formData[t.TIME_PERIOD]
                    }, function(a, i) {
                        if ("H120" !== a || "I" !== s.formData[t.FREQUENCY]) {
                            var r, o = new Date;
                            o.setMonth(0), o.setDate(1), r = n("date")(o, "yyyy-MM-dd"), "YTD" !== a || !~["DO", "DN", "DC"].indexOf(s.formData[t.FREQUENCY]) || d ? ~["DO", "DN", "DC"].indexOf(s.formData[t.FREQUENCY]) && "YTD" === i && "YTD" !== a && s.formData[t.DATE_FROM] === r && (s.formData[t.DATE_FROM] = null) : s.formData[t.DATE_FROM] = r
                        } else s.formData[t.MINUTES_PERIOD] = e.isMobileOnly() ? 240 : 120
                    }), s.$watch(function() {
                        return s.formData[t.FREQUENCY]
                    }, function(e, a) {
                        s.formData[t.TIME_PERIOD] = s.formData[t.TIME_PERIOD] || s.defaultTimePeriods[s.formData[t.FREQUENCY]], s.timePeriodsList = s.timePeriods[s.formData[t.FREQUENCY]]
                    }), s.changeDisplaySetting = function(e, a) {
                        a === t.PRICE_SCALE && "1" === e ? "1" === s.formData[t.SCALE] && (s.formData[t.SCALE] = "0") : a === t.SCALE && "1" === e && "1" === s.formData[t.PRICE_SCALE] && (s.formData[t.PRICE_SCALE] = "0")
                    }, s.$watch(function() {
                        return s.formData[t.PRICEBOX]
                    }, function(e) {
                        s.extraSettings.pricebox = e
                    }), s.$on("applyBasicSettings", function() {
                        s.formData[t.PRICEBOX] = s.extraSettings.pricebox
                    }), s.$on("clearSettings", function(e, a) {
                        s.extraSettings.pricebox = a.defaultData[t.PRICEBOX]
                    })
                }],
                template: a("KJLm")
            }
        }
        i.$inject = ["utils", "technicalChartFields", "technicalChartLabels", "technicalChartSettingsService", "$location", "$filter"], e.exports = i
    },
    dBpo: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {},
                controller: ["authService", "$scope", "$rootScope", "dashboardInlineDataService", function(e, t, a, i) {
                    var r = this,
                        o = e.getUserData() || {},
                        n = !1;
                    r.chartStyle = o.preferences ? o.preferences.charts_style : "interactive", r.currentSymbol = null, r.showChart = !0, t.$on("dashboardTabChanged", function() {
                        r.showChart || n || (r.showChart = !0)
                    }), t.$on("dashboardCurrentSymbolChanged", function(e, t, o) {
                        console.log("[My Charts Chart]: event <dashboardCurrentSymbolChanged> ", t), "interactive" !== r.chartStyle && a.$broadcast("onDashboardTechnicalChartPreference"), "interactive" === r.chartStyle ? i.updateInlineDataForMainChart(t.symbol).then(function() {
                            r.currentSymbol = t, r.showChart || n || (r.showChart = !0)
                        }).catch(function(e) {
                            console.log("[My Charts Chart]: failed to update inline data, error:", e)
                        }) : (t.primitiveSymbol = t.symbol, r.currentSymbol && r.currentSymbol.symbol !== t.symbol && !o && a.$broadcast("technicalChartSymbolChanged", t.symbol), r.currentSymbol = t)
                    }), t.$on("myChartClearChart", function() {
                        r.currentSymbol = null
                    }), t.$on("myChartHideChart", function() {
                        r.showChart = !1
                    }), t.$on("showFlipchartForMyChart", function() {
                        n = !0
                    }), t.$on("mediaOverlayClosed", function() {
                        n = !1
                    })
                }],
                controllerAs: "$ctrl",
                template: a("OL83")
            }
        }
    },
    dH3A: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "A",
                require: "ngModel",
                link: function(e, t, a, i) {
                    var r = /^[_a-zA-Z0-9]+(.[_a-zA-Z0-9]+)*@[a-zA-Z0-9-]+(.[a-z0-9-]+)*(.[a-z]{2,4})$/,
                        o = !0;
                    i.$parsers.unshift(function(e) {
                        return o = !e || r.test(e), i.$setValidity("invalidEmail", o), o ? e : void 0
                    })
                }
            }
        }
    },
    dORO: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterData.default = e.filterData.default || {}, e.filterData.default.value = e.filterData.default.value || []
                }],
                template: a("JkbY")
            }
        }
        i.$inject = [], e.exports = i
    },
    dZpm: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "lastFourQuartersConfig", "_", function(e, t, a) {
                var i = [],
                    r = [],
                    o = JSON.parse(e.chartData);
                e.config = angular.copy(t), e.config.series = [], a.forEach(o, function(o, n) {
                    var s = angular.copy(t.series[0]);
                    a.forEach(o, function(e) {
                        e.x = new Date(e.x).getTime()
                    }), i.push(a.result(a.min(o, function(e) {
                        return e.y
                    }), "y")), r.push(a.result(a.max(o, function(e) {
                        return e.y
                    }), "y")), s.name = n, s.data = o, e.config.series.push(s)
                }), e.config.options.yAxis.tickPositions = [a.min(i), a.max(r)]
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    chartData: "@"
                },
                template: a("k6QZ"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    dcCy: function(e, t) {
        e.exports = '<div class="study-items-block clearfix"> <label class=section-label for=bc-technical-chart__select-study>Study:</label> <div class="bc-dropdown styled grey-chevron"> <select id=bc-technical-chart__select-study data-ng-change=addStudyItem($event) name=technicalStudy data-ng-model=technicalStudy> <option value="">--- Add an Overlay/Indicator ---</option> <option value="[[ ::item.code ]]" data-ng-repeat="item in ::studies track by $index" data-ng-bind-html=item.name></option> </select> </div> <div class=indicator-link> <a target=_blank data-ng-href="[[ ::indicatorHelpLink ]]">Indicator Help</a> </div> <div class="group-labeled group-study-size"> <label for=bc-technical-chart__select-study-size>Study Size:</label> <div id=bc-technical-chart__select-study-size class="bc-dropdown styled bc-technical-chart__select-study-size"> <select name=studySize data-ng-model=formData[fields.STUDYHEIGHT] data-ng-options="item.key as item.value for item in studySizes"> </select> </div> </div> <div class=studies-items data-bc-drag-sortable data-items=formData[fields.INDICATORS_OBJECT] data-ng-show=formData[fields.INDICATORS_OBJECT].length> <div class=study-item data-ng-repeat="study in formData[fields.INDICATORS_OBJECT] track by $index"> <div class=item-delete-button-block> <i class="bc-glyph-minus-circle red" data-ng-click="removeStudy($index, $event)"></i> </div> <span data-ng-click="changeStudy(study, $event, $index)" class=study-text data-ng-bind-html=showStudyTitle(study)></span> </div> </div> </div>'
    },
    deu8: function(e, t, a) {
        "use strict";

        function i(e, t) {
            var a, i = [],
                r = [],
                o = [],
                n = !1,
                s = !1,
                l = ["raw", "symbolCode", "updatedFields", "hasOptions", "lastPriceDirection", "customLinks"],
                c = !1,
                d = !1,
                u = {},
                p = !1,
                m = [];

            function h(e) {
                var t = e.options || {};
                a = e.excluded && !s ? e.excluded : angular.copy(l), t.showSymbolType || a.push("symbolType"), t.tableName ? i[t.tableName] = e.data : i.default = e.data
            }
            return e.$on("onBarchartDataTableRendered", function(e, t) {
                t.meta && t.meta.field && (t.options && "sidebyside" === t.options.tableName ? o = t.meta.field : r = t.meta.field), p = t.options.portfolioTransaction, t.options.watchlist && t.options.watchlistFlags && (u = t.options.watchlistFlags), t.middleware ? Object.keys(t.data).forEach(function(e) {
                    var a = t.options.groupNameKeys && t.options.groupNameKeys[e] || e.toLowerCase();
                    h({
                        data: t.data[e],
                        options: {
                            tableName: a,
                            exclude: t.options.exclude
                        }
                    })
                }) : t.options && t.options.tableName && "sidebyside" === t.options.tableName ? function(e) {
                    var t = e.options || {};
                    m = e.excluded && !s ? e.excluded : angular.copy(l), t.showSymbolType || m.push("symbolType");
                    i.sidebyside = e.data
                }(t) : h(t)
            }), e.$on("tableHasBeenSorted", function(e, t) {
                h(t)
            }), e.$on("setCustomData", function(e, t) {
                t.meta && (r = t.meta), h(t)
            }), e.$on("customHandlerUpdate", function(e, t) {
                i[t.tableName || "sidebyside"] = t.data, t.meta && (t.tableName && "sidebyside" !== t.tableName ? r = t.meta : o = t.meta)
            }), e.$on("notesHasBeenUpdated", function(e, t) {
                u = t
            }), e.$on("toggleClosedPositions", function(e, t) {
                c = !t
            }), e.$on("onBarchartChartViewRendered", function(e, t) {
                t.meta && t.meta.field && (r = t.meta.field), h(t)
            }), e.$on("filterChange", function(e, t) {
                t.name && "viewName" === t.name && (s = "chart" === t.value)
            }), e.$on("excludeLastPrice", function() {
                n = !0
            }), e.$on("removeFromExcludeLastPrice", function() {
                n = !1
            }), {
                getTablesData: function(e, l) {
                    var h, g = [],
                        f = n ? a.concat(["lastPrice", "dailyLastPrice"]) : angular.copy(a);
                    if (function(e, a) {
                            d = !1, p ? e.every(function(e) {
                                if (i[e] && t.find(i[e], function(e) {
                                        return e.raw && (e.raw.tooltip.notes || e.raw.tooltip.low_alert || e.raw.tooltip.high_alert)
                                    })) return d = !0, !1
                            }) : t.isEmpty(u) || a || Object.keys(u).every(function(e) {
                                if (u[e].notes || u[e].high_flag || u[e].low_flag) return d = !0, !1
                            })
                        }(e = s ? ["chartView"] : e, l), e) {
                        var b, v;
                        m && "sidebyside" === e[0] && (f = n ? m.concat(["lastPrice", "dailyLastPrice"]) : angular.copy(m)), r && (o && "sidebyside" === e[0] ? (b = o.shortName ? o.shortName : o.name, v = o.type || {}) : (b = r.shortName ? r.shortName : r.name, v = r.type || {}), h = [], Object.keys(b).forEach(function(e) {
                            -1 !== f.indexOf(e) && "optionType" !== e || h.push(b[e])
                        }), d && h.push("Notes", "Low Flag", "High Flag"), g.push(h)), e.forEach(function(e) {
                            i[e] && i[e].forEach(function(e) {
                                h = [], c && e.raw && e.raw.exit_price || (e.blankRow || Object.keys(e).forEach(function(t) {
                                    if ("$$hashKey" === t) return !1;
                                    if (-1 === f.indexOf(t) || "optionType" === t)
                                        if (v[t] && -1 !== ["dollars", "price", "priceChange", "integer", "float"].indexOf(v[t])) {
                                            var a = e.raw[t];
                                            "lastPrice" === t && a && -1 !== a.toString().indexOf("s") && (a = a.replace("s", "")), h.push(a)
                                        } else "symbolName" === t ? h.push(e.raw[t]) : "symbol" === t && 0 === e[t].indexOf("-") ? h.push(" " + e[t]) : v[t] && "percentChange" === v[t] && "unch" === e[t] ? h.push("0.00%") : h.push(e[t])
                                }), d && (e.raw && e.raw.tooltip ? (h.push(e.raw.tooltip.notes || ""), h.push(e.raw.tooltip.low_alert || ""), h.push(e.raw.tooltip.high_alert || "")) : u && u[e.symbol] && (h.push(u[e.symbol].notes || ""), h.push(u[e.symbol].low_flag || ""), h.push(u[e.symbol].high_flag || ""))), g.push(h))
                            })
                        })
                    }
                    return g
                },
                getFlipchartsData: function(e, a) {
                    var r, o = [];
                    return e = s ? ["chartView"] : e, a || (a = "symbol"), e && e.forEach(function(e) {
                        i[e] && i[e].forEach(function(e) {
                            c && e.raw && e.raw.exit_price || e[a] && "~" !== e[a] && !t.find(o, "symbol", e[a]) && (r = {
                                symbol: e[a],
                                symbolName: e.raw && e.raw.symbolName ? e.raw.symbolName : e.contractName,
                                symbolType: e.symbolType
                            }, o.push(r))
                        })
                    }), o
                }
            }
        }
        i.$inject = ["$rootScope", "_"], e.exports = i
    },
    dlnT: function(e, t) {
        e.exports = '<div> <div class="modal-mobile-navigation hide-for-medium-up"> <div class=modal-prev> <a href="[[ prevItem ]]" data-ng-if=prevItem> <i class=bc-glyph-chevron-left></i> Previous </a> <span data-ng-if=!prevItem> <i class=bc-glyph-chevron-left></i> Previous </span> </div> <div class=modal-next> <a href="[[ nextItem ]]" data-ng-if=nextItem> Next <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if=!nextItem> Next <i class=bc-glyph-chevron-right></i> </span> </div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class="modal-sidebar-left show-for-medium-up" data-ng-show=!dataLoading> <div class=modal-sidebar-background></div> <div class=modal-prev> <a href="[[ prevItem ]]" data-ng-if=prevItem> <i class=bc-glyph-chevron-left></i> </a> <span data-ng-if=!prevItem> <i class=bc-glyph-chevron-left></i> </span> </div> </div> <div class="modal-sidebar-right show-for-medium-up" data-ng-show=!dataLoading> <div class=modal-sidebar-background></div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> <div class=modal-next> <a href="[[ nextItem ]]" data-ng-if=nextItem> <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if=!nextItem> <i class=bc-glyph-chevron-right></i> </span> </div> </div> <div class=modal-inner> <div class=modal-content> <div class=throbber-wrapper data-ng-show=dataLoading> <img alt="Loading, please wait..." src=/img/throbber.gif /> </div> <div class="row collapse" data-ng-show=!dataLoading> <div class="small-12 column column-content"> <div id=bcModalContent class="bc-article education [[ type ]]" data-ng-bind-html=content> </div> </div> </div> </div> </div> </div> '
    },
    dnXn: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            this.getFieldsByViewName = function(i) {
                var r = e.getUserData(),
                    o = null,
                    n = null,
                    s = null;
                if (r && void 0 !== r.custom_views && !t.hasOwnProperty(i)) {
                    var l = Number(i);
                    o = a.find(r.custom_views, function(e) {
                        return e.id === l
                    }), (n = angular.copy(o)) && (~n.fields.indexOf("symbol") || n.fields.push("symbol"), s = n.fields.join(","))
                }
                return o || t.hasOwnProperty(i) && (s = t[i].api.fields), s
            }, this.getOptionsByViewName = function(r) {
                var o = e.getUserData(),
                    n = null,
                    s = t.main.options;
                if (o && void 0 !== o.custom_views && !t.hasOwnProperty(r)) {
                    var l = Number(r);
                    (n = a.find(o.custom_views, function(e) {
                        return e.id === l
                    })) && (s = angular.copy(t.default_options.options), s = i.colorizeFields(s, n.fields))
                }
                return n || t.hasOwnProperty(r) && (s = t[r].options), s
            }
        }
        i.$inject = ["authService", "viewApiConfig", "_", "barchartDatatableColorize"], e.exports = i
    },
    drcF: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            return {
                restrict: "E",
                require: "^screener",
                scope: {
                    type: "@",
                    filters: "="
                },
                controller: ["$scope", function(a) {
                    a.savedScreener = null, a.popularScreener = null, a.popularScreeners = [], e.call(t.API_URL + "/screeners/popular/" + a.type).then(function(e) {
                        if (e.count && e.count > 0) {
                            a.popularScreeners = Array.prototype.slice.call(e.data);
                            var t = config.settings.markets[config.user.market].uri;
                            a.popularScreeners = Array.prototype.slice.call(a.popularScreeners).filter(function(e) {
                                var a = JSON.parse(e.filters),
                                    i = o.find(a, "key", "exchange");
                                return !(i && !i.filters[t]) || (!("us" !== t || !i.filters.etf && !i.filters.fund) || (!("ca" !== t || !i.filters.cadetf && !i.filters.cadfunds) || void 0))
                            }), r.search().popularScreener && (a.popularScreener = o.find(a.popularScreeners, {
                                id: parseInt(r.search().popularScreener, 10)
                            }), n.isLoggedIn() && r.search("popularScreener", null))
                        }
                    }), a.$on(i.ON_SCREENER_CLEAR, function() {
                        a.popularScreener = null, a.savedScreener = null
                    }), a.$on(i.ON_SCREENER_APPLY_SAVED, function(e, t) {
                        a.savedScreener = t.screener, a.popularScreener = null
                    }), a.$on(i.ON_SCREENER_APPLY_EMPTY_TEMPLATE, function() {
                        a.savedScreener = null
                    }), a.$on("onSaveScreener", function() {
                        a.popularScreener = null
                    })
                }],
                link: function(e, t, a, i) {
                    e.$watch(function() {
                        return e.savedScreener
                    }, function() {
                        e.savedScreener && i.setSavedScreener(e.savedScreener)
                    }), e.$watch(function() {
                        return e.popularScreener
                    }, function() {
                        e.popularScreener && (e.savedScreener = null, i.applyPopularScreener(e.popularScreener))
                    })
                },
                template: a("8BqT")
            }
        }
        i.$inject = ["dataProvider", "apiConfig", "events", "$location", "_", "authService"], e.exports = i
    },
    dv7W: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                template: a("rpPB")
            }
        }
    },
    dvFY: function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = ["_", "quotesService", function(e, t) {
                var a = JSON.parse(e.unescape(this.apiData));
                this.currentSymbol = JSON.parse(this.symbol), this.quotesService = t, this.data = a.data[0], this.meta = a.meta.field.name, this.meta.totalAssets = "Total Assets"
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("AIVR"),
                controller: e,
                controllerAs: "$ctrl"
            }
        }
    },
    dx5o: function(e, t) {
        e.exports = '<div data-ng-show="searchResultsVisible && searchResults.length > 0" class="quick-search bc-symbol-autocomplete js-symbol-autocomplete"> <div data-ng-if=extended class=search-results-header>Click to add:</div> <a class=search-row data-ng-repeat="item in searchResults" data-image-class="[[ $index ]]" data-ng-mousemove=setSelectedItem($index) data-ng-class="{\'selected\': $index === selectedItemIndex} "> <div class="clearfix symbol-row" data-ng-click=selectSymbol(item.symbol)> <div data-ng-class="{\'small-5 medium-3 column\': extended}" data-ng-bind-html=item.symbol></div> <div data-ng-if=extended class="small-7 medium-6 column" data-ng-bind-html=item.name></div> <div data-ng-if=extended class="hide-for-small medium-3 large-3 column" data-ng-bind-html=item.exchange></div> </div> </a> </div> '
    },
    "e+Nl": function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    ref: "=",
                    redirectUrl: "@"
                },
                controller: ["$scope", function(a) {
                    a.links = e.config.social.login_links, a.getSocialClass = function(t) {
                        var a = "";
                        return "/login" === e.location.pathname && (a = t + "Login"), "/register" === e.location.pathname && (a = t + "Register"), a
                    }, a.socialLogin = function(n, s) {
                        n = e.location.origin + n;
                        s ? n = n + "?ref=" + s : s = o.search().ref ? o.search().ref : "myBC";
                        var l = i.getRedirectPath() || r.getPrevious();
                        if (null !== l) t.call(e.config.routes["home.social-redirect"], "PUT", {
                            redirect_path: l,
                            ref: s
                        }).then(function(t) {
                            "" === t && (e.location.href = n)
                        });
                        else if (a.redirectUrl) t.call(e.config.routes["home.social-redirect"], "PUT", {
                            redirect_path: l,
                            ref: s
                        }).then(function(t) {
                            "" === t && (e.location.href = n)
                        });
                        else if ("/login" !== e.location.pathname && "/register" !== e.location.pathname) {
                            e.location.href.replace("/login", "").replace("/register", "");
                            t.call(e.config.routes["home.social-redirect"], "PUT", {
                                redirect_path: l,
                                ref: s
                            }).then(function(t) {
                                "" === t && (e.location.href = n)
                            })
                        } else e.location.href = n
                    }
                }],
                template: a("Pwom")
            }
        }
        i.$inject = ["$window", "dataProvider", "authRedirectService", "authRouteService", "$location"], e.exports = i
    },
    e04C: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n = this;
            n.items = [], n.initializeModel = function(e, t) {
                n.items[e] = t
            };
            var s = a.getCharts();
            n.isNewDisabled = a.getEodReportsNumber("charts", "email") >= i.config.limits.reportsLimit, n.toggleSubscription = function(l) {
                var c = n.items[l];
                if (n.isNewDisabled && c) return n.items[l] = !1, e.warning({
                    message: r("MAX_EOD_REPORTS_CHARTS"),
                    delay: 8e3
                }), !1;
                t.updateChart(l, {
                    email: c
                }).then(function(t) {
                    var r = o.findIndex(s, {
                        id: l
                    });
                    s[r] = angular.copy(t.data), a.setCharts(s), n.isNewDisabled = a.getEodReportsNumber("charts", "email") >= i.config.limits.reportsLimit, e.success("End-of-Day Email preferences have been saved.")
                }).catch(function() {
                    e.success("Something went wrong. Please try again.")
                })
            }
        }
        i.$inject = ["Notification", "myChartsApiService", "authService", "$window", "textFactory", "_"], e.exports = i
    },
    eBbE: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            if (e.show = !1, window.config.webinar && !a.isMobileAndTablet()) {
                e.data = window.config.webinar;
                var i = e.data.name + "PageView",
                    r = e.data.name + "WebinarClosed";
                if (t(r)) e.show = !1;
                else {
                    var o = new Date,
                        n = new Date(e.data.date),
                        s = new Date(o.getFullYear(), o.getMonth(), o.getDate(), 23, 59, 59),
                        l = parseInt(t(i)) || 0;
                    t(i, ++l, {
                        expires: s,
                        path: "/"
                    }), l === e.data.pageView && (e.show = !0, t.remove(i), t(r, !0, {
                        expires: e.data.modalTimeout,
                        expirationUnit: "hours",
                        path: "/"
                    }))
                }
            }
            e.register = function() {
                t(r, !0, {
                    expires: n,
                    path: "/"
                }), e.close(), window.open(e.data.registerLink, "_blank")
            }, e.close = function() {
                e.webinarNotInterested && t(r, !0, {
                    expires: n,
                    path: "/"
                }), e.show = !1
            }
        }
        i.$inject = ["$scope", "ipCookie", "utils"], e.exports = i
    },
    "eDG+": function(e, t) {
        e.exports = '<div class="bc-markets-table widget-table"> <div class=form-close-wrapper data-ng-click=closePanel()> <i class="bc-glyph-times form-close"></i> </div> <div class="drop-down-wrapper with-cog" data-ng-class="{\'noGridView\': !isGridViewEnabled}"> <div class="bc-dropdown styled"> <select name=currentList data-ng-model=list data-ng-change=marketChanged(true)> <option data-ng-repeat="item in marketsParams" data-ng-hide="item.usdOnly && market !== \'usd\'" value="[[ item.key ]]">[[ item.title ]]</option> </select> </div> </div> <div class="drop-down-wrapper views-dropdown" data-ng-show=!isGridViewEnabled> <div class="bc-dropdown styled"> <select data-ng-model=view name=viewName data-show-custom-views-options data-ng-change=changeView()> <option value=main>Main View</option> <option value=technical>Technical</option> <option value=performance>Performance</option> </select> </div> </div> <div class=controller-cog data-ng-click=openControllerModal() data-ng-show=isGridViewEnabled> <i class=bc-glyph-cog></i> </div> <div class=throbber-wrapper data-ng-show=loading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=barchart-minitable-wrapper data-ng-class="{\'is-grid-view\': isGridViewEnabled}" data-ng-show="content && !loading"> <table> <thead> <tr> <th></th> <th data-ng-repeat="(columnKey, columnTitle) in content.meta.field.shortName track by $index" data-ng-if="options.exclude.indexOf(columnKey) === -1" data-ng-click=sortData(columnKey)> <div class=th-wrapper> <barchart-table-header-cell-template data-cell-key="{{ columnKey }}" data-cell-value="{{ columnTitle | bcReplacement:\'Last Price\':\'Price\' }}" data-content=content> </barchart-table-header-cell-template> <i data-ng-show="sort && sort.orderBy === columnKey && sort.orderDir=== \'asc\'" class="barchart-sort-asc bc-glyph-sort-asc"></i> <i data-ng-show="sort && sort.orderBy === columnKey && sort.orderDir=== \'desc\'" class="barchart-sort-desc bc-glyph-sort-desc"></i> </div> </th> </tr> </thead> <tbody data-ng-repeat="row in content.data"> <tr data-ng-class="{\'current\': currentSymbol.symbol === row.symbol}" data-ng-click=changeSymbol(row)> <td> <my-chart-quick-links data-symbol=row data-type=symbol></my-chart-quick-links> </td> <td data-ng-repeat="(columnKey, columnTitle) in content.meta.field.shortName track by $index" data-ng-if="options.exclude.indexOf(columnKey) === -1" data-ng-class="setClass(columnKey, row[columnKey], row)"> <barchart-table-cell-template data-cell-key="{{ columnKey }}" data-cell-value=row[columnKey] data-cells-to-colorize=options.colorize data-cells-to-colorize-opinion=options.opinion> </barchart-table-cell-template> </td> </tr> <tr data-ng-class="{\'current\': currentSymbol.symbol === row.symbol}" data-ng-click=changeSymbol(row)> <td></td> <td class=text-left colspan=18> <span>{{ row.symbolName }}</span> </td> </tr> </tbody> </table> <div data-ng-if=!content.data.length> No symbols found that match the requirements. </div> </div> </div>'
    },
    eK4P: function(e, t) {
        e.exports = '<div class="bc-screener__toolbar bottom-toolbar"> <span class=bc-screener__toolbar-title> Add a Filter: </span> <div class="bc-dropdown filter bc-screener__toolbar-select bc-screener__select-level-0"> <select name=selectFilterLevel0 data-ng-class="{\'selection\': selectFilterLevel0}" data-ng-model=selectFilterLevel0 data-ng-options="item.title for item in filterItems"> <option class=bc-screener__select-empty-option value="">(select)</option> </select> </div> <div class="bc-dropdown filter bc-screener__toolbar-select bc-screener__select-level-1" data-ng-class="{\'disabled\': !selectFilterLevel0.filters}"> <select name=selectFilterLevel1 data-ng-class="{\'disable\': !selectFilterLevel0.filters, \'selection\': selectFilterLevel1}" data-ng-disabled=!selectFilterLevel0.filters data-ng-model=selectFilterLevel1 data-ng-options="item.title for item in selectFilterLevel0.filters"> <option class=bc-screener__select-empty-option data-ng-bind="(selectFilterLevel0.filters) ? \'(select)\' : \'\'" value=""></option> </select> </div> <div class="bc-dropdown filter bc-screener__toolbar-select bc-screener__select-level-2" data-ng-class="{\'disabled\': !selectFilterLevel1.filters}"> <select name=selectFilterLevel2 data-ng-class="{\'disable\': !selectFilterLevel1.filters, \'selection\': selectFilterLevel2}" data-ng-disabled=!selectFilterLevel1.filters data-ng-model=selectFilterLevel2 data-ng-options="item.title for item in selectFilterLevel1.filters"> <option class=bc-screener__select-empty-option data-ng-bind="(selectFilterLevel1.filters) ? \'(select)\' : \'\'" value=""></option> </select> </div> <button class="bc-button bc-screener__add-filter-button" data-ng-click=addFilter() data-ng-disabled="!selectFilterLevel0 ||\n                         (selectFilterLevel0.filters && !selectFilterLevel1) ||\n                         (selectFilterLevel1.filters && !selectFilterLevel2)">Add</button> <div style=clear:both></div> </div>'
    },
    eL4Q: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-add-my-chart add-group"> <input type=hidden /> <div class=bc-modal-content-inner> <div class=modal-header> Add New Chart Group <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.close()></i> </div> <form class=bc-form name=addGroupForm data-ng-submit=$ctrl.addGroup(addGroupForm) novalidate> <div class=bc-form__field-wrapper> <label>Name</label> <input type=text name=name required=required data-ng-maxlength=20 data-ng-model=$ctrl.name placeholder="Enter New Group Name" data-bc-auto-focus=desktop> </div> <div class=error-text data-ng-show="addGroupForm.name.$invalid && addGroupForm.$submitted"> <span data-ng-show=addGroupForm.name.$error.maxlength>Group name cannot be longer than 20 characters.</span> <span data-ng-show=addGroupForm.name.$error.required>Fill the required fields.</span> </div> <div class="btn-actions margin-top-20"> <button class="bc-button light-blue upper" type=submit data-ng-disabled=$ctrl.saving>Save</button> </div> </form> </div> </div>'
    },
    eO16: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                scope: {
                    id: "@",
                    model: "="
                },
                link: function(a, r, o) {
                    function n() {
                        a.model = !0
                    }

                    function s() {
                        a.model = !1
                    }
                    a.model = !1, e.for("grecaptcha").then(function() {
                        t.grecaptcha.render(a.id, {
                            sitekey: i.grecaptchaKey,
                            callback: n,
                            "expired-callback": s
                        })
                    })
                },
                template: a("XQzT")
            }
        }
        i.$inject = ["waitService", "$window", "appConfig"], e.exports = i
    },
    eP72: function(e, t, a) {
        "use strict";

        function i() {
            var e = this;
            e.complexTable = {
                content: [],
                options: {
                    exclude: ["symbol", "contractExpirationDate"],
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["priceChange", "lastPrice", "highPrice", "lowPrice", "volume"]
                    },
                    link: ["contractName"],
                    colorize: ["priceChange"]
                }
            }, e.callback = function(t) {
                t.meta.field.shortName.contractName && (t.meta.field.shortName.contractName = "Contract"), t.meta.field.shortName.percentChange && (t.meta.field.shortName.percentChange = "%Chg"), delete t.meta.field.shortName.contractExpirationDate, delete t.meta.field.shortName.symbol, delete t.meta.field.shortName.symbolCode, delete t.meta.field.shortName.symbolType, t.data.forEach(function(e) {
                    e.symbolSector = "futures"
                }), e.widgetComplexTable.content = t, e.dataLoading = !1
            }, e.widgetComplexTable = {
                content: [],
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["percentChange", "lastPrice"]
                    },
                    links: ["contractSymbol", "contractName"],
                    colorize: ["percentChange"]
                },
                callback: e.callback
            }
        }
        i.$inject = [], e.exports = i
    },
    eZGj: function(e, t) {
        e.exports = '<div class="bc-screener__filter-expiration clearfix"> <div class=bc-screener__filter-expiration-time-category> <div class=input-checkbox> <input id="cb-filter-checkboxes-all-[[ filterIndex ]]-monthly" data-ng-checked="ifAllSelected(\'monthly\')" data-ng-click="toggleSelectionAll(\'monthly\', $event)" type=checkbox> <label for="cb-filter-checkboxes-all-[[ filterIndex ]]-monthly"> <span class=bc-glyph-check></span> All Monthly </label> </div> <div class=bc-screener__filter-expiration-two-columns-list> <div data-ng-repeat="checkboxItem in filters.monthly.value track by $index" class=input-checkbox> <input id="cb-filter-checkboxes-[[ filterIndex ]]-[[ $index ]]-monthly" data-ng-checked="filterData.monthly.value.indexOf(checkboxItem.key) > -1" data-ng-click="toggleSelection(checkboxItem.key, \'monthly\', $event)" type=checkbox> <label for="cb-filter-checkboxes-[[ filterIndex ]]-[[ $index ]]-monthly"> <i class=bc-glyph-check></i> <span data-ng-bind=checkboxItem.value></span> </label> </div> </div> </div> <div class=bc-screener__filter-expiration-time-category> <div class=input-checkbox> <input id="cb-filter-checkboxes-all-[[ filterIndex ]]-weekly" data-ng-checked="ifAllSelected(\'weekly\')" data-ng-click="toggleSelectionAll(\'weekly\', $event)" type=checkbox> <label for="cb-filter-checkboxes-all-[[ filterIndex ]]-weekly"> <i class=bc-glyph-check></i> All Weekly </label> </div> <div class=bc-screener__filter-expiration-two-columns-list> <div data-ng-repeat="checkboxItem in filters.weekly.value track by $index" class=input-checkbox> <input id="cb-filter-checkboxes-[[ filterIndex ]]-[[ $index ]]-weekly" data-ng-checked="filterData.weekly.value.indexOf(checkboxItem.key) > -1" data-ng-click="toggleSelection(checkboxItem.key, \'weekly\', $event)" type=checkbox> <label for="cb-filter-checkboxes-[[ filterIndex ]]-[[ $index ]]-weekly"> <i class=bc-glyph-check></i> <span data-ng-bind=checkboxItem.value></span> </label> </div> </div> </div> </div>'
    },
    ee7B: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o = i.getUserData();
            e.symbolData = a, e.portfolios = o.portfolios, e.portfolioRoute = window.config.routes["my.portfolio"], e.cancel = function() {
                t.dismiss()
            }, e.addTransaction = function(e) {
                a.portfolioCaption = e.caption, r.transactionForm(e, a), t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "symbolData", "authService", "portfolioModalFactory"], e.exports = i
    },
    ehgW: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("TJ6W"),
                controller: ["$scope", "quotesService", function(e, t) {
                    e.lists = {
                        left: [{
                            field: "marketCap",
                            label: "Market Capitalization, $K"
                        }, {
                            field: "sharesOutstanding",
                            label: "Shares Outstanding, K"
                        }, {
                            field: "annualSales",
                            label: "Annual Sales, $"
                        }, {
                            field: "annualNetIncome",
                            label: "Annual Net Income, $"
                        }, {
                            field: "lastQuarterSales",
                            label: "Last Quarter Sales, $"
                        }, {
                            field: "lastQuarterIncome",
                            label: "Last Quarter Net Income, $"
                        }],
                        right: [{
                            field: "return1y",
                            label: "1-Year Total Return"
                        }, {
                            field: "return3y",
                            label: "3-Year Total Return"
                        }, {
                            field: "return5y",
                            label: "5-Year Total Return"
                        }, {
                            field: "revenueGrowth5y",
                            label: "5-Year Revenue Growth"
                        }, {
                            field: "earningsGrowth5y",
                            label: "5-Year Earnings Growth"
                        }, {
                            field: "dividendGrowth5y",
                            label: "5-Year Dividend Growth"
                        }]
                    }, e.data = e.widgetData.data[0], e.sector = t.getSector(e.data.symbolType), e.filterEmptyRows = function(t) {
                        return null !== e.data.raw[t.field]
                    }
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    elPS: function(e, t) {
        e.exports = '<div class="modal-content-wrapper description"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <div class=inner-form> <img data-ng-show="type == \'brugler\'" data-ng-src=/img/example/Brugler_example.png alt="cmdty Insider - Ag Market Commentary"/> <img data-ng-show="type == \'chartOfTheDay\'" data-ng-src=/img/example/COD_example.png alt="Barchart Chart of the Day"/> <img data-ng-show="type == \'barchartExclusiveOffers\'" data-ng-src=/img/example/BCEO_example.png alt="Barchart Exclusive Offers"/> <img data-ng-show="type == \'insideFutures\'" data-ng-src=/img/example/IF_example.png alt="InsideFutures Newsletter"/> <img data-ng-show="type == \'barchartMembersOnboarding\'" data-ng-src=/img/example/educationEmail_example.png alt="Barchart Educational Emails"/> </div> </div>'
    },
    ewj5: function(e, t) {
        e.exports = "<div> <div data-ng-if=barchartTableCellTemplateCtrl.isCellColorizible()> <barchart-table-cell-colorize data-is-opinion=barchartTableCellTemplateCtrl.isOpinion data-cell-value=barchartTableCellTemplateCtrl.cellValue></barchart-table-cell-colorize> </div> <div data-ng-if=!barchartTableCellTemplateCtrl.isCellColorizible()> <a data-ng-if=\"!row.symbolSector && (barchartTableCellTemplateCtrl.cellKey === 'symbol' || barchartTableCellTemplateCtrl.isLink())\" target=\"{{barchartTableCellTemplateCtrl.linksOpenNewTab ? '_blank' : '_self'}}\"> {{ barchartTableCellTemplateCtrl.cellValue }} </a> <a data-ng-href=/{{row.symbolSector}}/quotes/{{row.symbol}} data-ng-if=\"row.symbolSector && (barchartTableCellTemplateCtrl.cellKey === 'symbol' || barchartTableCellTemplateCtrl.isLink())\" target=\"{{barchartTableCellTemplateCtrl.linksOpenNewTab ? '_blank' : '_self'}}\"> {{ barchartTableCellTemplateCtrl.cellValue }} </a> <span data-ng-if=\"barchartTableCellTemplateCtrl.cellKey !== 'symbol' && !barchartTableCellTemplateCtrl.isLink()\"> {{ barchartTableCellTemplateCtrl.cellValue }} </span> </div> </div>"
    },
    ewnG: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            e.dataLoading = !1, e.currentTab = "Stocks", e.reports = {}, e.user = i.getUserData();
            var s = config.routes["my.eodReports"];
            e.init = function(t, a, i, r) {
                e.basic = t, e.premier = a, e.tabs = i;
                var n = [],
                    s = [];
                Object.keys(e.basic).forEach(function(t) {
                    n = n.concat(e.basic[t].checkboxes)
                }), s = o.pluck(n, "key"), r.forEach(function(t) {
                    e.reports[t] = e.user.is_premier || -1 !== s.indexOf(t)
                })
            }, e.initBlock = function(t, a) {
                e.needPremier = t, e.eodReportSubscription = !!a
            }, e.changeBasic = function(e, i, r, o) {
                i ? t.subscribe(e).then(function() {
                    a.success("You have been subscribed to " + r + ' <a target="_self" href="' + s + '">End-of-Day Report</a> for ' + o + ".")
                }) : t.unsubscribe(e).then(function() {
                    a.success("You have been unsubscribed to " + r + ' <a target="_self" href="' + s + '">End-of-Day Report</a> for ' + o + ".")
                })
            }, e.changePremier = function(e, i, r, o, n) {
                var l = n + " " + r + " " + (o = "Sells" === o ? "Sell" : "Buy");
                i ? t.subscribe(e).then(function() {
                    a.success("You have been subscribed to " + l + ' Table <a target="_self" href="' + s + '">End-of-Day Report</a>.')
                }) : t.unsubscribe(e).then(function() {
                    a.success("You have been unsubscribed to " + l + ' Table <a target="_self" href="' + s + '">End-of-Day Report</a>.')
                })
            }, e.changeTab = function(t) {
                e.currentTab = t
            }, e.checkUser = function() {
                return e.needPremier || e.user ? !e.needPremier || e.user && e.user.is_premier ? void 0 : (e.showPremier(), !1) : (n.goToLogin("eodBasicReports"), !1)
            }, e.showPremier = function() {
                r.showPremier("eodReports")
            }
        }
        i.$inject = ["$scope", "eodReportsApiFactory", "Notification", "authService", "bcModalLoginSrv", "_", "authRouteService"], e.exports = i
    },
    "ex+o": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a) {
                    var i, r, o, n, s, l = document.getElementsByClassName("content")[0],
                        c = document.getElementsByTagName("footer")[0],
                        d = document.getElementsByClassName("header")[0],
                        u = a[0].offsetHeight;

                    function p() {
                        i = document.body.scrollHeight, (r = window.scrollY || document.documentElement.scrollTop) < d.offsetHeight ? (a.removeClass("fixed-bottom"), a[0].style.bottom = "auto") : r + window.innerHeight > u ? (a.addClass("fixed-bottom"), c.offsetTop < r + window.innerHeight ? (n = l.offsetHeight + d.offsetHeight + c.offsetHeight, o = n - (n - i) - r - window.innerHeight, a[0].style.bottom = c.offsetHeight - o + "px") : a[0].style.bottom = 0) : (a.removeClass("fixed-bottom"), a[0].style.bottom = "auto")
                    }
                    u > l.offsetHeight && (l.style.minHeight = u + "px"), u < window.innerHeight ? a[0].style.minHeight = "100%" : a[0].style.minHeight = "inherit", angular.element(e).on("scroll", p), t.$on("leftMenuHidden", function() {
                        s && (l.style.minHeight = s + "px"), a[0].style.height = l.offsetHeight + "px"
                    }), t.$on("leftMenuShown", function() {
                        var e = a[0].offsetHeight;
                        a[0].style.height = "auto", 1e3 !== e && e > u && (u = e), u > l.offsetHeight && (s = l.offsetHeight, l.style.minHeight = u + "px"), u < window.innerHeight ? a[0].style.minHeight = "100%!important" : a[0].style.minHeight = "inherit", p()
                    })
                }
            }
        }
        i.$inject = ["$window"], e.exports = i
    },
    exxO: function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = ["_", "quotesService", function(e, t) {
                var a = JSON.parse(e.unescape(this.apiData));
                this.currentSymbol = JSON.parse(this.symbol), this.quotesService = t, this.data = a.data[0], this.meta = a.meta.field.name, this.meta.netIncome = "Net Income", this.checkIsNA = function(e) {
                    return 0 === parseInt(e)
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("myYX"),
                controller: e,
                controllerAs: "$ctrl"
            }
        }
    },
    f10U: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o = 8;
            return {
                getData: function(n) {
                    var s = n.api.method || "/quotes/get";
                    return n.api.meta = n.api.meta || "field.shortName", n.api.raw = 1, delete n.api.method, n = r.applyMarket(n), e.call(a.buildUrl(i.API_URL + s, n.api), t.GET).then(function(e) {
                        return e = function(e) {
                            var t = {};
                            t.count = e.count, t.data = [];
                            var a = ["date", "open", "high", "low", "last", "change", "%chg", "volume"];
                            t.meta = {
                                field: {
                                    shortName: {}
                                }
                            };
                            var i = e.data[0],
                                r = 0,
                                n = 0,
                                s = {},
                                l = {},
                                c = !0,
                                d = Object.keys(i).length;
                            return Object.keys(i).forEach(function(e) {
                                n++, r < o ? (c && (t.meta.field.shortName[a[r]] = a[r]), s[a[r]] = i[e], l[a[r]] = i.raw[e], r++, n === d && (s.raw = l, t.data.push(s))) : (s.raw = l, t.data.push(s), l = {}, r = 1, c = !1, (s = {})[a[0]] = i[e], l[a[0]] = i.raw[e])
                            }), t
                        }(e)
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig", "ApiConverter"], e.exports = i
    },
    f5ht: function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };
        e.exports = function() {
            var e = ["standardDeviation", "weightedAlpha", "beta", "earningsDifference1qAgo", "earningsDifference2qAgo", "earningsDifference3qAgo", "earningsDifference4qAgo", "earningsSurprise1qAgo", "earningsSurprise2qAgo", "earningsSurprise3qAgo", "earningsSurprise4qAgo"],
                t = ["percentInsider", "percentInstitutional"];
            return {
                colorizeFields: function(a, i, o) {
                    return "string" == typeof i && (i = i.split(",")), "object" !== (void 0 === i ? "undefined" : r(i)) || Array.isArray(i) || (i = Object.keys(i)), a.colorize = a.colorize || [], a.opinion = a.opinion || [], i.forEach(function(i) {
                        -1 === t.indexOf(i) && (function(e) {
                            return !(!~e.search(/opinion/i) || ~e.search(/Percent/i)) || ~e.search(/Signal/i)
                        }(i) && a.opinion.push(i), function(e, t) {
                            return !(t && ~e.search(/opinion/i) || !~e.search(/priceChange|WeightedAlpha|percentChange|percent|price_change/i) || ~e.search(/opinion/i) && ~e.search(/Percent/i))
                        }(i, o) && a.colorize.push(i), o || function(t) {
                            return ~e.indexOf(t)
                        }(i) && a.colorize.push(i))
                    }), a
                },
                applyMovingAverageColor: function(e, t) {
                    if (~["movingAverage10to8dStrength", "movingAverage10to8dDirection", "movingAverage20dStrength", "movingAverage20dDirection", "movingAverage50dStrength", "movingAverage50dDirection", "movingAverage100dDirection", "movingAverage100dStrength"].indexOf(e)) return null;
                    if (null !== e.match(/movingAverage/i) && null === e.match(/Signal/) && (t.lastPrice || t.dailyLastPrice)) {
                        if (null === t.raw[e]) return null;
                        var a = t.raw.lastPrice || t.raw.dailyLastPrice;
                        return a > t.raw[e] ? "up" : a < t.raw[e] ? "down" : "unch"
                    }
                    return null
                },
                applyDefaultOpinionColor: function(e) {
                    return ~e.toLowerCase().indexOf("buy") ? "up" : ~e.toLowerCase().indexOf("sell") ? "down" : ~e.toLowerCase().indexOf("hold") ? "unch" : null
                },
                applyColorBasedOnValue: function(e, t, a) {
                    var i = a.raw && a.raw[e] ? a.raw[e] : parseFloat(t);
                    return i < 0 ? "down" : i > 0 ? "up" : "N/A" === t ? null : "0" === t || t.match(/^unch/) ? "unch" : null
                }
            }
        }
    },
    f7CN: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            e.loading = !0, e.init = function(a) {
                var n, s;
                e.dataConfig = a, n = e.dataConfig.method, delete(s = Object.create(e.dataConfig)).method, i.call(t.buildUrl(o.API_URL + n, s), r.GET).then(function(t) {
                    e.months = t.meta[0].months, e.currentMonth || (e.currentMonth = e.months[0]), e.calendarOptions.events = [], e.calendarOptions.defaultDate = new Date, Object.keys(t.data).forEach(function(a) {
                        t.data[a].forEach(function(t) {
                            var a = "";
                            t.date === window.moment(new Date).format("MM/DD/YY") && (a = "current-info"), "Holiday" === t.type ? e.calendarOptions.events.push({
                                title: t.name,
                                start: new Date(t.date),
                                allDay: !0,
                                className: "holiday " + a
                            }) : e.calendarOptions.events.push({
                                title: t.name,
                                start: new Date(t.date + " " + t.time),
                                className: a
                            })
                        })
                    });
                    var a = new Date;
                    e.calendarOptions.events.push({
                        title: "current",
                        start: a.setHours(23, 59),
                        className: "invisible"
                    }), e.loading = !1
                })
            }, e.calendarOptions = {
                defaultView: "month",
                currentTimezone: "America/Chicago",
                weekends: !1,
                height: 1250,
                fixedWeekCount: !1,
                timeFormat: "HH:mm",
                showNonCurrentDates: !1,
                columnFormat: {
                    month: "dddd"
                },
                viewRender: function(e, t) {
                    setTimeout(function() {
                        t[0].querySelectorAll(".fc-event-container").forEach(function(e) {
                            e.querySelectorAll(".invisible").length && angular.element(e).addClass("current-day"), e.querySelectorAll(".current-info").length && angular.element(e).addClass("current-day")
                        })
                    })
                }
            }, e.changeDate = function(t) {
                e.calendarOptions.defaultDate = new Date("1 " + t)
            }, e.eventSources = []
        }
        i.$inject = ["$scope", "utils", "$location", "dataProvider", "httpVerbs", "apiConfig"], e.exports = i
    },
    f9M7: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "_", "CustomViewsApiFactory", "MyBarchartModalService", "authService", "Notification", function(e, t, a, i, r, o) {
                e.pendingRemoveView = null, e.views = JSON.parse(e.viewsData);
                var n = null,
                    s = r.getUserData(),
                    l = "main";
                s.preferences && s.preferences.default_view && (l = parseInt(s.preferences.default_view)), e.defaultView = {
                    value: l
                }, e.treeOptions = {
                    dragStop: function(i) {
                        setTimeout(function() {
                            if (n !== i.dest.index) {
                                var r = t.pluck(e.views, "id");
                                a.updateViewsOrder(r).then(function(e) {
                                    return e
                                }, function(e) {
                                    console.warn("Update views order fail: " + e)
                                })
                            }
                        })
                    },
                    dragStart: function(e) {
                        n = e.dest.index
                    }
                }, e.removeView = function(t) {
                    if (t.id === l) i.showError("defaultView");
                    else {
                        var a = !1;
                        s.watchlists.forEach(function(e) {
                            t.id === parseInt(e.view_id) && (i.showError("defaultViewForWatchlist"), a = !0), a || e.email && t.id === parseInt(e.eod_view) && (i.showError("defaultViewForEodWatchlist"), a = !0)
                        }), a || (e.pendingRemoveView = t)
                    }
                }, e.confirmRemoveView = function() {
                    var t = this.$index,
                        i = e.views,
                        r = i[t];
                    a.deleteView(r.id).then(function(a) {
                        i.splice(t, 1), e.pendingRemoveView = null
                    })
                }, e.cancelRemoveView = function() {
                    e.pendingRemoveView = null
                }, e.changeDefaultView = function(t) {
                    e.updatingView = !0, a.updateDefaultView(t.id).then(function() {
                        o.success("Default Data Table View set to <b>" + t.name + "</b>."), e.updatingView = !1
                    })
                }, e.clearDefault = function() {
                    if (e.updatingView) return !1;
                    e.updatingView = !0, a.updateDefaultView("main").then(function() {
                        o.success("Default Data Table View has been cleared."), e.updatingView = !1, e.defaultView = {
                            value: "main"
                        }
                    }, function(e) {
                        i.showError(e)
                    })
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    viewsData: "@"
                },
                template: a("Cdd9"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    fH85: function(e, t) {
        e.exports = '<div class=bc-screener__filter-indicator> <div class=bc-screener__filter-indicator-selector> <div class=bc-screener__filter-indicator-selector-item data-ng-class="{\'active\': filterData.signal.value === item.key}" data-ng-repeat="item in filters.signal.value" data-ng-click="filterData.signal.value = item.key"> [[ item.value ]] </div> </div> </div>'
    },
    fLig: function(e, t) {
        e.exports = '<div class=modal-inner-wrapper> <div class=modal-close-wrapper> <i class=bc-glyph-times data-ng-click=closeModal()></i> </div> <div class=symbol-name> [[ symbolData.symbolName ]] ([[ symbolData.symbol ]]) </div> <div data-ng-if=!apiData class=modal-throbber-wrapper> <img src=/img/throbber.gif alt="Please wait..."> </div> <div data-ng-if=apiData> <bc-scrollbar data-snap=true data-show-shadows=false data-links=links> <ul class=symbol-widgets-list data-ng-style="{\'width\': widgetsWidth + \'px\'}"> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-overview\']"> <bc-symbol-widget-overview data-widget-data="apiData[\'dashboard-overview\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-overview> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-performance\']"> <bc-symbol-widget-performance data-widget-data="apiData[\'dashboard-performance\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-performance> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-headlines\']"> <bc-symbol-widget-headlines data-widget-data="apiData[\'dashboard-headlines\']" data-symbol="[[ symbolData.symbol ]]" data-symbol-type-spec="[[ symbolData.symbolTypeSpec ]]" data-modal-instance=$modalInstance> </bc-symbol-widget-headlines> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-opinion\']"> <bc-symbol-widget-opinion data-widget-data="apiData[\'dashboard-opinion\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-opinion> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-technical-analysis\']"> <bc-symbol-widget-technical-analysis data-widget-data="apiData[\'dashboard-technical-analysis\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-technical-analysis> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-key-statistics-stocks\']"> <bc-symbol-widget-key-statistics-stocks data-widget-data="apiData[\'dashboard-key-statistics-stocks\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-key-statistics-stocks> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-key-statistics-etf\']"> <bc-symbol-widget-key-statistics-etf data-widget-data="apiData[\'dashboard-key-statistics-etf\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-key-statistics-etf> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-ratios\']"> <bc-symbol-widget-ratios data-widget-data="apiData[\'dashboard-ratios\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-ratios> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-per-share-info\']"> <bc-symbol-widget-per-share-info data-widget-data="apiData[\'dashboard-per-share-info\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-per-share-info> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-investment-info-etf\']"> <bc-symbol-widget-investment-info-etf data-widget-data="apiData[\'dashboard-investment-info-etf\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-investment-info-etf> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-commodity-profile\']"> <bc-symbol-widget-commodity-profile data-widget-data="apiData[\'dashboard-commodity-profile\']" data-symbol="[[ symbolData.symbol ]]"></bc-symbol-widget-commodity-profile> </li> <li class=symbol-widgets-list-item data-ng-if="apiData[\'dashboard-description\']"> <bc-symbol-widget-description data-widget-data="apiData[\'dashboard-description\']" data-symbol="[[ symbolData.symbol ]]" data-symbol-type-spec="[[ symbolData.symbolTypeSpec ]]"></bc-symbol-widget-description> </li> </ul> </bc-scrollbar> </div> </div>'
    },
    fNdL: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = [function() {
                var t = this;
                t.apiConfig = JSON.parse(t.apiConfig), e.makeRequest(t.apiConfig).then(function(e) {
                    t.data = e
                })
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiConfig: "@"
                },
                template: a("RXyB"),
                controller: t,
                controllerAs: "IndexQuoteCtrl"
            }
        }
        i.$inject = ["apiFactory"], e.exports = i
    },
    fTBk: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    type: "@",
                    datatableLink: "@",
                    videoTutorial: "@",
                    publicScreeners: "@",
                    refCode: "@"
                },
                controller: ["$scope", function(a) {
                    var p = "",
                        m = [];
                    a.defaultFilter = "options.daysToExpiration", a.state = "results", a.STATE_FILTERS = "filters", a.STATE_RESULTS = "results", a.init = !1, a.hideWatchlist = !0, a.tableView = n.search().viewName || "main", d.enableOptionPermissionCheck().setPremierRef(a.refCode || "optScreener"), a.myScreenerLink = u.route(r.config.routes["my.screeners"], {
                        tab: "options"
                    }), a.videoTutorialData = a.videoTutorial ? JSON.parse(a.videoTutorial) : null, a.filterDisplayFields = [];
                    var h = JSON.parse(a.publicScreeners);
                    n.search().screener ? setTimeout(function() {
                        a.savedScreener && f(a.savedScreener)
                    }) : n.search().optionsList && h[n.search().optionsList] ? setTimeout(function() {
                        i.removeAllFilters(0), f(h[n.search().optionsList])
                    }) : (i.addFilterByName(a.defaultFilter, void 0, a.type), "cad" !== config.user.market || "OPT" === a.type ? v() : i.addFilterByName("options.exchange", void 0, a.type)), a.formData = {
                        filters: i.getFilters(),
                        market: {}
                    };
                    var g = a.$watchCollection(function() {
                        return a.formData.filters
                    }, function(e) {
                        e.length > 0 && (g(), a.init = !0, setTimeout(function() {
                            a.applyFilters()
                        }, 0))
                    });

                    function f(e) {
                        a.savedScreener = e ? Object.create(e) : null;
                        var r = JSON.parse(e.filters),
                            n = 1;
                        o.find(r, {
                            key: a.defaultFilter
                        }) && (n = 0), i.removeAllFilters(n), t.parseFilters(r, e.type)
                    }

                    function b(e, t) {
                        var i = n.search().viewName || "main",
                            r = angular.copy(l[a.type][i].api);
                        if (a.dataTable.options.currentPage = n.search().page || 1, r.page = a.dataTable.options.currentPage, r.customGetParameters = e, a.dataTable.apiConfig.api = r, a.dataTable.options = o.merge({}, a.dataTable.options, l[a.type][i].options), "filter_view" === n.search().viewName && t) {
                            -1 === t.indexOf("baseSymbol") && t.unshift("baseSymbol"), ~["BEARC", "BEARP", "BULLC", "BULLP"].indexOf(a.type) && (t.push("strikePriceLeg1"), t.push("strikePriceLeg2")), ~t.indexOf("symbols") && t.splice(t.indexOf("symbols"), 1);
                            var s = t.join();
                            a.dataTable.options.screenerFields = t, a.dataTable.apiConfig.api.fields = s, a.dataTable.apiConfig.api.customGetParameters = e, a.dataTable.options.screenerFields = t
                        }
                    }

                    function v() {
                        i.addFilterByName("options.symbolType", {
                            filters: {
                                default: {
                                    value: ["cad" !== config.user.market ? 1 : 6]
                                }
                            }
                        }, a.type), "OPT" === a.type && i.addFilterByName("options.optionType", {
                            filters: {
                                default: {
                                    value: ["call", "put"]
                                }
                            }
                        }, a.type);
                        var e = {
                            filters: {
                                default: {
                                    operator: "gt",
                                    value: .05
                                }
                            }
                        };
                        switch (i.addFilterByName("options.volume", void 0, a.type), i.addFilterByName("options.openInterest", void 0, a.type), i.addFilterByName("options.moneyness", void 0, a.type), ~["BEARC", "BEARP", "BULLC", "BULLP"].indexOf(a.type) && (i.addFilterByName("options.probability", void 0, a.type), i.addFilterByName("options.volumeLeg2", void 0, a.type), i.addFilterByName("options.openInterestLeg2", void 0, a.type)), a.type) {
                            case "CCALL":
                            case "NPUT":
                                i.addFilterByName("options.bidPrice", e, a.type);
                                break;
                            case "BEARC":
                            case "BULLP":
                                i.addFilterByName("options.askPriceLeg2", e, a.type);
                                break;
                            case "BULLC":
                            case "BEARP":
                                i.addFilterByName("options.bidPriceLeg2", e, a.type)
                        }
                    }
                    a.savedScreener = null, a.successConfirmation = !1, a.$on(c.ON_SCREENER_CLEAR, function() {
                        v(), a.savedScreener = null, n.search("orderBy", null), n.search("orderDir", null)
                    }), a.$on(c.ON_SCREENER_APPLY_SAVED, function(e, t) {
                        switch (a.state) {
                            case "results":
                                f(t.screener), setTimeout(function() {
                                    a.formData.filters = i.getFilters(), a.applyFilters()
                                }, 0);
                                break;
                            case "filters":
                                f(t.screener)
                        }
                    }), a.$on(c.ON_SCREENER_APPLY_EMPTY_TEMPLATE, function() {
                        a.savedScreener = null
                    }), a.dataTable = s, a.datatableLink && (a.dataTable.options.quickLinksAdditionalLinks = [{
                        title: "Options",
                        route: a.datatableLink
                    }]), a.dataTable.options.symbolDetails = !1, "OPT" === a.type && (a.dataTable.options.showSymbolType = !0), a.$on("filterChangeFromUrl", function() {
                        if (a.init) {
                            var t = [];
                            t = t.concat(a.filterDisplayFields), i.prepareFilters(a.formData.filters, t).then(function(i) {
                                var r = e.createQuery(i).toString();
                                b(r += "&ge(tradeTime," + window.moment().subtract(7, "days").format("YYYY-MM-DD") + ")", t), a.$broadcast("renderBarchartDataTable")
                            })
                        }
                    }), a.applyFilters = function() {
                        var t = [];
                        t = t.concat(a.filterDisplayFields), i.prepareFilters(a.formData.filters, t).then(function(i) {
                            var o = e.createQuery(i).toString();
                            b(o += "&ge(tradeTime," + window.moment().subtract(7, "days").format("YYYY-MM-DD") + ")", t), p !== o ? (p = o, m = t, a.$broadcast("renderBarchartDataTable")) : m.sort().toString() !== t.sort().toString() && (m = t, a.$broadcast("renderBarchartDataTable")), r.scrollTo(0, 0), a.state = "results"
                        })
                    }, a.backToFilter = function() {
                        a.state = "filters", n.search().page && n.search("page", null)
                    }
                }],
                template: a("A7nj")
            }
        }
        i.$inject = ["screenerQueryService", "screenerParseService", "screenerFilterService", "$window", "_", "$location", "screenerOptionsDatatableConfig", "screenerOptionsApiConfig", "events", "screenerPermissionService", "utils"], e.exports = i
    },
    fWRm: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                require: "ngModel",
                link: function(e, t, a, i) {
                    function r(t) {
                        var r;
                        return r = function() {
                            var t = /^[0-9]{3}$/,
                                i = e.$eval(a.bcCcardCvv);
                            return i && "AMEX" === i && (t = /^[0-9]{4}$/), t
                        }().test(t), i.$setValidity("cvvValid", r), t
                    }
                    i.$parsers.push(r), i.$formatters.push(r), e.$watch(a.bcCcardCvv, function(e) {
                        r(i.$viewValue)
                    })
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    fZX3: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "quotesService", function(e, t) {
                if (e.data = e.widgetData.data[0], e.sector = t.getSector(e.data.symbolType), e.signal = e.data.opinionSignal.toLowerCase(), e.opinion = "", "hold" !== e.signal) {
                    var a = Math.abs(e.data.raw.opinion);
                    a > 65 ? e.opinion += "Strong " : a < 33 && (e.opinion += "Weak ")
                }
                e.opinion += e.data.opinionSignal
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("w3y3"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    fZkK: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            function l() {
                var e = (new Date).getMonth() + 1;
                return e = e < 10 ? "0" + e : "" + e
            }

            function c() {
                var e = (new Date).getFullYear();
                return e = e.toString().substr(2, 2)
            }
            e.cardData = {
                cardid: i && i.id ? i.id : null
            }, r && (e.cardData.orderid = r), e.cardTypes = angular.copy(o), e.cardMonths = angular.copy(n), e.cardYears = angular.copy(s), e.editCardFormError = {
                ccard: !1
            }, e.saveModalData = function(i) {
                var r;
                i.$submitted || i.$setSubmitted(), i.$valid && (e.editCardFormError.ccard = !1, (r = angular.copy(e.cardData)).ccexp = r.ccexpMonth + r.ccexpYear, delete r.ccexpMonth, delete r.ccexpYear, a.updateCardInfo(r).then(function(a) {
                    a.success ? t.close({
                        response: a,
                        data: r
                    }) : e.editCardFormError.ccard = !0
                }))
            }, e.isMonthDisabled = function(t) {
                var a = l(),
                    i = c(),
                    r = e.cardData.ccexpMonth,
                    o = e.cardData.ccexpYear;
                return !!(o && o === i && (r && r < a && (e.cardData.ccexpMonth = ""), t < a))
            }, e.isYearDisabled = function(t) {
                var a = l(),
                    i = c(),
                    r = e.cardData.ccexpMonth,
                    o = e.cardData.ccexpYear;
                return !!(r && r < a && (o && o === i && (e.cardData.ccexpYear = ""), t === i))
            }, e.closeModal = function() {
                t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "barchartPremierService", "cardData", "orderId", "cardTypes", "cardMonths", "cardYears"], e.exports = i
    },
    fe72: function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <h5>New Screener</h5> <p>Any changes made to the current screener will not be saved. Would you like to continue?</p> <div> <a class="bc-button save grey" data-ng-click=cancelScreenerReset()>Cancel</a> <a class="bc-button save light-blue" data-ng-click=confirmScreenerReset()>Ok</a> </div> </div>'
    },
    fhFH: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                scope: {
                    text: "@",
                    title: "@",
                    description: "@",
                    redirectUrl: "=",
                    convertType: "@",
                    chartType: "@",
                    tChartData: "=",
                    loading: "=",
                    setChartPageUrl: "=",
                    dynamicTitle: "=",
                    symbol: "="
                },
                require: "^bcSocialChartShare",
                link: function(t, a, i, r) {
                    function o() {
                        var a, i = Object.create(e.twitter.win);
                        t.loading = !0, a = t.dynamicTitle || t.title, r.getImageChart(a, t.description, t.chartType, t.convertType, i, t.tChartData ? t.tChartData.image : null).then(function(e) {
                            r.getRedirectUrl(t.redirectUrl, t.chartType, e, t.setChartPageUrl, t.symbol).then(function(o) {
                                var n = r.getShareLinkPartialEncoded({
                                        title: a,
                                        description: t.description,
                                        image: e,
                                        redirectUrl: o
                                    }),
                                    s = {
                                        winUrl: i.url,
                                        url: n,
                                        title: t.text || a
                                    };
                                i.url = r.getLink(s), window.dataLayer.push({
                                    event: "socialInteraction",
                                    socialNetwork: "Twitter",
                                    socialAction: "Share",
                                    socialTarget: o
                                }), r.share(i), t.loading = !1
                            })
                        })
                    }
                    a.on("click", o), t.$on("$destroy", function() {
                        a.off("click", o)
                    })
                }
            }
        }
        i.$inject = ["bcShareConfig"], e.exports = i
    },
    fii9: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                scope: {
                    formData: "="
                },
                link: function(e) {
                    e.formData = e.formData || ["", ""], e.showDatePickerButtons = !0, e.$watch("formData[0]", function(t) {
                        null === t && (e.formData[0] = "")
                    }), e.$watch("formData[1]", function(t) {
                        null === t && (e.formData[1] = "")
                    })
                },
                template: a("xxp8")
            }
        }
        i.$inject = [], e.exports = i
    },
    fltN: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e) {
                Object.keys(e).forEach(function(t) {
                    e[t] = !1
                })
            }
        }
    },
    fnFl: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = t.getUserData();
            return {
                watchlist: function() {
                    return !!(e.config.limits.watchlists && e.config.limits.watchlists <= i.watchlists.length) && (a.showPremier("moreWatchlists"), !0)
                },
                portfolio: function() {
                    return !!(e.config.limits.portfolios && e.config.limits.portfolios <= i.portfolios.length) && (a.showPremier("morePortfolios"), !0)
                },
                customViews: function() {
                    return !!(e.config.limits.customViews && e.config.limits.customViews <= i.custom_views.length) && (a.showPremier("moreViews"), !0)
                },
                screeners: function(t) {
                    return !!(e.config.limits.screeners && e.config.limits.screeners <= i.screeners.length) && (t || a.showPremier("moreScreeners"), !0)
                },
                chartTemplates: function() {
                    return !!(e.config.limits.chartTemplates && e.config.limits.chartTemplates <= i.custom_chart_templates.length + i.interactive_chart_templates.length) && (a.showPremier("moreTemplates"), !0)
                },
                alerts: function(t) {
                    return !!(e.config.limits.alerts && e.config.limits.alerts <= t) && (a.showPremier("morePriceAlerts"), !0)
                }
            }
        }
        i.$inject = ["$window", "authService", "bcModalLoginSrv"], e.exports = i
    },
    fsaR: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close();></i> </div> <div class=modal-inner-wrapper> <data-ref-component data-ref=ref data-is-premier=isPremier></data-ref-component> </div> </div> </div> '
    },
    fuaU: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    rawData: "=",
                    options: "="
                },
                link: function(o) {
                    o.periods = t.config.earningsEstimates.periods, o.rows = t.config.earningsEstimates.rows;
                    var n, s = [],
                        l = [];
                    o.rows.forEach(function(e) {
                        s.push(e.key)
                    }), o.close = function() {
                        n.dismiss()
                    }, o.showDetails = function() {
                        o.link = r.route(t.config.routes["quotes.earningsEstimates"], {
                            sector: t.config.symbols.mapping[o.rawData.symbolType],
                            symbol: o.rawData.symbol
                        });
                        var c = (o.periods.forEach(function(e) {
                            l.push("estimateDate" + e.key + ".format(m/y)"), s.forEach(function(t) {
                                l.push(t + e.key)
                            })
                        }), {
                            route: "/quotes/get",
                            config: {
                                symbol: o.rawData.symbol,
                                fields: l.join(",")
                            }
                        });
                        i.getDetailsData(c).then(function(t) {
                            o.data = t.data[0], n = e.open({
                                template: a("Fp35"),
                                scope: o,
                                windowClass: "reveal-modal bc-earnings-dividends-details"
                            })
                        })
                    }, o.getClass = function(e, t) {
                        if (e.colorize && "N/A" !== t) return r.setColor(t)
                    }
                },
                template: a("31Pk")
            }
        }
        i.$inject = ["$modal", "$window", "earningsDividendsApiFactory", "utils"], e.exports = i
    },
    fxHL: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.datatable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: []
                    },
                    links: ["symbolName"],
                    colorize: ["priceChange"]
                },
                callback: function(e) {
                    delete e.meta.field.shortName.symbol, delete e.meta.field.shortName.symbolType, delete e.meta.field.shortName.symbolCode, e.data.forEach(function(e) {
                        e.symbolSector = t.getSector(e.symbolType), -1 !== ["SWAEADY1.RT", "SWAEADY5.RT", "SWAADY10.RT", "SWAADY30.RT"].indexOf(e.symbol) && (e.symbolName = e.symbolName.replace("Rate ", ""))
                    }), this.content = e
                }
            }
        }
        i.$inject = ["$scope", "quotesService"], e.exports = i
    },
    g0jE: function(e, t) {
        e.exports = "<div class=\"tools-dropdown tools-dropdown-aggregation dashboard-grid-aggregation-drop-down\"> <bc-dropdown-flexible data-label=$ctrl.getLabel() data-dropdown-id=bc-interactive-chart-dropdown-aggregation data-remove-mobile-touch=true> <div class=tools-dropdown-content> <ul> <li data-ng-repeat=\"item in $ctrl.aggregations\" data-ng-click=$ctrl.changeAggregation(item) data-ng-class=\"{'active': $ctrl.aggregation.unit === item.unit && (!$ctrl.isFuture || $ctrl.aggregation.spec === item.spec || (!item.spec && $ctrl.aggregation.spec !== 'Nearest')), 'hide': $ctrl.aggregation.spec === 'Continue' && item.spec === 'Nearest'}\"> [[ ::item.label ]] </li> </ul> </div> </bc-dropdown-flexible> </div>"
    },
    g4Vl: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e) {
                return void 0 !== e ? ~e.toString().indexOf("-") || ~e.toString().indexOf("+") || 0 === e ? e : "+" + e : e
            }
        }
    },
    g4ez: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    defaultSymbol: "@",
                    market: "@"
                },
                controller: ["interactiveChartApi", "bcInlineData", "_", "Velocity", "$scope", function(e, t, i, r, o) {
                    var n = this,
                        s = {
                            symbol: n.defaultSymbol
                        },
                        l = angular.element(document.querySelector(".js-market-performance-chart-controls")),
                        c = !1;

                    function d() {
                        var t = n.symbolToCompare.filter(function(e) {
                            return e !== n.defaultSymbol.toUpperCase()
                        });
                        t = t.map(function(e) {
                            return {
                                symbol: e,
                                curves: [{
                                    colors: [i.find(n.symbolsList, function(t) {
                                        return t.symbol === e
                                    }).color],
                                    lineWidth: 1
                                }],
                                leftScale: !1
                            }
                        }), e.changeAxisType("percent"), e.changeCompare(t).render()
                    }
                    n.menuVisible = !0, n.symbolData = null, n.loading = !0, n.symbolsList = a("m/Im")[n.market], n.symbolToCompare = i.pluck(n.symbolsList, "symbol"), o.$watchCollection(function() {
                        return n.symbolToCompare
                    }, i.debounce(function() {
                        c && d()
                    }, 1e3)), t.addInlineDataForSymbols(n.symbolToCompare).then(function(t) {
                        var a = t.data[0];
                        n.symbolData = angular.copy(a), e.initFeed(n.defaultSymbol, !1, "chart-market-performance.def.json"), e.setCurrentChartSymbol(n.defaultSymbol), e.initChart(a, s).then(function() {
                            e.changeAxisType("percent"), d(), c = !0
                        }).finally(function() {
                            n.loading = !1
                        })
                    }), n.showMenu = function() {
                        n.menuVisible = !0, r(l, "slideDown", {
                            duration: 500
                        })
                    }, n.closeMenu = function() {
                        n.menuVisible = !1, r(l, "slideUp", {
                            duration: 500
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("PkTC")
            }
        }
    },
    g7Ky: function(e, t) {
        e.exports = '<div class=bc-technical-chart data-ng-class="{\'full-screen\': fullScreen}"> <interactive-chart-premier-ads is-technical=true></interactive-chart-premier-ads> <div class=quick-chart-settings> <technical-chart-quick-settings data-draw-chart=drawChart() data-current-symbol=currentSymbol data-symbol-sector=symbolSector data-form-data=formData.forms.basic data-chart-data=chartData data-full-screen=fullScreen></technical-chart-quick-settings> </div> <div data-ng-hide=shouldMapBeShown() class="image-map-data hide-for-small-only"> <div class=image-map-data-inner data-ng-if=mapDataEmpty> [[ ::mapDataEmpty ]] </div> <div class=image-map-data-inner data-ng-if=!mapDataEmpty> <span class=main data-ng-bind=tooltipData.date></span> <span class=main data-ng-bind=tooltipData.symbol></span> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.open> <span>Open:</span> <span data-ng-bind=tooltipBaseData.open></span> </div> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.high> <span>High:</span> <span data-ng-bind=tooltipBaseData.high></span> </div> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.low> <span>Low:</span> <span data-ng-bind=tooltipBaseData.low></span> </div> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.close> <span>Close:</span> <span data-ng-bind=tooltipBaseData.close></span> </div> <div class=inline-image-helper-desk data-ng-show=tooltipBaseData.Volume> <span>Volume:</span> <span data-ng-bind=tooltipBaseData.Volume></span> </div> <div class=inline-image-helper-desk data-ng-repeat="(key, value) in tooltipData"> <span data-ng-hide="key === \'date\' || key === \'symbol\'">[[ key | ucfirst ]]:</span> <span data-ng-hide="key === \'date\' || key === \'symbol\'" data-ng-bind=value></span> </div> </div> </div> <div class=chart-view> <div class=vertical-share-wrapper data-ng-if="fullScreen && !dashboardMode"> <technical-chart-vertical-share data-current-symbol=currentSymbol data-chart-data=chartData> </technical-chart-vertical-share> </div> <div class="chart-template js-chart-template"> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=technical-chart__chart-error-block data-ng-show=chartError> [[ chartError ]] </div> <img data-ng-mouseleave=hideTooltip() data-ng-hide=chartError data-bc-click-outside=hideTooltip() data-bc-responsive-image-map data-ng-class="{\'opacity\':dataLoading}" usemap=#bcTechnicalChartMap class="chart-image js-chart-image" id=technicalChartImage data-ng-src="[[ chartData.image ]]"/> <map id=bc-technical-chart-image-map data-bc-image-map-tooltip=technical-chart-image-tooltip data-tooltip-left="[[ toolTipLeft ]]" data-image-class=js-chart-image name=bcTechnicalChartMap></map> <technical-chart-tooltip-box data-ng-show=shouldMapBeShown() data-id=technical-chart-image-tooltip data-class=technical-chart-image-tooltip data-show-tooltip=showTooltip data-tooltip-base-data=tooltipBaseData data-tooltip-data=tooltipData data-map-data-empty=mapDataEmpty> </technical-chart-tooltip-box> </div> </div> <div class="chart-form-wrapper no-print"> <form class="chart-form bc-form" novalidate name=technicalChartForm data-ng-submit=drawChartButtonClick()> <div class="chart-form-section border-bottom"> <div class="row collapse"> <div class="column small-12" data-ng-class="{\'medium-4\': !fullScreen}"> <div class=form-close-wrapper data-ng-show=fullScreen> <i class="bc-glyph-times form-close" data-ng-click=toggleChartForm()></i> </div> <div data-ng-show=error.symbol class=error-block> <span class=error-msg data-ng-bind=error.symbol></span> </div> <label class=section-label for=bc-technical-chart__input-symbol data-ng-hide="chartSettings.currentSetting === technicalChartConfig.chartSettings.SPREAD">Enter Symbol:</label> <input id=bc-technical-chart__input-symbol data-ng-hide="chartSettings.currentSetting === technicalChartConfig.chartSettings.SPREAD" class=technical-chart-symbol-input data-ng-class="{\'error-input\': error.symbol}" type=text placeholder=Symbol name=symbol data-ng-model=formData.forms.basic[fields.SYMBOL] /> </div> <div class="column small-12 text-right" data-ng-class="{\'medium-8\': !fullScreen}"> <technical-chart-comparison-link data-ng-show="chartSettings.currentSetting === \'comparison\'" data-comparison-form=formData.forms.comparison data-symbol="[[ ::currentSymbol.symbol ]]" data-symbol-sector="[[ ::symbolSector ]]" data-symbol-type="[[ ::currentSymbol.symbolType ]]"></technical-chart-comparison-link> <label class=bc-technical-chart__select-chart-type-label for=bc-technical-chart__select-chart-type>Chart Type:</label> <div class="bc-dropdown styled bc-technical-chart__select-chart-settings"> <select name=chartSetting id=bc-technical-chart__select-chart-type data-ng-model=chartSettings.currentSetting data-ng-options="setting.value as setting.title for setting in chartSettingTypes"> </select> </div> </div> </div> </div> <div class=error-block data-ng-show=technicalChartForm.minutesPeriod.$invalid> <span class=error-msg data-ng-show=technicalChartForm.minutesPeriod.$invalid> Use minutes value in range: 1-999 </span> </div> <div data-ng-switch on=chartSettings.currentSetting> <div data-ng-switch-when=basic> <technical-chart-basic-settings data-symbol-sector=symbolSector data-form=technicalChartForm data-form-submitted=formSubmitted data-form-data=formData.forms.basic></technical-chart-basic-settings> </div> <div data-ng-switch-when=spread> <technical-chart-spread-settings data-symbol="[[ currentSymbol.symbol ]]" data-error=error data-form-data=formData.forms.spread data-full-screen=fullScreen></technical-chart-spread-settings> <technical-chart-basic-settings data-is-spread="[[ true ]]" data-form=technicalChartForm data-form-submitted=formSubmitted data-symbol-sector=symbolSector data-form-data=formData.forms.basic></technical-chart-basic-settings> </div> <div data-ng-switch-when=comparison> <technical-chart-comparison-settings data-symbol-sector=symbolSector data-error=error data-form-data=formData.forms.comparison data-full-screen=fullScreen></technical-chart-comparison-settings> <technical-chart-basic-settings data-symbol-sector=symbolSector data-form=technicalChartForm data-form-submitted=formSubmitted data-form-data=formData.forms.basic></technical-chart-basic-settings> </div> </div> <div class=chart-form-section> <div data-ng-show="dateRangeError && formSubmitted" class=error-block> <span class=error-msg>Please make sure the date ranged entered uses the format MM/DD/YYYY.</span> </div> <technical-chart-buttons></technical-chart-buttons> </div> </form> </div> </div>'
    },
    g7ou: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c) {
            var d = this;
            d.tools = a("07Nk"), d.availableAnnotations = [], d.defaultAnnotationsConfigs = null, d.currentTab = "drawings";
            var u = l.getChartSettings();
            d.snapAnnotationsToPrices = !!u.snapAnnotationsToPrices;
            var p = document.querySelector("#mouseMoveSpinner");

            function m() {
                p.style.display = "none", document.querySelector("body").removeEventListener("mousemove", h), document.querySelector("#bcModalFlipchartContent").removeEventListener("click", m)
            }

            function h(e) {
                ! function e(t) {
                    if (t && "bcModalFlipchartContent" === t.id) return !0;
                    if (t && t.parentNode) return e(t.parentNode);
                    return !1
                }(e.target) ? p.style.display = "none": (p.style.left = e.pageX + 10 + "px", p.style.top = e.pageY + 10 + "px", p.style.display = "block")
            }
            i.getChartTaxonomy().then(function(e) {
                e.annotations.forEach(function(e) {
                    d.availableAnnotations.push(e.id)
                })
            }), o.isLoggedIn() ? r.loadAllAnnotationsConfig().then(function(e) {
                d.defaultAnnotationsConfigs = e.data
            }) : d.defaultAnnotationsConfigs = [], d.useTool = function(a) {
                var r = null;
                if (d.defaultAnnotationsConfigs && d.defaultAnnotationsConfigs.length) {
                    var o = n.find(d.defaultAnnotationsConfigs, {
                        name: a
                    });
                    r = o ? JSON.parse(o.value) : null
                }
                switch (a) {
                    case "FiftyPercentLine":
                        e.toolMiddleLine({
                            traits: r
                        });
                        break;
                    case "CalculateProfitLoss":
                        e.toolProfitLoss(r);
                        break;
                    case "CalculateRewardRisk":
                        e.toolRewardRisk(r);
                        break;
                    case "FibonacciRetracement":
                        r && r.factors && (null === r.factors[0] || void 0 === r.factors[0].shown) && (r = null), i.useTool(a, r);
                        break;
                    default:
                        i.useTool(a, r)
                }
                s.isMobileAndTablet() || (document.querySelector("body").addEventListener("mousemove", h), document.querySelector("#bcModalFlipchartContent").addEventListener("click", m)), t.close()
            }, d.close = function() {
                t.close()
            }, d.changeSnapToPrice = function() {
                u.snapAnnotationsToPrices = d.snapAnnotationsToPrices, l.setChartSettings(u), i.snapAnnotationsToPrices(d.snapAnnotationsToPrices).render(), c.save(!0)
            }
        }
        i.$inject = ["interactiveChartModals", "$modalInstance", "interactiveChartApi", "interactiveChartUserPreferencesApi", "authService", "_", "utils", "interactiveChartSettings", "interactiveChartStateService"], e.exports = i
    },
    g9TT: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                priority: 0,
                bindToController: {
                    tooltipData: "=",
                    tooltipBaseData: "=",
                    showTooltip: "=",
                    id: "@",
                    class: "@",
                    mapDataEmpty: "="
                },
                controller: [function() {
                    this.getValue = function(e) {
                        return Array.isArray(e) ? e.join(", ") : e
                    }
                }],
                controllerAs: "$ctrl",
                template: a("P4da")
            }
        }
    },
    gL2y: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    currentSymbol: "="
                },
                controller: ["$window", "utils", function(e, t) {
                    var a;
                    this.socialTitle = this.currentSymbol.symbol + " | Custom Interactive Chart for " + this.currentSymbol.symbolName, this.socialDesctiprion = "Build and share your own charts with sophisticated technical studies and indicators for equities, futures, and more.", this.socialImageType = "svg", this.redirectUrl = (a = this.currentSymbol, t.route(e.config.routes["quotes.sectors.interactiveChart"], {
                        symbol: a.symbol,
                        sector: e.config.symbols.mapping[a.symbolType]
                    }))
                }],
                controllerAs: "$ctrl",
                template: a("S2d2")
            }
        }
    },
    gN6m: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                scope: {},
                bindToController: {
                    defaultFilter: "@"
                },
                controller: ["$modal", "$rootScope", "events", "screenerPermissionService", function(e, t, i, r) {
                    var o = this;
                    o.defaultFilter = o.defaultFilter || "exchange", o.warnScreenerReset = function() {
                        r.checkPermissions("reset") && e.open({
                            template: a("fe72"),
                            controller: "Screener.ModalClearScreenerCtrl",
                            windowClass: "bc-light-modal",
                            resolve: {
                                defaultFilter: function() {
                                    return o.defaultFilter
                                }
                            }
                        }).result.then(function(e) {
                            "OK" === e.status && t.$broadcast(i.ON_SCREENER_CLEAR)
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("73Hv")
            }
        }
    },
    "gS/N": function(e, t, a) {
        "use strict";
        angular.module("adv", []).factory("advApiService", a("EN4S")).directive("bcShowAdvertiseModal", a("0xEQ")).directive("advFormComponent", a("wHvS"))
    },
    gYOq: function(e, t) {
        e.exports = '<div class="bc-portfolios-table widget-table"> <div data-ng-show=portfolios.length> <div class=form-close-wrapper data-ng-click=closePanel()> <i class="bc-glyph-times form-close"></i> </div> <div class="drop-down-wrapper with-cog" data-ng-class="{\'noGridView\': !isGridViewEnabled}"> <div class="bc-dropdown styled"> <select name=currentList data-ng-model=portfolio data-ng-change="portfolioChanged(true, true)"> <option data-ng-repeat="item in portfolios" value="[[ item.id ]]">[[ item.caption ]]</option> </select> </div> </div> <div class="drop-down-wrapper views-dropdown" data-ng-show=!isGridViewEnabled> <div class="bc-dropdown styled"> <select data-ng-model=view name=viewName data-show-custom-views-options data-ng-change=changeView()> <option value=portfolio>Portfolio View</option> <option value=main>Main View</option> <option value=technical>Technical</option> <option value=performance>Performance</option> </select> </div> </div> <div class=controller-cog data-ng-click=openControllerModal() data-ng-show=isGridViewEnabled> <i class=bc-glyph-cog></i> </div> <div class=throbber-wrapper data-ng-show=loading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=barchart-minitable-wrapper data-ng-show="content && content.data.length && !loading" bc-infinity-scroll=getMore()> <table> <thead> <tr> <th></th> <th data-ng-repeat="(columnKey, columnTitle) in content.meta.field.shortName track by $index" data-ng-if="options.exclude.indexOf(columnKey) === -1" data-ng-click=sortData(columnKey)> <div class=th-wrapper> <barchart-table-header-cell-template data-cell-key="{{ columnKey}}" data-cell-value="{{ columnTitle | bcReplacement:\'Last Price\':\'Price\' }}" data-content=content> </barchart-table-header-cell-template> <i data-ng-show="sort && sort.orderBy === columnKey && sort.orderDir=== \'asc\'" class="barchart-sort-asc bc-glyph-sort-asc"></i> <i data-ng-show="sort && sort.orderBy === columnKey && sort.orderDir=== \'desc\'" class="barchart-sort-desc bc-glyph-sort-desc"></i> </div> </th> </tr> </thead> <tbody data-ng-repeat="row in content.data"> <tr data-ng-if="row.symbol !== \'~\'" data-ng-class="{\'current\': currentSymbol.symbol === row.symbol}" data-ng-click=changeSymbol(row)> <td> <my-chart-quick-links data-symbol=row data-type=portfolio></my-chart-quick-links> </td> <td data-ng-repeat="(columnKey, columnTitle) in content.meta.field.shortName track by $index" data-ng-if="options.exclude.indexOf(columnKey) === -1" data-ng-class="setClass(columnKey, row[columnKey], row)"> <barchart-table-cell-template data-cell-key="{{ columnKey }}" data-cell-value=row[columnKey] data-cells-to-colorize=options.colorize data-cells-to-colorize-opinion=options.opinion> </barchart-table-cell-template> </td> </tr> <tr data-ng-class="{\'current\': currentSymbol.symbol === row.symbol}" data-ng-click=changeSymbol(row)> <td></td> <td class=text-left colspan=18> <span>{{ row.symbolName }}</span> </td> </tr> </tbody> </table> <div class=throbber-wrapper data-ng-show=moreLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> </div> <div data-ng-if="!content.data.length && !loading" class=no-table> This portfolio has no transactions. </div> </div> <div data-ng-if=!portfolios.length class=no-table> <div class=form-close-wrapper data-ng-click=closePanel()> <i class="bc-glyph-times form-close"></i> </div> You have no Portfolios. <div class="text-center button-wrapper"> <a data-bc-modal-login=portfolio target=_blank data-ng-href="[[ createPortfolioLink ]]" class="bc-button light-blue small"> <i class=bc-glyph-plus></i> New Portfolio </a> </div> </div> </div> '
    },
    gZwS: function(e, t) {
        e.exports = '<div class=bc-screener__filter-contains> <div class="bc-dropdown filter bc-screener__filter-contains-operator"> <select data-ng-model=filterData.default.operator data-ng-options="item.key as item.value for item in filters.default.operator"></select> </div> <input type=text class=bc-screener__filter-contains-value placeholder="Enter stock or security name..." data-ng-model=filterData.default.value /> </div>'
    },
    gcKr: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    user: "="
                },
                controller: ["authService", "alertsModalFactory", "alertManagerService", "bcModalLoginSrv", function(e, t, a, i) {
                    var r = this;
                    r.configureTextAlerts = function() {
                        r.user.is_premier ? a.getMobilePublisherType(r.user.id).then(function(e) {
                            e.default_recipient_hmac ? t.openModalSmSTextSetting(e) : t.openModalActivatePhoneNumber(e)
                        }) : i.showPremier("advAlerts")
                    }
                }],
                controllerAs: "$ctrl",
                template: a("At1M")
            }
        }
    },
    gdqT: function(e, t) {
        e.exports = '<div data-ng-show=showTable> <div class=bc-major-market-sectors-toolbar-wrapper> <div class="bc-dropdown filter"> <select name=timeFrame data-ng-options="tf as tf.title disable when tf.name === \'matrix\' && isMobileOnly() for tf in timeFrames" data-ng-change=updateTimeFrame() data-ng-model=timeFrame> </select> </div> </div> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class=bc-major-market-sectors-table-wrapper ng-switch on=timeFrame.name data-ng-show=!dataLoading> <div ng-switch-default> <major-market-sectors-table></major-market-sectors-table> </div> <div ng-switch-when=matrix> <major-market-sectors-table-matrix></major-market-sectors-table-matrix> </div> </div> </div>'
    },
    geCq: function(e, t, a) {
        "use strict";
        var i = "AdvancedSearch";
        angular.module(i, []).constant("dataTableConfig", a("kJ9j")).directive("advancedSearch", a("UbWl"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    gpNt: function(e, t) {
        e.exports = '<div id="[[ ::vm.uniqueId ]]"></div>'
    },
    gqqT: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                getSectorData: function(r) {
                    var o = {
                        symbol: r,
                        fields: "symbol,symbolName,lastPrice,priceChange,openPrice,lowPrice1y,highPrice1y",
                        meta: "field.name",
                        raw: 1
                    };
                    return e.call(a.buildUrl(i.API_URL + "/quotes/get", o), t.GET).then(function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig"], e.exports = i
    },
    gqxf: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.symbolData = a, e.dashboardMode = i, e.$on("watchlistsUpdated", function() {
                t.close()
            }), e.cancel = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "symbolData", "dashboardMode"], e.exports = i
    },
    gxIQ: function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click="$ctrl.close(\'cancel\')"></i> </div> <h5 class=modal-title>[[ $ctrl.data.title ]]</h5> <div class="inner-form bc-form"> <p data-ng-bind-html=$ctrl.data.description></p> <div class=form-buttons> <button type=button class="bc-button save grey" data-ng-click="$ctrl.close(\'cancel\')">Cancel</button> <button type=button data-ng-show="$ctrl.type === \'deactivate\'" class="bc-button save light-blue" data-ng-click="$ctrl.close(\'OK\')">Deactivate</button> <button type=button data-ng-show="$ctrl.type === \'deleteAll\'" class="bc-button save red" data-ng-click="$ctrl.close(\'OK\')">Delete All</button> <button type=button data-ng-show="$ctrl.type === \'deleteInactive\'" class="bc-button save red" data-ng-click="$ctrl.close(\'OK\')">Delete Inactive</button> </div> </div> </div>'
    },
    gzXl: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("yNVj"),
                controller: ["$scope", "quotesService", function(e, t) {
                    e.lists = {
                        left: [{
                            field: "movingAverage20d",
                            directionColor: !0
                        }, {
                            field: "priceChange20d",
                            directionColor: !0
                        }, {
                            field: "percentChange20d",
                            label: "20-Day Percent Change",
                            directionColor: !0
                        }, {
                            field: "averageVolume20d"
                        }, {
                            field: "rawStochastic20d"
                        }, {
                            field: "stochasticK20d"
                        }, {
                            field: "weightedAlpha",
                            directionColor: !0
                        }],
                        right: [{
                            field: "stochasticD20d"
                        }, {
                            field: "averageTrueRange20d",
                            label: "20-Day Average True Range"
                        }, {
                            field: "relativeStrength20d"
                        }, {
                            field: "percentR20d"
                        }, {
                            field: "historicVolatility20d"
                        }, {
                            field: "macdOscillator20d",
                            directionColor: !0
                        }, {
                            field: "standardDeviation",
                            directionColor: !0
                        }]
                    }, e.data = e.widgetData.data[0], e.sector = t.getSector(e.data.symbolType), e.meta = e.widgetData.meta.field.name, e.filterEmptyRows = function(t) {
                        return null !== e.data.raw[t.field]
                    }, e.setColor = function(t) {
                        if (t.directionColor) return "movingAverage20d" === t.field ? e.data.raw.lastPrice >= e.data.raw.movingAverage20d ? "up" : "down" : e.data.raw[t.field] > 0 ? "up" : "down"
                    }
                }]
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    gzmO: function(e, t, a) {
        "use strict";
        var i = "SitePreferences";
        angular.module(i, []).controller(i + ".sitePreferencesCtrl", a("KDns"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    h1iM: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = {},
                o = 0;

            function n(e) {
                var t = [];
                return Object.keys(e).sort().forEach(function(a) {
                    t = t.concat(e[a])
                }), t
            }
            return e.$on("setDownloadConfig", function(e, t) {
                r = angular.copy(t)
            }), e.$on("tableSorted", function(e, t) {
                r.orderBy = t.field, r.orderDir = t.dir ? "desc" : "asc"
            }), e.$on("bcPaginationData", function(e, t) {
                r.page = t.currentPage, o = t.totalPages
            }), {
                getSymbolsList: function(e) {
                    return r.portfolioId ? t.makeRequest({
                        api: r
                    }, !0).then(function(e) {
                        return {
                            data: e = i.getPortfolioDatatableData(e[0].data[0]),
                            currentPage: r.page,
                            totalPages: o
                        }
                    }, function(e) {
                        return a.reject(e)
                    }) : (r.fields = e || "symbol", r.fields += ",symbolName,symbolType", r.groupBy && (r.fields += "," + r.groupBy), r.orderBy && (r.fields += "," + r.orderBy), t.makeRequest({
                        api: r
                    }, !0).then(function(e) {
                        return r.groupBy && (e[0].data = n(e[0].data)), {
                            data: e,
                            currentPage: r.page,
                            totalPages: o
                        }
                    }, function(e) {
                        return a.reject(e)
                    }))
                },
                getAdditionalSymbols: function(e) {
                    var s = angular.copy(r);
                    return s.page = e, r.portfolioId ? t.makeRequest({
                        api: s
                    }, !0).then(function(e) {
                        return {
                            data: e = i.getPortfolioDatatableData(e[0].data[0]),
                            currentPage: s.page,
                            totalPages: o
                        }
                    }, function(e) {
                        return a.reject(e)
                    }) : t.makeRequest({
                        api: s
                    }, !0).then(function(e) {
                        return r.groupBy && (e[0].data = n(e[0].data)), {
                            data: e,
                            currentPage: s.page,
                            totalPages: o
                        }
                    }, function(e) {
                        return a.reject(e)
                    })
                }
            }
        }
        i.$inject = ["$rootScope", "datatableApiFactory", "$q", "portfolioDataProcessor"], e.exports = i
    },
    h3hR: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    newsSubscription: "=",
                    landing: "=",
                    title: "=",
                    list: "=",
                    buttonOnly: "=",
                    link: "@",
                    classes: "@"
                },
                link: function(t) {
                    t.subscribe = function(i) {
                        e.open({
                            template: a("k1nS"),
                            controller: "bcNewsSubscriptionFormModalCtrl",
                            windowClass: "modal-fixed-top news-subscription-widget-wrapper-modal",
                            resolve: {
                                list: function() {
                                    return t.list
                                }
                            }
                        })
                    }
                },
                template: a("ShbH")
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    h6vz: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class=bc-modal-content-inner> <div class=modal-header> Chart Menu <i class="bc-glyph-times form-close right" data-ng-click=modalDismiss()></i> </div> <ul class=chart-actions> <li> <a data-ng-click="applyAction(\'clear\')">Clear Chart</a> </li> <li> <a data-ng-click="applyAction(\'compare\')">Comparison Chart</a> </li> <li> <a data-ng-click="applyAction(\'expression\')">Expressions & Spreads</a> </li> <li data-ng-if=!isLoggedIn data-ng-click=modalDismiss()> <a data-bc-modal-login=templates data-login-callback=saveChartCallback>Apply a Template</a> </li> <li data-ng-if=isLoggedIn class=hide-for-medium-up> <a data-ng-click="applyAction(\'template\')">Apply a Template</a> </li> <li data-ng-if=!isLoggedIn data-ng-click=modalDismiss()> <a data-bc-modal-login=templates>Save as Template</a> </li> <li data-ng-if=isLoggedIn> <a data-ng-click="applyAction(\'saveTemplate\')">Save as Template</a> </li> <li data-bc-modal-login=alerts data-bc-show-alerts-modal data-ng-click=modalDismiss() data-symbol="[[ currentSymbol | json ]]"> <a>Set Alerts</a> </li> <li data-ng-if=isLoggedIn data-ng-click=addToWatchlist()> <a>Add to Watchlist</a> </li> <li data-ng-if=!isLoggedIn data-bc-modal-login=watchlist data-stay-on-page=true> <a>Add to Watchlist</a> </li> <li data-ng-click=saveToMyCharts()> <a>Save to My Charts</a> </li> <li data-bc-symbol-widgets-modal data-symbol-data=currentSymbol class=hide-for-small-only title="Additional Symbol Information"> <a>More Data</a> </li> <li class=hide-for-medium-up> <a data-ng-click="applyAction(\'share\')">Social Share</a> </li> <li data-ng-click=downloadChartData()> <a>Download Chart Data</a> </li> <li data-ng-if=!fullScreen class=hide-for-small-up> <a data-ng-click="applyAction(\'expand\')">Full Screen Chart</a> </li> <li> <a data-ng-click="applyAction(\'image\')">Save Chart as Image (.png)</a> </li> <li class=hide-for-medium-up data-ng-show=!isLoggedIn> <a data-bc-modal-login=stream>Auto-Update Chart</a> </li> </ul> </div> </div>'
    },
    h7ix: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "$location", "$rootScope", function(e, t, a) {
                e.$on("onExpirationDateChanged", function() {
                    e.daysToExpiration = !1
                }), e.$on("onBarchartDataTableRendered", function(t, a) {
                    if (a && a.data) {
                        var i = a.data.Call ? a.data.Call[0] : a.data[0];
                        i.daysToExpiration && i.expirationDate && (e.daysToExpiration = i.daysToExpiration || !1, e.expirationDate = !!i.expirationDate && window.moment(new Date(i.expirationDate)).format("YYYY-MM-DD"))
                    }
                });
                var i = e.$on("barchartDataTableIsReady", function() {
                    var r = t.search().expiration || !1;
                    r && (e.expirationDate = r, a.$broadcast("initQuotesOptionsExpiration", r), a.$broadcast("onExpirationDateChanged", {
                        data: r
                    })), i()
                })
            }];
            return {
                restrict: "E",
                replace: !0,
                template: a("7HUG"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    h8BL: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.selectMarket = {
                visibility: !1
            }, t.register("only screen and (min-width: 767px)", {
                match: function() {
                    e.$evalAsync(function() {
                        e.selectMarket.visibility = !0
                    })
                },
                unmatch: function() {
                    e.$evalAsync(function() {
                        e.selectMarket.visibility = !1
                    })
                }
            })
        }
        i.$inject = ["$scope", "enquire"], e.exports = i
    },
    h9cY: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            return {
                getActivityPerExchange: function(a) {
                    var o = a.method || "momentum/get";
                    return delete a.method, e.call(i.buildUrl(r.API_URL + "/" + o, a), t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "_", "utils", "apiConfig"], e.exports = i
    },
    hEtx: function(e, t, a) {
        "use strict";
        e.exports = function(e, t) {
            var a = {
                UsEquity: {}
            };
            return a.UsEquity[t.FREQUENCY] = "DO", a.UsEquity[t.TIME_PERIOD] = "M", a.UsEquity[t.SCALE] = "0", a.UsEquity[t.STYLE] = "BAR", a.UsEquity[t.VOLUME] = "total", a.UsEquity[t.GRID] = "1", a.UsEquity[t.INDICATORS_OBJECT] = null, a.UsEquity[t.INDICATORS] = null, a.UsEquity[t.DATE_FROM] = null, a.UsEquity[t.DATE_TO] = null, a.UsEquity[t.MINUTES_PERIOD] = null, a.Index = {}, a.Index[t.FREQUENCY] = "DO", a.Index[t.TIME_PERIOD] = "M", a.Index[t.SCALE] = "0", a.Index[t.STYLE] = "BAR", a.Index[t.VOLUME] = "0", a.Index[t.GRID] = "1", a.Index[t.INDICATORS_OBJECT] = null, a.Index[t.INDICATORS] = null, a.Index[t.DATE_FROM] = null, a.Index[t.DATE_TO] = null, a.Index[t.MINUTES_PERIOD] = null, a.Futures = {}, a.Futures[t.FREQUENCY] = "DO", a.Futures[t.TIME_PERIOD] = "M", a.Futures[t.SCALE] = "0", a.Futures[t.STYLE] = "BAR", a.Futures[t.VOLUME] = "contract", a.Futures[t.GRID] = "1", a.Futures[t.INDICATORS_OBJECT] = null, a.Futures[t.INDICATORS] = null, a.Futures[t.DATE_FROM] = null, a.Futures[t.DATE_TO] = null, a.Futures[t.MINUTES_PERIOD] = null, a.Forex = {}, a.Forex[t.FREQUENCY] = "DO", a.Forex[t.TIME_PERIOD] = "M", a.Forex[t.SCALE] = "0", a.Forex[t.STYLE] = "BAR", a.Forex[t.VOLUME] = "0", a.Forex[t.GRID] = "1", a.Forex[t.INDICATORS_OBJECT] = null, a.Forex[t.INDICATORS] = null, a.Forex[t.DATE_FROM] = null, a.Forex[t.DATE_TO] = null, a.Forex[t.MINUTES_PERIOD] = null, a.MutualFund = {}, a.MutualFund[t.FREQUENCY] = "DO", a.MutualFund[t.TIME_PERIOD] = "M", a.MutualFund[t.SCALE] = "0", a.MutualFund[t.STYLE] = "LINE", a.MutualFund[t.VOLUME] = "0", a.MutualFund[t.GRID] = "1", a.MutualFund[t.INDICATORS_OBJECT] = null, a.MutualFund[t.INDICATORS] = null, a.MutualFund[t.DATE_FROM] = null, a.MutualFund[t.DATE_TO] = null, a.MutualFund[t.MINUTES_PERIOD] = null, a.InterestRates = {}, a.InterestRates[t.FREQUENCY] = "MO", a.InterestRates[t.TIME_PERIOD] = "M", a.InterestRates[t.SCALE] = "0", a.InterestRates[t.STYLE] = "LINE", a.InterestRates[t.VOLUME] = "0", a.InterestRates[t.GRID] = "1", a.InterestRates[t.INDICATORS_OBJECT] = null, a.InterestRates[t.INDICATORS] = null, a.InterestRates[t.DATE_FROM] = null, a.InterestRates[t.DATE_TO] = null, a.InterestRates[t.MINUTES_PERIOD] = null, a.default = a.UsEquity, a[e] || a.default
        }
    },
    hG9l: function(e, t) {
        e.exports = '<div> <div class=block-item data-ng-repeat="quotesItem in StocksMajorIndicesOverviewChartsCtrl.quotesData"> <div class=block-item-head> <div class=block-item-title> <h4 data-ng-bind=::quotesItem.symbolName></h4> <p> <span class=last-price data-ng-bind=::quotesItem.lastPrice></span> <span class=percent-change data-ng-class=StocksMajorIndicesOverviewChartsCtrl.getPriceColor(quotesItem.priceChange)> [[ ::quotesItem.priceChange ]] ([[ ::quotesItem.percentChange ]]) </span> </p> </div> <div class=block-item-link> <a target=_self class="bc-button small white-with-border" data-ng-if=StocksMajorIndicesOverviewChartsCtrl.links[quotesItem.symbol] data-ng-href="[[ StocksMajorIndicesOverviewChartsCtrl.links[quotesItem.symbol] ]]">See More</a> <a target=_self class="bc-button small white-with-border" data-ng-if=!StocksMajorIndicesOverviewChartsCtrl.links[quotesItem.symbol] data-ng-href="/[[ ::StocksMajorIndicesOverviewChartsCtrl.quotesService.getSector(quotesItem.symbolType, quotesItem.symbolCode) ]]/quotes/[[ quotesItem.symbol ]]">See More</a> </div> </div> <div class=block-item-chart> <a target=_self data-ng-href="/[[ ::StocksMajorIndicesOverviewChartsCtrl.quotesService.getSector(quotesItem.symbolType, quotesItem.symbolCode) ]]/quotes/[[ quotesItem.symbol ]]/[[ StocksMajorIndicesOverviewChartsCtrl.chartTypeLink ]]"> <simple-chart class=block-item-chart-canvas data-period=P3M data-aggregation-unit=Day data-aggregation-size=1 data-type=thumbnail data-symbol="[[ quotesItem.symbol ]]" data-x-axis-min-tick-interval=1209600000 data-x-axis-format="%e %b" data-x-axis-tick-pixel-interval=10 data-x-axis-gridlines-visible=false data-x-axis-crosshair-enabled=true data-y-axis-crosshair-enabled=true data-y-axis-visible=true data-y-axis-show-last=true data-style=Area data-primary-color=rgba(79,151,193,0.30) data-y-axis-gridlines-visible=true></simple-chart> </a> </div> </div> </div>'
    },
    hHeP: function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-premier__form-modal form-modal-unsubscribe"> <div class=form-close-wrapper> <i data-ng-click=closeModal() class="bc-glyph-times form-close"></i> </div> <div class=contact-block> <h2 class=header>Cancel Premier Subscription</h2> <div data-ng-hide=success> <p>We\'re sorry to hear you are requesting a Membership cancellation. Please complete the form below and we will be in touch shortly.</p> <form novalidate name=premierUnsubscribeForm class=bc-form data-ng-submit=unsubscribe(premierUnsubscribeForm)> <div class=form-group> <input type=text name=firstName class="form-input form-field-fname" placeholder="First Name" data-ng-class="{\'invalid\': premierUnsubscribeForm.$submitted && premierUnsubscribeForm.firstName.$invalid}" data-ng-model=contactData.first_name required> </div> <div class=form-group> <input type=text name=lastName class="form-input form-field-lname" placeholder="Last Name" data-ng-class="{\'invalid\': premierUnsubscribeForm.$submitted && premierUnsubscribeForm.lastName.$invalid}" data-ng-model=contactData.last_name required> </div> <div class=form-group> <input type=text name=email class="form-input form-field-email" data-ng-class="{\'invalid\': premierUnsubscribeForm.$submitted && premierUnsubscribeForm.email.$invalid}" data-ng-model=contactData.email data-bc-ng-email-validation required> </div> <div class=form-group> <input type=text class="form-input form-field-phone" placeholder=Phone name=phone data-ng-model=contactData.phone> </div> <div class=form-group> <label>Reason for cancellation <span>(required)</span></label> <textarea class="form-textarea form-field-message" name=message data-ng-class="{\'invalid\': premierUnsubscribeForm.$submitted && premierUnsubscribeForm.message.$invalid}" data-ng-model=contactData.message required>\n                    </textarea> </div> <button type=submit class="bc-button upper light-blue form-field-submit">Submit</button> </form> <div class=form-errors data-ng-if="premierUnsubscribeForm.$submitted && premierUnsubscribeForm.$invalid"> <span data-ng-if=premierUnsubscribeForm.$error.required> Please complete required fields to continue. </span> <span data-ng-if=premierUnsubscribeForm.email.$error.invalidEmail> Enter a valid email. </span> </div> </div> <div class=success-block-wrap data-ng-show=success> <p class=success-message>Your request for cancellation has been submitted. </p> <p class=success-message><strong>We will email you a confirmation within 24 business hours once your cancellation is complete.</strong></p> <button type=button data-ng-click=closeModal() class="bc-button upper light-blue">ok</button> </div> </div> </div>'
    },
    hKqp: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                scope: {
                    symbol: "=",
                    symbolType: "=",
                    customData: "="
                },
                replace: !0,
                controller: ["$scope", function(t) {
                    t.getLink = function() {
                        var a = "";
                        return t.symbolType && e.getSector(t.symbolType) && (a = "/" + e.getSector(t.symbolType)), t.symbol && (a += "/quotes/" + t.symbol + "/trading-strategies"), t.customData && t.customData.indicator && (a += "/" + t.customData.indicator), a
                    }
                }],
                template: a("POzk")
            }
        }
        i.$inject = ["quotesService"], e.exports = i
    },
    hL5k: function(e, t, a) {
        "use strict";
        angular.module("BaseChart", []).factory("SimpleChartConfig", a("MSNI")).factory("bcChartFactory", a("K5S/")).directive("simpleChart", a("NFnd"));
        e.exports = {
            enable: !0,
            name: "BaseChart"
        }
    },
    hPOE: function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <h5 class=modal-title>Delete Phone Number</h5> <div class="inner-form bc-form"> <p>Are you sure you want to delete your phone number? You will no longer receive text alerts.</p> <div class=form-buttons> <button type=button class="bc-button save grey" data-ng-click="close(\'cancel\')">Cancel</button> <button type=button class="bc-button save light-blue" data-ng-click="close(\'continue\')">Delete</button> </div> </div> </div>'
    },
    hX06: function(e, t) {
        e.exports = '<div class=bc-alerts__alerts-modal-form-price> <div class=bc-alerts__alerts-modal-form> <div class=bc-alerts__alerts-modal-form-top-text>Alert me when [[ symbol ]]:</div> <div class=bc-form__filedset> <span class=bc-alerts__alerts-modal-form-label>Last Price is</span> <div class="bc-dropdown styled rounded arrow-black bc-alerts__alerts-modal-select-operator"> <select data-ng-model=conditionModel.operator.operator_id data-ng-options="item.operator_id as item.display.long for item in operators"></select> </div> <input type=text name=operand required=required class=bc-alerts__alerts-modal-input-value data-is-number data-ng-class="{\'error\':alertForm.operand.$invalid && alertForm.$submitted}" data-ng-model=conditionModel.operator.operand placeholder="Enter Value..."/> </div> <div class="bc-form__filedset bc-alerts__simple-frequency"> <div class=bc-alerts__alerts-modal-form-label>Check Frequency:</div> <div class=input-radio> <input type=radio id="bc-screener__filter-tabs-tab-value-[[ radioGuid ]]" data-ng-model=frequency data-ng-change=changeFrequency() data-ng-value=props.LAST> <label for="bc-screener__filter-tabs-tab-value-[[ radioGuid ]]"> <span></span> Intraday </label> </div> <div class=input-radio> <input type=radio id="bc-screener__filter-tabs-tab-field-[[ radioGuid ]]" data-ng-model=frequency data-ng-change=changeFrequency() data-ng-value=props.CLOSE> <label class=bc-alerts__alerts-modal-form-label-for-radio for="bc-screener__filter-tabs-tab-field-[[ radioGuid ]]"> <span></span> End of Day (4:30P CT) </label> </div> </div> <div class="bc-form__filedset bc-alert-notes"> <div class="clear-notes clearfix"> <a class=right data-ng-click="alertModel.user_notes = \'\'">Clear Notes</a></div> <span class=bc-alerts__alerts-modal-form-label>Notes: <a class="small-notes right" data-ng-click="alertModel.user_notes = \'\'">Clear Notes</a></span> <div class=bc-alerts__alerts-modal-form-input-message-wrapper> <textarea class=bc-alerts__alerts-modal-form-input-message bc-auto-focus data-bc-auto-focus-disable="[[ setFocusInNotes ]]" data-ng-model=alertModel.user_notes placeholder="This message will be sent when the alert triggers..."></textarea> </div> </div> <div class=bc-alerts__alerts-modal-notes-message data-ng-show="frequency === props.LAST"> Once triggered, the alert is frozen and will not be sent again until reactivated. </div> <div class=bc-alerts__alerts-modal-notes-message data-ng-show="frequency === props.CLOSE"> End of Day alerts will continue to be monitored even after they trigger, unless deleted. </div> </div> <div class=bc-alerts__premier-notice> <div class=bc-alerts__premier-notice-title>Try Advanced Alerts with Barchart Premier</div> <div class=bc-alerts__premier-notice-text> Watch for different trigger points on this symbol using Price, Volume, Technical, and Opinion data variables. <a target=_self data-ng-href="[[ links[\'my.barchartPremier\'] ]]?ref=advAlerts">First Month Free - Learn More</a> </div> </div> <div class=bc-alerts__form-error data-ng-show="alertForm.$invalid && alertForm.$submitted"> Complete required fields to continue </div> </div>'
    },
    hXVP: function(e, t, a) {
        "use strict";
        e.exports = {
            rangeCustom: "screener-range-timeframe-filter",
            indicator: "screener-indicator-filter",
            range: "screener-range-filter",
            text: "screener-contain-filter",
            compare: "screener-compare-filter",
            rangeCustomDate: "screener-range-custom-date-filter",
            opinion: "screener-opinion-filter",
            percentFrom: "screener-percent-from-filter",
            exchange: "screener-exchange-filter",
            rangeDate: "screener-range-date-filter",
            radio: "screener-radio-filter",
            checkbox: "screener-checkbox-filter",
            optionsExpiration: "screener-options-expiration-filter",
            symbol: "screener-symbol-filter",
            rangeExpiration: "screener-range-expiration-filter",
            static: "screener-static-filter"
        }
    },
    hb46: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a, i) {
                    var r = null;
                    i.bcScrollTo && (r = document.querySelector("#" + i.bcScrollTo)), a.on("click", function() {
                        e(r, "scroll", {
                            duration: 300,
                            offset: -110
                        })
                    })
                },
                $attrs: {
                    bcScrollTo: "@"
                }
            }
        }
        i.$inject = ["Velocity"], e.exports = i
    },
    hdyp: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            (e.addressData = angular.copy(t), e.countriesList = o, e.statesList = [], e.addressData.state) && (n.find(e.countriesList, {
                code: e.addressData.state
            }) ? (e.addressData.country = e.addressData.state, e.addressData.state = "") : e.countriesList.every(function(t) {
                if (t.states && n.find(t.states, {
                        code: e.addressData.state
                    })) return e.addressData.country = t.code, e.statesList = t.states, !1;
                return !0
            }));
            e.addressData.country || (e.addressData.country = "USA", e.statesList = n.result(n.find(e.countriesList, {
                code: "USA"
            }), "states")), e.onCountryChange = function() {
                var t;
                e.addressData.state = "", (t = n.find(e.countriesList, {
                    code: e.addressData.country
                })).states ? e.statesList = t.states : e.statesList = []
            }, e.saveModalData = function(t) {
                t.$setSubmitted(), t.$valid && r.updateAddressInfo(e.addressData, a).then(function(t) {
                    i.close({
                        response: t,
                        data: e.addressData
                    })
                }, function(e) {
                    console.log("-> Could not save address:", e)
                })
            }, e.closeModal = function() {
                i.close()
            }
        }
        i.$inject = ["$scope", "addressData", "cardId", "$modalInstance", "barchartPremierService", "countriesList", "_"], e.exports = i
    },
    he3J: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=$ctrl.close();></i> </div> <div class=modal-inner-wrapper> <data-forgot-component data-ref="[[ ::$ctrl.ref ]]" data-close=$ctrl.close() data-user=$ctrl.user></data-forgot-component> </div> </div> </div> '
    },
    hgiS: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                restrict: "A",
                link: function(r, o, n) {
                    var s = e.$on("onGetCurrentWatchlistId", function(e, r) {
                        var n = a.find(t.getUserData().watchlists, {
                            id: parseInt(r)
                        });
                        !i.search().viewName && n && n.view_id && "default" !== n.view_id && o.val(n.view_id).triggerHandler("change"), s()
                    })
                }
            }
        }
        i.$inject = ["$rootScope", "authService", "_", "$location"], e.exports = i
    },
    hiyD: function(e, t) {
        e.exports = '<div class="modal-content-wrapper change-password-form deactivate-account account message"> <div class="inner-form bc-form"> <h4 data-ng-show="type===\'deactivate\'">Your account has been deactivated.</h4> <h4 data-ng-show="type===\'delete\'">Your account has been deleted.</h4> <p>We\'re sorry to see you go.</p> <p data-ng-show="type===\'deactivate\'" class=remember>Remember, you can reactivate your account at any time by logging in.</p> <div class=form-buttons> <a data-ng-click=logoutUser() class="bc-button light-blue ok">Ok</a> </div> </div> </div>'
    },
    hk5j: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i, r) {
                    e.isLoggedIn() && e.getUserData().is_premier || (i.bind("click", function(e) {
                        e.preventDefault(), t.showPremier(r.refCode)
                    }), i.bind("change", function(e, a) {
                        i.attr("value", a), t.showPremier(r.refCode)
                    }))
                }
            }
        }
        i.$inject = ["authService", "bcModalLoginSrv"], e.exports = i
    },
    hmGX: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                getYearlyHighLowPrices: function(t) {
                    var a = {
                        symbol: t.toUpperCase(),
                        fields: "symbol,lowPrice1y,highPrice1y",
                        raw: 1
                    };
                    return e.query(a, "/quotes/get")
                }
            }
        }
        i.$inject = ["apiFactory"], e.exports = i
    },
    hmd3: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n = {
                    fields: ["symbol", "symbolCode"],
                    meta: "field.shortName,field.type",
                    page: 1,
                    orderBy: "symbol",
                    orderDir: "asc"
                },
                s = "/quotes/get";
            return {
                request: function(o, l) {
                    l = l || {};
                    var c = r.merge({}, n, l, function(e, t) {
                        if (r.isArray(e)) return e.concat(t)
                    });
                    c.fields = c.fields.join(",");
                    var d = t.buildUrl(i.API_URL + s, c);
                    return d += "&" + o, e.call(d, a.GET).then(function(e) {
                        return e
                    }, function(e) {
                        throw e
                    })
                },
                save: function(t) {
                    if (!(t instanceof o)) throw "screener must be instance of ScreenerModel";
                    return e.call(i.API_URL + "/screeners", a.POST, t).then(function(e) {
                        return e
                    }, function(e) {
                        throw e
                    })
                },
                update: function(t, r) {
                    return e.call(i.API_URL + "/screeners/" + t, a.PUT, r).then(function(e) {
                        return e
                    }, function(e) {
                        throw e
                    })
                },
                order: function(t) {
                    return e.call(i.API_URL + "/screeners/order", a.POST, {
                        ids: t
                    }).then(function(e) {
                        return e
                    }, function(e) {
                        throw e
                    })
                },
                remove: function(t) {
                    return e.call(i.API_URL + "/screeners/" + t, a.DELETE).then(function(e) {
                        return e
                    }, function(e) {
                        throw e
                    })
                },
                getApiConfig: function(e, t) {
                    t = t || {};
                    var a = r.merge({}, n, t, function(e, t) {
                        if (r.isArray(e)) return e.concat(t)
                    });
                    a.fields = a.fields.join(",");
                    var i = {
                        method: "quotes",
                        meta: a.meta,
                        orderBy: a.orderBy,
                        orderDir: a.orderDir,
                        fields: a.fields,
                        page: a.page,
                        customGetParameters: e
                    };
                    return angular.copy(i)
                }
            }
        }
        i.$inject = ["dataProvider", "utils", "httpVerbs", "apiConfig", "_", "ScreenerModel"], e.exports = i
    },
    hpai: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = !1;
            return {
                restrict: "E",
                replace: !0,
                transclude: !0,
                scope: {
                    yScroll: "=",
                    minDateLoaded: "=",
                    showArrows: "@"
                },
                template: a("XVxa"),
                link: function(e, a, o) {
                    e.disabledBackButton = !1, e.scrollWidgetsForward = function() {
                        e.disabledBackButton = !1;
                        var t = -s.maxScrollX + s.x;
                        t > 800 && t < 1e3 && i.$broadcast("load-dates", {
                            scroll: "forward"
                        }), s.x > s.maxScrollX ? -s.maxScrollX + s.x < 300 ? s.scrollTo(s.maxScrollX, 0, 0) : s.scrollBy(-170, 0, 0) : (r = !0, i.$broadcast("load-dates", {
                            scroll: "forward"
                        }))
                    }, e.showArrows = void 0 === o.showArrows || JSON.parse(o.showArrows), e.scrollWidgetsBack = function() {
                        s.x < 0 ? -s.x < 300 ? (e.minDateLoaded && (e.disabledBackButton = !0), s.scrollTo(0, 0, 0)) : s.scrollBy(170, 0, 0) : i.$broadcast("load-dates", {
                            scroll: "back"
                        })
                    }, e.yScroll = void 0 === e.yScroll || e.yScroll, e.$watch("minDateLoaded", function(t) {
                        t && (e.disabledBackButton = !0)
                    }), e.$on("bc-scroll-refresh", function() {
                        t(function() {
                            s.refresh(), r && (s.scrollBy(-170, 0, 0), r = !1)
                        }, 200)
                    });
                    var n = a[0].querySelector(".bc-scroll-container"),
                        s = new IScroll(n, {
                            snap: !1,
                            mouseWheel: !1,
                            disableMouse: !0,
                            disablePointer: !0,
                            scrollX: !0,
                            eventPassthrough: !0,
                            scrollbars: "custom",
                            interactiveScrollbars: !0,
                            bounce: !1
                        });
                    t(function() {
                        s.refresh()
                    }, 200);
                    var l = e.$watch("refresh", function(e) {
                        !0 === e && t(function() {
                            s.refresh(), l()
                        }, 0)
                    })
                }
            }
        }
        i.$inject = ["$window", "$timeout", "$rootScope"], e.exports = i
    },
    hpht: function(e, t, a) {
        "use strict";

        function i() {
            return {
                require: "ngModel",
                link: function(e, t, a, i) {
                    i.$parsers.push(function(e) {
                        return parseInt(e, 10)
                    }), i.$formatters.push(function(e) {
                        return "" + e
                    })
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    hry1: function(e, t, a) {
        "use strict";
        var i = "bcEodScreenerEmails";
        angular.module(i, []).controller("bcEodScreenerEmailsCtrl", a("1k2J")).factory("bcEodScreenerEmailsApiFactory", a("rjiJ"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    htIh: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = this;
            t.miniTableCallbackFunction = function(t) {
                delete t.meta.field.shortName.symbolName, delete t.meta.field.shortName.symbolType, delete t.meta.field.shortName.symbolCode, t.data.forEach(function(t) {
                    t.symbolSector = e.getSector(t.symbolType)
                }), this.content = t
            }, t.miniTable = {
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: []
                    },
                    colorize: ["percentChangeYtd"]
                },
                callback: t.miniTableCallbackFunction
            }, t.highsMiniTable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["highPrice", "percentChangeYtd"]
                    },
                    colorize: t.miniTable.options.colorize
                },
                callback: t.miniTable.callback
            }, t.lowsMiniTable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["lowPrice", "percentChangeYtd"]
                    },
                    colorize: t.miniTable.options.colorize
                },
                callback: t.miniTable.callback
            }
        }
        i.$inject = ["quotesService"], e.exports = i
    },
    i4J0: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            this.savePreference = function(i, r) {
                return e.call(t.API_URL + "/preferences", a.PUT, {
                    name: i,
                    value: r
                })
            }
        }
        i.$inject = ["dataProvider", "apiConfig", "httpVerbs"], e.exports = i
    },
    i8NO: function(e, t, a) {
        "use strict";

        function i(e, t) {
            var a, i = "interactive-chart",
                r = "Interactive Chart",
                o = this;
            this.setChartLink = function(e) {
                e.charts_style && (i = e.charts_style + "-chart", r = t.capitalize(e.charts_style) + " Chart")
            }, this.getChartLink = function(e) {
                return e && (i = e + "-chart", n()), i
            }, this.getChartName = function() {
                return r
            };
            var n = function() {
                e.isLoggedIn() && (a = e.getUserData(), o.setChartLink(a.preferences))
            };
            n()
        }
        i.$inject = ["authService", "_"], e.exports = i
    },
    iAS8: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    settings: "="
                },
                link: function(a) {
                    a.dataTableContent = null, a.dataLoading = !1;
                    var r = "optionType,lastPrice,volume,openInterest,premium,strikePrice,longSymbol,symbolName,symbolType",
                        o = "optionType,dailyLastPrice,volume,openInterest,dailyPremium,strikePrice,longSymbol,symbolName,symbolType";
                    a.$on("onFuturesOptionsIntervalChanged", function(e, t) {
                        var i = angular.copy(a.settings.settings.api);
                        switch (t.data) {
                            case "intraday":
                                i.fields = r;
                                break;
                            case "daily":
                                i.fields = o
                        }
                        a.dataTableContent = {}, s(i)
                    });
                    var n = a.$on("onFuturesOptionsViewsChanged", function(e, t) {
                        "split" === t.data && null === a.dataTableContent && (s(a.settings.settings.api), n())
                    });

                    function s(i) {
                        a.dataLoading = !0, e.getSplitData(i).then(function(e) {
                            a.dataTableContent = t.processData(e, "strikePrice"), a.dataLoading = !1
                        })
                    }
                    var l = i.filterName("futuresOptionsTime");
                    if (l) switch (l) {
                        case "intraday":
                            a.settings.settings.api.fields = r;
                            break;
                        case "daily":
                            a.settings.settings.api.fields = o
                    }
                    "split" === i.filterName("futuresOptionsView") && s(a.settings.settings.api)
                },
                template: a("nF2H")
            }
        }
        i.$inject = ["futuresOptionsQuotesApiFactory", "barchartDatatableGroupedData", "barchartDatatableFilterUrl"], e.exports = i
    },
    iEqH: function(e, t, a) {
        "use strict";
        var i = "RelatedEtfs";
        angular.module(i, []).constant("RelatedEtfsApiConfig", a("w5Ho")).controller(i + ".RelatedEtfsCtrl", a("3h3U")).factory("RelatedEtfsApiFactory", a("9lqw"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "iI+U": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n = "/quotes/get",
                s = {
                    fields: "symbol,exchange,symbolName,symbolType,baseCode,symbolCode,previousPrice,previousHighPrice,previousLowPrice,weeklyPreviousPrice,weeklyPreviousHighPrice,weeklyPreviousLowPrice,monthlyPreviousPrice,monthlyPreviousHighPrice,monthlyPreviousLowPrice,chartTime.format(Y-m-d\\TH:i:s),shortSymbol,hasBats,hasJerq",
                    raw: 1
                };

            function l(e) {
                return {
                    instrument: {
                        exchange: e.exchange,
                        name: e.symbolName,
                        unitCode: e.baseCode,
                        symbolType: e.symbolType
                    },
                    quote: {
                        previousClose: e.raw.previousPrice,
                        previousHigh: e.raw.previousHighPrice,
                        previousLow: e.raw.previousLowPrice,
                        weeklyPreviousClose: e.raw.weeklyPreviousPrice,
                        weeklyPreviousHigh: e.raw.weeklyPreviousHighPrice,
                        weeklyPreviousLow: e.raw.weeklyPreviousLowPrice,
                        monthlyPreviousClose: e.raw.monthlyPreviousPrice,
                        monthlyPreviousHigh: e.raw.monthlyPreviousHighPrice,
                        monthlyPreviousLow: e.raw.monthlyPreviousLowPrice,
                        tradeTime: e.chartTime
                    }
                }
            }
            return {
                updateInlineDataForSymbol: function(c, d) {
                    var u = e.defer(),
                        p = angular.copy(s);
                    return p.symbols = c, (d = d || {}).extraFields && (p.fields = p.fields + "," + d.extraFields), t.call(i.buildUrl(a.API_URL + n, p), r.GET).then(function(e) {
                        var t = {};
                        o.forEach(e.data, function(e) {
                            if (t[e.symbol] = l(e), e.raw.hasBats) {
                                var a = angular.copy(e);
                                a.exchange = "BATS", t[a.symbol + ".BZ"] = l(a)
                            }
                        }), window.document.getElementById("barchart-www-inline-data").innerHTML = JSON.stringify(t), u.resolve(e)
                    }, function(e) {
                        u.reject(e)
                    }), u.promise
                },
                addInlineDataForSymbols: function(c) {
                    var d = e.defer(),
                        u = angular.copy(s);
                    return u.symbols = Array.isArray(c) ? c.join() : c, t.call(i.buildUrl(a.API_URL + n, u), r.GET).then(function(e) {
                        var t = JSON.parse(window.document.getElementById("barchart-www-inline-data").innerHTML);
                        t = Array.isArray(t) && !t.length ? {} : t, o.forEach(e.data, function(e) {
                            if (t[e.symbol] = l(e), e.raw.hasBats) {
                                var a = angular.copy(e);
                                a.exchange = "BATS", t[a.symbol + ".BZ"] = l(a)
                            }
                        }), window.document.getElementById("barchart-www-inline-data").innerHTML = JSON.stringify(t), d.resolve(e)
                    }), d.promise
                },
                getInlineDataForSymbol: function(e) {
                    var t = JSON.parse(window.document.getElementById("barchart-www-inline-data").innerHTML);
                    return t.hasOwnProperty(e) ? t[e] : null
                }
            }
        }
        i.$inject = ["$q", "dataProvider", "apiConfig", "utils", "httpVerbs", "_"], e.exports = i
    },
    iUMC: function(e, t) {
        e.exports = '<div class="technical-chart-comparison-settings chart-form-section border-bottom"> <div class=error-block data-ng-show=error.symbols> <span class=error-msg data-ng-bind=error.symbols></span> </div> <span class="show-for-large-up compare-symbol-text" data-ng-show=!fullScreen>Compare Symbols:</span> <div class=symbols-input-wrapper> <div class="row collapse"> <div class="first-symbol-block symbol-block columns small-12" data-ng-class="{\'medium-4\': !fullScreen}"> <div class=input-checkbox> <input id=show_first_symbol type=checkbox name=showFirstSymbolPrice data-ng-model=formData[fields.SHOW_FIRST_SYMBOL_PRICE]> <label for=show_first_symbol> <span class=bc-glyph-check></span> Left Price Scale </label> </div> <div class="input-first-symbol-wrapper symbol-wrapper"> <input name=firstSymbol data-ng-class="{\'error-input\': error.overlay0}" data-ng-model=formData[fields.COMPARE_FIRST_SYMBOL_VALUE] placeholder="Symbol 1"/> </div> </div> <div class="second-symbol-block symbol-block columns small-12" data-ng-class="{\'medium-4\': !fullScreen}"> <div class=input-checkbox> <input id=show_second_symbol type=checkbox name=showSecondSymbolPrice data-ng-model=formData[fields.SHOW_SECOND_SYMBOL_PRICE]> <label for=show_second_symbol> <span class=bc-glyph-check></span> Left Price Scale </label> </div> <div class="input-second-symbol-wrapper symbol-wrapper"> <input name=secondSymbol data-ng-class="{\'error-input\': error.overlay1}" data-ng-model=formData[fields.COMPARE_SECOND_SYMBOL_VALUE] placeholder="Symbol 2"/> </div> </div> <div class="third-symbol-block symbol-block columns small-12" data-ng-class="{\'medium-4\': !fullScreen}"> <div class=input-checkbox> <input id=show_third_symbol name=showThirdSymbolPrice data-ng-model=formData[fields.SHOW_THIRD_SYMBOL_PRICE] type=checkbox> <label for=show_third_symbol> <span class=bc-glyph-check></span> Left Price Scale </label> </div> <div class="input-third-symbol-wrapper symbol-wrapper"> <input name=thirdSymbol data-ng-class="{\'error-input\': error.overlay2}" data-ng-model=formData[fields.COMPARE_THIRD_SYMBOL_VALUE] placeholder="Symbol 3"/> </div> </div> </div> </div> </div>'
    },
    iYEH: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                link: function(a) {
                    a.content = {}, a.invalid = !1, a.changeSymbol = function() {
                        var r = angular.copy(t.defaultConfig);
                        r.symbol = a.newSymbol, i.getSymbolData(r).then(function(t) {
                            t.data && t.data[0] ? (t.data[0].newSymbol = !0, e.$broadcast("dashboardCurrentSymbolChanged", t.data[0])) : a.invalid = !0
                        }, function() {
                            a.invalid = !0
                        })
                    }, a.clearError = function() {
                        a.invalid = !1
                    }, a.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        t && !t.newSymbol && (a.newSymbol = "")
                    }), a.$on("chartCurrentSymbolChanged", function(e, t) {
                        a.newSymbol = t, a.changeSymbol()
                    })
                },
                template: a("knAm")
            }
        }
        i.$inject = ["$rootScope", "controlWidgetConfig", "dashboardApiFactory"], e.exports = i
    },
    iZZI: function(e, t, a) {
        "use strict";
        e.exports = [{
            value: "{ZB*1} - {ZN*1}",
            label: "NOB Spread"
        }, {
            value: "-3 * {CL*1} + 2 * 42 * {RB*1} + 42 * {HO*1}",
            label: "Crack 321 Spread"
        }, {
            value: "-2 * {CL*1} + 2 * 42 * {RB*1} + 42 * {HO*1}",
            label: "Crack 221 Spread"
        }, {
            value: "6* {LE*1} - 3 * {GF*1} - 2 * {ZC*1}",
            label: "Cattle Crush"
        }, {
            value: "{ZC*1} - {ZC*2}",
            label: "Corn Nearby 1-2 Spread"
        }, {
            value: "{ZC*1} - {ZC*3}",
            label: "Corn Nearby 1-3 Spread"
        }, {
            value: "{ZC*2} - {ZC*3}",
            label: "Corn Nearby 2-3 Spread"
        }, {
            value: "{ZC*1} - 2 * {ZC*2} + {ZC*3}",
            label: "Corn Butterfly Spread"
        }, {
            value: "{ZS*1} - {ZS*2}",
            label: "Soybean Nearby 1-2 Spread"
        }, {
            value: "{ZS*1} - {ZS*3}",
            label: "Soybean Nearby 1-3 Spread"
        }, {
            value: "{ZS*2} - {ZS*3}",
            label: "Soybean Nearby 2-3 Spread"
        }, {
            value: "{ZS*1} - 2 * {ZS*2} + {ZS*3}",
            label: "Soybean Butterfly Spread"
        }, {
            value: "- {ZS*1} + 2.2 * {ZM*1} + 11 * {ZL*1}",
            label: "Soybean Crush Spread"
        }, {
            value: "{ZW*1} - {ZW*2}",
            label: "Wheat Nearby 1-2 Spread"
        }, {
            value: "{ZW*1} - {ZW*3}",
            label: "Wheat Nearby 1-3 Spread"
        }, {
            value: "{ZW*2} - {ZW*3}",
            label: "Wheat Nearby 2-3 Spread"
        }, {
            value: "{ZW*1} - 2 * {ZW*2} + {ZW*3}",
            label: "Wheat Butterfly Spread"
        }]
    },
    j2qC: function(e, t) {
        e.exports = "<div class=bc-screener__common-filter-range> <span>Range:</span> <div class=bc-screener__input-group-wrapper> <div class=input-group> <span class=input-group-prefix data-ng-if=inputPrefix>[[ inputPrefix ]]</span> <input type=text class=bc-screener__common-filter-range-field data-ng-model=formData[0] data-ng-change=notifyAboutFieldChange() /> <span class=input-group-suffix data-ng-if=inputSuffix>[[ inputSuffix ]]</span> </div> </div> <span class=bc-screener__common-filter-range-separator>to</span> <div class=bc-screener__input-group-wrapper> <div class=input-group> <span class=input-group-prefix data-ng-if=inputPrefix>[[ inputPrefix ]]</span> <input type=text class=bc-screener__common-filter-range-field data-ng-model=formData[1] data-ng-change=notifyAboutFieldChange() /> <span class=input-group-suffix data-ng-if=inputSuffix>[[ inputSuffix ]]</span> </div> </div> </div>"
    },
    jAUT: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <div class="bc-modal-login-content clearfix"> <div class=modal-header> <i class="bc-glyph-times form-close right" data-ng-click=modalDismiss()></i> </div> <div class=annotation-modal__title> [[ ::title ]] <div class=horizontal-line-price-input data-ng-if=annotationPoints> <div class=field-wrapper> <label for=horizontal_line_one_price>Price <span data-ng-if=annotationPoints[1]>1</span>:</label> <input type=text id=horizontal_line_one_price data-ng-model=annotationPoints[0].price /> </div> <div data-ng-if=annotationPoints[1] class=field-wrapper> <label for=horizontal_line_two_price>Price 2:</label> <input type=text id=horizontal_line_two_price data-ng-model=annotationPoints[1].price /> </div> </div> <div class=horizontal-line-price-input data-ng-if="annotationPoints && annotationPoints[2]"> <div class=field-wrapper> <label for=horizontal_line_tree_price>Price 3:</label> <input type=text id=horizontal_line_tree_price data-ng-model=annotationPoints[2].price /> </div> </div> </div> <div class=annotation-modal__form-row data-ng-if="currentAnnotation.options.indexOf(\'line\') > -1"> <span class=annotation-modal__color-selector-label>Border</span> <bc-color-picker data-color-model=formData.line.color></bc-color-picker> <bc-line-width-selector data-line-width-model=formData.line.width></bc-line-width-selector> </div> <div class=annotation-modal__form-row data-ng-if="currentAnnotation.options.indexOf(\'line\') > -1"> <div class="bc-dropdown styled"> <select data-ng-options="line.value as line.label for line in lineTypes" data-ng-model=formData.line.dashStyle></select> </div> </div> <div class=annotation-modal__form-row data-ng-if="currentAnnotation.options.indexOf(\'fill\') > -1"> <span class=annotation-modal__fill-form-label>Fill</span> <bc-color-picker data-color-model=formData.fill.color></bc-color-picker> </div> <div class=annotation-modal__form-row data-ng-if="currentAnnotation.options.indexOf(\'fill\') > -1"> <div class="bc-dropdown styled"> <select data-ng-options="fill.value as fill.label for fill in fillTransparencies" data-ng-model=formData.fill.opacity></select> </div> <div data-ng-if="currentAnnotation.id === \'Text\'"> Press F2 to edit text. </div> </div> <div class=annotation-modal__form-row data-ng-if="currentAnnotation.options.indexOf(\'showPrices\') > -1 || currentAnnotation.options.indexOf(\'showTrendline\') > -1 || currentAnnotation.options.indexOf(\'extendPoint1\') > -1"> <div class="row collapse"> <div class="column small-6" data-ng-if="currentAnnotation.options.indexOf(\'showPrices\') > -1"> <bc-checkbox data-cb-model=formData.showPrices data-cb-label="\'Show Prices\'" data-cb-click=showPricesChanged() data-cb-id="\'tools-modal-settings-cb1\'"></bc-checkbox> </div> <div class="column small-6" data-ng-if="currentAnnotation.options.indexOf(\'showTrendline\') > -1"> <bc-checkbox data-cb-model=formData.showTrendline data-cb-label="\'Show Trendline\'" data-cb-id="\'tools-modal-settings-cb-show-trendline\'"></bc-checkbox> </div> <div class="column small-6" data-ng-if="currentAnnotation.options.indexOf(\'extendPoint1\') > -1"> <bc-checkbox data-cb-model=formData.extendPoint1 data-cb-label="\'Extend Point 1\'" data-cb-id="\'tools-modal-settings-cb3\'"></bc-checkbox> </div> </div> </div> <div class=annotation-modal__form-row data-ng-if="currentAnnotation.options.indexOf(\'showPercentDiff\') > -1 || currentAnnotation.options.indexOf(\'extendPoint2\') > -1"> <div class="row collapse"> <div class="column small-6 show-percent-diff-checkbox" data-ng-if="currentAnnotation.options.indexOf(\'showPercentDiff\') > -1"> <bc-checkbox data-cb-model=formData.showPercentDiff data-cb-label="\'with Percent\'" data-cb-disabled="formData.showPrices === false" data-cb-click=showPercentDiffChanged() data-cb-id="\'tools-modal-settings-show-percent-diff\'"></bc-checkbox> </div> <div class="column small-6" data-ng-if="currentAnnotation.options.indexOf(\'extendPoint2\') > -1"> <bc-checkbox data-cb-model=formData.extendPoint2 data-cb-label="\'Extend Point 2\'" data-cb-id="\'tools-modal-settings-cb4\'"></bc-checkbox> </div> </div> </div> <div class=annotation-modal__form-row data-ng-if="currentAnnotation.options.indexOf(\'showBarCount\') > -1 || currentAnnotation.options.indexOf(\'marker\') > -1"> <div class="row collapse"> <div class="column small-6" data-ng-if="currentAnnotation.options.indexOf(\'showBarCount\') > -1"> <bc-checkbox data-cb-model=formData.showBarCount data-cb-label="\'Show Bar Count\'" data-cb-id="\'tools-modal-settings-cb2\'"></bc-checkbox> </div> <div class="column small-6" data-ng-if="currentAnnotation.options.indexOf(\'marker\') > -1"> <bc-checkbox data-cb-model=formData.marker.lineMarkerStart data-cb-label="\'Show Arrow 1\'" data-cb-id="\'tools-modal-settings-line-marker-start\'"></bc-checkbox> </div> </div> </div> <div class=annotation-modal__form-row data-ng-if="currentAnnotation.options.indexOf(\'marker\') > -1"> <div class="row collapse"> <div class="column small-6"> </div> <div class="column small-6"> <bc-checkbox data-cb-model=formData.marker.lineMarkerEnd data-cb-label="\'Show Arrow 2\'" data-cb-id="\'tools-modal-settings-line-marker-end\'"></bc-checkbox> </div> </div> </div> <div class=annotation-modal__form-row data-ng-if="currentAnnotation.options.indexOf(\'showTimestamps\') > -1 || currentAnnotation.options.indexOf(\'showPrices\') > -1"> <div class="row collapse"> <div class="column small-6" data-ng-if="currentAnnotation.options.indexOf(\'showTimestamps\') > -1"> <bc-checkbox data-cb-model=formData.showTimestamps data-cb-label="\'Show Time\'" data-cb-id="\'tools-modal-settings-cb5\'"></bc-checkbox> </div> </div> </div> <div class="annotation-modal__form-row annotation-modal__factors" data-ng-if="currentAnnotation.options.indexOf(\'factors\') > -1"> <div class=annotation-modal__factors-label>Levels (%):</div> <div class="annotation-modal__factors-controls bc-form"> <div class=annotation-modal__factor-item data-ng-repeat="factor in formData.factors track by $index"> <div class=annotation-modal__factor-checkbox> <bc-checkbox data-cb-model=factor.shown data-cb-id="\'annotation-modal__factors-cb-\' + $index"></bc-checkbox> </div> <div class=annotation-modal__factor-value> <input type=number step=0.1 data-ng-model=factor.value data-ng-disabled=!factor.shown> </div> </div> </div> </div> <div class=annotation-modal__form-row> <button class="bc-button just-grey-border" data-ng-click=cloneTool()>Clone Tool</button> <button class="bc-button just-grey-border" data-ng-click=resetConfigToDefault()>Reset</button> </div> <div class="annotation-modal__form-row modal-settings-row text-center"> <button class="bc-button red" data-ng-click=removeConfirm()>Delete</button> <button class="bc-button light-blue" data-ng-click=updateConfirm()>Apply</button> </div> </div> </div>'
    },
    jBI9: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            e.portfolioInitData = null, e.dataLoading = !0, e.list = [], e.initList = function(i) {
                e.list = JSON.parse(i), t.getAllPortfoliosTotals(a.map(e.list, "id").join(","), !0).then(function(t) {
                    e.list.forEach(function(e) {
                        t.data[e.id] && (e.total = t.data[e.id].grand_totals)
                    })
                })
            }, e.labels = i, e.getLink = function(e) {
                return r.route(o.config.routes["publicPortfolios.summary"], {
                    alias: e
                })
            }, e.setColor = function(e) {
                return r.setColor(e)
            }
        }
        i.$inject = ["$scope", "portfolioApiFactory", "_", "portfolioSettings", "utils", "$window"], e.exports = i
    },
    jDcD: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    formData: "="
                },
                controller: ["$scope", function(n) {
                    var s;
                    n.technicalStudy = "", n.selectedStudies = [], n.studies = o.studies, n.fields = i, n.formData[i.INDICATORS_OBJECT] = n.formData[i.INDICATORS_OBJECT] || [], n.indicatorHelpLink = config.routes["education.technicalIndicators"], n.studySizes = a("PvqW"), n.showStudyTitle = function(e) {
                        return r.convertStudyToString(e)
                    }, n.addStudyItem = function() {
                        if ("" !== n.technicalStudy && null !== n.technicalStudy) {
                            null === n.formData[i.INDICATORS_OBJECT] && (n.formData[i.INDICATORS_OBJECT] = []);
                            var t = e.find(n.studies, "code", n.technicalStudy);
                            n.formData[i.INDICATORS_OBJECT].push(t)
                        }
                        n.technicalStudy = ""
                    }, n.removeStudy = function(e, t) {
                        t.stopPropagation(), n.formData[i.INDICATORS_OBJECT].splice(e, 1)
                    }, n.changeStudyItem = null, n.changeStudy = function(e, a, i) {
                        n.changeStudyItem = angular.copy(e), n.changeStudyItem.parameters.length > 0 && n.changeStudyItem.parameters.forEach(function(e) {
                            e.default = "Label" === e.name ? e.default : +e.default, e.inputType = "Label" === e.name ? "text" : "number"
                        }), n.changeStudyIndex = i, a.stopPropagation(), (s = t.open({
                            templateUrl: "bc-technical-chart-study-item.html",
                            scope: n,
                            windowClass: "technical-chart-study-item"
                        })).result.then(function() {}, function() {
                            n.changeStudyItem = null, n.changeStudyIndex = null
                        })
                    }, n.modalSettingsClose = function() {
                        s.dismiss()
                    }, n.saveStudy = function(e) {
                        var t;
                        (t = n.changeStudyItem).parameters.length > 0 && t.parameters.forEach(function(e) {
                            "Label" !== e.name && "" === e.default && (e.default = 0)
                        }), n.formData[i.INDICATORS_OBJECT][n.changeStudyIndex] = angular.copy(n.changeStudyItem), s.close()
                    }
                }],
                template: a("dcCy")
            }
        }
        i.$inject = ["_", "$modal", "technicalChartFields", "technicalChartStudiesConverter", "technicalChartStudies", "utils", "$location"], e.exports = i
    },
    jHuI: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    type: "@",
                    filters: "="
                },
                controller: ["$scope", function(a) {
                    var i = this;
                    i.savedScreener = null, i.userIsAuthenticated = e.isLoggedIn(), a.$on(t.ON_SCREENER_CLEAR, function() {
                        i.savedScreener = null
                    }), a.$on(t.ON_SCREENER_APPLY_SAVED, function(e, t) {
                        i.savedScreener = t.screener
                    }), a.$on(t.ON_SCREENER_APPLY_EMPTY_TEMPLATE, function() {
                        i.savedScreener = null
                    })
                }],
                controllerAs: "$ctrl",
                template: a("lm2t")
            }
        }
        i.$inject = ["authService", "events"], e.exports = i
    },
    jJYS: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login technical-chart-clear-settings-content study-modal"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=resetDialogDismiss()></i> </div> </div> <div class=settings> <p class=clear-text>Are you sure you want to clear all settings?</p> <div class=button-block> <button class="bc-button save grey" data-ng-click=resetDialogDismiss()>Cancel</button> <button class="bc-button ok light-blue" data-ng-click=resetDialogConfirm()>Clear</button> </div> </div> </div>'
    },
    jJzS: function(e, t) {
        e.exports = "<div class=bc-quote-overview-chart> <highchart data-config=chartController.chartConfig></highchart> </div>"
    },
    jLrc: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                getSplitData: function(r) {
                    var o = r.method || "/options/chain";
                    return delete r.method, e.call(a.buildUrl(i.API_URL + o, r), t.GET).then(function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig"], e.exports = i
    },
    jQ1H: function(e, t) {
        e.exports = '<div class="bc-analyst-rating-pie chart-wrapper"> <highchart data-config=config></highchart> </div>'
    },
    jRtP: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i, r) {
                    angular.element(document.querySelectorAll(".mega_menu_internal")).on("touchstart", function(e) {
                        e.stopPropagation()
                    }), i.on("click", function(a) {
                        var r = i[0].querySelector(".mega_menu_internal"),
                            o = r.parentNode.parentNode.querySelectorAll(".hover-menu");
                        if (o.length)
                            for (var n = 0; n < o.length; n++) {
                                var s = o[n].querySelector(".mega_menu_internal");
                                e(s, "fadeOut"), e(document.querySelector(".bc-overlay"), "fadeOut", {
                                    queue: !1
                                }), angular.element(o[n]).removeClass("hover-menu")
                            }
                        if (r) {
                            var l = window.getComputedStyle(r);
                            "none" === l.display ? (angular.element(a.target.parentElement).parent().addClass("hover-menu"), e(document.querySelector(".bc-overlay"), "stop"), e(document.querySelector(".bc-overlay"), "fadeIn", {
                                queue: !1
                            }), e(r, "fadeIn", {
                                queue: !1
                            }), setTimeout(function() {
                                t.closeElementByDocumentClick.fn("menu_horizontal", function() {
                                    e(r, "fadeOut", {
                                        queue: !1
                                    }), e(document.querySelector(".bc-overlay"), "fadeOut", {
                                        queue: !1
                                    }), i.removeClass("hover-menu")
                                })
                            }, 10), a.preventDefault()) : "block" === l.display && angular.element(a.target).hasClass("js-main-link") && (r.querySelector("a").click(), a.preventDefault())
                        }
                    })
                }
            }
        }
        i.$inject = ["Velocity", "eventHelpers"], e.exports = i
    },
    jSQs: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                scope: {},
                controller: ["$scope", function(a) {
                    a.symbol = null, a.showName = !e.isMobileOnly(), a.$on("setSymbolData", function(e, t) {
                        a.symbol = angular.copy(t)
                    }), t.$broadcast("getSymbolData"), i.hasData() && (a.symbol = angular.copy(i.getData())), a.setColor = function(t) {
                        return e.setColor(t)
                    }
                }],
                template: a("6vsw")
            }
        }
        i.$inject = ["utils", "$rootScope", "alertsSymbolDataFactory"], e.exports = i
    },
    jWO2: function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-alerts-settings__modal-form"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <h5 class=modal-title>Please verify your mobile number</h5> <div class=modal-content-form-wrapper-input> <form novalidate class=bc-form name=phoneForm data-ng-submit=verifyPhone(phoneForm)> <div class=bc-form__fieldset-vertical> <label for=phone-form__phone>Deliver text alerts to:</label> <div class=clear-button-wrapper> <input id=phone-form__phone type=text class="placeholder rounded" name=phone data-ng-model=phone.phone data-ng-pattern="/^[\\(\\)0-9- ]+$/" data-barchart-clear-input placeholder="Enter mobile number" data-ng-class="{\'error\' : (phoneForm.phone.$error.required && phoneForm.$submitted) || (invalidPhone && phoneForm.$submitted)}" required/> </div> </div> <div class="bc-form__fieldset-vertical bc-alerts-settings__field-activation-code clearfix" data-ng-if=showActivationFiled> <label for=phone-form__phone-code>Activation Code:</label> <div class=clear-button-wrapper> <input id=phone-form__phone-code type=text class=placeholder name=code data-ng-model=phone.code data-barchart-clear-input data-ng-class="{\'error\' : phoneForm.code.$dirty && phoneForm.code.$error.required && phoneForm.$submitted}" required/> </div> <input type=button data-ng-click=activateCode(phoneForm) class="bc-button save light-blue" value=Activate> </div> <div data-ng-if=showActivationFiled> <a data-ng-click=resendCode()>Resend Code</a> </div> <div data-ng-if=!showActivationFiled> <p class=bc-form__text-block> An activation code will be sent to your phone when you click VERIFY. Please enter the code to complete verification. </p> <div class=bc-form__buttons-block> <input type=submit class="bc-button save light-blue" value=Verify> </div> </div> <div class=form-item-errors> <div data-ng-show="phoneForm.phone.$error.required && phoneForm.$submitted"> Phone is required </div> <div data-ng-show="invalidPhone && phoneForm.$submitted"> Phone number is invalid </div> <div data-ng-show="error === \'VALIDATION_FAILED_WRONG_CODE\'"> Wrong activation code </div> <div data-ng-show="error === \'VALIDATION_FAILED_TOO_MANY_ATTEMPTS\'"> Too many attempts </div> <div data-ng-show="error === \'VALIDATION_FAILED_UNKNOWN_PHONE\'"> Unknown phone </div> <div data-ng-show="phoneForm.code.$dirty && phoneForm.code.$error.required && phoneForm.$submitted"> Code is required </div> </div> </form> </div> </div>'
    },
    jaOF: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            t.modalVisible = !1, t.modalContent = {}, t.modalType = null, t.signalIndicators = {};
            var n = 0,
                s = angular.element(document.querySelector("#bc-main-content-wrapper")),
                l = !0;
            t.init = function(e) {
                t.signalIndicators = e
            }, t.showOverlayModal = function() {
                n = window.scrollY, t.modalVisible = !0, setTimeout(function() {
                    s.addClass("overlay-modal-open no-print")
                }, 300)
            }, t.hideOverlayModal = function() {
                s.removeClass("overlay-modal-open no-print"), window.scroll(0, n), window.players.length && (window.players.forEach(function(e) {
                    var t = document.getElementById(e.id_);
                    t && window.videojs(t).dispose()
                }), window.players = []), t.modalVisible = !1, t.modalType = null, t.$evalAsync(function() {
                    if (l) {
                        if (t.currentURL && "home" !== t.currentURL) {
                            var a = i.unescape(t.currentURL).replace("%3F", "?");
                            e.url(a)
                        } else e.url("");
                        r.initialTitle && (document.querySelector("title").text = r.initialTitle, r.initialTitle = !1)
                    }
                    l = !0, t.modalContent = {}, o.hasData = !0, r.$broadcast("mediaOverlayClosed")
                })
            }, t.$on("bc-modal-set-feed", function(e, t) {
                t.feedName && a.setCurrentFeed(t.feedName)
            }), t.$on("bc-modal-show-news-or-video", function(e, a) {
                a.id && (t.modalType = "bc-modal-show-news-or-video", t.$evalAsync(function() {
                    t.modalContent = {
                        newsOrVideo: a.id
                    }
                }), t.modalVisible || t.showOverlayModal())
            }), t.$on("bc-modal-show-flipchart", function(e, a) {
                if (a.symbols) {
                    var i = a.options || {};
                    t.$evalAsync(function() {
                        t.modalContent = {
                            flipcharts: a.symbols,
                            options: i,
                            defaultPlot: a.defaultPlot,
                            symbol: a.symbol || !1,
                            pagination: a.pagination || {}
                        }, l = !1
                    }), t.modalVisible || t.showOverlayModal()
                }
            }), t.$on("bc-modal-show-video", function(e, a) {
                (a.options || {}).linkMp4 = "https://s3.amazonaws.com/videos1.aws.barchart.com/barchart.com/options/Barchart.com%20Options%20Market%20Overview.mp4", t.$evalAsync(function() {
                    t.modalContent = {
                        video: !0,
                        title: a.title,
                        linkMp4: a.linkMp4
                    }, l = !1
                }), t.modalVisible || t.showOverlayModal()
            }), t.$on("bc-modal-show-cot-chart", function(e, a) {
                a.currentSymbol && (t.$evalAsync(function() {
                    t.modalContent = {
                        currentSymbol: a.currentSymbol,
                        symbols: a.symbols,
                        study: a.study
                    }
                }), t.modalVisible || t.showOverlayModal())
            }), t.$on("bc-modal-education", function(e, a) {
                a.item && (t.$evalAsync(function() {
                    t.modalContent = {
                        item: a.item,
                        type: a.type
                    }
                }), t.modalVisible || t.showOverlayModal())
            }), t.$on("bc-modal-classic-chart", function(e, a) {
                a.symbol && a.strategy && a.date && (t.$evalAsync(function() {
                    t.modalContent = {
                        classicChartParams: {
                            symbol: a.symbol,
                            strategy: a.strategy,
                            date: a.date,
                            interactiveChartStudy: t.signalIndicators[a.strategy] ? t.signalIndicators[a.strategy].chartSettings.interactiveStudy : ""
                        }
                    }
                }), t.modalVisible || t.showOverlayModal())
            }), t.$on("bc-modal-show-my-chart-flipchart", function(e, a) {
                t.$evalAsync(function() {
                    t.modalContent = {
                        myChartFlipchart: {
                            charts: a.charts,
                            currentChart: a.currentChart,
                            currentSymbol: a.currentSymbol,
                            chartType: a.chartType
                        }
                    }, l = !1
                }), t.modalVisible || t.showOverlayModal()
            })
        }
        i.$inject = ["$location", "$scope", "bcNewsFeedsSrv", "_", "$rootScope", "chartVisibility"], e.exports = i
    },
    jhLy: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {},
                link: function(a, i, r) {
                    i.on("change", function() {
                        var a = r.changeExchanges || "exchange",
                            o = i.val(),
                            n = e.appendQueryParam(e.getUrlInfo().origin + e.getUrlInfo().pathname, a, o);
                        t.location.href = n
                    })
                }
            }
        }
        i.$inject = ["utils", "$window"], e.exports = i
    },
    "jhP+": function(e, t) {
        e.exports = '<div class=bc-watchlist-edit__form-wrapper> <div class=bc-watchlist-edit__name-row> <form name=watchlistCreateEditForm class="bc-watchlist-edit__form bc-form" novalidate> <div class=row> <div class="small-12 medium-12 large-6 column"> <label class=bc-watchlist-edit__label-text for=bc-watchlist-edit__name-field-input>Name:</label> <div class=bc-watchlist-edit__name-field-wrapper> <div class=pencil-icon-wrapper> <input id=bc-watchlist-edit__name-field-input type=text name=watchlistName data-bc-autofocus data-bc-autofocus-priority=1 data-bc-autofocus-disabled="[[ ::disabledAutoFocus ]]" data-ng-model=watchlist.name data-ng-maxlength=50 data-unique-name=watchlistsNames placeholder="Enter a name..." data-ng-class="{\'error\': watchlistCreateEditForm.watchlistName.$error.required && saveAttempted}" required/> <i class=bc-glyph-pencil></i> </div> </div> <div class=watchlist-name-error> <span class=bc-watchlist-edit__input-error data-ng-if="watchlistCreateEditForm.watchlistName.$error.required && saveAttempted"> Please enter a watchlist name </span> <span class=bc-watchlist-edit__input-error data-ng-if=watchlistCreateEditForm.watchlistName.$error.maxlength> Watchlist name cannot be longer than 50 characters </span> <span class=bc-watchlist-edit__input-error data-ng-if="watchlistCreateEditForm.watchlistName.$error.uniqueName && saveAttempted"> A Watchlist already exists with that name. Please enter a new name. </span> </div> </div> <div class="small-12 medium-6 large-3 column bc-watchlist-defaultview"> <label class=bc-watchlist-edit__label-text for=bc-watchlist-edit__set-eod-view-data>Default Data:</label> <div class="bc-dropdown filter view-name bc-watchlist-edit__set-view"> <select data-ng-model=watchlist.default_timeframe id=bc-watchlist-edit__set-eod-view-data name=setDefaultData> <option selected=selected value=eod>End-of-Day</option> <option value=intraday>Intraday</option> </select> </div> </div> <div class="small-12 medium-6 large-3 column bc-watchlist-defaultview"> <label class=bc-watchlist-edit__label-text for=bc-watchlist-edit__set-view>Default View:</label> <div class="bc-dropdown filter view-name bc-watchlist-edit__set-view"> <select data-ng-model=defaultView data-show-custom-views-options id=bc-watchlist-edit__set-view name=setViewName> <option selected=selected value=default>Use Site Default View</option> <option value=main>Main View</option> <option value=technical>Technical</option> <option value=performance>Performance</option> <option value=tile>Mini-Chart View</option> </select> </div> </div> </div> <div class=row> <div class="small-12 medium-7 column watchlist_set_eod"> <div class=input-checkbox> <input id=bc-datatable-toolbar__eod-emails-subscription name=endOfDayEmailsSubscription type=checkbox data-ng-model=watchlist.email data-ng-true-value=1 data-ng-false-value=0 data-ng-change=updateSubscription(watchlist.email) /> <label class="bc-watchlist-edit__set-eod-view bold" for=bc-datatable-toolbar__eod-emails-subscription> <span class=bc-glyph-check></span> End-of-Day Email: </label> </div> <div class="bc-dropdown filter bc-watchlist-edit__eod-dd" data-ng-class="{\'disabled-transparent\': !watchlist.email}"> <select data-ng-model=watchlist.eod_view data-show-custom-views-options data-ng-disabled=!watchlist.email id=bc-watchlist-edit__set-eod-view name=eodViewName> <option selected=selected value=main>Main View</option> <option value=technical>Technical</option> <option value=performance>Performance</option> </select> </div> <div class="input-checkbox attach-csv"> <input id=watchlist-csv data-ng-change=attachCsv() name=csv data-ng-true-value=1 data-ng-disabled=!watchlist.email data-ng-false-value=0 type=checkbox data-ng-model=watchlist.csv_attachment> <label class="checkbox bold" for=watchlist-csv> <span class=bc-glyph-check></span> Attach .csv </label> </div> </div> <div class="small-12 medium-5 column text-right"> <div class="save-group-buttons bc-watchlist-edit-form-control-group"> <a data-ng-if=watchlist.id class="bc-button save red bc-watchlist-edit__delete-link" data-ng-click=deleteWatchlist()> Delete </a> <a data-ng-click=resetChanges() class="bc-button grey save ctxt">Cancel</a> <input type=submit class="bc-button light-blue save" data-ng-click=saveWatchlist() data-ng-disabled=!treeValidated value=Save /> </div> </div> </div> </form> </div> <div class=bc-watchlist-edit__add-symbol-row> <div class="small-12 bc-tools-page"> <form name=watchlistAddSymbolsBlock data-ng-submit=addSymbolsToTree() novalidate> <div class="bc-form__add-symbol-fieldset small-12 medium-6"> <input type=submit class="bc-button add light-blue bc-form__add-symbol-button" value=Add> <div class=bc-form__add-symbol-input-wrapper> <div class="clear-button-wrapper show-for-large-up"> <input type=text autocomplete=off autocorrect=off autocapitalize=off placeholder="Enter symbols separated by commas or spaces..." class=bc-form__add-symbol-input data-ng-model=userEnteredSymbols data-barchart-clear-input required/> </div> <div class="clear-button-wrapper hide-for-large-up"> <input type=text autocomplete=off autocorrect=off autocapitalize=off placeholder="Add a symbol..." class=bc-form__add-symbol-input data-ng-model=userEnteredSymbols data-barchart-clear-input required/> </div> </div> </div> </form> <div class=bc-watchlist-edit__validation> <div class=bc-watchlist-edit__input-error data-ng-if=invalidSymbolsAlreadyInList.length> The following symbols are already in list: <span data-ng-repeat="symbol in invalidSymbolsAlreadyInList track by $index">[[ symbol ]] </span> </div> <div class=bc-watchlist-edit__input-error data-ng-if=invalidSymbolsInRequest> <div data-ng-repeat="err in invalidSymbolsInRequest"> [[ err ]] </div> </div> <div class=bc-watchlist-edit__input-error data-ng-if=invalidSymbolsNotFound.length> The following symbols were not found: <span data-ng-repeat="symbol in invalidSymbolsNotFound track by $index">[[ symbol ]] </span> </div> <div class=bc-watchlist-edit__input-error data-ng-if=watchlistLastSymbol> Symbol deletion not allowed. A watchlist must have at least one symbol. </div> <div class=bc-watchlist-edit__input-error data-ng-if=watchlistLimitReached> [[ watchlistLimitReached ]] </div> </div> </div> </div> <div class=bc-watchlist-edit-block__add-notes-block> <div class=row> <div class="small-6 column"><span class=bold>Notes</span> (optional)</div> <div class="small-6 column text-right"><a data-ng-click="watchlist.notes = \'\'">Clear Notes</a></div> </div> <div class=row> <div class="small-12 column"> <textarea rows=3 data-ng-model=watchlist.notes></textarea> </div> </div> </div> <div class=edit-pg-table-header> <div class=row> <div class="column small-6 text-left"> <div class="bc-dropdown filter"> <select data-ng-model=sortOrder data-ng-change=sortRows();> <option selected=selected value="">Sort List</option> <option value=symbol>Alphabetically by Symbol </option> <option value=symbolName>Alphabetically by Name</option> </select> </div> </div> <div class="column small-6 text-right"> <button class="bc-button white-with-border" data-ng-click=addBlankRow()>+Blank Row</button> </div> </div> </div> <div ui-tree class=bc-tools-edit__tool-symbols-row> <div class=bc-tools-edit__symbols-list-header> <div class=bc-tools-edit__symbols-list-header-symbol>Symbol</div> <div class=bc-tools-edit__symbols-list-header-name>Name</div> <div class=bc-tools-edit__symbols-list-header-order>Order</div> </div> <ul ui-tree-nodes class=bc-tools-edit__symbols-list data-ng-model=treeSymbols> <li ui-tree-node class="bc-tools-edit__symbols-list-symbol clearfix bc-form" data-ng-repeat="node in treeSymbols" data-ng-class-odd="\'odd\'"> <span class="left bc-glyph-minus-circle bc-tools-edit__symbol-delete visibility-animated" data-ng-click=removeSymbol($index)></span> <div class=bc-tools-edit__symbol-data> <div class="bc-tools-edit__symbol-data-symbol visibility-animated"> <input type=text data-ng-model=node.symbol data-ng-change=treeSymbolChanged(node) data-ng-blur=treeSymbolUpdated(node) data-ng-keypress="forceSymbolUpdateValidation($event, node)"> </div> <div ui-tree-handle class="right bc-glyph-bars bc-tools-edit__symbol-drag-icon"></div> <div class="right bc-glyph-arrow-up bc-tools-edit__symbol-up-icon" data-ng-click=moveSymbolTop($index)></div> <div class="bc-tools-edit__symbol-data-name visibility-animated" data-ng-class="{\'invisible\': pendingSymbolDelete === node}" data-ng-show="node.symbol !== \'~\'"> <span data-ng-show="!node.errorDuplicated && !node.errorInvalid">[[ node.symbolName ]]</span> <span class=text-red data-ng-show=node.errorDuplicated>This symbol is already in the Watchlist.</span> <span class=text-red data-ng-show=node.errorInvalid>This symbol is invalid or expired.</span> </div> </div> </li> </ul> <div class=bc-tools-edit__symbols-list-error data-ng-show="treeSymbols.length === 0 && saveAttempted"> Watchlist must have at least one symbol. </div> </div> <div class=bc-watchlist-edit__form-controls-bottom-row data-ng-show="treeSymbols.length > 10"> <a target=_self href="[[ cancelUrl ]]" class="bc-button grey save ctxt">Cancel</a> <input type=submit class="bc-button light-blue save" data-ng-click=saveWatchlist() data-ng-disabled=!treeValidated value=Save /> </div> </div>'
    },
    jhTF: function(e, t, a) {
        "use strict";
        e.exports = {
            main: {
                api: {
                    fields: "symbol,symbolName,lastPrice,priceChange,percentChange,highPrice,lowPrice,volume,tradeTime"
                },
                options: {
                    colorize: ["percentChange", "priceChange", "range", "gapUp", "gapDown", "gapUpPercent", "gapDownPercent"],
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["symbol", "priceChange", "percentChange", "lastPrice"]
                    }
                }
            },
            technical: {
                api: {
                    fields: "symbol,symbolName,lastPrice,opinion,relativeStrength20d,historicVolatility20d,averageVolume20d,lowPrice1y,highPrice1y"
                },
                options: {
                    opinion: ["opinion"],
                    colorize: ["range"],
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["symbol", "symbolName", "lastPrice"]
                    }
                }
            },
            performance: {
                api: {
                    fields: "symbol,symbolName,lastPrice,weightedAlpha,percentChangeYtd,percentChange1m,percentChange3m,percentChange1y"
                },
                options: {
                    colorize: ["weightedAlpha", "percentChange1y", "dailyPercentChange1y", "percentChangeYtd", "percentChange3m", "percentChange1m", "percentChangeYtd"],
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["symbol", "symbolName", "lastPrice"]
                    }
                }
            },
            fundamental: {
                api: {
                    fields: "symbol,symbolName,marketCap,peRatioTrailing,earningsPerShare,annualNetIncome.format(millions).decimals(2),beta,dividendRateForward,dividendYieldForward"
                },
                options: {
                    colorize: ["range"],
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["symbol", "symbolName", "lastPrice"]
                    }
                }
            },
            fundamental_etfs: {
                api: {
                    fields: "symbol,symbolName,managedAssets,assetClass,leverage,managementFee,dividendRateForward,dividendYieldForward"
                },
                options: {
                    colorize: ["range"],
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["symbol", "symbolName", "lastPrice"]
                    }
                }
            },
            chart: {
                api: {
                    fields: "symbol,symbolType,symbolName,weightedAlpha,lastPrice,priceChange,highPrice,lowPrice,tradeTime"
                },
                options: {}
            },
            extended: {
                api: {
                    fields: "symbol,symbolName,lastPriceExt,priceChangeExt,percentChangeExt,tradeTimeExt,lastPrice,priceChange,tradeTime"
                },
                options: {}
            },
            tile: {
                api: {
                    fields: "symbol,symbolName,lastPrice,priceChange,percentChange,tradeTime"
                },
                options: {}
            },
            default_options: {
                options: {
                    colorize: [],
                    opinion: [],
                    exclude: []
                }
            }
        }
    },
    jllh: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {},
                controller: ["$scope", "events", "dashboardGridChartApi", "dashboardGridSettings", "bcChartFactory", "_", "$rootScope", function(e, t, a, i, r, o, n) {
                    e.$on("gridChartChanged", function(e, t) {
                        "template" !== t.action && i.getTemplate() && (i.setTemplate(null), n.$broadcast("dashboardTemplateGridReset"))
                    }), e.$on(t.ON_INTERACTIVE_CHART_TEMPLATE_APPLIED, function(e, t) {
                        if (null === t.template) i.setTemplate(null), i.setState(null), i.rasetChartSettings(null), n.$broadcast("dashboardTemplateGridReset"), n.$broadcast("dashboardGridHardReset");
                        else {
                            i.getSymbolsData().forEach(function(e) {
                                var i = r.getChart(e.symbol);
                                a.loadDefinition(i, t.template.definition, e.symbol)
                            }), i.setTemplate(t.template.id);
                            var s = JSON.parse(t.template.template),
                                l = i.getChartSettings().aggregation;
                            l = o.merge({}, l, s.aggregation), i.setAggregationSettings(l), i.setPeriodSettings(s.period), i.setRangeSettings(s.range), i.setSettings(s.settings), i.setState(t.template.definition), i.saveState(), n.$broadcast("gridUpdated"), n.$broadcast("gridChartChanged", {
                                action: "template",
                                data: null
                            })
                        }
                    })
                }],
                controllerAs: "$ctrl",
                template: a("oIKg")
            }
        }
    },
    jrUo: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    model: "=",
                    changeGroup: "&",
                    groupsLoaded: "&",
                    allowNew: "@"
                },
                controller: ["myChartsApiService", "_", "dashboardSettingsService", "userMyChartStorageService", "$scope", "$q", function(e, t, a, i, r, o) {
                    var n = this;
                    n.groups = [], n.ready = !1;
                    var s = i.getGroups(),
                        l = o.defer();
                    null === s ? e.getGroups().then(function(e) {
                        i.setGroups(angular.copy(e.data)), l.resolve(e.data)
                    }) : l.resolve(angular.copy(s)), l.promise.then(function(e) {
                        n.groups = e, n.groups.length > 0 && (n.model ? (n.model = t.find(n.groups, function(e) {
                            return e.id === n.model.id
                        }), n.model || (n.model = n.groups[0])) : n.model = n.groups[0]), n.groupsLoaded({
                            groups: n.groups
                        }), "true" === n.allowNew && n.groups.push({
                            id: "new",
                            name: "+ Add New Group"
                        }), n.ready = !0
                    }), n.change = function() {
                        n.changeGroup({
                            group: n.model
                        })
                    }, r.$on("myGroupChangeTrigger", function(e, a) {
                        var r = a.group.id;
                        n.groups = i.getGroups();
                        var o = t.findIndex(n.groups, function(e) {
                            return e.id === r
                        });
                        n.model = n.groups[o], n.changeGroup({
                            group: n.model
                        })
                    })
                }],
                controllerAs: "$ctrl",
                template: a("Is1G")
            }
        }
    },
    jrdO: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@",
                    type: "@",
                    detectFundMarket: "&"
                },
                controller: ["$scope", "$window", "_", "screenerPermissionService", function(e, t, a, i) {
                    var r, o = t.config.settings.markets[t.config.user.market].uri;

                    function n() {
                        e.nonCommonAvailable = !1, e.filterData[e.key].value.forEach(function(t) {
                            -1 !== ["NYSE", "AMEX", "NASDAQ"].indexOf(t) && (e.nonCommonAvailable = !0)
                        }), e.nonCommonAvailable || -1 !== e.filterData[e.key].value.indexOf("nonCommon") && e.filterData[e.key].value.splice(e.filterData[e.key].value.indexOf("nonCommon"), 1)
                    }
                    o = e.detectFundMarket({
                        market: o,
                        type: e.type
                    }), e.filterData = a.isEmpty(e.filterData) ? ((r = {})[o] = {
                        value: []
                    }, Array.isArray(e.filters[o].value) ? e.filters[o].value.forEach(function(e) {
                        e.default || !1 === e.default || r[o].value.push(e.key)
                    }) : r[o].value.push(e.filters[o].value), r) : e.filterData, e.key = a.isEmpty(e.filterData) ? o : Object.keys(e.filterData)[0], n(), e.toggleSelection = function(t, a) {
                        if (!i.checkPermissions()) return a.target.checked = !a.target.checked, !1;
                        var r = e.filterData[e.key].value.indexOf(t);
                        r > -1 ? e.filterData[e.key].value.splice(r, 1) : e.filterData[e.key].value.push(t), n()
                    }
                }],
                template: a("UEu6")
            }
        }
    },
    jt4L: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                restrict: "A",
                $attrs: {
                    needAuth: "@",
                    eventName: "@",
                    catchEventName: "@",
                    premier: "@",
                    onChange: "@"
                },
                link: function(r, o, n) {
                    var s = !1;
                    void 0 !== n.needAuth && "off" !== n.needAuth && (s = !0);
                    var l = n.onChange,
                        c = n.eventName,
                        d = n.catchEventName,
                        u = "true" === n.premier,
                        p = {
                            onInTheMoneyViewChanged: "moneyness",
                            onOptionsViewsChanged: "view",
                            onExpirationDateChanged: "expiration",
                            onFuturesByExchangeChanged: "future",
                            onCurrencyChanged: "currency"
                        };

                    function m() {
                        var n = o.val();
                        u && a.isLoggedIn() && 1 === a.getUserData().subscription || s && !a.isLoggedIn() || (l && "function" == typeof r[l] ? r[l](c, {
                            data: n
                        }) : e.$broadcast(c, {
                            data: n
                        }), p[c] && i.setPathParameter(p[c], n), t.debug("Event name: <" + c + "> with value <" + n + "> has been triggered"))
                    }
                    o.on("change", m), r.$on("destroy", function() {
                        o.off("change", m)
                    }), d && r.$on(d, function(e, t) {
                        t.data && (o.val(t.data), m())
                    })
                }
            }
        }
        i.$inject = ["$rootScope", "$log", "authService", "locationService"], e.exports = i
    },
    k1nS: function(e, t) {
        e.exports = '<div class="modal-content-wrapper news-subscription-widget-modal"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <h5 class=bold>[[ data.title ]]</h5> <div data-ng-show=!data.shortDescription data-ng-bind-html=data.description></div> <div data-ng-show=data.shortDescription data-ng-bind-html=data.shortDescription></div> <span class=frequency>[[ data.frequency ]]</span> <div data-ng-cloak class=bc-news-subscription> <div data-ng-if=!success class=form-wrapper> <form method=post name=newsSubscription class=news-subscription-form data-ng-submit="subscribe(newsSubscription, $event)" novalidate> <div class="fieldset newsletter"> <div class=input-checkbox-big> <input name=check id="news-subscription-newsletter-[[ list ]]" type=checkbox data-ng-model=check> <label for="news-subscription-newsletter-[[ list ]]"> <span class=bc-glyph-check></span> Also send me Barchart Exclusive Offers </label> </div> </div> <div class="fieldset email clearfix"> <input class="bc-button sign-up-button" type=submit value="Sign Me Up!"> <div class=input-wrapper> <input data-ng-pattern=/^[_a-z0-9]+(\\.[_a-z0-9]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/i required placeholder="Enter email here..." name=email data-ng-model=email type=email> </div> <div data-vc-recaptcha data-size=invisible required=false data-key="[[ grecaptchaInvisibleKey ]]" on-create=onRender(widgetId) on-success=onSuccess(response)> </div> </div> <div data-ng-cloak class=error-messages-wrapper> <div class=error-messages> <div data-ng-if="newsSubscription.email.$invalid && newsSubscription.$submitted" class="fieldset error">Error: Please enter a valid, non-disposable email and try again.</div> <div data-ng-if=error class="fieldset error">[[ error ]]</div> </div> </div> </form> <div class=text-center>Opt-out any time.</div> <div class=subscription-footer> Brought to you by Barchart.com<br/> 209 W. Jackson - Chicago, IL 60606 </div> </div> <div class=success-message data-ng-if=success> <span class=bold>[[ currentEmail ]]</span> <span>has been subscribed.</span> </div> </div> </div> '
    },
    k2cl: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d) {
            var u = this,
                p = !1,
                m = !1,
                h = null,
                g = null,
                f = null,
                b = null,
                v = !1,
                y = !1,
                w = !1;

            function C() {
                o.savePreferencesItem("interactive_charts_last_symbol", t.getSymbol());
                var e = a.getUserPreferences();
                e.interactive_charts_last_symbol = t.getSymbol(), a.setUserPreferences(e)
            }
            this.setMyChartMode = function(e) {
                m = e
            }, this.setCurrentFlipChartTemplate = function(e) {
                h = e
            }, this.getCurrentFlipchartTemplate = function() {
                return h
            }, this.setCurrentFlipChartQuickSettings = function(e) {
                g = e
            }, this.resetCurrentFlipChartQuickSettings = function() {
                g = null
            }, this.getCurrentFlipChartQuickSettings = function() {
                return g
            }, this.setInitialFlipChartState = function(e) {
                f = angular.copy(e)
            }, this.getInitialFlipChartState = function() {
                return angular.copy(f)
            }, this.getFlipChartState = function() {
                return b
            }, this.save = function(r) {
                if (a.isLoggedIn())
                    if (!p || m) {
                        var o = {
                            configuration: JSON.stringify(t.getChartGlobalConfig()),
                            state: JSON.stringify(e.getDefinition(!0))
                        };
                        if (a.getUserData().is_premier && a.getUserPreferences().isTab) {
                            var u = s.getChartTab();
                            null === u && console.error("Something went wrong with userChartTabService.getChartTab!!!"), n.updateChart(u.id, o).then(function(e) {
                                l.$broadcast("myChartStateHasBeenUpdated", e.data)
                            })
                        } else i.saveChartDataForSymbol(t.getSymbol(), o);
                        r || a.getUserPreferences().isTab || C()
                    } else console.log("[Interactive Chart State Service]: save current state for flipchart"), b = {
                        configuration: JSON.stringify(t.getChartGlobalConfig()),
                        state: JSON.stringify(e.getDefinition(!0))
                    };
                else if (v || y || w) {
                    o = {
                        configuration: JSON.stringify(t.getChartGlobalConfig()),
                        state: JSON.stringify(e.getDefinition(!0))
                    };
                    var h = JSON.stringify(o),
                        g = new Date((new Date).getTime() + 60 * d.config.general.interactiveChartSaveStateAnnon * 60 * 1e3),
                        f = c.get("interactiveChartLastViewedStateExpireTime");
                    f ? g = new Date(f) : c.set("interactiveChartLastViewedStateExpireTime", g), c.set("interactiveChartLastViewedState", h)
                }
            }, this.delete = function() {
                a.isLoggedIn() && (p || (i.deleteChartDataForSymbol(t.getSymbol()), C()))
            }, this.switchToFlipChartsMode = function() {
                p = !0
            }, this.switchToDashboardMode = function() {
                v = !0
            }, this.switchToDefaultMode = function() {
                y = !0
            }, this.fullScreenEnabled = function() {
                w = !0
            }, this.resetMode = function() {
                v = !1, p = !1
            }, this.applyStateAndConfig = function(i, o, n, s, l) {
                try {
                    var c = {};
                    o && (c = JSON.parse(o), s && (c.expression = t.getChartMainPlotExpression()), p && !v && delete c.expression, t.setChartGlobalConfig(c)), i && e.loadDefinition(i, n);
                    var d = -1 !== [1, 7].indexOf(e.getSymbolData().symbolType) && e.getSymbolData().raw.hasBats;
                    if (a.isLoggedIn() && d && t.getChartSettings().batsData ? e.setCurrentChartSymbol(t.getSymbol() + ".BZ") : e.setCurrentChartSymbol(t.getSymbol()), r.type = null, c && c.expression) {
                        e.changeMainPlotToExpression(c.expression);
                        var u = null;
                        JSON.parse(i).panes[0].axes[0].plots.forEach(function(e) {
                            "Expression" === e.type && (u = {
                                colors: e.curves[0].colors,
                                lineWidth: e.curves[0].lineWidth,
                                curveStyle: e.curves[0].style
                            })
                        }), null !== u && (e.changeCurveStyle(u), l || e.render()), r.type = ["Line", "Area"]
                    } else e.restoreCurrentSymbolPlot(), l || e.render(), r.type = null
                } catch (e) {
                    console.log("[Interactive Chart] Chart state could not be loaded:", e)
                }
            }, this.resetFlipChartState = function() {
                f ? (e.reset(), t.resetChartGlobalConfig(), e.setCurrentChartSymbol(t.getSymbol()), b = {
                    configuration: JSON.stringify(t.getChartGlobalConfig()),
                    state: JSON.stringify(e.getDefinition(!0))
                }, u.applyStateAndConfig(f.state, f.configuration, {
                    keepOldAnnotations: !1,
                    keepNewAnnotations: !0,
                    keepOldCompare: !0,
                    keepNewCompare: !1
                }), u.applyStateAndConfig(b.state, b.configuration, {
                    keepOldAnnotations: !0,
                    keepNewAnnotations: !1,
                    keepOldCompare: !1,
                    keepNewCompare: !1
                })) : (e.reset(), t.resetChartGlobalConfig(), b = {
                    configuration: JSON.stringify(t.getChartGlobalConfig()),
                    state: JSON.stringify(e.getDefinition(!0))
                })
            }
        }
        i.$inject = ["interactiveChartApi", "interactiveChartSettings", "authService", "interactiveChartStateApi", "interactiveChartFixedBarType", "interactiveChartUserPreferencesApi", "myChartsApiService", "userChartTabService", "$rootScope", "localStorageService", "$window"], e.exports = i
    },
    k6QZ: function(e, t) {
        e.exports = "<div> <highchart id=last-four-quarters data-config=config></highchart> </div>"
    },
    k71M: function(e, t, a) {
        "use strict";
        e.exports = function(e, t) {
            var a = {};
            return a[t.ONE_DAY] = e.ONE_DAY, a[t.FIVE_DAYS] = e.FIVE_DAYS, a[t.ONE_MONTH] = e.ONE_MONTH, a[t.THREE_MONTH] = e.THREE_MONTHS, a[t.SIX_MONTH] = e.SIX_MONTHS, a[t.ONE_YEAR] = e.ONE_YEAR, a[t.FIVE_YEARS] = e.FIVE_YEARS, a[t.TWENTY_FIVE_YEARS] = e.MAX, a
        }
    },
    k9MA: function(e, t, a) {
        "use strict";
        e.exports = function(e, t, a) {
            return {
                chartStyle: a ? [{
                    value: "LINE",
                    title: "Line"
                }, {
                    value: "AREA",
                    title: "Area"
                }] : [{
                    value: "BAR",
                    title: "OHLC Bars"
                }, {
                    value: "CANDLE",
                    title: "Candlesticks"
                }, {
                    value: "HLWCDL",
                    title: "Hollow Candlesticks"
                }, {
                    value: "LINE",
                    title: "Line"
                }, {
                    value: "AREA",
                    title: "Area"
                }],
                switchVolume: [{
                    value: "volume_on",
                    title: "Volume On"
                }, {
                    value: "volume_off",
                    title: "Volume Off"
                }],
                extraSettings: {}
            }
        }
    },
    k9u6: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "BarchartMediaOverlayApiFactory", "BarchartMediaOverlayApiConfig", "$location", "technicalChartPeriodSettings", "technicalChartDrawService", "$timeout", "$rootScope", "utils", function(e, t, a, i, r, o, n, s, l) {
                var c = angular.element(document.querySelector(".bc-overlay-modal-wrapper .modal-content"));
                c.css("min-height", window.innerHeight + 10 + "px");
                var d = !1,
                    u = !1;
                e.cleanChart = !1, window.addEventListener("resize", function() {
                    var e = window.innerHeight + 10 + "px";
                    c.css("min-height", e)
                }, !0);
                var p = {
                    COTFIN: "COTFIN(13369344,26112,153,16750848)",
                    COTDLC: "COTDLC(13369344,26112,153,16750848)",
                    COTLC: "COTLC(13369344,26112,153)"
                };
                e.tooltipBaseData = null, e.pricesOn = "1", e.tooltipData = null, e.showTooltip = !1, e.dropdown = {}, e.chartKeys = [];
                var m = ["open", "high", "low", "close", "Volume", "overlay1", "overlay2", "overlay3"];
                if (e.symbolsList) e.dropdown = e.symbolsList, e.chartKeys = [], Object.keys(e.symbolsList).forEach(function(t) {
                    e.chartKeys.push(t)
                });
                else {
                    var h = document.querySelector(".bc-commitment-of-traders");
                    h ? (e.dropdown = e.symbolsList ? e.symbolsList : JSON.parse(h.getAttribute("data-charts-group")), e.chartKeys = JSON.parse(h.getAttribute("data-chart-keys"))) : e.cleanChart = !0
                }
                var g = !1;

                function f(i) {
                    var n;
                    e.dataLoading = !0, i.indicators = (n = i.symbol, e.study && p[e.study] ? p[e.study] : e.dropdown[n] && e.dropdown[n].group ? ~["Currencies", "Financials", "Indices", "Forex"].indexOf(e.dropdown[n].group) ? "COTLC(13369344,26112,153);COTFIN(13369344,26112,153,16750848)" : "COTLC(13369344,26112,153);COTDLC(13369344,26112,153,16750848)" : void 0), i.height = 375, i.chartSettings = r.getByPeriod(e.chartPeriod, "futures", !0), i.chartSettings.pricesOn = e.pricesOn, e.study && (i.indicatorHeight = 200);
                    var s = a.getApiConfigFlipcharts(i);
                    e.fullTechnicalChartUrl = l.buildUrl(e.flipChartSymbolUrl, s.api), t.getChart(s).then(function(t) {
                        e.chartData = t.data;
                        var a = o.createImageMapMarkup(e.chartData.map, e);
                        angular.element(document.querySelector("#bc-technical-chart-image-map")).empty().append(a), e.flipChartData = t.data, e.dataLoading = !1
                    }, function() {
                        console.log("ERROR: Chart could not be loaded."), e.dataLoading = !1
                    })
                }

                function b(t) {
                    return {
                        symbol: t,
                        symbolName: e.dropdown[t] ? e.dropdown[t].symbolName : "",
                        type: 2
                    }
                }
                Object.keys(e.dropdown).length || (g = !0, t.getSymbolData(e.currentSymbol).then(function(t) {
                    e.dropdown[e.currentSymbol] = t.data[0], e.dropdown[e.currentSymbol].group = 10 === t.data[0].symbolType ? "Forex" : t.data[0].category, g = !1, e.symbol = {
                        symbol: e.dropdown[e.currentSymbol].symbol,
                        symbolName: e.dropdown[e.currentSymbol].symbolName,
                        type: e.dropdown[e.currentSymbol].symbolType
                    }, e.loadChartForSymbol(e.symbol)
                })), e.$watch("currentSymbol", function() {
                    g || (e.symbol = b(e.currentSymbol), e.loadChartForSymbol(e.symbol))
                }), e.symbols = [], e.flipChartData = null, e.flipChartTooltip = [], e.dataLoading = !1, e.flipChartSymbol = null, e.flipChartNextSymbol = null, e.flipChartPrevSymbol = null, e.flipChartSymbolUrl = null, e.flipChartSharingUrl = null, e.flipChartSharingTitle = null, e.fullTechnicalChartUrl = null, e.excludeQuickChart = ["1d", "5d", "1m", "3m"], e.chartPeriod = "3y", Object.keys(e.dropdown).forEach(function(t) {
                    e.symbols.push(angular.merge({
                        symbol: t
                    }, e.dropdown[t]))
                }), e.goTo = function(t) {
                    if (s.currentURL) i.path("prev" === t ? e.flipChartPrevSymbol : e.flipChartNextSymbol);
                    else {
                        var a = e.chartKeys.indexOf(e.symbol.symbol);
                        e.currentSymbol = "prev" === t ? e.chartKeys[a - 1] : e.chartKeys[a + 1]
                    }
                }, e.loadChartForSymbol = function(t) {
                    n(function() {
                        s.$broadcast("bc-scrollbar-scroll-to-item", t.symbol)
                    }, 500), e.dataLoading || g || (e.symbol = t, e.commodity = t.symbol, e.flipChartSymbol = t, e.flipChartTooltip = [], e.flipChartSharingTitle = t.symbolName + " Chart", function(t) {
                        e.flipChartSymbolUrl = 10 === t.type ? "/forex/quotes/" + t.symbol + "/technical-chart" : "/futures/quotes/" + t.symbol + "/technical-chart", e.flipChartSharingUrl = window.location.href
                    }(t), f(t), function(t) {
                        var a = e.chartKeys.indexOf(t.symbol); - 1 !== a && e.chartKeys[a - 1] ? e.flipChartPrevSymbol = s.currentURL + "/technical-charts/" + e.chartKeys[a - 1] : e.flipChartPrevSymbol = null, -1 !== a && e.chartKeys[a + 1] ? e.flipChartNextSymbol = s.currentURL + "/technical-charts/" + e.chartKeys[a + 1] : e.flipChartNextSymbol = null
                    }(t), window.scroll(0, 0))
                }, e.hideTooltip = function() {
                    e.showTooltip = !1
                }, e.hideTooltipData = function() {
                    d = !1, u || (n(function() {
                        d || (e.showTooltip = !1), u = !1
                    }, 300), u = !0)
                }, e.shouldMapBeShown = function() {
                    return "1" === e.pricesOn
                }, e.showAreaInfo = function(t) {
                    d = !0, e.tooltipData = {}, e.tooltipBaseData = {}, e.tooltipBaseData.open = t.open, e.tooltipBaseData.high = t.high, e.tooltipBaseData.low = t.low, e.tooltipBaseData.close = t.close, e.tooltipBaseData.overlay1 = t.overlay1, e.tooltipBaseData.overlay2 = t.overlay2, e.tooltipBaseData.overlay3 = t.overlay3, e.tooltipBaseData.Volume = t.Volume, Object.keys(t).forEach(function(a) {
                        -1 === m.indexOf(a) && (e.tooltipData[a] = t[a])
                    }), e.showTooltip = !0
                }, e.chartPeriodChanged = function(t) {
                    e.chartPeriod = t, e.loadChartForSymbol(e.symbol)
                }, e.currentSymbol && (e.symbol = b(e.currentSymbol), e.loadChartForSymbol(e.symbol)), e.updateChart = function() {
                    e.commodity && (window.location.href = s.currentURL + "/technical-charts/" + e.commodity)
                }, e.showLegendTTF = function() {
                    return "COTFIN" === e.study || !!Object.keys(e.dropdown).length && !!~["Currencies", "Financials", "Indices", "Forex"].indexOf(e.dropdown[e.currentSymbol].group)
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    currentSymbol: "=",
                    symbol: "=",
                    symbolsList: "=",
                    study: "=",
                    hideOverlayModal: "&"
                },
                template: a("Tjxd"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    "k9z+": function(e, t) {
        e.exports = '<div class=bc-form> <screener-options-load-screener-toolbar data-filters=formData.filters data-type="[[ ::type ]]"></screener-options-load-screener-toolbar> <div class="row collapse ordering-header"> <div class=ordering-header-filter>Filter</div> <div class=ordering-header-order>Order</div> </div> <div class=screener-tree-wrapper ui-tree=treeOptions> <div class=screener-tree-wrapper__nodes ui-tree-nodes ng-model=formData.filters> <div class=screener-tree__row-wrapper data-ng-repeat="treeFilter in formData.filters" ui-tree-node data-ng-init="treeFilter.guid = getGuid(treeFilter)"> <screener-row-filter data-filter-item=treeFilter data-filter-index="[[ treeFilter.guid  ]]" data-type="[[ ::type ]]" data-is-options=yes> </screener-row-filter> </div> </div> </div> <screener-options-add-filter-toolbar data-type="[[ ::type ]]" data-default-filter="[[ ::defaultFilter ]]" data-filters=formData.filters></screener-options-add-filter-toolbar> </div>'
    },
    kBiu: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            e.symbolData = a;
            var o, n, s, l, c = {
                    "dashboard-overview": "Quote",
                    "dashboard-performance": "Performance",
                    "dashboard-headlines": "News",
                    "dashboard-opinion": "Opinion",
                    "dashboard-technical-analysis": "Technical",
                    "dashboard-key-statistics-stocks": "Key Stats",
                    "dashboard-key-statistics-etf": "Key Stats",
                    "dashboard-ratios": "Ratios",
                    "dashboard-per-share-info": "Per Share",
                    "dashboard-investment-info-etf": "Investment",
                    "dashboard-commodity-profile": "Profile",
                    "dashboard-description": "Profile"
                },
                d = 700;
            r.isMobile() && (d = window.innerWidth < 700 ? window.innerWidth : 700), o = a.symbol, n = a.symbolCode, s = a.symbolType, l = l ? 1 : 0, i.call("/symbols/" + o + "/modules/dashboard?symbolType=" + s + "&symbolCode=" + n + "&hasOptions=" + l).then(function(t) {
                e.widgetsWidth = (Object.keys(t).length - 1) * d, e.apiData = t, e.links = [];
                var a = 0;
                Object.keys(c).forEach(function(i) {
                    t[i] && (e.links.push({
                        title: c[i],
                        id: a
                    }), a++)
                }), r.isMobile() && setTimeout(function() {
                    document.querySelectorAll(".symbol-widgets-list-item").forEach(function(e) {
                        angular.element(e).css("maxWidth", d + "px")
                    })
                })
            }, function(e) {
                console.log("Could not retrieve data for widgets:", e)
            }), e.$modalInstance = t, e.closeModal = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "symbolData", "dataProvider", "utils"], e.exports = i
    },
    kCWv: function(e, t, a) {
        "use strict";

        function i(e, t) {
            var a = this;
            a.miniTableCallbackFunction = function(a) {
                delete a.meta.field.shortName.symbol, delete a.meta.field.shortName.symbolType, delete a.meta.field.shortName.symbolCode, a.data.forEach(function(a) {
                    a.symbolSector = e.getSector(a.symbolType), "forex" === a.symbolSector && (a.symbolName = t("parseForex")(a.symbol))
                }), this.content = a
            }, a.miniTable = {
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: []
                    },
                    links: ["symbolName"],
                    colorize: ["percentChange", "priceChange", "weightedAlpha"]
                },
                callback: a.miniTableCallbackFunction
            }, a.highsMiniTable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["highPrice", "priceChange", "weightedAlpha", "lastPrice"]
                    },
                    links: ["symbolName"],
                    colorize: a.miniTable.options.colorize
                },
                callback: a.miniTable.callback
            }, a.lowsMiniTable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["highPrice", "priceChange"]
                    },
                    links: ["symbolName"],
                    colorize: a.miniTable.options.colorize
                },
                callback: a.miniTable.callback
            }
        }
        i.$inject = ["quotesService", "$filter"], e.exports = i
    },
    kJ9j: function(e, t, a) {
        "use strict";
        e.exports = {
            api: {},
            sticky: !0,
            customHandlers: {
                advancedSymbolSearchEvent: "advancedSymbolSearch"
            },
            options: {
                quickLinks: !0,
                class: "advanced-search-results",
                filter: {
                    parseHTML: {
                        columns: ["symbolName"]
                    }
                },
                tableName: "default",
                advancedSearch: !0,
                callback: "advancedSearchHighlightData"
            }
        }
    },
    kNdq: function(e, t, a) {
        "use strict";
        angular.module("TermOfUse", []).controller("termOfUseCtrl", a("yUB1"));
        e.exports = {
            enable: !0,
            name: "TermOfUse"
        }
    },
    kQx8: function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["$rootScope", "enquire", function(e, t) {
            e.selectMarket = {
                visibility: !1
            }, t.register("only screen and (min-width: 767px)", {
                match: function() {
                    e.$evalAsync(function() {
                        e.selectMarket.visibility = !0
                    })
                },
                unmatch: function() {
                    e.$evalAsync(function() {
                        e.selectMarket.visibility = !1
                    })
                }
            })
        }])
    },
    kRDL: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            return {
                getQuotes: function(a) {
                    var o = Object.create(a);
                    return delete o.method, delete o.description, e.call(i.buildUrl(r.API_URL + "/quotes/get", o), t.GET).then(function(e) {
                        return e
                    })
                },
                getHistoricalData: function(a) {
                    var s = [];
                    if (a.symbol instanceof Array) {
                        delete a.method;
                        var l = Object.create(a);
                        return a.symbol.forEach(function(a) {
                            l.symbol = a;
                            var o = e.call(i.buildUrl(r.API_URL + "/historical/get", l), t.GET).then(function(e) {
                                var t = 0,
                                    i = 0,
                                    r = {
                                        count: e.count,
                                        symbol: a,
                                        min: t,
                                        data: []
                                    };
                                return e.count > 1 && (e.data.forEach(function(e) {
                                    var a = n.convertToUTC(e.tradeTime),
                                        o = Number(e.lastPrice.replace(/[,]/g, ""));
                                    i = o, (t = 0 === t ? o : t) >= i && (t = i), r.data.push([a, o])
                                }), r.min = t), r
                            });
                            s.push(o)
                        }), o.all(s)
                    }
                    throw new Error("apiRequest.symbol must be Array")
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "_", "utils", "apiConfig", "$q", "dateService"], e.exports = i
    },
    kRxm: function(e, t) {
        e.exports = '<div class="modal-content-wrapper edit-name-form account"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <div class=inner-form> <form name=editName novalidate data-ng-submit=updateName(editName)> <div class=input-inner-wrapper> <label for=user_fname>First Name:</label> <input class=form-input data-ng-required="!first_name && !last_name" id=user_fname type=text data-ng-model=first_name data-ng-maxlength=20 name=first_name data-ng-init="first_name=user.fname"/> </div> <div class=input-inner-wrapper> <label for=user_lname>Last Name:</label> <input class=form-input id=user_lname type=text data-ng-model=last_name data-ng-maxlength=20 name=last_name data-ng-init="last_name=user.lname"/> </div> <div class=form-buttons> <a class="bc-button grey save" data-ng-click=close()>Cancel</a> <a class="bc-button light-blue save" data-ng-click=updateName(editName)>Save</a> </div> <div class=form-item-errors> <span data-ng-if=editName.first_name.$error.required> The form cannot be empty. </span> <span data-ng-if=editName.first_name.$error.maxlength> First Name cannot be longer than 20 characters. </span> <span data-ng-if=editName.error> Something went wrong. Check data and try again. </span> <span data-ng-if=editName.last_name.$error.maxlength> Last Name cannot be longer than 20 characters. </span> </div> </form> </div> </div>'
    },
    kaQ1: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v, y, w, C, S, x, k, D, T, _) {
            return {
                restrict: "E",
                scope: {
                    defaultSetting: "@",
                    currentSymbol: "=",
                    fullScreen: "=",
                    myChartsMode: "="
                },
                controller: ["$scope", function(P) {
                    var E, A = [],
                        $ = !0,
                        M = !0,
                        L = !1,
                        O = !1,
                        I = !1;
                    P.ignoreFields = A, P.changedState = "", P.chartError = !1, P.changedStates = {
                        APPLY_TEMPLATE: "APPLY_TEMPLATE",
                        DRAW: "DRAW",
                        CLEAR_SETTINGS: "CLEAR_SETTINGS",
                        QUICK_SETTINGS: "QUICK_SETTINGS"
                    }, P.fields = o, P.technicalChartConfig = t, P.symbolSector = n.getSector(P.currentSymbol.symbolType), P.symbolTypeName = n.getTypeName(P.currentSymbol.symbolType), P.dataLoading = !0, P.mapDataEmpty = null, P.formSubmitted = !1, P.dateRangeError = !1, P.toolTipLeft = "40", E = d.isMobileOnly() ? r.mobile : r.desktop, A = A.concat(g, o.INDICATORS_OBJECT), angular.extend(P, a("R6Lc")(E, P.symbolSector)), P.chartSettingTypes = a("Ffq+")(t), P.chartSettings = {
                        currentSetting: P.defaultSetting || t.chartSettings.BASIC
                    }, P.chartData = {}, P.initializeFormData = J, P.resetState = K, B(), J(), P.formData.forms.basic = i.merge(P.formData.forms.basic, l(P.symbolTypeName, o));
                    var N = angular.copy(P.formData.forms.basic);
                    if (s.prepareChartHeightBeforeRequest(N), b.isLoggedIn()) {
                        var F = b.getUserData().custom_chart_templates;
                        if (b.getUserData().preferences.charts_template)
                            if (!i.find(F, "id", +b.getUserData().preferences.charts_template)) {
                                var R = x.getChartTab();
                                R ? R ? (console.log("[Dashboard Technical Chart]: Initialize directive with tab symbol as initial", R), z(JSON.parse(R.state))) : (console.warn("[Dashboard Technical Chart]: tried to load saved tab of my chart, but it was failed, reset to default settings"), T.updateParameter("activeTab", "markets"), q(N)) : (console.log("###->1: Render technical chart on initialization withour saved tab"), console.log("[Dashboard Technical Chart]: Render without template", angular.copy(N)), q(N))
                            }
                    } else console.log("[Dashboard Technical Chart]: Render for non-logged in", angular.copy(N)), q(N);

                    function B() {
                        P.error = {
                            symbol: null,
                            expression: null
                        }
                    }

                    function U(a) {
                        P.chartData = null, "spread" !== P.chartSettings.currentSetting && a.isSpread && (delete a.isSpread, delete P.formData.forms.basic.isSpread), "comparison" !== P.chartSettings.currentSetting && a.isComparison && (delete a.isComparison, delete P.formData.forms.basic.isComparison), e.makeRequest(a, A, !0, P.myChartsMode).then(function(t) {
                            if (void 0 === t.data || void 0 === t.data.image || t.data.error) t.data && t.data.error && (L = !1, P.chartError = t.data.error);
                            else {
                                console.log("[Dashboard Technical Chart]: Api settings:", angular.copy(a));
                                var i = e.getApiSettings(),
                                    r = x.getChartTab();
                                b.isLoggedIn() && r && !I ? S.updateChart(r.id, {
                                    state: JSON.stringify(i)
                                }).then(function(e) {
                                    c.$broadcast("myChartTechnicalUpdated", e.data)
                                }) : D.saveSettings(i), I && (I = !1), P.chartError = !1, P.chartData = t.data, v.setChartData(P.chartData), P.mapDataEmpty = t.data.map && t.data.map.length ? null : "Mouse-over prices have been disabled due to the high density of this chart.";
                                var o = f.createImageMapMarkup(P.chartData.map, P);
                                angular.element(document.querySelector("#bc-technical-chart-image-map")).empty().append(o), u.scrollTo(0, 0), c.$broadcast("technicalChartRendered"), !1, M = !1
                            }
                            P.dataLoading = !1, K(), P.formSubmitted = !1, P.dateRangeError = !1, c.$broadcast("dashboardCurrentSymbolUpdated", P.currentSymbol), L && (c.$broadcast("dashboardHeaderSymbolChanged", P.currentSymbol), L = !1)
                        }, function(e) {
                            P.chartSettings.currentSetting === t.chartSettings.SPREAD && (P.error.expression = "Expression contains invalid symbols. Try again"), P.dataLoading = !1, P.formSubmitted = !1, P.dateRangeError = !1, K()
                        }).finally(function() {
                            O && (O = !1)
                        })
                    }

                    function V(e) {
                        var a = w.defer();
                        if (P.dataLoading = !0, P.mapDataEmpty = null, P.chartSettings.currentSetting === t.chartSettings.SPREAD) {
                            var i = P.formData.forms.spread[o.EXPRESSION];
                            "" === i && (i = P.formData.forms.basic.sym, P.formData.forms.spread[o.EXPRESSION] = i), i = f.findSymbolInExpression(i), P.currentSymbol.primitiveSymbol.toUpperCase() !== i.toUpperCase() ? y.validSymbol(i).then(function(t) {
                                1 !== t.count || t.errors ? (P.dataLoading = !1, L = !1, P.error.expression = "Expression contains invalid symbols. Try again", a.reject()) : a.resolve(e)
                            }) : a.resolve(e)
                        } else a.resolve(e);
                        return a.promise
                    }

                    function q(e, a) {
                        a = !!a, B(), "1" === e.isSpread && (P.chartSettings.currentSetting = "spread", P.formData.forms.spread.sym ? e.sym = P.formData.forms.spread.sym : P.formData.forms.spread.sym = e.sym), W(e.sym).then(function() {
                            switch (P.chartSettings.currentSetting) {
                                case t.chartSettings.BASIC:
                                    f.drawBasicChart(e, P.currentSymbol).then(function(t) {
                                        P.symbolSector = n.getSector(t.symbolType), V(e).then(function(e) {
                                            U(e)
                                        })
                                    }, function() {
                                        L = !1, P.error.symbol = "Invalid symbol. Try again"
                                    });
                                    break;
                                case t.chartSettings.SPREAD:
                                    f.drawSpreadChart(e, a, P.symbolSector, P.fullScreen).then(function() {
                                        return V(e).then(function(e) {
                                            U(e)
                                        }), !0
                                    });
                                    break;
                                case t.chartSettings.COMPARISON:
                                    f.drawComparisonChart(P.formData.forms.comparison, e, P.currentSymbol).then(function() {
                                        V(e).then(function(e) {
                                            U(e)
                                        })
                                    }, function(e) {
                                        L = !1, P.error.symbol = e.invalidSymbol ? "Invalid symbol. Try again" : null, P.error.symbols = e.invalidSymbols ? "Invalid symbol. Try again" : null, e.invalidSymbols && e.invalidSymbols.forEach(function(t) {
                                            P.error["overlay" + e.symbols.indexOf(t)] = !0
                                        })
                                    })
                            }
                        })
                    }

                    function j() {
                        P.changedState = P.changedStates.QUICK_SETTINGS, ["id", "name", "description"].forEach(function(e) {
                            m.search(e, null), delete P.formData.forms[t.chartSettings.BASIC][e]
                        }), K(), c.$broadcast("templateChanged")
                    }
                    P.drawTechnicalChart = q, P.$on("technicalChartSymbolChanged", function(e, a) {
                        console.log("[Dashboard Technical Chart]: event <technicalChartSymbolChanged>", a), W(a).then(function() {
                            P.formData.forms.basic[P.fields.SYMBOL] = a, P.chartSettings.currentSetting === t.chartSettings.SPREAD && (P.chartSettings.currentSetting = t.chartSettings.BASIC);
                            var e = x.lastViewedTabSymbol();
                            !x.getChartTab() && e ? (x.clearLastViewedTabSymbol(), console.log("[Dashboard Technical Chart]: trigger <dashboardTechnicalChartForceRender>"), c.$broadcast("dashboardTechnicalChartForceRender")) : (console.log("[Dashboard Technical Chart]: render chart in an usual way"), P.drawChart())
                        })
                    }), P.$on("dashboardTechnicalChartForceRender", function() {
                        var e = D.load();
                        e.settings.sym = P.formData.forms.basic[P.fields.SYMBOL], console.log("[Dashboard Technical Chart]: event <dashboardTechnicalChartForceRender>", angular.copy(e)), e.template ? (c.$broadcast("setAppliedTemplate", e.template), z(e.template)) : e.settings ? z(e.settings) : c.$broadcast(k.ON_TECHNICAL_CHART_DEFAULT_TEMPLATE_SET)
                    }), P.$on("dashboardApplyTechnicalState", function(e, a) {
                        console.log("[Dashboard Technical Chart]: event <dashboardApplyTechnicalState>:", a),
                            function() {
                                P.formData.forms.basic = i.merge(P.formData.forms.basic, l(P.symbolTypeName, o)), P.chartSettings.currentSetting === t.chartSettings.COMPARISON && (P.formData.forms.comparison = Object.create(h.comparison));
                                P.formData.forms.basic[o.STUDYHEIGHT] = "150", P.formData.forms.basic[o.HEIGHT] = "500", d.isMobileOnly() && (P.formData.forms.basic[o.VOLUME] = "0");
                                s.prepareChartHeightBeforeRequest(P.formData.forms.basic), P.chartSettings.currentSetting = "basic", P.formData.forms.basic.isSpread && delete P.formData.forms.basic.isSpread;
                                angular.copy(P.formData.forms.basic);
                                d.isMobileOnly() && (P.formData.forms.basic[o.STUDYHEIGHT] = "150", P.formData.forms.basic[o.HEIGHT] = "500")
                            }(), z(a)
                    }), P.$watch(function() {
                        return P.chartSettings.currentSetting
                    }, function(e) {
                        $ ? $ = !1 : (B(), j(), O || ("basic" === e && (P.toolTipLeft = "40", void 0 !== P.formData.forms && P.formData.forms.basic.sym !== P.currentSymbol.symbol && (P.formData.forms.basic.sym = P.currentSymbol.symbol)), "spread" === e && (P.toolTipLeft = "40", P.formData.forms.spread.sym = ""), "comparison" === e && (P.formData.forms.basic.sym = P.currentSymbol.symbol, P.toolTipLeft = "60")))
                    }), P.$watch(function() {
                        return P.formData.forms.basic
                    }, function(e, t) {
                        e.id && !t.id || e.id && t.id && e.id !== t.id || e[o.SYMBOL] === t[o.SYMBOL] && t.id && !M && j()
                    }, !0), P.$on("applyTechnicalChartQuickSettings", function() {
                        P.changedState = P.changedStates.QUICK_SETTINGS
                    }), P.$on("templateSaved", function() {
                        P.drawChartButtonClick()
                    }), P.$on("applyTemplate", function(e, t) {
                        P.changedState = P.changedStates.APPLY_TEMPLATE, z(t)
                    }), P.$on("myChartTechnicalIgnoreUpdate", function() {
                        I = !0
                    }), P.drawChart = function() {
                        if (P.formSubmitted = !0, ! function(e, t) {
                                var a = {
                                        success: !0,
                                        errors: {}
                                    },
                                    i = t.basic.startDate,
                                    r = t.basic.endDate;
                                i ? "Invalid Date" === new Date(i).toString() && (e.dateFrom.$setValidity("date", !1), a.errors.dateFrom = "invalidDate", a.success = !1) : e.dateFrom.$setValidity("date", !0);
                                e.dateFrom.$invalid && (a.errors.dateFrom = "invalidDate", a.success = !1);
                                r ? "Invalid Date" === new Date(r).toString() && (e.dateTo.$setValidity("date", !1), a.errors.dateTo = "invalidDate", a.success = !1) : e.dateTo.$setValidity("date", !0);
                                e.dateTo.$invalid && (a.errors.dateTo = "invalidDate", a.success = !1);
                                return a
                            }(P.technicalChartForm, P.formData.forms).success) return (P.technicalChartForm.dateFrom.$invalid || P.technicalChartForm.dateTo.$invalid) && (P.dateRangeError = !0), L = !1, !1;
                        var e = h.getChartSettings(P.formData.forms, P.chartSettings.currentSetting);
                        s.prepareChartHeightBeforeRequest(e), P.error.spreadForm ? L = !1 : (q(e), c.$broadcast("drawChartHasBeenCalled"))
                    }, P.drawChartButtonClick = function() {
                        L = !0, P.changedState = P.changedStates.DRAW, c.$broadcast("drawChartHasBeenCalledViaButton"), P.toggleChartForm(), "spread" !== P.chartSettings.currentSetting && "1" === P.formData.forms.basic.isSpread && delete P.formData.forms.basic.isSpread, P.drawChart()
                    }, P.showTooltip = !1, P.tooltipData = null, P.tooltipBaseData = null;
                    var H = ["open", "high", "low", "close", "Volume", "overlay1", "overlay2", "overlay3"];
                    P.shouldMapBeShown = function() {
                        return "1" === P.formData.forms.basic[o.PRICEBOX]
                    }, P.hideTooltip = function() {
                        P.showTooltip = !1
                    };
                    var Y = !1,
                        G = !1;

                    function W(e) {
                        var t = w.defer();
                        if ("spread" === P.chartSettings.currentSetting && (e = f.findSymbolInExpression(e)), P.currentSymbol.symbol !== e) {
                            var a = {
                                symbol: e.toUpperCase(),
                                fields: "symbol,symbolName,symbolType,lastPrice,priceChange,percentChange,highPrice,lowPrice,volume,tradeTime,symbolCode,exchange,sicIndustry,contractName,hasBats,pointValue,unitCode",
                                raw: 1,
                                meta: "field.shortName"
                            };
                            C.query(a, "/quotes/get").then(function(a) {
                                a.data && a.data[0] && (P.currentSymbol = a.data[0], P.currentSymbol.primitiveSymbol || (P.currentSymbol.primitiveSymbol = e), _.setSymbolData(P.currentSymbol), t.resolve())
                            })
                        } else t.resolve();
                        return t.promise
                    }

                    function z(e) {
                        O = !0, "1" === e.isSpread ? (P.chartSettings.currentSetting = "spread", P.formData.forms.spread.sym = e.sym, P.formData.forms.comparison.axis1 = !1, P.formData.forms.comparison.axis2 = !1, P.formData.forms.comparison.axis3 = !1, P.formData.forms.comparison.overlay1 = null, P.formData.forms.comparison.overlay2 = null, P.formData.forms.comparison.overlay3 = null) : "1" === e.isComparison ? (P.chartSettings.currentSetting = "comparison", P.formData.forms.spread.sym = "", P.formData.forms.spread.commonSpreadValue = "", P.formData.forms.comparison.axis1 = e.axis1 || !1, P.formData.forms.comparison.axis2 = e.axis2 || !1, P.formData.forms.comparison.axis3 = e.axis3 || !1, P.formData.forms.comparison.overlay1 = e.overlay1 || null, P.formData.forms.comparison.overlay2 = e.overlay2 || null, P.formData.forms.comparison.overlay3 = e.overlay3 || null) : (P.chartSettings.currentSetting = "basic", P.formData.forms.spread.sym = "", P.formData.forms.spread.commonSpreadValue = "", delete P.formData.forms.basic.axis1, delete P.formData.forms.basic.axis2, delete P.formData.forms.basic.axis3, delete P.formData.forms.basic.overlay1, delete P.formData.forms.basic.overlay2, delete P.formData.forms.basic.overlay3, P.formData.forms.comparison.axis1 = !1, P.formData.forms.comparison.axis2 = !1, P.formData.forms.comparison.axis3 = !1, P.formData.forms.comparison.overlay1 = null, P.formData.forms.comparison.overlay2 = null, P.formData.forms.comparison.overlay3 = null);
                        var t = {};
                        switch ("0" !== e.volume && (i.find(P.symbolVolume, "value", e.volume) || (t.volume = "total")), e.studyheight && "number" == typeof e.studyheight && (e.studyheight = e.studyheight.toString()), null === e.studyheight && delete e.studyheight, e.height && "number" == typeof e.height && (e.height = e.height.toString()), e.height) {
                            case "325":
                                e.height = "250";
                                break;
                            case "350":
                                e.height = "375";
                                break;
                            case "450":
                                e.height = "500"
                        }
                        s.mapFrequencyFromUrl(e, e.data, "futures" !== P.symbolSector), null === e.height && delete e.height, "" === e.indicators && (e.indicators = null), t.inticatorsObjects = null, i.merge(P.formData.forms.basic, e, t), s.mapData(P.formData.forms.basic), p(function() {
                            P.drawChart(), K()
                        }, 0)
                    }

                    function K() {
                        setTimeout(function() {
                            P.changedState = ""
                        }, 0)
                    }

                    function J() {
                        P.formData = {
                            name: "form",
                            forms: {
                                basic: {},
                                spread: {},
                                comparison: {}
                            }
                        }, P.formData.forms.basic = h.basic, P.formData.forms.spread = h.spread, P.formData.forms.comparison = angular.copy(h.comparison), P.formData.forms.basic[o.SYMBOL] = P.currentSymbol.symbol
                    }
                    P.hideTooltipData = function() {
                        Y = !1, G || (p(function() {
                            Y || (P.showTooltip = !1), G = !1
                        }, 300), G = !0)
                    }, P.showAreaInfo = function(e) {
                        Y = !0, P.tooltipData = {}, P.tooltipBaseData = {}, e && (P.tooltipBaseData.open = e.open, P.tooltipBaseData.high = e.high, P.tooltipBaseData.low = e.low, P.tooltipBaseData.close = e.close, P.tooltipBaseData.overlay1 = e.overlay1, P.tooltipBaseData.overlay2 = e.overlay2, P.tooltipBaseData.overlay3 = e.overlay3, P.tooltipBaseData.Volume = e.Volume, Object.keys(e).forEach(function(t) {
                            -1 === H.indexOf(t) && (P.tooltipData[t] = e[t])
                        })), P.showTooltip = !0
                    }, P.toggleChartForm = function() {
                        angular.element(document.querySelector(".chart-form-wrapper")).toggleClass("visible")
                    }
                }],
                template: a("+NFT")
            }
        }
        i.$inject = ["chartApiService", "technicalChartConfig", "_", "technicalChartLabels", "technicalChartFields", "quotesService", "technicalChartMappingService", "technicalChartDefaultSettings", "$rootScope", "utils", "$window", "$timeout", "$location", "technicalChartSettingsService", "chartTemplateUrlIgnoredFields", "technicalChartDrawService", "authService", "technicalChartImageStorage", "technicalChartValidationService", "$q", "apiFactory", "myChartsApiService", "userChartTabService", "events", "technicalChartStateStorage", "dashboardSettingsService", "dashboardSymbolStorage"], e.exports = i
    },
    kbtF: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                getModule: function(i) {
                    return e.call(a.route(config.routes["module.html.content"], i), t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils"], e.exports = i
    },
    "kbw+": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                link: function(e, t) {
                    t.removeAttr("disabled")
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    kcEl: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                scope: {},
                template: a("HQSC"),
                link: function(a, r, o) {
                    a.symbol = o.symbol, a.loading = !0, a.setColor = i.setColor, e.updateInlineDataForSymbol(a.symbol, {
                        extraFields: "highPrice1y,lowPrice1y,weightedAlpha"
                    }).then(function(e) {
                        a.loading = !1, a.highPrice1y = e.data[0].highPrice1y, a.lowPrice1y = e.data[0].lowPrice1y, a.weightedAlpha = e.data[0].weightedAlpha, a.symbolSector = t.getSector(e.data[0].symbolType)
                    })
                }
            }
        }
        i.$inject = ["bcInlineData", "quotesService", "utils"], e.exports = i
    },
    kcHO: function(e, t, a) {
        "use strict";
        var i = "KeyStatistics";
        angular.module(i, []).directive("keyStatistics", a("Gyv6"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "kg/m": function(e, t) {
        e.exports = '<div class=chart-tools> <a class="chart-tools-icon chart-tools-expand js-popup-chart popup-chart" title="Pop chart out to new window" data-ng-click=openChartInNewWindow() data-ng-show=showExpandLink()> <i class=bc-glyph-long-arrow-ne></i> </a> </div>'
    },
    khNu: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.datatable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: []
                    },
                    links: ["symbolName"],
                    colorize: ["priceChange"]
                },
                callback: function(e) {
                    delete e.meta.field.shortName.symbol, delete e.meta.field.shortName.symbolType, delete e.meta.field.shortName.symbolCode, e.data.forEach(function(e) {
                        e.symbolSector = t.getSector(e.symbolType), "SZU16" === e.symbol && (e.symbolName = "Swiss Index")
                    }), this.content = e
                }
            }
        }
        i.$inject = ["$scope", "quotesService"], e.exports = i
    },
    kiY7: function(e, t, a) {
        "use strict";
        e.exports = [{
            value: "ZB*1 - ZN*1",
            label: "NOB Spread"
        }, {
            value: "-3 * CL*1 + 2 * 42 * RB*1 + 42 * HO*1",
            label: "Crack 321 Spread"
        }, {
            value: "-2 * CL*1 + 2 * 42 * RB*1 + 42 * HO*1",
            label: "Crack 221 Spread"
        }, {
            value: "6* LE*1 - 3 * GF*1 - 2 * ZC*1",
            label: "Cattle Crush"
        }, {
            value: "ZC*1-ZC*2",
            label: "Corn Nearby 1-2 Spread"
        }, {
            value: "ZC*1-ZC*3",
            label: "Corn Nearby 1-3 Spread"
        }, {
            value: "ZC*2-ZC*3",
            label: "Corn Nearby 2-3 Spread"
        }, {
            value: "ZC*1-2*ZC*2+ZC*3",
            label: "Corn Butterfly Spread"
        }, {
            value: "ZS*1-2*ZS*2+ZS*3",
            label: "Soybean Butterfly Spread"
        }, {
            value: "-ZS*1+2.2*ZM*1+11*ZL*1",
            label: "Soybean Crush Spread"
        }, {
            value: "ZW*1-ZW*2",
            label: "Wheat Nearby 1-2 Spread"
        }, {
            value: "ZW*1-ZW*3",
            label: "Wheat Nearby 1-3 Spread"
        }, {
            value: "ZW*2-ZW*3",
            label: "Wheat Nearby 2-3 Spread"
        }, {
            value: "ZW*1-2*ZW*2+ZW*3",
            label: "Wheat Butterfly Spread"
        }]
    },
    klQE: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n = t.API_URL + "/interactive-chart-states";
            return {
                saveChartDataForSymbol: function(t, r) {
                    return e.call(n + "/" + i.getUserData().id + "/" + t, a.PUT, r).then(function(e) {
                        return e
                    }, function(e) {
                        throw new Error(e)
                    })
                },
                loadChartDataForSymbol: function(t) {
                    return e.call(n + "/" + i.getUserData().id + "/" + t, a.GET).then(function(e) {
                        return e
                    }, function(e) {
                        throw new Error(e)
                    })
                },
                deleteChartDataForSymbol: function(t) {
                    return e.call(n + "/" + i.getUserData().id + "/" + t, a.DELETE).then(function(e) {
                        return e
                    }, function(e) {
                        throw new Error(e)
                    })
                },
                saveChartDataForSymbolAnon: function(t, i) {
                    return e.call(r.route(o.config.routes["api.post.interactive-chart-states-anon"], {
                        symbol: t
                    }), a.POST, i).then(function(e) {
                        return e
                    }, function(e) {
                        throw new Error(e)
                    })
                },
                loadChartDataForSymbolAnon: function(t) {
                    return e.call(r.route(o.config.routes["api.get.interactive-chart-states-anon"], {
                        id: t
                    }), a.GET).then(function(e) {
                        return e
                    }, function(e) {
                        throw new Error(e)
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "apiConfig", "httpVerbs", "authService", "utils", "$window"], e.exports = i
    },
    knAm: function(e, t) {
        e.exports = '<div class=bc-change-symbol> <div class=bc-symbol__table> <div class=bc-symbol__table-row> <div class=bc-symbol__table-cell> <label>Symbol:</label> </div> <div class="clear-button-wrapper bc-symbol__table-cell last"> <input data-ng-class="{\'invalid\': invalid}" type=text data-barchart-clear-input data-ng-model=newSymbol data-ng-change=clearError() data-bc-symbol-autocomplete data-autocomplete-callback=changeSymbol() /> </div> <div class="bc-symbol__table-cell icon"> <span class=bc-symbol__dashboard-tutorial data-bc-video-tutorial-modal data-title="Dashboard tutorial" data-link-mp4=https://s3.amazonaws.com/videos1.aws.barchart.com/barchart.com/education/07-25-2018%20Exploring%20Barchart%20Dashboard.mp4> <i title="View a Tutorial" class=bc-glyph-film></i> </span> </div> <div class="bc-symbol__table-cell icon"> <span class=page-title__help-trigger> <i title="View Page Help" class="bc-glyph-question-circle-o page-title__show-help" data-toggle-extended-help></i> </span> </div> </div> <div class=bc-symbol__table-row data-ng-if=invalid> <div class=bc-symbol__table-cell></div> <div class="bc-symbol__table-cell error-message"> <span>Invalid symbol.</span> </div> </div> </div> </div> '
    },
    kntP: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    content: "="
                },
                controller: ["$scope", function(e) {
                    var a = angular.copy(t.investment),
                        i = {
                            "Strong Buy": "#007D34",
                            Buy: "#409D67",
                            "Weak Buy": "#80BE99",
                            Hold: "#5900B2",
                            "Strong Sell": "#C40000",
                            Sell: "#D34040",
                            "Weak Sell": "#E28080"
                        };
                    a.options.tooltip = {
                        useHTML: !0,
                        formatter: function() {
                            return this.point.description
                        }
                    }, e.config = a, e.$watch("content", function(t) {
                        var r;
                        t && (a.series[0].data = [], Object.keys(i).forEach(function(t) {
                            if (e.content[t]) {
                                r = i[t] || !1;
                                var o = "";
                                Object.keys(e.content[t].symbols).forEach(function(a) {
                                    "N/A" !== e.content[t].symbols[a].label && (o += "<b>" + a + "</b>: " + e.content[t].symbols[a].label + "</br>")
                                }), o && a.series[0].data.push({
                                    name: t,
                                    y: e.content[t].percent,
                                    description: o,
                                    color: r
                                })
                            }
                        }))
                    })
                }],
                template: a("TKBx")
            }
        }
        i.$inject = ["highchartsNG", "chartsSettings", "utils"], e.exports = i
    },
    kqag: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    tooltipData: "=",
                    tooltipBaseData: "="
                },
                controller: [function() {}],
                controllerAs: "$ctrl",
                template: a("HsRP")
            }
        }
    },
    ksJV: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a, i) {
                    var r = i.secondSubsLevel || !1;
                    !e.isLoggedIn() || r && 2 !== e.getUserData().subscription || a.addClass("hide")
                }
            }
        }
        i.$inject = ["authService"], e.exports = i
    },
    "kt/d": function(e, t, a) {
        "use strict";
        var i = "barchartEodWatchlistEmails";
        angular.module(i, []).controller(i + ".barchartEodWatchlistEmailsCtrl", a("zyNF")).directive("checkPremierUser", a("2IFW")).factory("barchartEodWatchlistEmailsApiFactory", a("pIg7"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    kwiA: function(e, t, a) {
        "use strict";
        e.exports = {
            traits: {
                line: {
                    color: "#000",
                    width: 1,
                    dashStyle: "Solid"
                },
                fill: {
                    color: "#000",
                    opacity: 1
                },
                showPrices: !1,
                showTrendline: !0,
                showBarCount: !1,
                extendPoint1: !1,
                extendPoint2: !1,
                showTimestamps: !0,
                marker: {
                    lineMarkerStart: !1,
                    lineMarkerEnd: !1
                },
                factors: [{
                    shown: !1,
                    value: -.618
                }, {
                    shown: !1,
                    value: -.236
                }, {
                    shown: !0,
                    value: 0
                }, {
                    shown: !0,
                    value: .236
                }, {
                    shown: !0,
                    value: .382
                }, {
                    shown: !0,
                    value: .5
                }, {
                    shown: !0,
                    value: .618
                }, {
                    shown: !0,
                    value: .786
                }, {
                    shown: !0,
                    value: 1
                }, {
                    shown: !1,
                    value: 1.272
                }, {
                    shown: !1,
                    value: 1.618
                }, {
                    shown: !1,
                    value: 2.618
                }]
            },
            lineTypes: [{
                label: "Solid",
                value: "Solid"
            }, {
                label: "Short Dash",
                value: "ShortDash"
            }, {
                label: "Short Dot",
                value: "ShortDot"
            }, {
                label: "Short Dash Dot",
                value: "ShortDashDot"
            }, {
                label: "Short Dash Dot Dot",
                value: "ShortDashDotDot"
            }, {
                label: "Dot",
                value: "Dot"
            }, {
                label: "Dash",
                value: "Dash"
            }, {
                label: "Long Dash",
                value: "LongDash"
            }, {
                label: "Dash Dot",
                value: "DashDot"
            }, {
                label: "Long Dash Dot",
                value: "LongDashDot"
            }],
            fillTransparencies: [{
                label: "0% Trans",
                value: 1
            }, {
                label: "10% Trans",
                value: .9
            }, {
                label: "20% Trans",
                value: .8
            }, {
                label: "30% Trans",
                value: .7
            }, {
                label: "40% Trans",
                value: .6
            }, {
                label: "50% Trans",
                value: .5
            }, {
                label: "60% Trans",
                value: .4
            }, {
                label: "70% Trans",
                value: .3
            }, {
                label: "80% Trans",
                value: .2
            }, {
                label: "90% Trans",
                value: .1
            }, {
                label: "100% Trans",
                value: 0
            }],
            annotationNames: {
                Line: "Trendline",
                Ellipse: "Ellipse",
                Rectangle: "Rectangle",
                Text: "Text",
                FibonacciRetracement: "Fibonacci Retracement",
                FibonacciFan: "Fibonacci Fan",
                SpeedResistanceArcs: "Resistance Arcs",
                FibonacciTimeZones: "Fibonacci Time Zones",
                SymbolArrowUp: "Arrow Up Symbol",
                SymbolArrowDown: "Arrow Down Symbol",
                SymbolArrowRight: "Arrow Right Symbol",
                SymbolArrowLeft: "Arrow Left Symbol",
                SymbolArcUp: "Arc Up Symbol",
                SymbolArcDown: "Arc Down Symbol",
                SymbolThumbsUp: "Thumbs Up Symbol",
                SymbolThumbsDown: "Thumbs Down Symbol",
                SymbolOne: "One Symbol",
                SymbolTwo: "Two Symbol",
                SymbolThree: "Three Symbol",
                SymbolQuestion: "Question Symbol",
                SymbolFishHook: "Fish Hook",
                GannFan: "Gann Fan",
                SpeedResistanceFan: "Speed Resistance Fan",
                FibonacciArcs: "Fibonacci Arcs",
                AndrewsPitchfork: "Andrews Pitchfork",
                TrendChannel: "Trend Channel"
            }
        }
    },
    "l+Gm": function(e, t, a) {
        "use strict";
        e.exports = {
            FLIPCHART_MAPPING: {
                1: "equities",
                6: "equities",
                7: "equities",
                2: "futures",
                9: "forexIndex",
                10: "forexIndex",
                5: "fundsSectorsRates",
                8: "fundsSectorsRates",
                15: "fundsSectorsRates",
                3: "fundsSectorsRates",
                4: "fundsSectorsRates",
                11: "fundsSectorsRates",
                16: "fundsSectorsRates",
                17: "fundsSectorsRates"
            },
            FLIPCHART_SETTINGS: {
                equities: {
                    data: "DO",
                    plot: "BAR",
                    volume: "total"
                },
                futures: {
                    data: "DO",
                    plot: "BAR",
                    volume: "total"
                },
                forexIndex: {
                    data: "DO",
                    plot: "BAR",
                    volume: "total"
                },
                fundsSectorsRates: {
                    data: "DO",
                    plot: "LINE",
                    volume: "0"
                }
            }
        }
    },
    l0cF: function(e, t, a) {
        "use strict";
        e.exports = {
            periodSizes: {
                P1D: 5,
                P2D: 15,
                P3D: 15,
                P4D: 15,
                P5D: 15,
                P10D: 60,
                P15D: 90,
                P20D: 90,
                P25D: 120,
                P1M: 120,
                CUSTOM: 15
            }
        }
    },
    l5hF: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c) {
            e.expressions = o.getExpressions(), e.createNewExpression = function() {
                a.expressionModal(l, c), t.dismiss()
            }, e.editExpression = function(e, i) {
                a.expressionModal(l, c, e, i), t.dismiss()
            }, e.removeExpression = function(e, a) {
                if (e.main) {
                    n.setChartMainPlotExpression(null);
                    var l = n.getChartSettings().barType;
                    s.type = null, o.restoreCurrentSymbolPlot().render(), o.changeCurveStyle(l).render(), r.$broadcast("interactiveChartExpressionRemoved")
                } else o.removeExpression(a);
                i.save(), t.dismiss()
            }, e.modalDismiss = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "interactiveChartModals", "interactiveChartStateService", "$rootScope", "interactiveChartApi", "interactiveChartSettings", "interactiveChartFixedBarType", "fullScreen", "isDashboardMode"], e.exports = i
    },
    "l75+": function(e, t, a) {
        "use strict";
        angular.module("Screener", []).run(a("WGn9")).constant("screenerDirectiveMapper", a("hXVP")).constant("screenerTypes", a("AxOv")).constant("screenerDatatableConfig", a("cuNM")).constant("screenerOptionsDatatableConfig", a("A4RV")).constant("screenerOptionsApiConfig", a("ZVZX")).constant("screenerFilterRegisters", a("UhhH")).controller("Screener.ModalSaveScreenerCtrl", a("WjxX")).controller("Screener.ModalSaveAsWatchlictCtrl", a("Lshu")).controller("Screener.ModalClearScreenerCtrl", a("oYSG")).filter("screenerIgnoreOptionsFilter", a("csI6")).factory("ScreenerModel", a("paPO")).factory("screenerApiService", a("hmd3")).factory("screenerQueryService", a("0AMl")).factory("screenerParseService", a("MB2a")).factory("screenerFilterService", a("nk2z")).service("screenerPermissionService", a("8hFR")).service("screenerModifierListener", a("tZQo")).service("screenersModifierFilterService", a("2F3v")).service("screenerCurrentConfigService", a("4JPv")).directive("screener", a("cQku")).directive("optionsScreener", a("fTBk")).directive("screenerSetFilters", a("pJZt")).directive("screenerOptionsSetFilters", a("14Ns")).directive("screenerLoadScreenerToolbar", a("drcF")).directive("screenerOptionsLoadScreenerToolbar", a("jHuI")).directive("screenerSelectMarket", a("sWk2")).directive("screenerRowFilter", a("rOA4")).directive("screenerTotalMatch", a("HD4v")).directive("screenerResetScreeeners", a("gN6m")).directive("screenerSavedScreeners", a("wUAA")).directive("screenerSaveScreener", a("Pizc")).directive("screenerOptionsSelect", a("Tu+W")).directive("screenerFilterDisplay", a("FSE1")).directive("screenerRange", a("9Ybc")).directive("screenerRangeDate", a("fii9")).directive("screenerValue", a("yMUY")).directive("screenerRangeHelper", a("+JDX")).directive("screenerRangeFilter", a("c6f/")).directive("screenerRangeDateFilter", a("dORO")).directive("screenerRangeTimeframeFilter", a("zRmJ")).directive("screenerIndicatorFilter", a("vsoW")).directive("screenerContainFilter", a("rBgr")).directive("screenerStaticFilter", a("9E0I")).directive("screenerCompareFilter", a("BPAT")).directive("screenerRangeCustomDateFilter", a("PL0M")).directive("screenerOpinionFilter", a("xhG0")).directive("screenerPercentFromFilter", a("rB8e")).directive("screenerExchangeFilter", a("jrdO")).directive("screenerCheckboxFilter", a("bKSA")).directive("screenerRadioFilter", a("VOGU")).directive("screenerOptionsExpirationFilter", a("BIzg")).directive("screenerSymbolFilter", a("owxm")).directive("screenerRangeExpirationFilter", a("a7nl")).directive("screenerAddFilterToolbar", a("ri2E")).directive("screenerOptionsAddFilterToolbar", a("qKQd"));
        e.exports = {
            enable: !0,
            name: "Screener"
        }
    },
    lB6g: function(e, t, a) {
        "use strict";

        function i(e) {
            function t(e) {
                return isNaN(e) ? e : +e
            }

            function a(e) {
                return Array.isArray(e) ? e[0] : e
            }

            function i(e) {
                return new Date(e)
            }
            return {
                sort: function(r, o, n, s) {
                    var l;
                    return l = !0 === s ? function(e) {
                        var r;
                        return r = "tradeTime" === e ? i : ~e.search(/opinion/i) ? a : t,
                            function(t) {
                                return t.hasOwnProperty("raw") ? r(t.raw[e]) : r(t[e])
                            }
                    }(r) : function(e) {
                        var a;
                        return a = "tradeTime" === e ? i : t,
                            function(t) {
                                return a(t[e])
                            }
                    }(r), e("orderBy")(o, l, n)
                }
            }
        }
        i.$inject = ["$filter"], e.exports = i
    },
    lC8T: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i, r) {
                    function o(e) {
                        var t = angular.element(e[0].getElementsByClassName("group")),
                            a = e[0].querySelector(".group-inner");
                        t.length && angular.forEach(t, function(e) {
                            var t = angular.element(e);
                            t.hasClass("visible") && o(t)
                        }), e.removeClass("visible"), a.style.display = "none"
                    }

                    function n(t) {
                        var a = t.parent().children(),
                            r = t[0],
                            n = r.querySelector(".group-inner");
                        angular.forEach(a, function(e) {
                            var t = angular.element(e);
                            t.hasClass("visible") && o(t)
                        }), e(n, "fadeIn", {
                            duration: 200
                        }), e(r, "scroll", {
                            container: i[0],
                            duration: 100
                        }), t.addClass("visible")
                    }
                    var s = angular.element(i[0].getElementsByClassName("group-toggle")),
                        l = angular.element(i[0].getElementsByClassName("group"));
                    angular.forEach(l, function(e) {
                        var t = angular.element(e);
                        t.hasClass("visible-initial") && (n(t), t.removeClass("visible-initial"))
                    }), angular.forEach(s, function(e) {
                        angular.element(e).on("click", function() {
                            var e = angular.element(this.parentNode);
                            e.hasClass("visible") ? o(e) : n(e)
                        })
                    });
                    var c = angular.element(document.querySelector(".off-canvas-wrap"));
                    t.register("only screen and (max-width: 767px)", {
                        unmatch: function() {
                            c.removeClass("move-left move-right")
                        }
                    }), angular.element(i[0].querySelectorAll("a")).on("click", function() {
                        c.removeClass("move-left move-right")
                    })
                }
            }
        }
        i.$inject = ["Velocity", "enquire"], e.exports = i
    },
    lL7Y: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "barchartTableQuickLinksService", "authService", "watchlistFormModalService", "portfolioModalFactory", "apiFactory", "$rootScope", "alertsSymbolDataFactory", "alertsModalFactory", "alertManagerService", "utils", "limitsService", "Notification", "watchlistEditApiFactory", "_", "$q", "portfolioApiFactory", function(e, t, a, i, r, o, n, s, l, c, d, u, p, m, h, g, f) {
                e.links = [], e.renderWatchlist = !1, e.guid = d.guid();
                var b = {
                    symbols: e.symbol,
                    fields: "symbol,symbolType,symbolName,lastPrice,priceChange,percentChange,symbolCode"
                };
                e.initAlertsModal = function(e) {
                    b.symbols = e, c.retrieveAlerts().then(function(e) {
                        if (u.alerts(e.length)) return !1;
                        o.query(b, "/quotes/get").then(function(e) {
                            s.setData(e.data[0]);
                            var t = n.$on("getSymbolData", function() {
                                n.$broadcast("setSymbolData", s.getData()), t()
                            });
                            l.openModalSymbolAlertsList().opened.then(function() {
                                c.subscribeAlerts()
                            })
                        })
                    })
                }, e.$on("tableHasBeenSorted", function() {
                    setTimeout(function() {
                        w(), y(), e.$digest()
                    }, 0)
                }), e.isLoggedIn = a.isLoggedIn();
                var v = function() {
                    var t = g.defer(),
                        a = {
                            symbol: e.symbol,
                            fields: "symbolName"
                        };
                    return o.query(a, "/quotes/get").then(function(e) {
                        e.data && e.data[0] ? t.resolve(e.data[0].symbolName) : t.resolve(!1)
                    }), t.promise
                };

                function y() {
                    e.links = [
                        [],
                        []
                    ];
                    var a = [],
                        i = e.showExpandedLink ? 1 : 0,
                        r = 3;
                    a.push(t.getOverviewLink(e.symbol, e.symbolType)), a.push(t.getChartLink(e.symbol, e.symbolType)), e.options && a.push(t.getOptionsQuotesLink(e.symbol, e.symbolType)), 2 === Number(e.symbolType) && e.category && e.symbolName && a.push(t.getAllContractsLink(e.symbol, e.category, e.symbolName)), e.isSpread || e.isFutureOption || 12 === Number(e.symbolType) || 13 === Number(e.symbolType) || a.push(t.getOpinionLink(e.symbol, e.symbolType)), e.additionalLinks && e.additionalLinks.length && e.additionalLinks.forEach(function(i) {
                        a.push(t.getLink(e.symbol, e.symbolType, i))
                    }), a.forEach(function(t) {
                        var a = i <= r ? 0 : 1;
                        e.links[a].push(t), 0 === a ? i++ : r++
                    })
                }

                function w() {
                    e.symbol = function() {
                        var t = "left" === e.symbolDirection;
                        if (e.datatableOptions.spreadSymbol) {
                            var a = "_S_" + e.row.spreadType + "_" + e.row.leg1 + "_" + e.row.leg2;
                            return e.row.leg3 && (a += "_" + e.row.leg3), e.row.leg4 && (a += "_" + e.row.leg4), a
                        }
                        return e.datatableOptions.futureOptions ? e.row.longSymbol : e.row.longSymbol_right && !t ? e.row.longSymbol_right : e.row.longSymbol_left && t ? e.row.longSymbol_left : e.row.symbol || e.row.baseSymbol
                    }(), e.symbolName = e.row["symbolName_" + e.symbolDirection] || e.row.symbolName, e.datatableOptions.advancedSearch && e.row.raw && (e.symbolName = e.row.raw.symbolName), e.symbolType = e.row.symbolType || e.row.baseSymbolType || e.row["symbolType_" + e.symbolDirection], e.additionalLinks = e.datatableOptions.quickLinksAdditionalLinks || !1, e.isSpread = e.datatableOptions.spreadSymbol || !1, e.isFutureOption = e.datatableOptions.futureOptions || !1, e.watchlist = e.datatableOptions.watchlist || !1, e.category = e.row && e.row.category, e.options = e.row.raw && e.row.raw.hasOptions || e.datatableOptions.showOptionsLink, e.showExpandedLink = void 0 === e.datatableOptions.showExpandLink || e.datatableOptions.showExpandLink
                }
                e.addToWatchlist = function(e, t) {
                    t ? i.addToWatchlist(e, t) : v().then(function(t) {
                        i.addToWatchlist(e, t)
                    })
                }, e.addToPortfolio = function(e, t) {
                    t ? r.showPortfolioListForSymbol(e, t) : v().then(function(t) {
                        r.showPortfolioListForSymbol(e, t)
                    })
                }, e.removeFromWatchlist = function(t, i) {
                    var r = h.find(a.getUserData().watchlists, {
                        id: parseInt(i)
                    });
                    if (h.remove(r.symbols, function(e) {
                            return e === t
                        }), e.meta.symbol && e.meta.symbol.normalized) {
                        var o = [];
                        Object.keys(e.meta.symbol.normalized).forEach(function(a) {
                            a !== t && e.meta.symbol.normalized[a] === t && o.push(a)
                        }), o && h.remove(r.symbols, function(e) {
                            return -1 !== o.indexOf(e)
                        })
                    }
                    r.symbols.length ? m.updateWatchlistSymbols(r.symbols, r.id).then(function(e) {
                        e.error && e.error.message ? p.error("Cannot delete symbol from watchlist. " + e.error.message.symbol[0]) : (a.setWatchlists(e.data), n.$broadcast("symbolAddedToWatchlist", {
                            symbols: r.symbols
                        }), p.success("Symbol " + t + " has been removed from the Watchlist."))
                    }) : p.error("Symbol cannot be removed as a watchlist must have at least one symbol. Delete the watchlist instead.")
                }, e.removeFromPortfolio = function(t) {
                    r.deletePortfolioConfirm().result.then(function() {
                        f.deleteTransaction(e.datatableOptions.portfolioId, t).then(function() {
                            n.$broadcast("portfolioTransactionUpdated")
                        })
                    })
                }, e.$watch("symbol", function(e, t) {
                    e !== t && (w(), y())
                }), w(), y()
            }];
            return {
                restrict: "E",
                scope: {
                    symbolDirection: "=",
                    row: "=",
                    meta: "=",
                    datatableOptions: "=",
                    index: "&",
                    tableId: "=",
                    total: "=",
                    expandedSymbol: "=",
                    expandRow: "&",
                    collapseRow: "&"
                },
                replace: !0,
                controller: e,
                link: function(e, t) {
                    e.$watch(function() {
                        return angular.element(t[0].childNodes[1]).attr("class")
                    }, function() {
                        angular.element(t[0].childNodes[1]).hasClass("expanded") && (e.renderWatchlist = !0)
                    })
                },
                template: a("TVp1")
            }
        }
        i.$inject = [], e.exports = i
    },
    lQPl: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {
                    url: "=",
                    title: "@",
                    description: "@",
                    image: "@",
                    redirectUrl: "@"
                },
                require: "^bcSocialShare",
                link: function(a, i, r, o) {
                    if (o) {
                        var n, s, l = Object.create(t.twitter.win),
                            c = a.image || e.location.origin + t.defaultNewsImage;
                        a.description && (n = o.getDescription(a.description), ("true" === a.trimDesc || a.description.length > o.descLimit) && (n = o.trimDesc(n))), s = a.url ? a.url : o.getShareLinkPartialEncoded({
                            title: a.title,
                            description: n,
                            image: c,
                            redirectUrl: a.redirectUrl || e.location.href
                        });
                        var d = {
                            winUrl: l.url,
                            url: s,
                            title: a.title && a.title.length > 90 ? a.title.substring(0, 90) + "..." : a.title
                        };
                        l.url = o.getLink(d), i.on("click", u), a.$on("$destroy", function() {
                            i.off("click", u)
                        })
                    }

                    function u() {
                        window.dataLayer.push({
                            event: "socialInteraction",
                            socialNetwork: "Twitter",
                            socialAction: "Share",
                            socialTarget: s
                        }), o.share(l)
                    }
                }
            }
        }
        i.$inject = ["$window", "bcShareConfig"], e.exports = i
    },
    lStE: function(e, t) {
        e.exports = '<div class=ref-block> <h2 data-ng-show=!sales class=ref-header>[[ header ]]</h2> <div class=ref-text> <p class=ref-text-pharagraph data-ng-bind-html=content></p> </div> <p class=button-area data-ng-if=!sales> <a href="" class="bc-button white-with-border login-button" data-ng-hide=premierLink data-ng-click=goToRegister()>Create a free account</a> <a class="bc-button white-with-border login-button" target=_self data-ng-href="[[ ::routes[\'my.barchartPremier\'] ]]" data-ng-show=premierLink>Start a free trial</a> </p> </div>'
    },
    lXe7: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                storeExpressionForSymbol: function(t, a, i) {
                    e.set("interactiveChartExpression." + t, a), e.set("interactiveChartExpressionConfig." + t, JSON.stringify(i))
                },
                extractExpressionForSymbol: function(t) {
                    var a = e.get("interactiveChartExpression." + t);
                    e.remove("interactiveChartExpression." + t);
                    var i = e.get("interactiveChartExpressionConfig." + t);
                    return e.remove("interactiveChartExpressionConfig." + t), {
                        expression: a,
                        config: i ? JSON.parse(i) : null
                    }
                }
            }
        }
        i.$inject = ["localStorageService"], e.exports = i
    },
    lY1j: function(e, t, a) {
        "use strict";
        var i = "MyBarchart.CustomChartTemplates";
        angular.module(i, []).constant("chartTemplateUrlIgnoredFields", a("vusA")).factory("CustomChartTemplatesApiFactory", a("SPLB")).factory("interactiveChartTemplateApiFactory", a("uNz1")).service("CustomChartTemplatesService", a("GBT0")).service("interactiveChartTemplateModals", a("bI3r")).service("interactiveChartTemplateDefinitionService", a("zxxL")).directive("customChartTemplateForm", a("TKv1")).directive("customChartTemplatesList", a("uxEa")).directive("interactiveChartTemplateForm", a("TJpU")).directive("interactiveChartTemplatesList", a("5TNh")).controller(i + ".CustomChartTemplatesListCtrl", a("oux0")).controller("interactiveChartTemplateModalFundamentalCtrl", a("9j6n")).controller("interactiveChartTemplatesListCtrl", a("wavG"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    lbrI: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            e.dataLoading = !0, e.caption = {};
            var o = !1;
            t.getAllPortfoliosTotals().then(function(t) {
                e.portfolios = t.data, e.treePortfolios = angular.copy(e.portfolios), e.dataLoading = !1
            }), e.setColor = function(e) {
                return a.setColor(e)
            }, e.removePortfolio = function(t) {
                e.pendingPortfolioDelete = t
            }, e.removePortfolioCancel = function() {
                e.pendingPortfolioDelete = null
            }, e.removePortfolioConfirm = function(t) {
                var a = e.treePortfolios.splice(t, 1);
                a && (o = a[0].caption), e.save()
            }, e.save = function(a) {
                e.errors = {};
                var n = i.pluck(e.treePortfolios, "caption"),
                    s = i.filter(n, function(e, t, a) {
                        return i.includes(a, e, t + 1)
                    });
                if (Object.keys(e.treePortfolios).forEach(function(t) {
                        var a = e.editPortfolioForm["caption" + e.treePortfolios[t].id];
                        s.length && -1 !== s.indexOf(e.treePortfolios[t].caption) ? a.$setValidity("uniqueName", !1) : a.$setValidity("uniqueName", !0)
                    }), e.editPortfolioForm.$invalid) Object.keys(e.editPortfolioForm.$error).forEach(function(t) {
                    "uniqueName" !== t && "maxlength" !== t && "required" !== t && (e.errors[t] = !0)
                });
                else {
                    var l, c = i.pluck(e.treePortfolios, "id"),
                        d = i.pluck(e.portfolios, "id"),
                        u = {};
                    e.treePortfolios.forEach(function(e) {
                        u[e.id] = e.caption
                    }), l = i.difference(d, c), t.organizeAllPortfolios(c, l, u).then(function(t) {
                        t.data && t.data && t.data.success ? a ? r.success("Portfolio name has been changed.") : o && (r.success("Portfolio " + o + " has been deleted."), o = !1) : e.errors.bad_request = !0, e.portfolios = angular.copy(e.treePortfolios)
                    }, function(t) {
                        t && t.error && t.error.message ? e.errors.bad_request = t.error.message : e.errors.bad_request = !0
                    })
                }
            }, e.moveSymbolTop = function(t) {
                e.treePortfolios.splice(0, 0, e.treePortfolios.splice(t, 1)[0]), e.save()
            }, e.sortOptions = {
                dragStop: function() {
                    e.save()
                }
            }, e.sortRows = function() {
                e.treePortfolios = i.sortBy(e.treePortfolios, function(e) {
                    return e.caption.toLowerCase()
                }, ["asc"]), e.save(), e.sortOrder = ""
            }
        }
        i.$inject = ["$scope", "portfolioApiFactory", "utils", "_", "Notification"], e.exports = i
    },
    lcp1: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-ads-modal"> <input type=hidden /> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <div class=bc-ads-modal__header> <i class=bc-glyph-exclamation-circle></i> <h2>Ad Blocker Detected</h2> </div> <div class=bc-ads-modal__content> <p> We\'ve detected that you\'re using an Ad Blocker in your browser.</p> <p> The Barchart.com website is funded soley by the revenue generated through advertisements and our no-ads <a data-ng-click=redirect()>Premier subscription</a>. <br/> We are committed to providing you the industry\'s best content <br/> and trading tools, but cannot do so without your help. </p> <br/> <p class=bold>Please disable your Ad Blocker for Barchart.com</p> <div class="control-buttons row"> <div class="medium-6 column"> <div class="button-wrapper text-center"> <span>Turn off Ad Blocker</span> <button class="btn bc-button bc-ads-modal__button" data-ng-click=close()>Yes, I\'ll Whitelist</button> </div> </div> <div class="medium-6 column"> <div class="button-wrapper text-center"> <span>Try Ad-Free Barchart Premier</span> <a class="btn bc-button bc-ads-modal__button trial" data-ng-click=redirect()>Free 30-Day Trial</a> </div> </div> </div> </div> </div> '
    },
    li66: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                restrict: "A",
                scope: {
                    email: "@"
                },
                link: function(i, r) {
                    function o(r) {
                        r.preventDefault(), e.call("/users/email/resend", t.POST, {
                            email: i.email,
                            activate: !0
                        }).then(function(e) {
                            !0 === e.success && a.success("A verification email has been sent to " + i.email + ".")
                        }, function() {
                            a.success("Sorry, something went wrong. Please try again")
                        })
                    }
                    r.on("click", o), i.$on("$destroy", function() {
                        r.off("click", o)
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "Notification"], e.exports = i
    },
    lm2t: function(e, t) {
        e.exports = '<div class="bc-screener__toolbar top-toolbar clearfix"> <span class="bc-screener__toolbar-title text-uppercase"> Load a screener: </span> <screener-options-select></screener-options-select> <screener-saved-screeners data-saved-screener=$ctrl.savedScreener data-type="[[ ::$ctrl.type ]]"></screener-saved-screeners> <div class=screener-buttons-wrapper> <screener-reset-screeeners data-default-filter=options.daysToExpiration></screener-reset-screeeners> </div> </div>'
    },
    lnkH: function(e, t) {
        e.exports = '<ul data-bc-social-share> <li class=facebook title="Share on Facebook"> <a data-bc-facebook-share data-url=$ctrl.url> <i class=bc-glyph-facebook></i> </a> </li> <li class=twitter title="Share on Twitter"> <a data-bc-twitter-share data-title=$ctrl.title data-url=$ctrl.url> <i class=bc-glyph-twitter></i> </a> </li> <li class=linkedin title="Share on LinkedIn"> <a data-bc-linkedin-share data-title=$ctrl.title data-description="" data-url=$ctrl.url> <i class=bc-glyph-linkedin></i> </a> </li> <li class=google-plus title="Share on Google+"> <a data-bc-gplus-share data-url=$ctrl.url> <i class=bc-glyph-google-plus></i> </a> </li> <li class=email title="Share via Email"> <a href="mailto:?body=[[ $ctrl.url ]]"> <i class=bc-glyph-envelope-o></i> </a> </li> <li class=print title=Print> <a data-bc-print-share data-container-id="[[ ::$ctrl.containerId ]]"> <i class=bc-glyph-print></i> </a> </li> </ul>'
    },
    lujL: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    user: "="
                },
                controller: ["alertsModalFactory", "alertManagerService", "Notification", "textFactory", "$q", function(e, t, a, i, r) {
                    var o = this;
                    o.openMenu = !1, o.deactivateAll = function() {
                        o.openMenu = !1, e.openConfirmModal("deactivate").result.then(function(e) {
                            "OK" === e.status.toUpperCase() && t.disableAlerts().then(function() {
                                a.success(i("ALERT_DEACTIVATED_SUCCESS"))
                            })
                        })
                    }, o.deleteAll = function() {
                        o.openMenu = !1;
                        var n = [];
                        e.openConfirmModal("deleteAll").result.then(function(e) {
                            "OK" === e.status.toUpperCase() && t.retrieveAlerts().then(function(e) {
                                e.forEach(function(e) {
                                    n.push(t.deleteAlert(e))
                                }), r.all(n).then(function() {
                                    a.success(i("ALERT_DELETE_ALL"))
                                })
                            })
                        })
                    }, o.deleteInactive = function() {
                        o.openMenu = !1;
                        var n = [];
                        e.openConfirmModal("deleteInactive").result.then(function(e) {
                            "OK" === e.status.toUpperCase() && t.retrieveAlerts().then(function(e) {
                                e.forEach(function(e) {
                                    "Inactive" === e.alert_state && n.push(t.deleteAlert(e))
                                }), r.all(n).then(function() {
                                    a.success(i("ALERT_DEACTIVATED_DELETE"))
                                })
                            })
                        })
                    }, o.showMenu = function() {
                        o.openMenu = !o.openMenu
                    }
                }],
                controllerAs: "$ctrl",
                template: a("ugIc")
            }
        }
    },
    "m+VR": function(e, t, a) {
        "use strict";
        var i = "ActivityPerExchange";
        angular.module(i, []).controller(i + ".ActivityPerExchangeCtrl", a("ngDA")).factory("ActivityPerExchangeApiFactory", a("h9cY"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    "m+k0": function(e, t) {
        e.exports = '<div class=modal-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=cancel()></i> </div> <div class=modal-content-wrapper> <div class=slides-container> <div class=slides> <div class="slide slide-intro"> <h5 class=slide-title>Welcome to the NEW Barchart.com</h5> <p class=slide-description>We\'re excited to introduce you to our new look, including:</p> <div class="features clearfix"> <div class="feature mobile-feature"> <div class=feature-icon> <i class=bc-glyph-mobile></i> </div> <p class=feature-description>Mobile Friendly Layout</p> </div> <div class="feature chart-feature"> <div class=feature-icon> <i class=bc-glyph-bar-chart></i> </div> <p class=feature-description>More Market Content</p> </div> <div class="feature nav-feature"> <div class=feature-icon> <i class=bc-glyph-list-alt></i> </div> <p class=feature-description>Better Navigation</p> </div> </div> <div class=intro-actions> <a target=_self data-ng-href="[[ ::link ]]" class="bc-button start-tutorial">See More</a> <a class=skip-tutorial data-ng-click=skipTutorial()>No Thanks</a> </div> </div> </div> </div> </div> <div class="modal-bg-wrapper show-for-small-only intro-slide"></div>'
    },
    "m/Im": function(e, t, a) {
        "use strict";
        e.exports = {
            usd: [{
                symbol: "$SPX",
                symbolName: "S&P 500 Index",
                color: "#000",
                default: !0
            }, {
                symbol: "$SRCD",
                symbolName: "Cons Discr",
                color: "#007CDA"
            }, {
                symbol: "$SRCS",
                symbolName: "Cons Staples",
                color: "#C828CB"
            }, {
                symbol: "$SREN",
                symbolName: "Energy",
                color: "#FB8A24"
            }, {
                symbol: "$SRFI",
                symbolName: "Financials",
                color: "#6200B5"
            }, {
                symbol: "$SRHC",
                symbolName: "Health Care",
                color: "#FC4233"
            }, {
                symbol: "$SRIN",
                symbolName: "Industrials",
                color: "#00B34F"
            }, {
                symbol: "$SRIT",
                symbolName: "Info Tech",
                color: "#B95B1A"
            }, {
                symbol: "$SRMA",
                symbolName: "Materials",
                color: "#9C5FFD"
            }, {
                symbol: "$SRRE",
                symbolName: "Real Estate",
                color: "#A8A9A9"
            }, {
                symbol: "$SRTS",
                symbolName: "Comm Srvs",
                color: "#00A9A9"
            }, {
                symbol: "$SRUT",
                symbolName: "Utilities",
                color: "#3100FC"
            }],
            cad: [{
                symbol: "$TXCX",
                symbolName: "TSX Comp",
                color: "#000",
                default: !0
            }, {
                symbol: "$TTCD",
                symbolName: "Cons Discr",
                color: "#007CDA"
            }, {
                symbol: "$TTCS",
                symbolName: "Cons Staples",
                color: "#C828CB"
            }, {
                symbol: "$TTEN",
                symbolName: "Energy",
                color: "#FB8A24"
            }, {
                symbol: "$TTFS",
                symbolName: "Financials",
                color: "#6200B5"
            }, {
                symbol: "$TTHC",
                symbolName: "Health Care",
                color: "#FC4233"
            }, {
                symbol: "$TTIN",
                symbolName: "Industrials",
                color: "#00B34F"
            }, {
                symbol: "$TTTK",
                symbolName: "Info Tech",
                color: "#B95B1A"
            }, {
                symbol: "$TTMT",
                symbolName: "Materials",
                color: "#9C5FFD"
            }, {
                symbol: "$TTRE",
                symbolName: "Real Estate",
                color: "#A8A9A9"
            }, {
                symbol: "$TTTS",
                symbolName: "Comm Srvs",
                color: "#00A9A9"
            }, {
                symbol: "$TTUT",
                symbolName: "Utilities",
                color: "#3100FC"
            }]
        }
    },
    mBmo: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            var s = "open",
                l = "closed",
                c = {
                    modal: l,
                    statuses: {
                        STATUS_OPEN: s,
                        STATUS_CLOSED: l
                    }
                },
                d = null,
                u = {
                    login: "login-modal",
                    register: "register-modal",
                    forgot: "forgot-modal",
                    contact: "contact-modal"
                };

            function p(e) {
                i.isPreventNextFiltersEvent(!0), t.setPrevious(), d = null, c.modal = l, r.$broadcast("authModalHasBeenClosed"), "function" == typeof e && e()
            }
            return {
                open: function(t, i, r) {
                    c.modal = s, d && d.close();
                    var o = i ? "auth-modal-ref-class" : "auth-no-modal-ref-class";
                    (d = e.open({
                        template: a("ovRS"),
                        controller: "bcModalLoginCtrl",
                        windowClass: u[t] + " authentication-modal " + o,
                        resolve: {
                            state: function() {
                                return t
                            },
                            ref: function() {
                                return i
                            }
                        }
                    })).result.then(function() {}, function() {
                        p(r)
                    })
                },
                status: c,
                showRef: function(t, i) {
                    c.modal = s, d && d.close(), (d = e.open({
                        template: a("fsaR"),
                        controller: "bcModalRefCtrl",
                        windowClass: "modal-fixed-top",
                        resolve: {
                            ref: function() {
                                return t
                            },
                            isPremier: function() {
                                return i
                            }
                        }
                    })).result.then(function() {}, function() {
                        d = null, c.modal = l
                    })
                },
                showPremier: function(t) {
                    c.modal = s, d && d.close(), (d = e.open({
                        template: a("ENQ2"),
                        controller: "bcPremierModalCtrl",
                        windowClass: "modal-fixed-top bc-premier-modal-wrapper",
                        resolve: {
                            ref: function() {
                                return t
                            }
                        }
                    })).result.then(function() {}, function() {
                        d = null, c.modal = l
                    })
                },
                openForgotModal: function(t, i) {
                    c.modal = s, d && d.close(), (d = e.open({
                        template: a("he3J"),
                        controller: "Authentication.forgotPasswordModalCtrl",
                        controllerAs: "$ctrl",
                        windowClass: "forgot-modal authentication-modal ",
                        resolve: {
                            ref: function() {
                                return t
                            }
                        }
                    })).result.then(function() {}, function() {
                        p(i)
                    })
                },
                openRegisterModal: function(t, i) {
                    c.modal = s, d && d.close(), (d = e.open({
                        template: a("Qyzc"),
                        controller: "Authentication.registerModalCtrl",
                        controllerAs: "$ctrl",
                        windowClass: "register-modal authentication-modal ",
                        resolve: {
                            ref: function() {
                                return t
                            }
                        }
                    })).result.then(function() {}, function() {
                        p(i)
                    })
                },
                openContactSupportModal: function(t, i) {
                    return c.modal = s, d && d.close(), (d = e.open({
                        template: a("E4mO"),
                        controller: "Authentication.contactSupportModalCtrl",
                        controllerAs: "$ctrl",
                        windowClass: "forgot-modal authentication-modal ",
                        resolve: {
                            predefinedEmail: function() {
                                return t
                            },
                            predefinedMessage: function() {
                                return i
                            }
                        }
                    })).result
                }
            }
        }
        i.$inject = ["$modal", "authRouteService", "barchartDatatableFilterUrl", "$rootScope", "$location", "authService"], e.exports = i
    },
    mIaS: function(e, t) {
        e.exports = '<div class=bc-datatable-middleware-wrapper> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div data-ng-show=!dataLoading class=middleware-wrapper> <div class=barchart-content-block data-ng-repeat="(key, item) in data track by $index"> <div class="block-title joined"> <h4> <a data-ng-if=::options.linkTabs target=_self data-ng-href="[[ makeTabLink(key) ]]" data-ng-bind=key></a> <span data-ng-if=::!options.linkTabs data-ng-bind=key></span> </h4> </div> <barchart-datatable data-grouping-key=key data-sticky=sticky data-exclude-last-price=excludeLastPrice data-content=item data-shared-sorting="[[ ::sharedSorting ]]" data-options=datatableOptions[key]> </barchart-datatable> </div> <div class="emptyText bordered" data-ng-if=empty> <div data-ng-bind=options.emptyText></div> </div> </div> </div>'
    },
    mIsD: function(e, t, a) {
        "use strict";
        var i = void 0 !== Barchart.Sms ? new Barchart.Sms.SmsValidationManager("sms-validator.aws.barchart.com", 443, !0) : null,
            r = new Barchart.Alerts.AlertManager(window.config.services.alerts.host, 443, null, !0);
        angular.module("Alerts", []).factory("alertProperties", ["authService", "$window", "ENV", function(e, t, a) {
            var i = {
                states: {
                    INACTIVE: "Inactive",
                    STARTING: "Starting",
                    ACTIVE: "Active",
                    STOPPING: "Stopping",
                    TRIGGERED: "Triggered",
                    ORPHANDED: "Orphaned"
                },
                props: {
                    LAST: 1,
                    CLOSE: 5,
                    FEED: 50
                },
                oprs: {
                    CONTAINED: 10
                },
                defaultTimeZone: "America/Chicago"
            };
            return window.alertProperties = i, e.isLoggedIn() && t.config.useAlerts && r.connect().then(function() {
                r.getProperties().then(function(e) {
                    i.properties = e, "development" === a && (window.alert_properties = {}, e.forEach(function(e) {
                        window.alert_properties[e.property_id] = angular.copy(e)
                    }))
                }), r.getOperators().then(function(e) {
                    i.operators = e
                }), r.getModifiers().then(function(e) {
                    i.modifiers = e
                })
            }), i
        }]).factory("alertManager", function() {
            return r
        }).factory("smsValidationManager", function() {
            return i
        }).controller("alertsSymbolAlertsListCtrl", a("AxA9")).controller("alertsVerifyMobileCtrl", a("Amye")).controller("alertsSymbolAlertsCreateCtrl", a("x33O")).controller("alertsSettingsPageCtrl", a("5+kq")).controller("alertsPageCtrl", a("szoR")).controller("Alerts.modalAlertsRemoveMobileCtrl", a("QTit")).controller("Alerts.SmsTextSettingsModalCtrl", a("zbOV")).controller("Alerts.DeactivateModalCtrl", a("tv2z")).factory("alertsModalFactory", a("tIM6")).service("smsValidationManagerService", a("TaWy")).service("alertsUtilsService", a("KBuA")).factory("alertsSymbolDataFactory", a("3HSm")).factory("alertModelFactory", a("RLW8")).service("alertManagerService", a("0Skw")).service("alertsCurrentAlertService", a("sRqu")).service("alertPrepareService", a("7SND")).directive("bcShowAlertsModal", a("6NZv")).directive("bcShortSymbolInfo", a("jSQs")).directive("alertsSymbolList", a("CkTE")).directive("bcSetAlerts", a("pqMY")).directive("alertsTextSetting", a("gcKr")).directive("alertsDeactivateAll", a("lujL")).directive("advansedAlertSettings", a("QuLI")).directive("newsAlertForm", a("DcdD")).directive("priceAlertSimpleForm", a("4qZ0")).directive("priceAlertPremierForm", a("Z548")).directive("priceAlertConditionForm", a("OluI")).directive("priceAlertNewConditionForm", a("DOC5")).value("alertsPhoneStorage", {
            phone: null
        }).run(a("VybF")), window.alertManager = r, window.validationManager = i, e.exports = {
            enable: !0,
            name: "Alerts"
        }
    },
    mNZ6: function(e, t, a) {
        "use strict";
        e.exports = [{
            key: "250",
            value: "Small"
        }, {
            key: "375",
            value: "Medium"
        }, {
            key: "500",
            value: "Large"
        }, {
            key: "625",
            value: "X-Large"
        }]
    },
    mPiW: function(e, t) {
        e.exports = '<div class="bc-dropdown styled apply-template-drop-down"> <select id="[[ ::$ctrl.id ]]" name=interactive_chart_template data-ng-model=$ctrl.model.template data-ng-change=$ctrl.changeSavedTemplate() data-ng-options="template.id as template.name for template in $ctrl.templates"> <option value="" selected=selected>None</option> </select> </div>'
    },
    mRki: function(e, t) {
        e.exports = '<div class="quick-settings dashboard-grid-quick-chart-aggregation right-border-separator"> <ul class=quick-settings-list> <li data-ng-repeat="periodData in $ctrl.quickPeriods" data-ng-class="{\'active\': periodData.period === $ctrl.aggregationPeriod}" data-ng-click=$ctrl.applyQuickAggregation(periodData) data-ng-bind=periodData.label.desktop> </li> </ul> </div> '
    },
    mW5s: function(e, t, a) {
        "use strict";

        function i(e) {
            return function(t) {
                return e.trustAsHtml(t)
            }
        }
        i.$inject = ["$sce"], e.exports = i
    },
    mWf6: function(e, t, a) {
        "use strict";

        function i(e) {
            e.put("bc-technical-chart-study-item.html", a("Sc3C")), e.put("bc-technical-chart-clear-settings.html", a("FS+y")), e.put("bc-technical-chart-set-template-name.html", a("d7E3"))
        }
        i.$inject = ["$templateCache"], e.exports = i
    },
    ma9G: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            e.facebookLoading = !1, e.gplusLoading = !1, e.linkedinLoading = !1, e.twitterLoading = !1, e.title = a.title, e.image = a.image, e.imageString = a.data, e.redirectUrl = a.redirectUrl, e.path = a.path, e.close = function() {
                t.close()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "imageData"], e.exports = i
    },
    matC: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a) {
                    a.bind("click", function() {
                        e.$broadcast("closeMarketOnboardingCard")
                    })
                }
            }
        }
        i.$inject = ["$rootScope"], e.exports = i
    },
    mcKH: function(e, t, a) {
        "use strict";
        e.exports = {
            usd: [{
                main: !0,
                symbol: "$SPX",
                index: "sp",
                spec_index: "sp500"
            }, {
                symbol: "$SRFI",
                groups: "$U8DF,$U8BB,$U8DD,$U8DB,$U8FB,$U8BD",
                index: "sp-sector",
                spec_index: "financials"
            }, {
                symbol: "$SRHC",
                groups: "$U7DB,$U7BB,$U7BD,$U7BF,$U7DF,$U7DD",
                index: "sp-sector",
                spec_index: "health-care"
            }, {
                symbol: "$SREN",
                groups: "$U2BB,$U2BD",
                index: "sp-sector",
                spec_index: "energies"
            }, {
                symbol: "$SRIT",
                groups: "$U9DB,$U9DD,$U9DF,$U9BB,$U9BD,$U9DH,$U9FB,$U9BF",
                index: "sp-sector",
                spec_index: "information-technology"
            }, {
                symbol: "$SRTS",
                groups: "$U0BB,$U0BD",
                index: "sp-sector",
                spec_index: "telecom-services"
            }, {
                symbol: "$SRCD",
                groups: "$U5BB,$U5BD,$U5JB,$U5FD,$U5FB,$U5DB,$U5JD,$U5DD,$U5HB,$U5JF,$U5JH,$U5DF",
                index: "sp-sector",
                spec_index: "consumer-discretionary"
            }, {
                symbol: "$SRCS",
                groups: "$U6DB,$U6BB,$U6DD,$U6FB,$U6FD,$U6DF",
                index: "sp-sector",
                spec_index: "consumer-staples"
            }, {
                symbol: "$SRIN",
                groups: "$U4BB,$U4FB,$U4FD,$U4BD,$U4DB,$U4BF,$U4BH,$U4BJ,$U4BL,$U4DD,$U4FH,$U4BN",
                index: "sp-sector",
                spec_index: "industrials"
            }, {
                symbol: "$SRMA",
                groups: "$SCMX, $U3BD,$U3BF,$U3BH,$U3BJ",
                index: "sp-sector",
                spec_index: "materials"
            }, {
                symbol: "$SRUT",
                groups: "$UYBB,$UYBJ,$UYBF",
                index: "sp-sector",
                spec_index: "utilities"
            }, {
                symbol: "$SRRE",
                groups: "$U8HD,$U8HF",
                index: "sp-sector",
                spec_index: "real-estate"
            }],
            cad: [{
                main: !0,
                symbol: "$TXCX",
                index: "tsx",
                spec_index: "tsx-composite"
            }, {
                symbol: "$TTCD",
                index: "sp-sector",
                spec_index: "consumer-discretionary"
            }, {
                symbol: "$TTCS",
                index: "sp-sector",
                spec_index: "consumer-staples"
            }, {
                symbol: "$TTEN",
                index: "sp-sector",
                spec_index: "energies"
            }, {
                symbol: "$TTHC",
                index: "sp-sector",
                spec_index: "health-care"
            }, {
                symbol: "$TTFS",
                index: "sp-sector",
                spec_index: "financials"
            }, {
                symbol: "$TTIN",
                index: "sp-sector",
                spec_index: "industrials"
            }, {
                symbol: "$TTTK",
                index: "sp-sector",
                spec_index: "information-technology"
            }, {
                symbol: "$TTTS",
                index: "sp-sector",
                spec_index: "telecom-services"
            }, {
                symbol: "$TTMT",
                index: "sp-sector",
                spec_index: "materials"
            }, {
                symbol: "$TTRE",
                index: "sp-sector",
                spec_index: "real-estate"
            }, {
                symbol: "$TTUT",
                index: "sp-sector",
                spec_index: "utilities"
            }]
        }
    },
    mlmU: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: !0,
                bindToController: {
                    tabs: "=",
                    options: "="
                },
                controller: ["$scope", function(e) {}],
                controllerAs: "barchartDatatabsCtrl",
                template: a("2B5V"),
                link: function(e, t, a) {}
            }
        }
        i.$inject = [], e.exports = i
    },
    "mm/F": function(e, t) {
        e.exports = '<div class="modal-content-wrapper account edit-name-form"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <div class="inner-form bc-form"> <h4>Delete [[ currentEmail ]]</h4> <p>By deleting this email, you will no longer be able to use it to log in or for your Barchart account emails. <br/> Do you wish to continue?</p> <div class=form-buttons> <a class="bc-button grey ok" data-ng-click=close()>Cancel</a> <a class="bc-button light-blue ok" data-ng-click=deleteEmail()>Continue</a> </div> </div> </div>'
    },
    mmuc: function(e, t) {
        e.exports = '<div class=bc-screener> <div class="in-page-nav clearfix"> <ul class=clearfix> <li data-ng-class="{\'active\': state === STATE_FILTERS }"> <a href="" data-ng-click=backToFilter()>Set Filters</a> </li> <li data-ng-class="{\'active\': state === STATE_RESULTS }"> <a href="" data-ng-click=applyFilters()>Results</a> </li> </ul> <div data-ng-show="state === STATE_FILTERS" class=bc-screener__organize-button-wrapper> <a target=_self href="[[ ::myScreenerLink ]]" class="bc-button small dark-blue" title="Organize Saved Screeners">Organize Saved Screeners</a> </div> </div> <div data-ng-show="state === STATE_FILTERS"> <screener-set-filters data-form-data=formData data-filter-display-fields=filterDisplayFields data-type="[[ ::type ]]"></screener-set-filters> <div class=bc-screener__footer> <a class="bc-screener__see-results-button bc-button upper light-blue" data-ng-click=applyFilters()> See Results </a> </div> </div> <div data-ng-show="state === STATE_RESULTS"> <screener-total-match data-api-config=dataTable.apiConfig data-saved-screener=savedScreener data-type="[[ ::type ]]" data-filters=formData.filters></screener-total-match> <div class="bc-screener__toolbar eod-report clearfix"> <div class="toolbar-group eod-report-link"> <label for=bc-screener-results__send-report><a data-ng-click=sendReport(true)> Send End-of-Day Report:</a></label> <div class=input-checkbox> <input id=bc-screener-results__send-report data-ng-model=report data-ng-true-value=1 data-ng-false-value=0 disabled=disabled name=report type=checkbox> <label for=bc-screener-results__send-report data-ng-click=sendReport()> <span class=bc-glyph-check></span> </label> </div> </div> </div> <div class="bc-screener__toolbar bc-screener__result-toolbar bc-datatable-toolbar clearfix"> <div class=toolbar-group> <span class="bc-screener__toolbar-title text-uppercase">Load a screener:</span> <screener-saved-screeners data-saved-screener=savedScreener data-type="[[ ::type ]]"></screener-saved-screeners> <div class="bc-dropdown filter view-name"> <select data-show-custom-views-options data-change-filter data-current-view=filter_view name=viewName> <option value=main>Main View</option> <option value=technical>Technical</option> <option value=performance>Performance</option> <option data-ng-show="type === \'ETF\'" value=fundamental_etfs>Fundamental</option> <option value=filter_view>Filter View</option> <option value=custom_create_view>Create Custom Views</option> </select> </div> </div> <div class="toolbar-group clearfix"> <div class="buttons right"> <a class="toolbar-button flipcharts" title="View charts for all symbols" data-bc-flipcharts=flipcharts><i class=bc-glyph-flipcharts></i> flipcharts</a> <a class="toolbar-button download" title="Download page to .csv file" data-bc-download-button data-download-limit=1000><i class=bc-glyph-download></i> download</a> </div> </div> </div> <barchart-datatable data-ng-hide=dataLoading data-sticky=true data-api-config=dataTable.apiConfig data-custom-handlers="{\'filterChange\': \'screenerChangeView\'}" data-options=dataTable.options data-init-remove-excluded-fields=removeExcludedFields> </barchart-datatable> </div> </div>'
    },
    mnmy: function(e, t) {
        e.exports = '<div class="bc-interactive-chart-context-menu js-bc-interactive-chart-context-menu"> <ul class=bc-interactive-chart-context-menu__menu-list> <li class=bc-interactive-chart-context-menu__menu-list-item data-ng-click="plotToolsModal(\'studies\')"> <div> Add Study </div> </li> <hr class=separator data-ng-show=isEquity /> <li class=bc-interactive-chart-context-menu__menu-list-item data-ng-show=isEquity data-ng-click="plotToolsModal(\'fundamentals\')"> <div> Add Fundamental </div> </li> <hr class=separator /> <li class=bc-interactive-chart-context-menu__menu-list-item data-ng-click=openToolsModal()> <div> Add Drawing Tool </div> </li> <hr class=separator /> <li class=bc-interactive-chart-context-menu__menu-list-item data-ng-click=comparisonModal()> <div> Comparison Chart </div> </li> <hr class=separator /> <li class=bc-interactive-chart-context-menu__menu-list-item data-ng-click=openExpressionsListModal()> <div> Expressions &amp; Spreads </div> </li> <hr class=separator /> <li class="bc-interactive-chart-context-menu__menu-list-item grouped margin-top-7"> <div class=sub-menu> Display Options </div> <div class=sub-menu-content> <ul class="bc-interactive-chart-context-menu__sub-menu-list display-options"> <li class="first-in-group line-item" data-ng-click=openBarTypeSettingsModal()> <div class=label> Bar Type </div> </li> <li data-ng-click=openSizeSettingsModal() class=line-item> <div class=label> Chart Size </div> </li> <hr class=separator /> <li class=first-in-group> <bc-checkbox data-cb-click=toggleNavigator() data-cb-model=config.settings.navigator data-cb-label="\'Navigator\'"></bc-checkbox> </li> <li data-ng-class="{\'last-in-group\': !batsAvailable}"> <bc-checkbox data-ng-click=toggleFloatingPriceBox() data-cb-model=config.settings.tooltip data-cb-label="\'Floating Price Box\'"></bc-checkbox> </li> <li class=last-in-group data-ng-if="batsAvailable && isLoggedIn"> <bc-checkbox data-ng-click=toggleRealTime() data-cb-model=config.settings.batsData data-cb-label="\'Use Realtime BATS data\'"></bc-checkbox> </li> <li class=last-in-group data-ng-if="batsAvailable && !isLoggedIn" data-ng-click=hideMenu() data-stay-on-page=true data-bc-modal-login=realtime> <bc-checkbox data-cb-model=config.settings.batsData data-cb-label="\'Use Realtime BATS data\'"></bc-checkbox> </li> </ul> </div> </li> <li class="bc-interactive-chart-context-menu__menu-list-item grouped"> <div class=sub-menu> Scale Settings </div> <div class=sub-menu-content> <ul class=bc-interactive-chart-context-menu__sub-menu-list> <li class=first-in-group data-ng-click="changeScaleType(\'Linear\')"> <div class=input-radio> <input type=radio id=interactive-chart__radio-linear data-ng-model=config.settings.scaleType data-ng-value="\'Linear\'"> <label for=interactive-chart__radio-linear> <span></span> Linear </label> </div> </li> <li class=last-in-group data-ng-click="changeScaleType(\'Logarithmic\')"> <div class=input-radio> <input type=radio id=interactive-chart__radio-logarithmic data-ng-model=config.settings.scaleType data-ng-value="\'Logarithmic\'"> <label for=interactive-chart__radio-logarithmic> <span></span> Logarithmic </label> </div> </li> <hr class=separator /> <li class=first-in-group data-ng-click="changeScaleValue(\'price\')"> <div class=input-radio> <input type=radio id=interactive-chart__radio-price data-ng-model=config.settings.scaleValue value=price> <label for=interactive-chart__radio-price> <span></span> Price Scale </label> </div> </li> <li class=last-in-group data-ng-click="changeScaleValue(\'percent\')"> <div class=input-radio> <input type=radio id=interactive-chart__radio-change data-ng-model=config.settings.scaleValue value=percent> <label for=interactive-chart__radio-change> <span></span> %Change Scale </label> </div> </li> <hr class=separator /> <li class="last-in-group first-in-group line-item" data-ng-click=openSettingsMarginModal()> <div class=label> Margin Settings </div> </li> <hr class=separator /> <li class="last-in-group first-in-group"> <bc-checkbox data-cb-click=toggleMinorGrids() data-cb-model=config.settings.minorGridLines data-cb-label="\'Minor Grids\'"></bc-checkbox> </li> <hr class=separator /> <li class="last-in-group first-in-group"> <bc-checkbox data-cb-click=toggleOverlapLabel() data-cb-model=config.settings.preventLabelOverlap data-cb-label="\'Overlapping Price Labels\'"></bc-checkbox> </li> </ul> </div> </li> <li class="bc-interactive-chart-context-menu__menu-list-item grouped margin-bottom-7" data-ng-show="isEquityEtfMutual || isFutureSymbol"> <div class=sub-menu data-ng-show=isEquityEtfMutual> Events & Adjustments </div> <div class=sub-menu data-ng-show=isFutureSymbol> Adjustments </div> <div class=sub-menu-content> <ul class="bc-interactive-chart-context-menu__sub-menu-list display-options"> <li class=first-in-group data-ng-show=isEquityEtfMutual> <bc-checkbox data-cb-click=toggleEventDividends() data-cb-model=config.settings.events.dividends data-cb-label="\'Dividends\'"></bc-checkbox> </li> <li data-ng-show=isEquityEtfMutual> <bc-checkbox data-cb-click=toggleEventEarnings() data-cb-model=config.settings.events.earnings data-cb-label="\'Earnings\'"></bc-checkbox> </li> <li data-ng-show=isEquityEtfMutual> <bc-checkbox data-cb-click=toggleEventSplits() data-cb-model=config.settings.events.splits data-cb-label="\'Splits\'"></bc-checkbox> </li> <li data-ng-show=isEquityEtfMutual> <bc-checkbox data-cb-click=toggleDividendsAdjust() data-cb-model=config.settings.dividendsAdjust data-cb-label="\'Dividends Back Adjust\'"></bc-checkbox> </li> <li class=last-in-group data-ng-show=isEquityEtfMutual> <bc-checkbox data-cb-click=toggleExtendedHours() data-cb-model=config.settings.extendedHours data-cb-label="\'Extended Hours\'"></bc-checkbox> </li> <li class=first-in-group data-ng-show=isFutureSymbol> <bc-checkbox data-cb-click=toggleAggregationSpec() data-cb-model=booleanSpec data-cb-label="\'Continuation Chart\'"></bc-checkbox> </li> <li data-ng-show=isFutureSymbol data-ng-click=openContractRollSettingsModal() class=line-item> <div class=label> Contract Roll Settings </div> </li> <li class=last-in-group data-ng-show=isFutureSymbol> <bc-checkbox data-cb-click=toggleBackAdjust() data-cb-model=config.settings.backAdjust data-cb-label="\'Back Adjust History\'"></bc-checkbox> </li> </ul> </div> </li> <hr class=separator /> <li class=bc-interactive-chart-context-menu__menu-list-item> <div class=sub-menu> Templates </div> <div class=sub-menu-content> <ul class="bc-interactive-chart-context-menu__sub-menu-list origin-view"> <li data-ng-click=openApplyTemplateModal() data-bc-modal-login=icharts data-stay-on-page=true> Apply a Template </li> <hr class=separator /> <li data-ng-click=openSaveTemplateModal() data-bc-modal-login=icharts data-stay-on-page=true> Save as Template </li> </ul> </div> </li> <hr class=separator /> <li class=bc-interactive-chart-context-menu__menu-list-item data-bc-modal-login=alerts data-remove-touch-start=true data-bc-show-alerts-modal data-symbol="[[ currentSymbol | json ]]" data-ng-click=hideMenu()> <a class="button split add-to-watchlist"> Set Alert </a> </li> <hr class=separator /> <li class=bc-interactive-chart-context-menu__menu-list-item data-ng-if=::isLoggedIn data-ng-click=addToWatchlist()> <a class="button split add-to-watchlist"> Add to Watchlist </a> </li> <li class=bc-interactive-chart-context-menu__menu-list-item data-bc-modal-login=watchlist data-stay-on-page=true data-ng-click=hideMenu() data-ng-if=::!isLoggedIn> <a class="button split add-to-watchlist"> Add to Watchlist </a> </li> <hr class=separator /> <li data-bc-symbol-widgets-modal data-symbol-data=currentSymbol title="Additional Symbol Information"> <a>More Data</a> </li> <hr class=separator /> <li data-ng-click=saveToMyCharts()> <a>Save to My Charts</a> </li> <hr class=separator /> <li class="bc-interactive-chart-context-menu__menu-list-item grouped margin-top-7" data-ng-click=hideMenu()> <chart-share data-type=interactive data-use-default-page-link=true data-label="Social Share"></chart-share> </li> <li class="bc-interactive-chart-context-menu__menu-list-item grouped" data-ng-click=downloadChartData()> <a>Download Chart Data</a> </li> <li class="bc-interactive-chart-context-menu__menu-list-item grouped" data-ng-click=downloadAsImage()> Save Chart as Image (.png) </li> <li class="bc-interactive-chart-context-menu__menu-list-item grouped margin-bottom-7" data-ng-click=openChartInNewWindow()> Popout Chart </li> <hr class=separator /> <li class=bc-interactive-chart-context-menu__menu-list-item data-ng-click=resetDialog()> Clear Chart </li> </ul> </div>'
    },
    ms8G: function(e, t, a) {
        "use strict";
        var i = "secFilings";
        angular.module(i, []).controller(i + ".secFilingsCtrl", a("V+Jd")).factory("secFilingsApiFactory", a("FfWV"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    msOO: function(e, t, a) {
        "use strict";
        var i = "MovingAverages";
        angular.module(i, []).controller(i + ".movingAveragesCtrl", a("7WTe")).directive("movingAverages", a("a4NH")).filter("addPlusSymbol", a("g4Vl"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    muB7: function(e, t) {
        e.exports = '<div class="bc-portfolio bc-portfolio__edit-form"> <div class=form-block> <div class=form-block-header> <span class=symbol-bold>[[ symbol.symbol ]]</span> <span class=symbol-name>[[ symbol.symbolName ]]</span> <span class=symbol-last-price>[[ symbol.lastPrice ]]</span> <span class=symbol-price-change data-ng-class=setColor(symbol.priceChange)>[[ symbol.priceChange ]] ([[ symbol.percentChange ]])</span> </div> <div class=form-block-content> <form class=bc-form name=transactionForm autocomplete=off> <div class="form-top-row clearfix"> <div class="form-fieldset stacked fieldset-dropdown"> <label>Action</label> <div class="bc-dropdown styled arrow-black"> <select name=action data-ng-model=action required data-ng-init="action=\'1\'" data-ng-class="{\'invalid\': errors && transactionForm.action.$invalid}" tabindex=2> <option value=1>Buy</option> <option value=-1>Sell</option> </select> </div> </div> <div class="form-fieldset stacked"> <label>Quantity</label> <input type=text required data-ng-model=quantity name=quantity class=js-focus-quantity-input data-ng-class="{\'invalid\': errors && transactionForm.quantity.$invalid}" tabindex=1 /> </div> <div class="form-fieldset stacked form-fieldset__entry-date"> <label>Entry Date</label> <div class=bc-datepicker-item> <input type=text id=bc-portfolio__edit-form-enter-date placeholder=MM/DD/YYYY data-ng-model=entry_date required data-date-format=MM/dd/yyyy autocomplete=off data-ng-class="{\'invalid\': errors && transactionForm.entry_date.$invalid}" name=entry_date data-bs-datepicker tabindex=3 /> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> <div class="form-fieldset stacked form-fieldset__entry-price"> <label>Entry Price</label> <input type=text required data-ng-model=entry_price name=entry_price data-ng-class="{\'invalid\': errors && transactionForm.entry_price.$invalid}" tabindex=4 /> </div> <div class="form-fieldset stacked form-fieldset__exit-date"> <label>Exit Date</label> <div class=bc-datepicker-item> <input type=text id=bc-portfolio__edit-form-exit-date placeholder=MM/DD/YYYY data-ng-model=exit_date data-date-format=MM/dd/yyyy data-ng-required=exit_price autocomplete=off data-ng-class="{\'invalid\': errors && transactionForm.exit_date.$invalid}" name=exit_date data-bs-datepicker tabindex=5 /> <i class="bc-glyph-calendar calendar-icon"></i> </div> </div> <div class="form-fieldset stacked form-fieldset__exit-price"> <label>Exit Price</label> <input type=text data-ng-model=exit_price data-ng-required=exit_date name=exit_price data-ng-class="{\'invalid\': errors && transactionForm.exit_price.$invalid}" tabindex=6 /> </div> <div class="form-fieldset stacked"> <label>Fees</label> <div class=input-group> <input type=text data-ng-model=commission name=commission tabindex=7 /> </div> </div> <div data-ng-if=showAdjustment class="form-fieldset stacked fieldset-dropdown adjustment"> <label>Adjustment</label> <div class="bc-dropdown styled arrow-black"> <select name=adjust_cash data-ng-model=adjust_cash tabindex=8> <option value=0>No Cash Adjustment</option> <option value=1>Cash ([[ cash | currency:\'$\' ]])</option> </select> </div> </div> </div> <div class=form-bottom-row> <label>Notes<span data-ng-click="notes=\'\'" class="textarea-clear-button right">Clear Notes</span></label> <textarea placeholder=(optional) data-ng-model=notes name=notes class=js-focus-notes-field data-ng-class="{\'invalid\': errors && transactionForm.notes.$invalid}" data-ng-maxlength=200 tabindex=9></textarea> </div> <div class="form-top-row clearfix"> <div class="form-fieldset stacked"> <label>Low Flag</label> <div class=clear-button-wrapper> <input type=text data-barchart-clear-input data-ng-model=low_alert data-ng-class="setBackground(\'low\')" name=low_alert tabindex=10 /> </div> </div> <div class="form-fieldset stacked"> <label>High Flag</label> <div class=clear-button-wrapper> <input type=text data-barchart-clear-input data-ng-model=high_alert data-ng-class="setBackground(\'high\')" name=high_alert tabindex=11 /> </div> </div> <div class=flags-description> Use Flags to highlight when the last price goes above or below the values set. <br> Flags show on the Portfolio View. </div> </div> </form> </div> </div> </div> '
    },
    myYX: function(e, t) {
        e.exports = '<div> <a target=_self data-ng-href="/[[ ::$ctrl.quotesService.getSector($ctrl.currentSymbol.symbolType) ]]/quotes/[[ ::$ctrl.currentSymbol.symbol ]]/income-statement/annual"> <div class="module balance-sheet-module"> <h4>Income Statement</h4> <div class=items> <div data-ng-repeat="(key, value) in ::$ctrl.meta track by $index"> <span>[[ ::value ]]</span> <span data-ng-if=::!$ctrl.checkIsNA($ctrl.data[key])>[[ ::$ctrl.data[key] | addSymbol:"$":"before" ]]</span> <span data-ng-if=::$ctrl.checkIsNA($ctrl.data[key])>N/A</span> </div> </div> </div> </a> </div> '
    },
    "n20/": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "AE",
                replace: !0,
                scope: !0,
                bindToController: {
                    cellKey: "@",
                    cellValue: "=",
                    cellsToColorize: "=",
                    cellsToColorizeOpinion: "=",
                    cellsLinks: "=",
                    linksOpenNewTab: "="
                },
                controller: [function() {
                    var e = this;
                    e.isCellColorizible = function() {
                        return !!(e.cellsToColorize && e.cellsToColorize.length && e.cellsToColorize.indexOf(e.cellKey) > -1) || !!(e.cellsToColorizeOpinion && e.cellsToColorizeOpinion.length && e.cellsToColorizeOpinion.indexOf(e.cellKey) > -1) && (e.isOpinion = !0, !0)
                    }, e.isLink = function() {
                        return e.cellsLinks && e.cellsLinks.length && e.cellsLinks.indexOf(e.cellKey) > -1
                    }
                }],
                controllerAs: "barchartTableCellTemplateCtrl",
                template: a("ewj5"),
                link: function(e, t, a) {}
            }
        }
        i.$inject = [], e.exports = i
    },
    n4yS: function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["ipCookie", "authService", "bcAdsModalService", "$window", "localStorageService", "utils", function(e, t, a, i, r, o) {
            var n = !t.isLoggedIn() || !t.getUserData().is_premier;
            if ("/my/barchart-premier" !== i.location.pathname && (window.adsEnabled || !n || e("bcLightAds") || (r.get("adsBlocked") ? (a.showModal(), r.remove("adsBlocked")) : r.set("adsBlocked", !0))), o.isMobileOnly()) {
                var s = document.querySelectorAll(".add-script-for-mobile");
                s.length && s.forEach(function(e) {
                    var t = document.createElement("script");
                    t.setAttribute("src", angular.element(e).attr("data-script")), e.append(t)
                })
            }
        }])
    },
    n50t: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            function o(e, a) {
                return t("orderBy")(e, function(e) {
                    return function(t) {
                        return t.raw[e]
                    }
                }(a), !0)
            }
            this.getMarketSymbolsArr = function() {
                var t;
                return t = "usd" === e.config.user.market ? "usd" : "cad", i[t]
            }, this.getMarketSymbols = function() {
                var e, t;
                return t = "", e = this.getMarketSymbolsArr(), r.forEach(e, function(e) {
                    t += e.symbol + ",", e.groups && (t += e.groups + ",")
                }), t = t.slice(0, -1)
            }, this.setHeatmapColors = function(e, t) {
                var i;
                return i = t.postfix || "", "matrix" === t.name && (e = o(e, "percentChange10y"), e = o(e = a.getColors(e, "percentChange10y"), "percentChange5y"), e = o(e = a.getColors(e, "percentChange5y"), "percentChange1y"), e = o(e = a.getColors(e, "percentChange1y"), "percentChange")), e = a.getColors(e, "percentChange" + i)
            }, this.setNames = function(t) {
                return r.forEach(t, function(t) {
                    t.symbolName = function(t) {
                        var a, i, r;
                        a = e.config.user.market, i = t.symbolName, "usd" === a ? (r = /(\s\[Sector\])|(\s\[Ind\])/gi, i = i.replace(r, "")) : "cad" === a && (r = /(TSX\s)|(\sCapped)|(\sIndex)/gi, i = i.replace(r, ""));
                        return i
                    }(t), t.groups && r.forEach(t.groups, function(t) {
                        t.symbolName = function(t) {
                            var a, i, r;
                            a = e.config.user.market, i = t.symbolName, "usd" === a && (r = /(S&P\s500\s)|(\s\[Sector\])|(\s\[Ind\])/gi, i = i.replace(r, ""));
                            return i
                        }(t)
                    })
                }), t
            }
        }
        i.$inject = ["$window", "$filter", "bcHeatmapService", "symbolsConfig", "_"], e.exports = i
    },
    n8Zl: function(e, t, a) {
        "use strict";
        var i = "EarningsEstimates";
        angular.module(i, []).constant("lastFourQuartersConfig", a("MbZa")).directive("lastFourQuarters", a("dZpm"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    nE01: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            this.getCharts = function(r) {
                var o = i.defer();
                return e.call(t.API_URL + "/charts?type=" + r, a.GET).then(function(e) {
                    o.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e)
                }), o.promise
            }, this.getGroupCharts = function(r, o) {
                var n = i.defer();
                return e.call(t.API_URL + "/charts/groups/" + r + "?type=" + o, a.GET).then(function(e) {
                    n.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e)
                }), n.promise
            }, this.getGroups = function() {
                var r = i.defer();
                return e.call(t.API_URL + "/charts/groups", a.GET).then(function(e) {
                    r.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e), r.reject(e)
                }), r.promise
            }, this.orderGroups = function(r) {
                var o = i.defer();
                return e.call(t.API_URL + "/charts/groups/order", a.POST, {
                    ids: r
                }).then(function(e) {
                    o.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e)
                }), o.promise
            }, this.removeGroup = function(r) {
                var o = i.defer();
                return e.call(t.API_URL + "/charts/groups/" + r, a.DELETE).then(function(e) {
                    o.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e), o.reject(e)
                }), o.promise
            }, this.updateGroup = function(r, o) {
                var n = i.defer();
                return e.call(t.API_URL + "/charts/groups/" + r, a.PUT, o).then(function(e) {
                    n.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e)
                }), n.promise
            }, this.createGroup = function(r) {
                var o = i.defer();
                return e.call(t.API_URL + "/charts/groups", a.POST, r).then(function(e) {
                    o.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e), o.reject(e)
                }), o.promise
            }, this.orderChart = function(r, o) {
                var n = i.defer();
                return e.call(t.API_URL + "/charts/groups/" + r + "/order", a.POST, o).then(function(e) {
                    n.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e), n.reject(e)
                }), n.promise
            }, this.removeChart = function(r) {
                var o = i.defer();
                return e.call(t.API_URL + "/charts/" + r, a.DELETE).then(function(e) {
                    o.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e), o.reject(e)
                }), o.promise
            }, this.updateChart = function(r, o) {
                var n = i.defer();
                return e.call(t.API_URL + "/charts/" + r, a.PUT, o).then(function(e) {
                    n.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e), n.reject(e)
                }), n.promise
            }, this.createChart = function(r) {
                var o = i.defer();
                return e.call(t.API_URL + "/charts", a.POST, r).then(function(e) {
                    o.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e), o.reject(e)
                }), o.promise
            }, this.getChart = function(r) {
                var o = i.defer();
                return e.call(t.API_URL + "/charts/" + r, a.GET).then(function(e) {
                    o.resolve(e)
                }, function(e) {
                    console.error("Something went wrong", e), o.reject(e)
                }), o.promise
            }
        }
        i.$inject = ["dataProvider", "apiConfig", "httpVerbs", "$q"], e.exports = i
    },
    nE1I: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    config: "=",
                    chartData: "="
                },
                controller: ["$scope", "$rootScope", "utils", function(e, t, a) {
                    var i = {
                        chart: {
                            plotBackgroundColor: null,
                            plotBorderWidth: 0,
                            plotShadow: !1
                        },
                        title: {
                            text: null
                        },
                        subTitle: {
                            text: null
                        },
                        options: {
                            plotOptions: {
                                pie: {
                                    dataLabels: {
                                        enabled: !1
                                    },
                                    slicedOffset: 0,
                                    startAngle: 0,
                                    endAngle: 180,
                                    center: [0, "50%"],
                                    colors: ["#007D34", "#5900B2", "#C40000"],
                                    showInLegend: !1
                                }
                            },
                            chart: {
                                type: "pie",
                                margin: 0
                            },
                            legend: {
                                enabled: !1
                            }
                        },
                        series: [{
                            type: "pie",
                            innerSize: "45%",
                            size: "120",
                            data: [],
                            tooltip: {
                                pointFormat: "<b>{point.y:.0f}%</b>"
                            }
                        }],
                        credits: {
                            enabled: !1
                        }
                    };
                    i.series[0].data = [
                        ["Advancing", e.chartData.raw.percentAdvancingIssues],
                        ["Unchanged", e.chartData.raw.percentUnchangedIssues],
                        ["Declining", e.chartData.raw.percentDecliningIssues]
                    ], e.config = i, e.$on("leftMenuHidden", function() {
                        e.config.series[0].size = "150"
                    }), e.$on("leftMenuShown", function() {
                        e.config.series[0].size = "120"
                    })
                }],
                template: a("B2X6")
            }
        }
        i.$inject = [], e.exports = i
    },
    nF04: function(e, t, a) {
        "use strict";
        var i = "OptionsQuotesTotal";
        angular.module(i, []).controller(i + ".optionsQuotesTotalCtrl", a("QjFd"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    nF2H: function(e, t) {
        e.exports = '<div class=bc-futures-options-quotes__columns> <div data-ng-if=dataTableContent> <div class="bc-futures-options-quotes__column bc-futures-options-quotes__left-column"> <div class="block-title joined"> <h4> Calls </h4> </div> </div> <div class="bc-futures-options-quotes__column bc-futures-options-quotes__middle-column"> <div class=bc-opinions-quotes__middle-column-filler></div> </div> <div class="bc-futures-options-quotes__column bc-futures-options-quotes__right-column"> <div class="block-title joined"> <h4> Puts </h4> </div> </div> </div> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div data-ng-if="dataTableContent && dataTableContent.length"> <barchart-datatable data-sticky=false data-custom-handlers=settings.settings.customHandlers data-content=dataTableContent data-options=settings.settings.options> </barchart-datatable> </div> </div>'
    },
    nJBB: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            var s = [function() {
                var a = this;
                a.apiData = JSON.parse(e.unescape(a.apiData));
                var s, l = JSON.parse(a.symbol),
                    c = i.getChartLink();
                window.document.getElementById("barchart-www-inline-data").innerHTML = a.apiData.data, a.currentSymbol = l, a.header = a.apiData.header, a.redirectToChart = function() {
                    "interactive-chart" === c.toLowerCase() ? (s = n.route(o.config.routes["quotes.sectors.interactiveChart"], {
                        sector: t.getSector(a.currentSymbol.symbolType),
                        symbol: a.currentSymbol.symbol
                    }), o.location.href = n.buildUrl(s)) : "technical-chart" === c.toLowerCase() && (s = n.route(o.config.routes["quotes.sectors.technicalChart"], {
                        sector: t.getSector(a.currentSymbol.symbolType),
                        symbol: a.currentSymbol.symbol
                    }), o.location.href = n.buildUrl(s))
                }, r(function() {
                    a.chartReady = !0
                }, 0)
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    apiData: "@",
                    symbol: "@"
                },
                template: a("ODbt"),
                controller: s,
                controllerAs: "$ctrl"
            }
        }
        i.$inject = ["_", "quotesService", "userPreferencesService", "$timeout", "$window", "utils"], e.exports = i
    },
    nJyb: function(e, t, a) {
        "use strict";
        var i = "TechnicalChart";
        angular.module(i, []).factory("chartApiService", a("b9Jg")).factory("technicalChartUrlService", a("vhZ+")).factory("technicalChartMappingService", a("NqXL")).factory("technicalChartStudiesConverter", a("wgoC")).factory("technicalChartValidationService", a("pX/P")).factory("technicalChartSettingsService", a("3sLf")).service("technicalChartDrawService", a("/Qdw")).service("technicalChartValidateService", a("tUkH")).service("technicalChartModalsService", a("C4ho")).service("technicalChartPeriodSettings", a("Avqy")).service("technicalChartImageStorage", a("aGBN")).service("technicalChartUtils", a("cmPK")).service("technicalChartStateStorage", a("qfMg")).constant("technicalChartConfig", a("AM4E")).constant("technicalChartLabels", a("3zD8")).constant("technicalChartFields", a("S9AJ")).constant("technicalChartStudies", a("F3bZ")).constant("technicalChartDefaultSettings", a("hEtx")).directive("technicalChartStudy", a("jDcD")).directive("technicalChartMinutePeriod", a("+Gb6")).directive("technicalChartQuickSettings", a("Hb8W")).directive("technicalChartQuickChart", a("qwMP")).directive("technicalChartBasicSettings", a("d7lb")).directive("technicalChartSpreadSettings", a("QBnE")).directive("technicalChartComparisonSettings", a("pFWY")).directive("technicalChartButtons", a("BqMO")).directive("technicalChart", a("uASL")).directive("technicalChartTooltipRow", a("kqag")).directive("technicalChartTooltipBox", a("g9TT")).directive("technicalChartComparisonLink", a("25aB")).directive("technicalChartVerticalShare", a("wYMy")).controller(i + ".TechnicalChartModalTemplateNameCtrl", a("6Pkv")).controller(i + ".TechnicalChartClearSettingsModalCtrl", a("YVt8")).controller(i + ".ShareModalCtrl", a("ABlA")).directive("dashboardTechnicalChart", a("kaQ1")).directive("dashboardTechnicalChartQuickSettings", a("NjKG")).directive("dashboardTechnicalChartButtons", a("IYZT")).directive("dashboardChangeSymbolBox", a("HCNA")).run(a("mWf6"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    nOLR: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a, i) {
                    if (i.bcClickOutside) {
                        var r = a[0],
                            o = e(i.bcClickOutside),
                            n = function(e) {
                                r === e.target || r.contains(e.target) || t.$apply(o)
                            };
                        angular.element(document).on("click touchstart", n), t.$on("$destroy", function() {
                            angular.element(document).off("click touchstart", n)
                        })
                    }
                }
            }
        }
        i.$inject = ["$parse"], e.exports = i
    },
    nONU: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                require: "?ngModel",
                link: function(a, i, r, o) {
                    e.isLoggedIn() && (function(a, i) {
                        var r = "",
                            o = null;
                        angular.element(i[0].querySelector('option[value="custom_create_view"]')).remove(), a.forEach(function(e) {
                            o = (o = '<option value="{%value%}">{%label%}</option>'.replace(/{%value%}/, e.id)).replace(/{%label%}/, e.name.replace(/[\u00A0-\u9999<>\&]/gim, function(e) {
                                return "&#" + e.charCodeAt(0) + ";"
                            })), r += o, o = null
                        }), i.append('<optgroup label="-- Custom Views --"></optgroup>'), i.append(r), i.append('<option value="custom_create_view">Create Custom Views</option>'), i.on("change", function() {
                            e.isLoggedIn() && "custom_create_view" === i.val() && (t.location.href = t.config.routes["my.customViews"])
                        })
                    }(e.getUserData().custom_views, i), o) && a.$watch(function() {
                        return o.$modelValue
                    }, function(e) {
                        e && i.val(e), i.children()[0] && !i.children()[0].label && i.children()[0].remove()
                    })
                }
            }
        }
        i.$inject = ["authService", "$window"], e.exports = i
    },
    nS1d: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e, t, a) {
                if (void 0 !== e) {
                    var i = angular.element(e);
                    return i.find("a").attr("target", "_blank"), angular.element("<div>").append(i).html()
                }
                return e
            }
        }
    },
    nZ0g: function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };

        function o(e) {
            var t = !1;
            return {
                filterName: function(t, a) {
                    return void 0 !== a ? e.search(t, a) : e.search()[t]
                },
                getFilterCollection: function() {
                    var t = e.search(),
                        a = [];
                    return t && Object.keys(t).forEach(function(e) {
                        var i = {
                            name: e,
                            value: t[e]
                        };
                        a.push(i)
                    }), a
                },
                buildFilterString: function(e) {
                    if ("object" !== (void 0 === e ? "undefined" : r(e))) throw new Error("something went wrong barchartDatatableFilterUrl.buildFilterString method expects object as parameter, but " + (void 0 === e ? "undefined" : r(e)) + " was given");
                    var t = "?";
                    return t += function(e) {
                        if ("object" !== (void 0 === e ? "undefined" : r(e))) throw new Error("parameter in _parseToUrl must be an object");
                        var t = [];
                        return Object.keys(e).forEach(function(a) {
                            t.push(a + "=" + e[a])
                        }), t.join("&")
                    }(e)
                },
                isPreventNextFiltersEvent: function(e) {
                    return void 0 !== e ? t = !!e : t ? (t = !1, !0) : t
                }
            }
        }
        o.$inject = ["$location"], e.exports = o
    },
    najL: function(e, t, a) {
        "use strict";
        var i = "FutureOptionToolbar";
        angular.module(i, []).controller("futureOptionToolbarCtrl", a("5XQs")).service("optionsToolbarService", a("z2TB"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    nb0o: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            var s = [],
                l = 1,
                c = 0,
                d = 25,
                u = {},
                p = "getMarketData",
                m = r.getUserData() || {};
            return {
                getSymbols: function() {
                    return s.data
                },
                getFields: function() {
                    return u.fields
                },
                setSettings: function(e, t) {
                    s = [], c = 0, l = 1, p = t, u = e
                },
                getData: function() {
                    u.page = l, void 0 === u.limit ? u.limit = d : null === u.limit && (u.limit = void 0);
                    var r = o.getParameter("controllerView") || "main";
                    if ("getPortfolioData" === p) u.view = r;
                    else {
                        switch (u.fields = "", r) {
                            case "main":
                                u.fields = n.mainFields;
                                break;
                            case "technical":
                                u.fields = n.technicalFields;
                                break;
                            case "performance":
                                u.fields = n.performanceFields
                        }
                        if (!u.fields && m && void 0 !== m.custom_views) {
                            var h = Number(r),
                                g = a.find(m.custom_views, function(e) {
                                    return e.id === h
                                }),
                                f = angular.copy(g);
                            f && (u.fields = f.fields.join(",") + "," + n.requiredFields)
                        }
                        u.fields || (u.fields = n.mainFields)
                    }
                    var b = t.defer();
                    return e[p](u, r).then(function(e) {
                        l++, c = e.total, s.data ? s.data = a.union(s.data, e.data) : s = e, s.meta = e.meta, i.$broadcast("dashboardSymbolsListUpdated", s), b.resolve(s)
                    }), b.promise
                },
                needMore: function() {
                    return s.data.length < c
                },
                updateLimit: function(e) {
                    d = e
                },
                getTimeout: function() {
                    var e = 12e5;
                    return m.is_premier && (e = 1e3 * m.preferences.refresh_timeout * 60 || e), e
                },
                needRefresh: function() {
                    return !m.preferences || !m.preferences.refresh_timeout || "never" !== m.preferences.refresh_timeout
                }
            }
        }
        i.$inject = ["dashboardApiFactory", "$q", "_", "$rootScope", "authService", "dashboardSettingsService", "controlWidgetConfig"], e.exports = i
    },
    nbLj: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s) {
            var l;
            e.dataLoading = !1, e.error = !1, e.email = "", e.isLoggedIn = t.isLoggedIn(), e.recaptchaKey = n.grecaptchaInvisibleKey;
            var c = null;
            t.isLoggedIn() && (e.email = t.getUserData().email, e.loadingList = !1), e.init = function(t, a) {
                e.lists = t, a && (c = a, e.email = a)
            }, e.changeEmail = function() {
                e.loadingList = !0, i.getSubscriptions(e.email).then(function(t) {
                    Object.keys(e.lists).forEach(function(a) {
                        e.lists[a].checked = t[a]
                    }), e.loadingList = !1
                })
            }, e.submit = function() {
                var t = {},
                    a = [];
                for (var r in e.subscribeForm.$submitted = !0, e.lists) e.lists.hasOwnProperty(r) && (t[r] = e.lists[r].checked, t[r] && a.push(r));
                if (!a.length) return e.error = "Please select at least one newsletter.", void window.grecaptcha.reset();
                if (e.subscribeForm.$valid) {
                    var n = {
                        email: e.email,
                        lists: t,
                        options: {
                            sendWelcome: !0,
                            consent: !0
                        }
                    };
                    i.updateSubscription(n).then(function(t) {
                        if (t.success) {
                            var i = 0,
                                r = a.length,
                                n = "<p>Subscription settings saved.</p>";
                            if (r) {
                                for (n += "<p>You have successfully subscribed to:</p><ul>"; i < r; i++) n += "<li>" + e.lists[a[i]].title + "</li>";
                                n += "</ul>"
                            }
                            o.success(n)
                        }
                    }, function(t) {
                        t.error && t.error.message && (e.error = t.error.message)
                    })
                }
                window.grecaptcha.reset()
            }, s.submitNewsletters = e.submit, e.changeList = function(a, i) {
                (t.isLoggedIn() || c) && d(a, i), e.error = !1
            };
            var d = function(t, a) {
                var r = {
                        email: e.email,
                        lists: [t],
                        options: {
                            sendWelcome: !0,
                            consent: !0
                        }
                    },
                    n = a.checked ? "subscribe" : "unsubscribe";
                i[n](r).then(function(e) {
                    if (e.success) {
                        var t = "You have successfully ";
                        t = a.checked ? t + "subscribed to " : t + "unsubscribed from ", t += a.title + " newsletter.", o.success(t)
                    } else e.message && (o.error(e.message), a.checked = !1)
                }, function(t) {
                    t.error && t.error.message && (e.error = t.error.message)
                })
            };
            e.showModal = function(t) {
                e.type = t, l = r.open({
                    template: a("elPS"),
                    scope: e,
                    windowClass: "bc-light-modal sample"
                })
            }, e.close = function() {
                l.close()
            }
        }
        i.$inject = ["$scope", "authService", "barchartEmailsApiFactory", "$modal", "Notification", "appConfig", "$window"], e.exports = i
    },
    ncC7: function(e, t) {
        e.exports = '<div class=barchart-minitable-wrapper> <table> <thead> <tr> <th data-ng-repeat="(columnKey, columnTitle) in barchartMiniTableCtrl.content.meta.field.shortName track by $index"> <barchart-table-header-cell-template data-cell-key="{{ ::columnKey}}" data-cell-value="{{ ::columnTitle}}" data-sort-data=barchartMiniTableCtrl.options.sort data-content=barchartMiniTableCtrl.content> </barchart-table-header-cell-template> </th> </tr> </thead> <tbody data-ng-repeat="row in barchartMiniTableCtrl.content.data"> <tr> <td data-ng-repeat="(columnKey, columnTitle) in barchartMiniTableCtrl.content.meta.field.shortName track by $index"> <barchart-table-cell-template data-cell-key="{{ ::columnKey }}" data-cell-value=row[columnKey] data-cells-to-colorize=barchartMiniTableCtrl.options.colorize data-cells-links=barchartMiniTableCtrl.options.links> </barchart-table-cell-template> </td> </tr> </tbody> </table> <div data-ng-if=!barchartMiniTableCtrl.content.data.length> No symbols found that match the requirements. </div> </div>'
    },
    nchd: function(e, t) {
        e.exports = '<div class=bc-modal-content> <input type=hidden /> <div class=bc-modal-content-inner> <div class=modal-header> <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.close()></i> </div> <div data-ng-if="$ctrl.chartStyle === \'interactive\'"> Your default Chart Preference is set to <b>Interactive Charts</b>. To save a Technical Chart to My Charts, you must change your default chart type in your Site Preferences. </div> <div data-ng-if="$ctrl.chartStyle === \'technical\'"> Your default Chart Preference is set to <b>Technical Charts</b>. To save an Interactive Chart to My Charts, you must change your default chart type in your Site Preferences. </div> <div class=link-to-review> <a target=_self data-ng-href="[[ ::$ctrl.link ]]">Review your Site Preferences here.</a> </div> </div> </div>'
    },
    ndig: function(e, t) {
        e.exports = '<div class=bc-dashboard-chart data-ng-class=chartStyle> <div class=bc-dashboard-chart__inner-wrapper data-ng-if="currentSymbol && chartStyle === \'interactive\' && gridView === 1 && !gridLoading"> <interactive-chart data-current-symbol=currentSymbol data-full-screen=true data-dashboard-mode=true data-enable-my-charts=enableMyCharts></interactive-chart> </div> <div class=bc-dashboard-chart__inner-wrapper data-ng-if="currentSymbol && chartStyle === \'technical\'"> <dashboard-technical-chart data-current-symbol=currentSymbol data-full-screen=true></dashboard-technical-chart> </div> <div class=bc-dashboard-chart__tools-panel data-ng-if="chartStyle === \'interactive\' && gridView !== 1 && !gridLoading"> <dashboard-grid-tools-panel></dashboard-grid-tools-panel> </div> <div class="bc-dashboard-chart__inner-wrapper grid grid-2" data-ng-if="chartStyle === \'interactive\' && gridView === 2 && !gridLoading"> <div class=row> <div class="medium-6 large-6 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[0].symbol}" data-ng-click=selectGridChart(symbolsToLoad[0]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-if=symbolsToLoad[0] data-symbol-data=symbolsToLoad[0]> </dashboard-simple-chart> </div> <div class="medium-6 large-6 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[1].symbol}" data-ng-click=selectGridChart(symbolsToLoad[1]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-if=symbolsToLoad[1] data-symbol-data=symbolsToLoad[1]> </dashboard-simple-chart> </div> </div> </div> <div class="bc-dashboard-chart__inner-wrapper grid grid-3" data-ng-if="chartStyle === \'interactive\' && gridView === 3 && !gridLoading"> <div class=row> <div class="medium-12 large-12 columns"> <dashboard-simple-chart class=first-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[0].symbol}" data-ng-click=selectGridChart(symbolsToLoad[0]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-if=symbolsToLoad[0] data-symbol-data=symbolsToLoad[0]> </dashboard-simple-chart> </div> <div class="medium-12 large-12 columns"> <dashboard-simple-chart class=second-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[1].symbol}" data-ng-click=selectGridChart(symbolsToLoad[1]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-if=symbolsToLoad[1] data-symbol-data=symbolsToLoad[1]> </dashboard-simple-chart> </div> </div> </div> <div class="bc-dashboard-chart__inner-wrapper grid grid-4" data-ng-if="chartStyle === \'interactive\' && gridView === 4 && !gridLoading"> <div class=grid4-row> <div class=grid4-cell> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[0].symbol}" data-ng-click=selectGridChart(symbolsToLoad[0]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-if=symbolsToLoad[0] data-symbol-data=symbolsToLoad[0]> </dashboard-simple-chart> </div> <div class=grid4-cell> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[1].symbol}" data-ng-click=selectGridChart(symbolsToLoad[1]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-if=symbolsToLoad[1] data-symbol-data=symbolsToLoad[1]> </dashboard-simple-chart> </div> </div> <div class=grid4-row> <div class=grid4-cell> <dashboard-simple-chart class=bottom-row data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[2].symbol}" data-ng-click=selectGridChart(symbolsToLoad[2]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[2]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[2]) data-ng-if=symbolsToLoad[2] data-symbol-data=symbolsToLoad[2]> </dashboard-simple-chart> </div> <div class=grid4-cell> <dashboard-simple-chart class=bottom-row data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[3].symbol}" data-ng-click=selectGridChart(symbolsToLoad[3]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[3]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[3]) data-ng-if=symbolsToLoad[3] data-symbol-data=symbolsToLoad[3]> </dashboard-simple-chart> </div> </div> </div> <div class="bc-dashboard-chart__inner-wrapper grid grid-5" data-ng-if="chartStyle === \'interactive\' && gridView === 5 && !gridLoading"> <div class=row> <div class="medium-6 large-6 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[0].symbol}" data-ng-click=selectGridChart(symbolsToLoad[0]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-if=symbolsToLoad[0] data-symbol-data=symbolsToLoad[0]> </dashboard-simple-chart> </div> <div class="medium-6 large-6 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[1].symbol}" data-ng-click=selectGridChart(symbolsToLoad[1]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-if=symbolsToLoad[1] data-symbol-data=symbolsToLoad[1]> </dashboard-simple-chart> </div> </div> <div class=row> <div class="medium-6 large-6 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[2].symbol}" data-ng-click=selectGridChart(symbolsToLoad[2]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[2]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[2]) data-ng-if=symbolsToLoad[2] data-symbol-data=symbolsToLoad[2]> </dashboard-simple-chart> </div> <div class="medium-6 large-6 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[3].symbol}" data-ng-click=selectGridChart(symbolsToLoad[3]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[3]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[3]) data-ng-if=symbolsToLoad[3] data-symbol-data=symbolsToLoad[3]> </dashboard-simple-chart> </div> </div> <div class="row last-row"> <div class="medium-6 large-6 columns"> <dashboard-simple-chart class=bottom-row data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[4].symbol}" data-ng-click=selectGridChart(symbolsToLoad[4]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[4]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[4]) data-ng-if=symbolsToLoad[4] data-symbol-data=symbolsToLoad[4]> </dashboard-simple-chart> </div> <div class="medium-6 large-6 columns"> <dashboard-simple-chart class=bottom-row data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[5].symbol}" data-ng-click=selectGridChart(symbolsToLoad[5]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[5]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[5]) data-ng-if=symbolsToLoad[5] data-symbol-data=symbolsToLoad[5]> </dashboard-simple-chart> </div> </div> </div> <div class="bc-dashboard-chart__inner-wrapper grid grid-6" data-ng-if="chartStyle === \'interactive\' && gridView === 6 && !gridLoading"> <div class=row> <div class="medium-3 large-3 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[0].symbol}" data-ng-click=selectGridChart(symbolsToLoad[0]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[0]) data-ng-if=symbolsToLoad[0] data-symbol-data=symbolsToLoad[0]> </dashboard-simple-chart> </div> <div class="medium-3 large-3 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[1].symbol}" data-ng-click=selectGridChart(symbolsToLoad[1]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[1]) data-ng-if=symbolsToLoad[1] data-symbol-data=symbolsToLoad[1]> </dashboard-simple-chart> </div> <div class="medium-3 large-3 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[2].symbol}" data-ng-click=selectGridChart(symbolsToLoad[2]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[2]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[2]) data-ng-if=symbolsToLoad[2] data-symbol-data=symbolsToLoad[2]> </dashboard-simple-chart> </div> <div class="medium-3 large-3 columns"> <dashboard-simple-chart data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[3].symbol}" data-ng-click=selectGridChart(symbolsToLoad[3]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[3]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[3]) data-ng-if=symbolsToLoad[3] data-symbol-data=symbolsToLoad[3]> </dashboard-simple-chart> </div> </div> <div class=row> <div class="medium-3 large-3 columns"> <dashboard-simple-chart class=bottom-row data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[4].symbol}" data-ng-click=selectGridChart(symbolsToLoad[4]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[4]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[4]) data-ng-if=symbolsToLoad[4] data-symbol-data=symbolsToLoad[4]> </dashboard-simple-chart> </div> <div class="medium-3 large-3 columns"> <dashboard-simple-chart class=bottom-row data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[5].symbol}" data-ng-click=selectGridChart(symbolsToLoad[5]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[5]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[5]) data-ng-if=symbolsToLoad[5] data-symbol-data=symbolsToLoad[5]> </dashboard-simple-chart> </div> <div class="medium-3 large-3 columns"> <dashboard-simple-chart class=bottom-row data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[6].symbol}" data-ng-click=selectGridChart(symbolsToLoad[6]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[6]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[6]) data-ng-if=symbolsToLoad[6] data-symbol-data=symbolsToLoad[6]> </dashboard-simple-chart> </div> <div class="medium-3 large-3 columns"> <dashboard-simple-chart class=bottom-row data-ng-class="{\'dashborad-grid-selected\': selectedGridChart.symbol === symbolsToLoad[7].symbol}" data-ng-click=selectGridChart(symbolsToLoad[7]) data-tablet-dblclick=switchToOneViewGrid(symbolsToLoad[7]) data-ng-dblclick=switchToOneViewGrid(symbolsToLoad[7]) data-ng-if=symbolsToLoad[7] data-symbol-data=symbolsToLoad[7]> </dashboard-simple-chart> </div> </div> </div> </div> '
    },
    ngDA: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.dataLoading = !0, e.init = function(a) {
                t.getActivityPerExchange(a).then(function(t) {
                    e.items = t.data, e.dataLoading = !1
                })
            }
        }
        i.$inject = ["$scope", "ActivityPerExchangeApiFactory"], e.exports = i
    },
    nh45: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            t.cancel = function() {
                a.dismiss()
            }, t.confirm = function() {
                r.updateChartTemplate(o.createTemplate(i)).then(function(t) {
                    o.updateTemplateInList(t.data), e.$broadcast("interactiveChartTemplatesListUpdated", {
                        template: t.data
                    }), n.success(i.name + " template has been updated."), a.close()
                }, function(e) {
                    console.warn("Template could not be updated: " + e)
                })
            }
        }
        i.$inject = ["$rootScope", "$scope", "$modalInstance", "templateData", "interactiveChartTemplateApiFactory", "interactiveChartTemplates", "Notification"], e.exports = i
    },
    nk2z: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            var l = [],
                c = null,
                d = a.defer(),
                u = !1,
                p = "STK";

            function m(e) {
                var t = e.indexOf(".");
                return -1 === t ? e : e.substring(0, t)
            }
            return {
                getFilters: function() {
                    return l
                },
                getFilterItems: function(a, i) {
                    return p = a = a || "STK", e.call(t.API_URL + "/screeners/filters/" + a).then(function(e) {
                        e.hasOwnProperty("profile") && e.profile.filters.hasOwnProperty("exchange") && delete e.profile.filters.exchange, e.lists ? (e.lists.filters.watchlist && s.isLoggedIn() && 0 === s.getUserData().watchlists.length && (e.lists.filters.watchlist.title = "No Watchlists", e.lists.filters.watchlist.value = null), e.lists.filters.portfolio && s.isLoggedIn() && 0 === s.getUserData().portfolios.length && (e.lists.filters.portfolio.title = "No Portfolios", e.lists.filters.portfolio.value = null)) : e.watchlist && s.isLoggedIn() && 0 === s.getUserData().watchlists.length ? (e.watchlist.title = "No Watchlists", e.watchlist.value = null) : e.portfolio && s.isLoggedIn() && 0 === s.getUserData().portfolios.length ? (e.portfolio.title = "No Portfolios", e.portfolio.value = null) : s.isLoggedIn() || -1 === ["BULLC", "CCALL", "NPUT", "BEARC", "BEARP", "BULLP", "OPT"].indexOf(a) || (e.watchlist = {
                            title: "No Watchlists",
                            value: null
                        }, e.portfolio = {
                            title: "No Portfolios",
                            value: null
                        });
                        try {
                            switch (i) {
                                case "asx":
                                case "lse":
                                    delete e.fundamentals, delete e.growth, delete e.perShareInfo, delete e.ratios, delete e.financials, delete e.growthRates, delete e.financialRatios, delete e.financialFigures, delete e["sectors&IndexGroups"], delete e.profile.filters.indexGroups, delete e.profile.filters.sector;
                                    break;
                                case "cad":
                                    delete e.fundamentals.filters.annualSales, delete e.fundamentals.filters.lastQuarterSales, delete e.fundamentals.filters.lastQuarterIncome, "ETF" === a && (delete e.fundamentals.filters.valuation.filters.peRatio, delete e.fundamentals.filters.risk.filters.alpha, delete e.fundamentals.filters.growth, delete e.profile.filters.assetClass, delete e.sectors), e.growth && (delete e.growth.filters.return1y, delete e.growth.filters.return3y, delete e.growth.filters.return5y), e.perShareInfo && (delete e.perShareInfo.filters.epsGrowthQuarter, delete e.perShareInfo.filters.epsGrowthYear, delete e.perShareInfo.filters.dividendPayout), e.ratios && (delete e.ratios.filters.pegRatio, delete e.ratios.filters.profitMargin, delete e.ratios.filters.bookValue, delete e.ratios.filters.interestCoverage), delete e.financials.filters.commonEquity
                            }
                        } catch (e) {}
                        return e
                    })
                },
                getFiltersData: function(t) {
                    var a;
                    return p = t, a = -1 === ["BULLC", "CCALL", "NPUT", "BEARC", "BEARP", "BULLP", "OPT"].indexOf((t = t || "STK").toUpperCase()) || s.isLoggedIn() ? s.isLoggedIn() ? o.buildUrl(o.route(n.config.routes["get.api.screeners.fields"], {
                        type: t
                    }), {
                        market: n.config.user.market
                    }) : o.buildUrl(o.route(n.config.routes["get.api.screeners.anon.fields"], {
                        type: t
                    }), {
                        market: n.config.user.market
                    }) : o.buildUrl(o.route(n.config.routes["get.api.screeners.anon.optionsFields"], {
                        type: t
                    }), {
                        market: n.config.user.market
                    }), u ? d.promise : (null === c ? (u = !0, e.call(a).then(function(e) {
                        c = e, d.resolve(e)
                    }, function(e) {
                        d.reject(e)
                    }).finally(function() {
                        u = !1
                    })) : d.resolve(c), d.promise)
                },
                getScreenerType: function() {
                    return p
                },
                addFilter: function(e) {
                    if (void 0 === e.directive || void 0 === e.filters) throw new Error('"directive", "filters" properties are required for ' + e.title);
                    var t = angular.copy(e);
                    l.push(t)
                },
                addFilterByName: function(e, t, a) {
                    this.getFiltersData(a).then(function(a) {
                        var o = angular.copy(a[e]);
                        o.directive = i[o.type], o.key = e, void 0 !== t && (o.data = t), l.push(o), r.$broadcast("screenerFiltersReady")
                    })
                },
                removeFilter: function(e) {
                    return e = "number" != typeof e ? parseInt(e, 10) : e, l.splice(e, 1)
                },
                removeAllFilters: function(e) {
                    l.splice(e, l.length)
                },
                countFilters: function() {
                    return l.length
                },
                prepareFilters: function(t, i) {
                    var r, o, n, s = a.defer(),
                        l = [],
                        c = 0;
                    return t.forEach(function(t) {
                        Object.keys(t.filters).forEach(function(a) {
                            if (t.data && t.data.filters && t.data.filters.hasOwnProperty(a) && (t.data = t.data.filters), t.data.hasOwnProperty(a)) {
                                if ("static" !== t.type && (void 0 === t.filters[a].view || !1 !== t.filters[a].view)) switch (t.type) {
                                    case "rangeDate":
                                        t.data[a].value && t.data[a].value.length && i.push(t.data[a].field || t.filters[a].field);
                                        break;
                                    case "exchange":
                                        (~i.indexOf("exchange") || "options.exchange" === t.key) && i.push(t.data[a].field || t.filters[a].field);
                                        break;
                                    case "compare":
                                        i.push(t.data[a].field || t.filters[a].field), t.data[a] && t.data[a].operator && -1 !== ["gtField", "ltField", "geField"].indexOf(t.data[a].operator) && "date" !== t.data[a].type && i.push(t.data[a].value);
                                        break;
                                    default:
                                        "options.list" !== t.key && i.push(t.data[a].field || t.filters[a].field)
                                }
                                if (r = angular.copy(t.data[a].value), t.filters[a].inversion && r.length > 1 && (o = r[1], r[1] = r[0], r[0] = o), "string" == typeof(n = t.data[a].field || t.filters[a].field) && (n = [n]), t.hook && r.length > 0) {
                                    c++;
                                    var d = a,
                                        u = n,
                                        p = t.hook.uri;
                                    switch (t.hook.parameter) {
                                        case "ids":
                                            p += "?", r.forEach(function(e) {
                                                p += "ids[]=" + e + "&"
                                            })
                                    }
                                    p = p.substring(0, p.length - 1), e.call(p, "GET").then(function(e) {
                                        u.forEach(function(a) {
                                            l.push({
                                                operator: t.data[d].operator || t.filters[d].operator,
                                                value: e,
                                                field: m(a)
                                            })
                                        }), 0 == --c && s.resolve(l)
                                    })
                                } else n.forEach(function(e) {
                                    switch (t.type) {
                                        case "rangeDate":
                                            r && r.length && (r.forEach(function(e, t) {
                                                r[t] = e || ""
                                            }), l.push({
                                                operator: t.data[a].operator || t.filters[a].operator,
                                                value: r,
                                                field: m(e)
                                            }));
                                            break;
                                        default:
                                            var i = t.filters.default && t.filters.default.queryField ? t.filters.default.queryField : e;
                                            l.push({
                                                operator: t.data[a].operator || t.filters[a].operator,
                                                value: r,
                                                field: m(i)
                                            })
                                    }
                                })
                            }
                        })
                    }), 0 === c && s.resolve(l), s.promise
                }
            }
        }
        i.$inject = ["dataProvider", "apiConfig", "$q", "screenerDirectiveMapper", "$rootScope", "utils", "$window", "authService"], e.exports = i
    },
    nmde: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    portfolio: "=",
                    dataLoading: "=",
                    publicView: "="
                },
                controller: ["$scope", function(a) {
                    var l = u.getUserData();
                    a.datatableConfig = {
                        symbolDetails: !0,
                        quickLinks: !0,
                        colorize: ["combined_change", "total_change", "daily_return", "return"],
                        opinion: ["action"],
                        portfolioTransaction: !0,
                        portfolioId: a.portfolio.id,
                        portfolioPublicView: a.publicView,
                        portfolioHideNotes: !1,
                        emptyText: "Your portfolio has no transactions.",
                        disabledRealtime: !0,
                        filter: {
                            parseHTML: {
                                columns: ["symbolName"]
                            }
                        },
                        tableName: "default",
                        link: ["symbolName", "contractName", "symbolShortName"],
                        symbolRoute: "quotes.allFutures",
                        specRouteKey: ["symbolName", "contractName", "symbolShortName"]
                    }, a.datatableSticky = !0, a.datatableConfig.symbolsSequences = a.portfolio.items.map(function(e) {
                        return e.symbol
                    });
                    var p, m = {},
                        h = {};

                    function g() {
                        switch (a.datatableConfig.portfolioHideNotes = !1, a.portfolioView) {
                            case "portfolio":
                                a.datatableConfig.symbolDetails = !0, a.datatableSticky = !0;
                                break;
                            case "detailed":
                                a.datatableConfig.symbolDetails = !1, a.datatableSticky = !1;
                                break;
                            case "extended":
                                a.datatableConfig.portfolioHideNotes = !0, a.datatableConfig.symbolDetails = !0, a.datatableSticky = !0;
                                break;
                            default:
                                a.datatableConfig.symbolDetails = !0, a.datatableSticky = !0
                        }
                    }

                    function f() {
                        a.portfolioDatatableData = e.getPortfolioDatatableData(a.portfolio, a.portfolioView, a.showClosedPositions);
                        var t = o.colorizeFields(a.datatableConfig, a.portfolioDatatableData[0].meta.field.shortName);
                        a.datatableConfig.colorize = t.colorize, a.datatableConfig.opinion = t.opinion, a.portfolioDatatableData[0].meta && a.portfolioDatatableData[0].meta.field && a.portfolioDatatableData[0].meta.field.shortName && a.portfolioDatatableData[0].meta.field.shortName.hasOptions ? a.datatableConfig.resetExclude = ["raw", "symbolCode", "updatedFields", "lastPriceDirection", "symbolType", "customLinks"] : a.datatableConfig.resetExclude = ["raw", "symbolCode", "updatedFields", "lastPriceDirection", "symbolType", "hasOptions", "customLinks"]
                    }
                    a.page = s.search().page || 1, "all" !== a.page ? (a.paginationParams = {
                        currentPage: parseInt(a.page) || 1
                    }, p = c.isMobileOnly() ? d.config.pagination.mobile || 25 : c.isTabletOnly() ? d.config.pagination.tablet || 50 : d.config.pagination.desktop || 100, a.datatableConfig.pagination = p) : (a.paginationParams = {
                        currentPage: 1
                    }, p = !1);
                    var b = function(e) {
                        a.dataLoading = !0, a.portfolioDatatableData = null, a.datatableConfig.order = m, h = {
                            view: a.portfolioView,
                            timeFrame: a.timeFrame,
                            showClosedPositions: a.showClosedPositions ? 1 : 0,
                            useMasterDb: e || !1,
                            page: a.paginationParams.currentPage
                        }, m.orderBy && m.orderDir && (h.orderBy = m.orderBy, h.orderDir = m.orderDir);
                        var r = angular.copy(h);
                        p && (h.limit = p), r.portfolioId = a.portfolio.id, r.method = "portfolio", r.excludeClosed = !a.showClosedPositions, delete r.page, t.$broadcast("setDownloadConfig", r), i.getPortfolio(a.portfolio.id, h).then(function(e) {
                            Object.keys(e.data[0]).forEach(function(t) {
                                a.portfolio[t] = e.data[0][t]
                            }), f(), a.dataLoading = !1
                        })
                    };
                    a.changePortfolioView = function() {
                        if ("visual" === a.portfolioView) return !1;
                        b(), g()
                    }, a.changePortfolioTimeFrame = function() {
                        if ("visual" === a.portfolioView) return !1;
                        b()
                    }, a.toggleClosedPositions = function() {
                        a.disabledShowClosedPositions = !0, h.excludeClosed = !a.showClosedPositions, t.$broadcast("setDownloadConfig", h), t.$broadcast("toggleClosedPositions", a.showClosedPositions), a.publicView ? b(!0) : (a.portfolio.show_closed = a.showClosedPositions ? 1 : 0, i.updatePortfolio(a.portfolio.id, a.portfolio).then(function() {
                            a.disabledShowClosedPositions = !1, b(!0)
                        }))
                    }, a.$on("portfolioTransactionUpdated", function() {
                        if ("visual" === a.portfolioView) return !1;
                        b(!0)
                    }), a.$on("reloadPortfolioData", function(e, a) {
                        if (a.noUpdate) {
                            var i = angular.copy(h);
                            p && (i.limit = p), t.$broadcast("setDownloadConfig", i)
                        } else m.orderBy = a.field, m.orderDir = a.dir ? "desc" : "asc", b()
                    }), t.$on("showEditTransactionModal", function(e, t) {
                        var i = n.find(a.portfolio.items, {
                            id: t.id
                        });
                        i && r.transactionForm(a.portfolio, i, t.note)
                    });
                    a.portfolioView = s.search().portfolioViewName || a.portfolio.default_view, "default" === a.portfolioView && (l.preferences && l.preferences.default_view ? a.portfolioView = l.preferences.default_view : a.portfolioView = a.portfolio.default_view), a.timeFrame = s.search().timeFrame || "current", a.showClosedPositions = !!a.portfolio.show_closed, f(), g(), h = {
                        portfolioId: a.portfolio.id,
                        view: a.portfolioView,
                        timeFrame: a.timeFrame,
                        method: "portfolio"
                    }, setTimeout(function() {
                        a.portfolio.item_count > p && t.$broadcast("reloadPortfolioData", {
                            noUpdate: !0
                        })
                    }, 0), a.loadAllData = function() {
                        a.paginationParams.currentPage = 1, p = !1, b()
                    }, a.loadPage = function() {
                        a.dataLoading = !0, b()
                    }, a.refreshPortfolio = function() {
                        t.$broadcast("portfolioTransactionUpdated")
                    }
                }],
                template: a("/wNF")
            }
        }
        i.$inject = ["portfolioDataProcessor", "$rootScope", "portfolioApiFactory", "portfolioModalFactory", "barchartDatatableColorize", "_", "$location", "portfolioSettings", "utils", "$window", "authService"], e.exports = i
    },
    nzGs: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a, i) {
                    a.addClass("ng-binding").data("$binding", i.bcBindUnsafe), t.$watch(i.bcBindUnsafe, function(i) {
                        if (a.empty(), i) {
                            var r = e("<span>" + i + "</span>")(t);
                            a.append(r)
                        }
                    })
                }
            }
        }
        i.$inject = ["$compile"], e.exports = i
    },
    nzQ4: function(e, t) {
        e.exports = '<div class="bc-screener__row-filter display-filter"> <div class="row collapse"> <div class="column small-12 medium-12"> <div class=bc-screener__filter-title> <span class=bc-screener__filter-name>filter display</span> </div> <div class=bc-screener__checkbox-names-list data-ng-if="$ctrl.type === \'STK\'"> <bc-checkbox data-cb-model=$ctrl.fields.symbolName data-cb-id="\'cb-exchange-name\'" data-cb-label="\'Name\'"> </bc-checkbox> <bc-checkbox data-cb-model=$ctrl.fields.lastPrice data-cb-id="\'cb-exchange-last-price\'" data-cb-label="\'Last Price\'"> </bc-checkbox> <bc-checkbox data-cb-model=$ctrl.fields.exchange data-cb-id="\'cb-exchange-exchange\'" data-cb-label="\'Exchange\'"> </bc-checkbox> <bc-checkbox data-cb-model=$ctrl.fields.industry data-cb-id="\'cb-exchange-industry\'" data-cb-label="\'Industry\'"> </bc-checkbox> <bc-checkbox data-ng-if="$ctrl.market===\'usd\'" data-cb-model=$ctrl.fields.sicDescription data-cb-id="\'cb-sic-industry\'" data-cb-label="\'SIC Industry\'"> </bc-checkbox> <bc-checkbox data-cb-model=$ctrl.fields.tradeTime data-cb-id="\'cb-exchange-time\'" data-cb-label="\'Time\'"> </bc-checkbox> </div> <div class=bc-screener__checkbox-names-list data-ng-if="$ctrl.type === \'ETF\'"> <bc-checkbox data-cb-model=$ctrl.fields.symbolName data-cb-id="\'cb-exchange-name\'" data-cb-label="\'Name\'"> </bc-checkbox> <bc-checkbox data-cb-model=$ctrl.fields.lastPrice data-cb-id="\'cb-exchange-last-price\'" data-cb-label="\'Last Price\'"> </bc-checkbox> <bc-checkbox data-cb-model=$ctrl.fields.exchange data-cb-id="\'cb-exchange-exchange\'" data-cb-label="\'Exchange\'"> </bc-checkbox> <bc-checkbox data-cb-model=$ctrl.fields.tradeTime data-cb-id="\'cb-exchange-time\'" data-cb-label="\'Time\'"> </bc-checkbox> </div> <div class=bc-screener__checkbox-names-list data-ng-if="$ctrl.type === \'FUND\'"> <bc-checkbox data-cb-model=$ctrl.fields.symbolName data-cb-id="\'cb-exchange-name\'" data-cb-label="\'Name\'"> </bc-checkbox> <bc-checkbox data-cb-model=$ctrl.fields.lastPrice data-cb-id="\'cb-exchange-last-price\'" data-cb-label="\'Last Price\'"> </bc-checkbox> <bc-checkbox data-cb-model=$ctrl.fields.tradeTime data-cb-id="\'cb-exchange-time\'" data-cb-label="\'Time\'"> </bc-checkbox> </div> </div> </div> </div>'
    },
    "o/vu": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o = a.API_URL + "/portfolio";

            function n(e) {
                return {
                    symbol: e.symbol,
                    action: e.action.$viewValue,
                    quantity: e.quantity.$viewValue,
                    entry_date: e.entry_date.$modelValue,
                    entry_price: e.entry_price.$viewValue,
                    exit_date: e.exit_date.$modelValue,
                    exit_price: e.exit_price.$viewValue,
                    commission: e.commission.$viewValue,
                    notes: e.notes.$viewValue,
                    high_alert: e.high_alert.$viewValue,
                    low_alert: e.low_alert.$viewValue,
                    adjust_cash: e.adjust_cash ? e.adjust_cash.$viewValue : null
                }
            }
            return {
                getAllPortfolios: function() {
                    return i.call(o, e.GET)
                },
                getAllPortfoliosTotals: function(a, r) {
                    var n = {};
                    return a && (n.user_ids = a), r && (n.includeGrandTotals = !0), i.call(t.buildUrl(o + "/totals"), e.GET, n)
                },
                getPortfolio: function(a, n) {
                    return n.timeFrame && "daily" === n.timeFrame && (n.eod = !0, delete n.timeFrame), n = r.merge({
                        view: "main",
                        page: 1,
                        useMasterDb: !1
                    }, n), i.call(t.buildUrl(o + "/" + a), e.GET, n)
                },
                getPortfolioForEditForm: function(a) {
                    return i.call(t.buildUrl(o + "/" + a), e.GET, {
                        view: "detailed",
                        showClosedPositions: !0
                    })
                },
                createPortfolio: function(t) {
                    return i.call(o, e.POST, t)
                },
                updatePortfolio: function(t, a) {
                    return i.call(o + "/" + t, e.PUT, a)
                },
                organizePortfolio: function(t, a, r) {
                    return i.call(o + "/" + t + "/organize", e.PUT, {
                        order: a,
                        delete: r
                    })
                },
                organizeAllPortfolios: function(t, a, r) {
                    return i.call(o + "/organize", e.PUT, {
                        order: t,
                        delete: a,
                        rename: r
                    })
                },
                deletePortfolio: function(t) {
                    return i.call(o + "/" + t, e.DELETE)
                },
                getSymbol: function(r) {
                    var o = {
                        symbol: r,
                        fields: "symbol,symbolName,symbolType,lastPrice,priceChange,percentChange"
                    };
                    return i.call(t.buildUrl(a.API_URL + "/quotes/get", o), e.GET)
                },
                getTransaction: function(t, a) {
                    return i.call(o + "/" + t + "/item/" + a, e.GET)
                },
                createTransaction: function(t, a) {
                    return i.call(o + "/" + t + "/item", e.POST, n(a), {
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    })
                },
                updateTransaction: function(t, a, r) {
                    return i.call(o + "/" + t + "/item/" + a, e.PUT, n(r), {
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    })
                },
                deleteTransaction: function(t, a) {
                    return i.call(o + "/" + t + "/item/" + a, e.DELETE)
                },
                getVisualizationData: function(t, a, r) {
                    var n = o + "/" + t + "/weights",
                        s = {};
                    return r && "daily" === r && (s.eod = !0), a || (s.excludeClosed = !0), i.call(n, e.GET, s)
                },
                updateEodEmails: function(t) {
                    return i.call(o + "/update_batch", e.PUT, t)
                },
                addComment: function(t, a) {
                    return i.call(o + "/" + t + "/comment", e.POST, a)
                },
                editComment: function(t, a, r) {
                    return i.call(o + "/" + t + "/comment/" + a, e.PUT, r)
                },
                deleteComment: function(t, a) {
                    return i.call(o + "/" + t + "/comment/" + a, e.DELETE)
                },
                getTimeline: function(t, a) {
                    return i.call(o + "/" + t + "/timeline", e.GET, a)
                },
                getSymbolsMainData: function(r) {
                    var o = {
                        symbols: r.join(","),
                        fields: "symbol,symbolName,symbolType",
                        meta: "symbol.normalized"
                    };
                    return i.call(t.buildUrl(a.API_URL + "/quotes/get", o), e.GET)
                },
                transaferTransaction: function(t, a, r) {
                    return i.call(o + "/" + a + "/item/" + t + "/transfer", e.PUT, r)
                }
            }
        }
        i.$inject = ["httpVerbs", "utils", "apiConfig", "dataProvider", "_"], e.exports = i
    },
    o5HS: function(e, t) {
        e.exports = '<div class=technical-chart-buttons> <div class="row collapse"> <div class="column small-12 right-buttons-container" data-ng-class="{\'medium-6\': !fullScreen}"> <button class="bc-button light-blue upper technical-chart-draw-btn" type=submit>Draw Chart</button> </div> <div class="column small-12" data-ng-class="{\'medium-6\': !fullScreen}"> <a data-bc-modal-login=templates data-ng-show="chartSettings.currentSetting === technicalChartConfig.chartSettings.BASIC" class="bc-button white-with-border extra save-settings-btn" href="" data-ng-click=saveSettingAsTemplate()>Save as Template</a> <a class="bc-button white-with-border extra clear-settings-btn" href="" data-ng-click=clearSettings()>Reset</a> </div> </div> </div>'
    },
    oAEk: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                template: a("+mcS")
            }
        }
    },
    oAk1: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            this.showModal = function() {
                t.open({
                    template: a("sDvR"),
                    controller: "bcModalAgreementCtrl",
                    windowClass: "bc-agreement-modal",
                    resolve: {
                        agreementDate: function() {
                            return null
                        }
                    }
                })
            }, this.showAnnualModal = function(e) {
                t.open({
                    template: a("MNEI"),
                    controller: "bcModalAgreementCtrl",
                    windowClass: "bc-agreement-modal",
                    resolve: {
                        agreementDate: function() {
                            return moment.unix(e).utc().format("MMMM Do, YYYY")
                        }
                    }
                }).result.then(function(e) {}, function() {
                    i.location.href = "/logout"
                })
            }
        }
        i.$inject = ["$rootScope", "$modal", "$window", "Notification", "bcSavePreferencesService"], e.exports = i
    },
    oCcP: function(e, t) {
        e.exports = '<div> <form class=bc-form name=advancedSearchForm novalidate data-ng-submit=findSymbol()> <div class=search-query> <div class="search-text clear-button-wrapper"> <label>Search for a Symbol or Name that</label> </div> <div class=search-type> <div class=input-radio> <input type=radio id=type-starts name=searchType data-ng-model=search.searchType value=starts> <label for=type-starts> <span></span> Starts with </label> </div> <div class=input-radio> <input type=radio id=type-contain name=searchType data-ng-model=search.searchType value=contains checked=checked> <label for=type-contain> <span></span> Contains </label> </div> <div class=input-radio> <input type=radio id=type-end name=searchType data-ng-model=search.searchType value=end> <label for=type-end> <span></span> Ends With </label> </div> </div> <div class="search-text clear-button-wrapper"> <input type=text name=q data-barchart-clear-input data-ng-model=search.q> </div> <span class=search-actions> <input type=submit class="bc-button ok light-blue" data-ng-disabled=!search.q value=Search> </span> </div> <div class=search-markets> <div class=block-title> <h4 data-ng-click=toggleMarketsFilter()> Filter By Market <span class=bc-glyph-chevron-up data-ng-if=showMarketsFilter></span> <span class=bc-glyph-chevron-down data-ng-if=!showMarketsFilter></span> </h4> </div> <div class="block-content ng-hide clearfix" data-ng-show=showMarketsFilter> <dl class=markets-groups> <dt class=markets-groups-item> <div class=input-checkbox> <input type=checkbox id=market-item-all data-ng-model=allMarketsSelected data-ng-true-value=true data-ng-false-value=false data-ng-disabled=loading data-ng-change=selectAllMarkets()> <label for=market-item-all> <span class=bc-glyph-check></span> All Markets </label> </div> </dt> <dd class="markets-groups-list clearfix"> <ul class=market-group-items data-ng-repeat="(marketGroupKey, marketGroup) in markets"> <li data-ng-repeat="(marketKey, market) in marketGroup"> <div class=input-checkbox> <input type=checkbox id="market-item-[[ marketGroupKey + marketKey ]]" data-ng-disabled=loading checklist-model=search.symbolCodes checklist-value=market.value> <label for="market-item-[[ marketGroupKey + marketKey ]]"> <span class=bc-glyph-check></span> [[ market.title ]] </label> </div> </li> </ul> </dd> </dl> </div> </div> </form> <div class=search-result data-ng-if=searchData.q> <div class=block-title> <h4> Search Results <span data-ng-if="!searchResultsEmpty && resultCount">Showing the first [[ resultCount ]] result<span class=no-padding data-ng-show="resultCount > 1">s</span>. Please filter by Market to narrow the list.</span> <span class=search-results-error data-ng-show=searchResultsEmpty>ERROR: Your search did not return any results. Please try again.</span> </h4> </div> <div class=block-content data-ng-show=!searchResultsEmpty> <barchart-datatable data-sticky="[[ dataTableConfig.sticky ]]" data-api-config=dataTableConfig.api data-custom-handlers=dataTableConfig.customHandlers data-options=dataTableConfig.options> </barchart-datatable> </div> </div> </div>'
    },
    oDRS: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                template: a("yA4G"),
                controller: ["$scope", function(e) {}]
            }
        }
        i.$inject = [], e.exports = i
    },
    oIKg: function(e, t) {
        e.exports = "<div class=dashboard-grid-apply-template-drop-down> <interactive-chart-template-drop-down data-disable-edit=true data-disable-save=true data-use-grid=true> </interactive-chart-template-drop-down> </div>"
    },
    oISZ: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class=modal-header> Configure Symbols <i class="bc-glyph-times form-close right" data-ng-click=modalDismiss();></i> </div> <form data-ng-if=settingsSymbols class="bc-form configure-symbol-form" name=configureSymbolForm data-ng-submit=save() novalidate> <div class=configure-symbol__fieldset-row data-ng-repeat="(key, item) in settingsSymbols track by $index"> <div> <div class=clear-button-wrapper> <input type=text placeholder="Enter a symbol..." data-ng-class="{\'error\': (invalidSymbols && invalidSymbols.indexOf(symbols[key]) > -1) ||\n                           configureSymbolForm[symbols[key]].$error.required && configureSymbolForm.$submitted }" data-ng-model=symbols[key] data-ng-init="symbols[key] = item" required data-barchart-clear-input/> </div> <div class="text-center text-red" data-ng-show="invalidSymbols && invalidSymbols.indexOf(symbols[key].toUpperCase()) > -1"> Invalid symbol </div> <div class="text-center text-red" data-ng-show="repeatedSymbols && repeatedSymbols.indexOf(symbols[key].toUpperCase()) > -1"> Symbol should be unique. </div> </div> </div> <div class="text-center text-red" data-ng-show=symbolIsRequired> 4 symbols are required. </div> <div class="text-center buttons-wrapper"> <button type=button class="bc-button grey" data-ng-click=modalDismiss();>Cancel</button> <button type=submit class="bc-button ok light-blue">Apply</button> </div> <div class="text-center revert"> <a data-ng-click=revertToDefault()>Revert to Default</a> </div> </form> </div>'
    },
    oIXV: function(e, t) {
        e.exports = '<div class=dashboard-grid-view-control> <bc-dropdown-flexible data-label-img=$ctrl.imagePath data-dropdown-id=bc-dashboard-grid-view-dropdown data-remove-mobile-touch=true title="Select Grid for Thumbnail Charts" class=js-bc-dashboard-grid-view-dropdown> <div class=tools-dropdown-content> <div data-ng-if=$ctrl.allowGrid> <p class=title>Multi-Chart Views:</p> <ul> <li data-ng-click=$ctrl.loadGrid(1)> <img src=/img/grid_types/1_on.png data-ng-show="$ctrl.gridView === 1"/> <img src=/img/grid_types/1_off.png data-ng-show="$ctrl.gridView !== 1"/> </li> <li data-ng-click=$ctrl.loadGrid(2)> <img src=/img/grid_types/2h_on.png data-ng-show="$ctrl.gridView === 2"/> <img src=/img/grid_types/2h_off.png data-ng-show="$ctrl.gridView !== 2"/> </li> <li data-ng-click=$ctrl.loadGrid(3)> <img src=/img/grid_types/2v_on.png data-ng-show="$ctrl.gridView === 3"/> <img src=/img/grid_types/2v_off.png data-ng-show="$ctrl.gridView !== 3"/> </li> <li data-ng-click=$ctrl.loadGrid(4)> <img src=/img/grid_types/2x2_on.png data-ng-show="$ctrl.gridView === 4"/> <img src=/img/grid_types/2x2_off.png data-ng-show="$ctrl.gridView !== 4"/> </li> </ul> </div> <div class=not-allow data-ng-if=!$ctrl.allowGrid> <p> Multi-Chart View not available for a single symbol. Please open one of your Lists from the blue navigation bar. </p> </div> </div> </bc-dropdown-flexible> </div>'
    },
    oK6E: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            this.user = e.getData() || {}, this.ref = a, this.close = function() {
                e.clearErrors(), e.clear(), t.dismiss()
            }
        }
        i.$inject = ["userAuthFormData", "$modalInstance", "ref"], e.exports = i
    },
    oKKp: function(e, t) {
        e.exports = '<div class="module options"> <a target=_self data-ng-href="/[[ ::OptionsCtrl.quotesService.getSector(OptionsCtrl.currentSymbol.symbolType) ]]/quotes/[[ ::OptionsCtrl.currentSymbol.symbol ]]/options"> <h4>Options <span data-ng-show=OptionsCtrl.expDate>(exp. [[ ::OptionsCtrl.expDate ]])</span></h4> <div> <span class=call-cell>Calls</span><span class=put-cell>Puts</span></div> <div data-ng-if="::OptionsCtrl.template == \'equities\'" class=module-table> <div class="module-row header"> <div><span>BID</span></div> <div><span>ASK</span></div> <div class=text-center><span>STRIKE</span></div> <div class=text-right><span>BID</span></div> <div class=text-right><span>ASK</span></div> </div> <div data-ng-repeat="item in ::OptionsCtrl.data track by $index" class=module-row> <div class=call><span>[[ ::item.Call_bidPrice ]]</span></div> <div class=call><span>[[ ::item.Call_askPrice ]]</span></div> <div class=text-center> [[ ::item.strikePrice ]]</div> <div class=put><span> [[ ::item.Put_bidPrice ]]</span></div> <div class=put><span> [[ ::item.Put_askPrice ]]</span></div> </div> </div> <div data-ng-if="::OptionsCtrl.template == \'futures\'" class="module-table futures"> <div class="module-row header"> <div><span>Last</span></div> <div class=text-center>STRIKE</div> <div class=text-right><span>Last</span></div> </div> <div data-ng-repeat="item in ::OptionsCtrl.data track by $index" class=module-row> <div class=call><span>[[ ::item.Call_lastPrice ]]</span></div> <div class=text-center> [[ ::item.strikePrice ]]</div> <div class=put><span> [[ ::item.Put_lastPrice ]]</span></div> </div> </div> </a> </div>'
    },
    oN6J: function(e, t) {
        e.exports = "<div class=bc-price-history-checkboxes> <div class=input-checkbox> <input id=bc-dividend-adjust data-ng-change=updateAdjust() data-ng-true-value=\"'dividendAdjustment'\" data-ng-false-value=0 type=checkbox data-ng-model=adjustment> <label class=checkbox for=bc-dividend-adjust> <span class=bc-glyph-check></span> Dividend Adjust </label> </div> </div>"
    },
    oYSG: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.confirmScreenerReset = function() {
                a.removeAllFilters(), a.addFilterByName(i), t.close({
                    status: "OK"
                })
            }, e.cancelScreenerReset = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "screenerFilterService", "defaultFilter"], e.exports = i
    },
    oasL: function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = new Date,
                t = (new Date).getTimezoneOffset() / 60;
            return e.setMinutes(0), t = t < 0 ? Math.abs(t) : t > 0 ? -Math.abs(t) : t, {
                options: {
                    chart: {
                        height: 170,
                        spacingBottom: 0
                    },
                    credits: {
                        enabled: !1
                    },
                    title: {
                        text: ""
                    },
                    legend: {
                        display: !1
                    },
                    xAxis: {
                        lineWidth: 0,
                        gridLineWidth: 1,
                        type: "datetime",
                        dateTimeLabelFormats: {
                            day: "%b %e"
                        },
                        tickWidth: 0,
                        minTickInterval: 864e5,
                        plotLines: [{}]
                    },
                    yAxis: {
                        gridLineWidth: 0,
                        title: {
                            text: null
                        },
                        labels: {
                            formatter: function() {
                                return Highcharts.numberFormat(this.value, 0, ".", ",")
                            }
                        },
                        opposite: !0,
                        plotLines: [{}]
                    },
                    plotOptions: {
                        series: {
                            marker: {
                                enabled: !1
                            },
                            states: {
                                hover: {
                                    lineWidth: 1
                                }
                            }
                        },
                        line: {
                            lineWidth: 1
                        }
                    }
                },
                series: [{
                    name: "chart",
                    showInLegend: !1
                }]
            }
        }
    },
    odIh: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    portfolio: "="
                },
                link: function(a) {
                    a.treeTransactions = a.portfolio.items, a.removeTransaction = function(t) {
                        e.filter(a.treeTransactions, function(e) {
                            return "~" !== e.symbol
                        }).length > 1 || "~" === t.symbol ? a.pendingTransactionDelete = t : a.lastTransaction = !0
                    }, a.removeTransactionCancel = function() {
                        a.pendingTransactionDelete = null
                    }, a.removeTransactionConfirm = function(e) {
                        a.treeTransactions.splice(e, 1)
                    }, a.addBlankRow = function() {
                        a.treeTransactions.push({
                            id: "~",
                            symbol: "~"
                        }), t.success("A blank row has been added to the bottom of the list.")
                    }, a.moveSymbolTop = function(e) {
                        a.treeTransactions.splice(0, 0, a.treeTransactions.splice(e, 1)[0])
                    }, a.sortRows = function() {
                        a.treeTransactions = e.sortBy(a.treeTransactions, function(e) {
                            return "~" === e[a.sortOrder] ? "" : e.raw[a.sortOrder]
                        }, ["asc"]), a.sortOrder = "", a.portfolio.items = a.treeTransactions
                    }
                },
                template: a("0Hua")
            }
        }
        i.$inject = ["_", "Notification"], e.exports = i
    },
    oeVl: function(e, t, a) {
        "use strict";

        function i(e) {
            var t, a, i, r = function(e) {
                return parseFloat(e[a])
            };
            this.sort = function(o, n, s) {
                var l, c, d;
                return t = (d = arguments)[0], a = d[1], i = d[2], l = r, c = "desc" === i, e("orderBy")(t, l, c)
            }
        }
        i.$inject = ["$filter"], e.exports = i
    },
    oiKp: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "A",
                scope: {},
                link: function(e, t) {
                    function a(e) {
                        e.target.removeAttribute("readonly")
                    }

                    function i(e) {
                        setTimeout(function() {
                            e.target.setAttribute("readonly", "true")
                        }, 0)
                    }
                    t.on("focus", i), t.on("blur", a), e.$on("$destroy", function() {
                        t.off("blur", a), t.off("focus", i)
                    })
                }
            }
        }
    },
    oifM: function(e, t) {
        e.exports = '<div class="tools-dropdown tools-dropdown-period dashboard-grid-period-drop-down"> <bc-dropdown-flexible data-label=$ctrl.getLabel() data-dropdown-id=bc-interactive-chart-dropdown-period> <div class=tools-dropdown-content> <ul> <li data-ng-repeat="item in $ctrl.periods[$ctrl.aggregation.unit]" data-ng-click=$ctrl.changePeriod(item.period) data-ng-class="{\'active\': $ctrl.period === item.period}"> [[ ::item.label ]] </li> </ul> </div> </bc-dropdown-flexible> </div>'
    },
    om7t: function(e, t, a) {
        "use strict";

        function i(e) {
            this.mainPlotGet = function() {
                return {
                    id: "Plot",
                    context: {
                        id: "Get",
                        main: !0
                    }
                }
            }, this.symbolPlotsGet = function() {
                return {
                    id: "Plot",
                    context: {
                        id: "Get",
                        type: "Symbol"
                    }
                }
            }, this.curveStyle = function(t, a) {
                var i = {
                    id: "Plot",
                    context: {
                        id: "Update",
                        type: a || "Symbol",
                        index: 0,
                        curves: [{
                            style: t.curveStyle
                        }]
                    }
                };
                return t.curveAttribute && (i.context.curves[0].attributes = [t.curveAttribute]), t.lineWidth && (i.context.curves[0].lineWidth = t.lineWidth), t.colors && t.colors.length && (i.context.curves[0].colors = angular.copy(t.colors), "Area" === t.curveStyle && (i.context.curves[0].colors[1] = i.context.curves[0].colors[0], -1 === i.context.curves[0].colors[0].indexOf("rgba") && (i.context.curves[0].colors[0] = e.hexToRgba(i.context.curves[0].colors[0], .3))), "Candlestick" !== t.curveStyle && "HeikinAshi" !== t.curveStyle || (i.context.curves[0].colors[2] = i.context.curves[0].colors[1], i.context.curves[0].colors[3] = "#000000"), "HLC" === t.curveStyle && (i.context.curves[0].varyColorPerBar = !0)), "Line" !== t.curveStyle && "Area" !== t.curveStyle || (i.context.curves[0].fields = ["Close", "Change"]), i
            }, this.aggregation = function(e) {
                var t = {
                    id: "Aggregation",
                    context: angular.copy(e)
                };
                return e.spec && void 0 === e.isContractVolume ? t.context.isContractVolume = !1 : void 0 !== e.isContractVolume && (t.context.isContractVolume = e.isContractVolume), t
            }, this.period = function(e) {
                return {
                    id: "Period",
                    context: {
                        period: e
                    }
                }
            }, this.range = function(e) {
                return {
                    id: "Period",
                    context: {
                        range: e
                    }
                }
            }, this.tooltip = function(e) {
                return {
                    id: "Tooltip",
                    context: {
                        visible: !0,
                        mode: !0 === e ? "standard" : "cards"
                    }
                }
            }, this.navigator = function(e) {
                return {
                    id: "Other",
                    context: {
                        showNavigator: e
                    }
                }
            }, this.events = function(e) {
                return {
                    id: "Events",
                    context: {
                        dividends: e.dividends || !1,
                        earnings: e.earnings || !1,
                        splits: e.splits || !1
                    }
                }
            }, this.scaleType = function(e) {
                return {
                    id: "Scale",
                    context: {
                        scale: e
                    }
                }
            }, this.minPaddibg = function(e) {
                return {
                    id: "Scale",
                    context: {
                        minPadding: e
                    }
                }
            }, this.maxPaddibg = function(e) {
                return {
                    id: "Scale",
                    context: {
                        maxPadding: e
                    }
                }
            }, this.marginBars = function(e) {
                return {
                    id: "Scale",
                    context: {
                        marginBars: e
                    }
                }
            }, this.snapAnnotationsToPrices = function(e) {
                return {
                    id: "Scale",
                    context: {
                        snapAnnotationsToPrices: e
                    }
                }
            }, this.gridLines = function(e) {
                return {
                    id: "Other",
                    context: {
                        minorGridLines: e ? "both" : "none"
                    }
                }
            }, this.preventLabelOverlap = function(e) {
                return {
                    id: "Scale",
                    context: {
                        preventLabelOverlap: e
                    }
                }
            }, this.axisType = function(e) {
                return {
                    id: "Other",
                    context: {
                        comparisonMode: "percent" === e ? "Percent" : "None"
                    }
                }
            }, this.comparisonMode = function(e) {
                return {
                    id: "Other",
                    context: {
                        comparisonMode: e
                    }
                }
            }, this.technicalStudiesGet = function() {
                return {
                    id: "Plot",
                    context: {
                        id: "Get",
                        type: "Study"
                    }
                }
            }, this.technicalStudyAdd = function(e) {
                var t = {
                    id: "Plot",
                    context: {
                        id: "Add",
                        type: "Study",
                        studyId: e.id
                    }
                };
                return e.inputs && (t.context.inputs = e.inputs), e.curves && (t.context.curves = e.curves), e.levels && (t.context.levels = e.levels), e.bands && (t.context.bands = e.bands), e.placement && (t.context.placement = e.placement, "clone" === e.placement && (t.context.cloneIndex = e.cloneIndex)), t
            }, this.technicalStudyUpdate = function(e, t) {
                var a = {
                    id: "Plot",
                    context: {
                        id: "Update",
                        type: "Study",
                        index: t,
                        studyId: e.id
                    }
                };
                return e.inputs && (a.context.inputs = e.inputs), e.curves && (a.context.curves = e.curves), e.levels && (a.context.levels = e.levels), e.bands && (a.context.bands = e.bands), e.placement && (a.context.placement = e.placement), a
            }, this.technicalStudyRemove = function(e) {
                return {
                    id: "Plot",
                    context: {
                        id: "Delete",
                        type: "Study",
                        index: e
                    }
                }
            }, this.fundamentalAdd = function(e) {
                return {
                    id: "Plot",
                    context: {
                        id: "Add",
                        type: e.type,
                        fundamentalId: e.id,
                        frequency: e.frequency,
                        curves: e.curves
                    }
                }
            }, this.fundamentalUpdate = function(e, t) {
                return {
                    id: "Plot",
                    context: {
                        id: "Update",
                        type: e.type,
                        index: t,
                        fundamentalId: e.id,
                        frequency: e.frequency,
                        curves: e.curves
                    }
                }
            }, this.fundamentalRemove = function(e, t) {
                return {
                    id: "Plot",
                    context: {
                        id: "Delete",
                        type: t,
                        index: e
                    }
                }
            }, this.expressionsGet = function() {
                return {
                    id: "Plot",
                    context: {
                        id: "Get",
                        type: "Expression"
                    }
                }
            }, this.expressionRemove = function(e) {
                return {
                    id: "Plot",
                    context: {
                        id: "Delete",
                        type: "Expression",
                        index: e
                    }
                }
            }, this.expressionMainPlotAdd = function(e) {
                return {
                    id: "MainPlot",
                    context: {
                        expression: e
                    }
                }
            }, this.seasonalMainPlotAdd = function(e) {
                return {
                    id: "MainPlot",
                    context: {
                        seasonal: e
                    }
                }
            }, this.annualMainPlotAdd = function(e, t) {
                return {
                    id: "MainPlot",
                    context: {
                        annual: e,
                        curves: [{
                            colors: [t],
                            lineWidth: 1
                        }]
                    }
                }
            }, this.expressionAdditionalPlotGet = function() {
                return {
                    id: "Plot",
                    context: {
                        id: "Get",
                        type: "Expression"
                    }
                }
            }, this.expressionAdditionalPlotAdd = function(t, a) {
                var i = {
                    id: "Plot",
                    context: {
                        id: "Add",
                        type: "Expression",
                        expression: t,
                        curves: [a]
                    }
                };
                return "Area" === a.style && (i.context.curves[0].colors[1] = i.context.curves[0].colors[0], i.context.curves[0].colors[0] = e.hexToRgba(i.context.curves[0].colors[0], .5)), i
            }, this.expressionAdditionalPlotUpdate = function(t, a, i) {
                var r = {
                    id: "Plot",
                    context: {
                        id: "Update",
                        type: "Expression",
                        index: i,
                        expression: t,
                        curves: [a]
                    }
                };
                return "Area" === a.style && (r.context.curves[0].colors[1] = r.context.curves[0].colors[0], r.context.curves[0].colors[0] = e.hexToRgba(r.context.curves[0].colors[0], .5)), r
            }, this.changeCompare = function(e) {
                return e.forEach(function(e) {
                    e.symbol = e.symbol.toUpperCase()
                }), {
                    id: "Compare",
                    context: {
                        symbols: e
                    }
                }
            }
        }
        i.$inject = ["utils"], e.exports = i
    },
    ouFJ: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    charts: "=",
                    currentChart: "=",
                    currentSymbol: "=",
                    hideOverlayModal: "&",
                    chartType: "@"
                },
                controller: ["_", "$rootScope", "interactiveChartValidation", "myChartsApiService", "userChartTabService", "Notification", "$window", "BarchartMediaOverlayApiFactory", "technicalChartDrawService", "authService", "quotesService", "watchlistFormModalService", "utils", "BarchartMediaOverlayApiConfig", "$scope", "$timeout", "technicalChartMappingService", "interactiveChartStateService", function(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v) {
                    var y = this;
                    y.dataLoading = !1;
                    var w = d.getUserData() || {};
                    s.config.disableAutoRefreshPage();
                    var C = angular.element(document.querySelector(".bc-overlay-modal-wrapper .modal-content"));
                    C.css("min-height", window.innerHeight + 10 + "px"), window.addEventListener("resize", function() {
                        var e = window.innerHeight + 10 + "px";
                        C.css("min-height", e)
                    }, !0), t.$on("mediaOverlayClosed", function() {
                        v.setMyChartMode(!1)
                    }), y.quickSettings = a("1UwF"), y.technicalChartQuickSettings = {
                        settings: y.quickSettings[4].settings,
                        template: {
                            pricesOn: "1"
                        }
                    }, y.userChartTemplates = w.custom_chart_templates, y.flipChartNextChart = null, y.flipChartPrevChart = null, y.flipChartSymbol = y.currentSymbol, y.technicalTemplatesEditingLink = s.config.routes["my.customChartTemplates.technical"], y.flipChartSymbolTechChartUrl = null, y.flipChartData = null, y.tooltipData = null, y.showTooltip = !1, y.tooltipBaseData = null;
                    var S, x = null,
                        k = ["open", "high", "low", "close", "Volume", "overlay1", "overlay2", "overlay3"],
                        D = {
                            pricesOn: "1"
                        },
                        T = !1,
                        _ = !1;

                    function P(t) {
                        var a = e.findIndex(y.charts, function(e) {
                            return e.id === t.id
                        }); - 1 !== a && y.charts[a - 1] ? y.flipChartPrevChart = y.charts[a - 1] : y.flipChartPrevChart = null, -1 !== a && y.charts[a + 1] ? y.flipChartNextChart = y.charts[a + 1] : y.flipChartNextChart = null
                    }

                    function E(e) {
                        return s.location.protocol + "//" + s.location.hostname + m.route(s.config.routes["quotes.sectors.interactiveChart"], {
                            symbol: e.symbol,
                            sector: s.config.symbols.mapping[e.symbolType]
                        })
                    }

                    function A(e, t) {
                        var a = y.flipChartSymbol,
                            i = JSON.parse(e.state),
                            r = h.getApiConfigFlipcharts(a, i),
                            o = angular.copy(D);
                        if (x && o && (r = h.getApiConfigFlipcharts(a, o)), y.dataLoading = !0, !t && y.technicalChartQuickSettings.settings) {
                            var n = angular.copy(y.technicalChartQuickSettings.settings);
                            r = h.applyQuickSettings(r, n)
                        }
                        angular.copy(r), l.getChart(r).then(function(e) {
                            y.dataLoading = !1, y.chartData = e.data, g.chartData = e.data, y.tooltipData = {}, y.socialTitle = a.symbol + " | Custom Technical Chart for " + a.symbolName, y.redirectUrl = function(e, t) {
                                var a, i = "";
                                return Object.keys(t.api).forEach(function(e) {
                                    i += e + "=" + t.api[e] + "&"
                                }), a = (a = s.location.protocol + "//" + s.location.hostname + m.route(s.config.routes["quotes.sectors.technicalChart"], {
                                    symbol: e.symbol,
                                    sector: s.config.symbols.mapping[e.symbolType]
                                }) + "?" + i).substring(0, a.length - 1)
                            }(a, r);
                            var t = c.createImageMapMarkup(y.chartData.map, g);
                            angular.element(document.querySelector("#bc-technical-chart-flipchart-image-map")).empty().append(t), y.flipChartData = e.data
                        }, function() {
                            console.log("ERROR: Chart could not be loaded.")
                        }).finally(function() {
                            y.dataLoading = !1
                        })
                    }
                    "interactive" === y.chartType ? (y.redirectUrl = E(y.flipChartSymbol), y.socialTitle = y.flipChartSymbol.symbol + " | Custom Interactive Chart for " + y.flipChartSymbol.symbolName, y.socialImageType = "svg") : (y.socialImageType = "base64", y.flipChartSymbolTechChartUrl = (S = y.flipChartSymbol, "/" + u.getSector(S.symbolType) + "/quotes/" + S.symbol + "/technical-chart"), y.socialTitle = y.flipChartSymbol.symbol + " | Custom Technical Chart for " + y.flipChartSymbol.symbolName),
                        function() {
                            if (setTimeout(function() {
                                    t.$broadcast("bc-scrollbar-scroll-to-item", y.currentChart.id)
                                }, 500), P(y.currentChart), "technical" === y.chartType) {
                                var e = o.getChartTab();
                                A(e, !1)
                            }
                        }(), y.loadChartForSymbol = function(e) {
                            y.currentChart = e, !y.dataLoading && e && (setTimeout(function() {
                                t.$broadcast("bc-scrollbar-scroll-to-item", e.id)
                            }, 500), P(e)), i.validateSymbol(e.symbol).then(function(a) {
                                var i = y.flipChartSymbol.symbol !== a.data[0].symbol;
                                y.flipChartSymbol = a.data[0], r.getChart(e.id).then(function(a) {
                                    console.log("[My Charts Toolbar]: Load chart", e), o.setChartTab(a.data), "interactive" === y.chartType ? (i || t.$broadcast("dashboardTabChanged", y.flipChartSymbol), y.redirectUrl = E(y.flipChartSymbol), y.socialTitle = y.flipChartSymbol.symbol + " | Custom Interactive Chart for " + y.flipChartSymbol.symbolName) : A(a.data, !1)
                                })
                            }).catch(function() {
                                n.error("Invalid symbol. Please try again")
                            })
                        }, y.applyChartTemplate = function(t) {
                            x = t;
                            var a = o.getChartTab();
                            if (null === t) D = {
                                pricesOn: "1"
                            }, y.technicalChartQuickSettings.settings = y.quickSettings[4].settings, A(a, !1);
                            else {
                                D = angular.copy(t);
                                var i = e.findIndex(y.quickSettings, {
                                    settings: {
                                        data: t.data,
                                        density: t.density
                                    }
                                });
                                y.technicalChartQuickSettings.settings = i > -1 ? y.quickSettings[i].settings : null, b.mapDateRange(t), A(a, !0)
                            }
                        }, y.addToWatchlist = function() {
                            p.addToWatchlist(y.flipChartSymbol.symbol, y.flipChartSymbol.symbolName)
                        }, y.changeQuickSettings = function() {
                            y.technicalChartQuickSettings.template = {
                                pricesOn: "1"
                            }, A(o.getChartTab(), !1)
                        }, y.openFullScreenTechnicalChart = function() {
                            var e = m.route(s.config.routes["quotes.fullTechnicalChart"], {
                                sector: s.config.symbols.mapping[y.flipChartSymbol.symbol],
                                symbol: y.flipChartSymbol.symbol
                            });
                            try {
                                d.isLoggedIn() && "None" !== d.getUserData().preferences.charts_template ? e += "?id=" + d.getUserData().preferences.charts_template : e += ""
                            } catch (e) {
                                console.log("Could not get default technical chart template:", e)
                            }
                            var t = ["height=" + screen.height, "width=" + screen.width, "fullscreen=yes", "resizable=yes", "scrollbars=yes"].join(",");
                            setTimeout(function() {
                                s.open(e, "", t).moveTo(0, 0)
                            }, 0)
                        }, y.shouldMapBeShown = function() {
                            return "1" === D.pricesOn
                        }, y.hideTooltip = function() {
                            y.showTooltip = !1
                        }, v.setMyChartMode(!0), g.hideTooltipData = function() {
                            T = !1, _ || (f(function() {
                                T || (y.showTooltip = !1), _ = !1
                            }, 300), _ = !0)
                        }, g.showAreaInfo = function(e) {
                            T = !0, y.tooltipData = {}, y.tooltipBaseData = {}, y.tooltipBaseData.open = e.open, y.tooltipBaseData.high = e.high, y.tooltipBaseData.low = e.low, y.tooltipBaseData.close = e.close, y.tooltipBaseData.overlay1 = e.overlay1, y.tooltipBaseData.overlay2 = e.overlay2, y.tooltipBaseData.overlay3 = e.overlay3, y.tooltipBaseData.Volume = e.Volume, Object.keys(e).forEach(function(t) {
                                -1 === k.indexOf(t) && (y.tooltipData[t] = e[t])
                            }), f(function() {
                                y.showTooltip = !0
                            }, 100)
                        }
                }],
                controllerAs: "$ctrl",
                template: a("2DFX")
            }
        }
    },
    oupf: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                scope: {
                    containerId: "@"
                },
                link: function(e, t, a) {
                    t.on("click", function() {
                        var t, a, i;
                        for (var r in t = document.getElementsByTagName("link"), a = document.getElementById(e.containerId), (i = window.open("", "print", "width=800,height=650,top=50,left=50,toolbars=no,scrollbars=no,status=no,resizable=yes")).document.writeln("<!DOCTYPE html>"), i.document.writeln("<html><head><title></title>"), t) {
                            var o;
                            t.hasOwnProperty(r) && (o = (o = t[r].outerHTML).replace(/href=".*"/, 'href="' + t[r].href + '"'), i.document.writeln(o))
                        }
                        i.document.writeln("</head><body>"), i.document.writeln('<img src="/img/pdf_logo.svg" alt="Barchart.com" style="margin-bottom: 20px; width: 120px;">'), i.document.writeln(a.outerHTML), i.document.writeln("<script>window.focus(); window.print();<\/script>"), i.document.writeln("</body></html>"), i.document.close(), setTimeout(function() {
                            i.close()
                        }, 1e3)
                    })
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    oux0: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.templateName, e.createTemplate = function(r, o) {
                if ((r = r || window.event).preventDefault(), i.chartTemplates()) return !1;
                if (o.templateName.$invalid) return !1;
                var n = {
                    name: e.templateName
                };
                a.checkNameLength(n).then(function(e) {
                    document.getElementById("templateForm").submit()
                }, function(e) {
                    t.showError(e)
                })
            }
        }
        i.$inject = ["$scope", "MyBarchartModalService", "CustomChartTemplatesService", "limitsService"], e.exports = i
    },
    ovRS: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div data-ng-switch on=state class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close();></i> </div> <div class=modal-inner-wrapper> <div data-ng-switch-when=login> <data-login-component></data-login-component> </div> <div data-ng-switch-when=register> <data-register-component></data-register-component> </div> <div data-ng-switch-when=forgot> <data-forgot-component data-ref="[[ ref ]]" data-close=close() data-user=user></data-forgot-component> </div> <div data-ng-switch-when=contact> <contact-support-component data-user-email="[[ userEmail ]]" data-close=close()></contact-support-component> </div> </div> </div> </div> '
    },
    owUM: function(e, t) {
        e.exports = '<div class=bc-screener__result-block> <div class=bc-screener__result-block-wrapper> <div class=bc-screener__result-block-num-result data-ng-show=$ctrl.total> <span class=bc-screener__result-block-text>Results:</span> <span data-ng-bind=$ctrl.total></span> </div> <div class=bc-screener__description-block> <div data-ng-show=$ctrl.savedScreener> <span class=bc-screener__description-header>screener:</span> <span class=bc-screener__description-title>[[ $ctrl.savedScreener.name ]]</span> </div> <div class="bc-screener__description-text hide-for-medium-down" data-ng-bind-html=$ctrl.savedScreener.description></div> <div data-ng-show=$ctrl.popularScreener> <span class=bc-screener__description-header>Barchart Screener:</span> <span class=bc-screener__description-title>[[ $ctrl.popularScreener.name ]]</span> </div> <div class="bc-screener__description-text hide-for-medium-down" data-ng-bind-html=$ctrl.popularScreener.description></div> </div> <div class=bc-screener__result-block-watchlist> <screener-save-screener data-type="[[ ::$ctrl.type ]]" data-filters=$ctrl.filters data-saved-screener=$ctrl.savedScreener></screener-save-screener> <a data-ng-hide="$ctrl.hideWatchlist || !$ctrl.total" data-bc-modal-login=watchlist data-ng-click=$ctrl.saveAsWatchlist() class="bc-button white-with-border extra">Save as Watchlist</a> </div> </div> </div>'
    },
    owxm: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterValue = "", e.filterData.default = e.filterData.default || {}, e.filterData.default.value && e.filterData.default.value.length && (e.filterValue = e.filterData.default.value.join()), e.updateDataModel = function(t) {
                        e.filterData.default.value = function(e) {
                            return e.replace(/[\s]/g, "").toUpperCase().split(",").filter(function(e) {
                                return !!e
                            })
                        }(t)
                    }
                }],
                template: a("Bk80")
            }
        }
        i.$inject = [], e.exports = i
    },
    p1jd: function(e, t, a) {
        "use strict";

        function i(e) {
            this.for = function(t) {
                var a = e.defer();
                return function e(t, a) {
                    setTimeout(function() {
                        window[t] ? a.resolve() : e(t, a)
                    }, 300)
                }(t, a), a.promise
            }
        }
        i.$inject = ["$q"], e.exports = i
    },
    p3Nb: function(e, t) {
        e.exports = '<div class="bc-watchlist__watchlist-edit-extra-fields-modal modal-content-wrapper"> <input type=hidden> <div class=bc-tools__modal-with-header> <div class=bc-tools__modal-with-header-header> <div class="bc-tools__modal-with-header-close bc-glyph-times" data-ng-click=close();></div> <div class=header-data data-ng-show=fullData.symbolName> [[ fullData.symbolName ]] ([[ fullData.symbol ]]) <span class=price>[[ fullData.lastPrice]]</span> <span class=changes data-ng-class=setColor(fullData.priceChange)>[[ fullData.priceChange ]] ( [[ fullData.percentChange]] )</span> </div> </div> </div> <div class=bc-tools__modal-with-header-content> <form class=bc-form name=editExtraFieldsForm data-ng-submit=save();> <div class=form-fieldset> <label for=extra-field-notes> Notes <span data-ng-click="form.notes=\'\'" class="textarea-clear-button right">Clear</span> </label> <textarea name=note data-ng-model=form.notes id=extra-field-notes></textarea> </div> <div class=form-fieldset> <label for=extra-field-low-flag>Low Flag</label> <div class=clear-button-wrapper> <input data-barchart-clear-input type=text name=low_flag data-ng-class="setBackground(\'low\')" id=extra-field-low-flag data-ng-model=form.low_flag /> </div> </div> <div class=form-fieldset> <label for=extra-field-high-flag>High Flag</label> <div class=clear-button-wrapper> <input data-barchart-clear-input name=high_flag type=text data-ng-class="setBackground(\'high\')" id=extra-field-high-flag data-ng-model=form.high_flag /> </div> </div> <p> Use Flags to highlight when the last price goes above or below the values set. Flags show on the Watchlist page. </p> </form> <div class=text-center> <button class="bc-button grey save" data-ng-click=close();>Cancel</button> <button type=submit class="bc-button save light-blue" data-ng-click=save();>Save</button> </div> </div> </div>'
    },
    pAVT: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "AE",
                require: "^barchartDatatabs",
                link: function(t, a, i, r) {
                    var o, n;
                    o = i.templateKey, n = t.tab[o], a.html(n), e(a.contents())(t)
                }
            }
        }
        i.$inject = ["$compile"], e.exports = i
    },
    pBMh: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    currentChartSettings: "=",
                    disableEdit: "@",
                    disableSave: "@",
                    useGrid: "@"
                },
                controller: ["authCallbacks", "interactiveChartSettings", "interactiveChartApi", "interactiveChartStateApi", "$window", "authService", "interactiveChartModals", "$scope", "$filter", "interactiveChartTemplates", "dashboardGridSettings", "dashboardSettingsService", function(e, t, a, i, r, o, n, s, l, c, d, u) {
                    var p = this;

                    function m(e) {
                        null === e ? p.label = "Templates" : c.getTemplatesList().forEach(function(t) {
                            t.id === e && (p.label = l("characterLimit")(t.name, 15))
                        })
                    }
                    p.isAuthenticated = o.isLoggedIn(), p.label = "Templates", p.saveChartCallback = function() {
                        e.preventLoginReload = !0;
                        var o = {
                            configuration: JSON.stringify(t.getChartGlobalConfig()),
                            state: a.save()
                        };
                        i.saveChartDataForSymbol(t.getSymbol(), o).then(function() {
                            r.location.reload()
                        })
                    }, p.openApplyTemplateModal = function() {
                        n.applyTemplateModal("true" === p.useGrid), angular.element(document.querySelector(".js-bc-interactive-chart-dropdown-templates")).click()
                    }, s.$watch(function() {
                        return t.getChartTemplate()
                    }, function(e) {
                        "true" === p.useGrid ? m(u.getParameter("gridTemplate") || d.getTemplate()) : m(e)
                    }), s.$on("dashboardTemplateGridReset", function() {
                        p.label = "Templates"
                    }), s.$on("gridUpdated", function() {
                        m(d.getTemplate())
                    })
                }],
                controllerAs: "$ctrl",
                template: a("xLQv")
            }
        }
    },
    pEh1: function(e, t, a) {
        "use strict";
        angular.module("dom", []).service("eventHelpers", a("12DX"))
    },
    pEo0: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                userAuthData: {},
                $get: ["$rootScope", "localStorageService", "_", function(e, t, a) {
                    var i = this;

                    function r() {
                        var e;
                        e = i.userAuthData.subscription, Object.defineProperty(i.userAuthData, "subscription", {
                            enumerable: !0,
                            get: function() {
                                return e
                            }
                        }), Object.defineProperty(i.userAuthData, "is_premier", {
                            enumerable: !1,
                            get: function() {
                                return 2 === this.subscription
                            }
                        }), Object.defineProperty(i.userAuthData, "primary_email", {
                            enumerable: !1,
                            get: function() {
                                var e = this.email;
                                return Array.isArray(this.emails) ? (this.emails.every(function(t) {
                                    return 1 !== t.primary || 1 !== t.verified || (e = t.email, !1)
                                }), e) : e
                            }
                        })
                    }
                    return null !== i.userAuthData && r(), {
                        isLoggedIn: function() {
                            return !!i.userAuthData
                        },
                        setLoggedIn: function(a) {
                            return i.userAuthData = i.userAuthData || {}, angular.copy(a, i.userAuthData), r(), t.remove("allAlertsNotification"), t.remove("symbolAlertsNotification"), e.$broadcast("userHasLogged", i.userAuthData), !0
                        },
                        getUserData: function() {
                            return i.userAuthData
                        },
                        getUserPreferences: function() {
                            return i.userAuthData.preferences
                        },
                        setUserPreferences: function(e) {
                            i.userAuthData.preferences = e
                        },
                        getWatchlists: function() {
                            return i.userAuthData.watchlists
                        },
                        setWatchlists: function(e) {
                            i.userAuthData.watchlists = e
                        },
                        setPortfolios: function(e) {
                            i.userAuthData.portfolios = e
                        },
                        setScreeners: function(e) {
                            i.userAuthData.screeners = e
                        },
                        getCharts: function() {
                            return i.userAuthData.charts
                        },
                        setCharts: function(e) {
                            i.userAuthData.charts = e
                        },
                        getEodReportsNumber: function(e, t) {
                            return i.userAuthData ? a.filter(i.userAuthData[e], function(e) {
                                return e[t]
                            }).length : 0
                        }
                    }
                }]
            }
        }
    },
    pFJq: function(e, t, a) {
        "use strict";

        function i(e) {
            e.miniTableCallbackFunction = function(e) {
                delete e.meta.field.shortName.symbolCode;
                var t = this.options.sector;
                e.data.forEach(function(e) {
                    e.symbolSector = t, e.symbol = e.baseSymbol
                }), this.content = e
            }, e.miniTable = {
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: []
                    },
                    colorize: ["percentChange"],
                    links: ["baseSymbol"]
                },
                callback: e.miniTableCallbackFunction
            }, e.stocksMiniTable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["symbolType", "strikePrice", "volatility"]
                    },
                    links: ["baseSymbol"],
                    colorize: e.miniTable.options.colorize,
                    sector: "stocks"
                },
                callback: e.miniTable.callback
            }, e.etfsMiniTable = {
                loading: !0,
                content: {},
                options: {
                    sort: {
                        dir: "",
                        column: "",
                        columns: ["symbolType", "strikePrice", "volatility"]
                    },
                    links: ["baseSymbol"],
                    colorize: e.miniTable.options.colorize,
                    sector: "etfs-funds"
                },
                callback: e.miniTable.callback
            }
        }
        i.$inject = ["$scope"], e.exports = i
    },
    pFWY: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                scope: {
                    formData: "=",
                    fullScreen: "=",
                    error: "="
                },
                controller: ["$scope", function(a) {
                    a.fields = e, a.formData = a.formData || t.comparison
                }],
                template: a("iUMC")
            }
        }
        i.$inject = ["technicalChartFields", "technicalChartSettingsService"], e.exports = i
    },
    pGJx: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i;
            e.hasErrors = !1, e.errors = {}, e.grecaptchaInvisibleKey = t.grecaptchaInvisibleKey, e.forgotPassword = function(t, r) {
                r && (t.preventDefault(), e.forgotPageForm.$invalid ? e.hasErrors = !0 : (e.hasErrors = !1, i = t, a.execute(e.widgetId)))
            }, e.onSuccess = function() {
                i.currentTarget.submit(i, !1)
            }, e.onRender = function(t) {
                e.widgetId = t
            }
        }
        i.$inject = ["$scope", "appConfig", "vcRecaptchaService"], e.exports = i
    },
    pIg7: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                subscribeWatchlists: function(i) {
                    return a.call(e.API_URL + "/watchlist/update-subscription", t.POST, i, [])
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider"], e.exports = i
    },
    pIhI: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v) {
            function y() {
                var l = /{([\w-.$^*]*)}/.exec(o.expression.text);
                l && p.validateSymbol(l[1]).then(function(l) {
                    if (l.errors) c.error("Invalid symbol. Please try again");
                    else {
                        var p = l.data[0],
                            y = angular.copy(o.expression.barType);
                        if (y.curveStyle = y.style, delete y.style, p.symbol === b.getSymbol()) d.addInlineDataForSymbols(C(o.expression.text)).then(function() {
                            a && !a.main && n.removeExpression(i), b.setChartMainPlotExpression(o.expression.text), n.changeMainPlotToExpression(o.expression.text), "Line" !== o.expression.barType.style && n.changeAxisType("price"), n.changeCurveStyle(y).render(), b.setBarTypeSettings(y), v.type = ["Line", "Area"], s.save(), e.$broadcast("interactiveChartExpressionApplied")
                        });
                        else if (u.storeExpressionForSymbol(p.symbol, o.expression.text, y), m) e.$broadcast("chartCurrentSymbolChanged", p.symbol), e.$broadcast("dashboardCurrentSymbolChanged", p);
                        else {
                            var w = r ? config.routes["quotes.fullInteractiveChart"] : config.routes["quotes.sectors.interactiveChart"];
                            h.location.href = g.route(w, {
                                sector: f.getSector(p.symbolType),
                                symbol: p.symbol
                            })
                        }
                        t.close()
                    }
                })
            }

            function w() {
                d.addInlineDataForSymbols(C(o.expression.text)).then(function() {
                    a ? a.main ? (v.type = null, b.setChartMainPlotExpression(null), n.restoreCurrentSymbolPlot(), n.addExpression(o.expression.text, o.expression.barType).render()) : n.updateExpression(o.expression.text, o.expression.barType, i).render() : n.addExpression(o.expression.text, o.expression.barType).render(), s.save(), t.close()
                })
            }

            function C(e) {
                var t = e.match(/{([\w-.$^*]*)}/g);
                return t.forEach(function(e, a) {
                    t[a] = e.slice(1, -1)
                }), t
            }
            o.popularSpreads = l, o.expression = {
                applyTo: "mainPane",
                text: "",
                barType: {
                    style: "Line",
                    colors: ["#888888"],
                    lineWidth: 2
                }
            }, o.expressionError = !1, o.addingExpression = !1, o.isSymbolError = !1, a && (o.expression.applyTo = a.main ? "mainPane" : "newPane", o.expression.text = a.title, o.expression.barType.style = a.curves[0].style, o.expression.barType.colors[0] = "Area" === a.curves[0].style ? a.curves[0].colors[1] : a.curves[0].colors[0], o.expression.barType.lineWidth = a.curves[0].lineWidth), o.applyExpression = function() {
                for (var e, t = [], a = /{([^}]+)}/g; e = a.exec(o.expression.text);) t.push(e[1]);
                p.validateSymbol(t.join(",")).then(function(e) {
                    e.errors ? o.isSymbolError = !0 : function() {
                        o.expressionError = !1;
                        var e = o.expression.text.toUpperCase(),
                            t = Barchart.RealtimeWidgets.Charts.parseExpression(e);
                        t.error ? o.expressionError = !0 : (o.expression.text = t.clean, o.addingExpression = !0, "mainPane" === o.expression.applyTo ? y() : w())
                    }()
                })
            }, o.selectPopularSpread = function(e) {
                o.expression.text = e
            }, o.modalDismiss = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$rootScope", "$modalInstance", "expression", "expressionIndex", "fullScreen", "$scope", "interactiveChartApi", "interactiveChartStateService", "interactiveChartPopularSpreadsConfig", "Notification", "bcInlineData", "interactiveChartExpressionStorageService", "interactiveChartValidation", "isDashboardMode", "$window", "utils", "quotesService", "interactiveChartSettings", "interactiveChartFixedBarType"], e.exports = i
    },
    pJZt: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    formData: "=",
                    type: "@",
                    isOptions: "@",
                    filterDisplayFields: "="
                },
                controller: ["$scope", function(a) {
                    a.copy = [], a.$on("removeRowFilter", function(t, i) {
                        var o = r.findIndex(a.formData.filters, "guid", i);
                        o && e.removeFilter(o)
                    }), a.treeOptions = {
                        dropped: function() {
                            i.orderChanged = !0
                        },
                        beforeDrag: function() {
                            return a.copy = angular.copy(a.formData.filters), i.filters = a.copy, !0
                        }
                    }, a.getGuid = function(e) {
                        return e.guid || t.guid()
                    }
                }],
                template: a("VqJH")
            }
        }
        i.$inject = ["screenerFilterService", "utils", "screenerCurrentConfigService", "_"], e.exports = i
    },
    "pX/P": function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                validSymbol: function(t) {
                    var a = {
                        symbol: t.toUpperCase(),
                        fields: "symbolType,symbolCode,symbol"
                    };
                    return e.query(a, "/quotes/get")
                },
                validSymbols: function(t) {
                    var a = {
                        symbols: t.map(function(e) {
                            return e.toUpperCase()
                        }).join(","),
                        fields: "lastPrice,symbol"
                    };
                    return e.query(a, "/quotes/get").then(function(e) {
                        return null !== e.errors && void 0 !== e.errors.invalidSymbols ? e.errors.invalidSymbols : []
                    })
                }
            }
        }
        i.$inject = ["apiFactory", "_"], e.exports = i
    },
    pXv4: function(e, t) {
        e.exports = '<div> <div class=throbber-wrapper data-ng-show=dataLoading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div data-ng-show=!dataLoading class="bc-table-wrapper [[ options.class ]]" data-ng-class="{\'sticky-row\': sticky}"> <barchart-table-scroll data-ng-if=!dataLoading> <table> <thead> <tr> <th data-ng-if=::exclude(columnKey) data-ng-repeat="(columnKey, columnTitle) in content[0].meta.field.shortName track by $index" data-ng-class="{\'text-left\': (columnKey === \'symbol\' || columnKey === \'symbolName\')}" data-barchart-sorting-key=columnKey data-barchart-sorting-content=content data-barchart-sorting-options=options data-barchart-sorting> [[ columnTitle ]] </th> </tr> </thead> <tbody data-ng-repeat="rows in content"> <tr data-ng-repeat="row in rows.data" data-ng-init="rowIndex = $index" data-ng-class-odd="\'odd\'" data-ng-if=::removeEmpty(row)> <td data-ng-if=::exclude(key) data-ng-repeat="(key, cell) in row" data-ng-class=setDataClasses(key)> <div data-ng-class="{\'chart-view-padding\':renderChart(key)}"> <a target=_self data-ng-if=isLink(key) data-ng-href="[[ setLink(row) ]]" data-ng-bind=cell></a> <span data-ng-if=!isElementLink data-ng-class="{\'tooltip-bottom\': (rows.data.length - rowIndex) <= 3}"> <span class="right chart-view-value" data-ng-class="setColor(row, key)">[[ cell ]]</span> <div class="clearfix row-chart-wrapper"> <div data-barchart-datatable-chart-view-tooltip-toggle="#chart-view-tooltip-dropdown-[[ clearSymbol(row.symbol) ]]" data-dropdown-toggle="#chart-view-tooltip-dropdown-[[ clearSymbol(row.symbol) ]]" data-ng-show=renderChart(key) class=bc-chart-view-weghted-alpha data-ng-class="setChartClass(row, key)" data-ng-style="{\'width\': setWidth(row, key)}"> <div id="chart-view-tooltip-dropdown-[[ clearSymbol(row.symbol) ]]" data-ng-class="setMargin(row, key)" class="f-dropdown dropdown-container chart-view-dropdown-container right-arrow hide"> <div class="dropdown-inner bc-tooltip-container"> <ul> <li class="clearfix chart-detail-info" data-ng-repeat="field in detailsFields track by $index"> <span class=label>[[ content[0].meta.field.shortName[field] ]]</span> <span data-ng-class="setColorForCustomField(row, field, \'priceChange\')" class=right>[[ row[field] ]]</span> </li> </ul> </div> </div> </div> </div> </span> </div> </td> </tr> </tbody> </table> </barchart-table-scroll> </div> </div>'
    },
    paPO: function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };

        function o(e) {
            var t = "object" === (void 0 === e ? "undefined" : r(e)) ? e : {};
            t.id && (this.id = t.id), this.name = t.name || "", this.type = t.type || "", this.filters = t.filters || "", this.description = t.description || "", this.view = t.view || "", this.order_by = t.order_by || "baseSymbol", this.order_dir = t.order_dir || "", this.send_report = void 0 !== t.send_report ? t.send_report : 0, this.nbr_results = t.nbr_results || 10, this.email_csv = void 0 !== t.email_csv ? t.email_csv : 0
        }
        e.exports = function() {
            return o
        }
    },
    pcKT: function(e, t, a) {
        "use strict";

        function i() {
            var e = {},
                t = null,
                a = function(t, a) {
                    e[t] = a.map(function(e) {
                        return e.id = e.id.toString(), e
                    })
                };
            return {
                setCurrentFeed: function(e) {
                    t = e
                },
                addFeed: a,
                addItemsToFeed: function(t, i) {
                    if (e[t]) {
                        var r = i.map(function(e) {
                            return e.id = e.id.toString(), e
                        });
                        e[t] = e[t].concat(r)
                    } else a(t, i)
                },
                getPrevItem: function(a) {
                    var i = null;
                    if (t && e[t]) {
                        var r = e[t];
                        r.forEach(function(e, t) {
                            e.id === a && r[t - 1] && (i = r[t - 1])
                        })
                    }
                    return i
                },
                getNextItem: function(a) {
                    var i = null;
                    if (t && e[t]) {
                        var r = e[t];
                        r.forEach(function(e, t) {
                            e.id === a && r[t + 1] && (i = r[t + 1])
                        })
                    }
                    return i
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    pdnJ: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o) {
            return {
                restrict: "E",
                replace: !0,
                controller: ["$scope", function(a) {
                    function n() {
                        var e = document.querySelector(".js-page-title");
                        i(e, "scroll", {
                            duration: 300,
                            offset: -30
                        })
                    }
                    e.isMobileOnly() ? a.itemsPerPage = t.config.pagination.mobile || 25 : e.isTabletOnly() ? a.itemsPerPage = t.config.pagination.tablet || 50 : a.itemsPerPage = t.config.pagination.desktop || 100, a.lastPage = Math.ceil(a.total / a.itemsPerPage), a.startItemNumber = a.pagination.currentPage * a.itemsPerPage - a.itemsPerPage + 1, a.endItemNumber = a.pagination.currentPage === a.lastPage ? a.total : a.startItemNumber + a.itemsPerPage - 1, r.$broadcast("bcPaginationData", {
                        totalPages: a.total === a.count ? 1 : a.lastPage,
                        currentPage: a.pagination.currentPage
                    }), a.getPage = function(e) {
                        n(), a.pagination.currentPage !== e && (a.pagination.currentPage = e, o.search("page", e), a.callback())
                    }, a.getAll = function() {
                        o.search("page", "all"), n(), a.loadAll()
                    }
                }],
                scope: {
                    total: "=",
                    count: "=",
                    showAll: "=",
                    pagination: "=",
                    callback: "&paginationCallback",
                    loadAll: "&"
                },
                template: a("yf6b")
            }
        }
        i.$inject = ["utils", "$window", "Velocity", "$rootScope", "$location"], e.exports = i
    },
    pe39: function(e, t, a) {
        "use strict";

        function i(e) {
            var t;
            return {
                restrict: "A",
                link: function(i, r, o) {
                    i.close = function() {
                        t.close()
                    }, r.on("click", function() {
                        i.content = window.config.customHelp[o.bcCustomHelpModal] || {}, t = e.open({
                            template: a("zA0A"),
                            scope: i,
                            windowClass: "bc-custom-subscription-wrapper bc-custom-help-modal-wrapper"
                        })
                    })
                }
            }
        }
        i.$inject = ["$modal"], e.exports = i
    },
    "pj+p": function(e, t) {
        e.exports = '<div> <div class=cheat-sheet-filter> <div class=input-checkbox data-ng-repeat="filter in filters"> <input id="cheat-sheet-[[ filter.category ]]" type=checkbox data-ng-checked="visibleCategories.indexOf(filter.category) > -1" data-ng-disabled="visibleCategories.length < 2 && visibleCategories.indexOf(filter.category) > -1" data-ng-click=updateVisible(filter.category)> <label for="cheat-sheet-[[ filter.category ]]"> <span class=bc-glyph-check></span> [[ filter.label ]] </label> </div> <div class="print-download right show-for-medium-up"> <a class="toolbar-button print" data-bc-print-share data-container-id=main-content-column title="Print Cheat Sheet"> <i class=bc-glyph-print></i> print </a> <a class="toolbar-button download" data-bc-download-button data-csv-link=true title="Download page to .csv file"> <i class=bc-glyph-download></i> download </a> </div> </div> <div class="cheat-sheet-column-switcher show-for-small-only clearfix"> <div data-ng-click="setMobileColumn(\'support-resistance-visible\')" data-ng-class="{\'active\': mobileColumnClass === \'support-resistance-visible\'}">Support/Resistance</div> <div data-ng-click="setMobileColumn(\'pivot-points-visible\')" data-ng-class="{\'active\': mobileColumnClass === \'pivot-points-visible\'}">Turning Points</div> </div> <table id=bc-cheat-sheet-table data-ng-class=mobileColumnClass> <thead> <tr> <th class="label support-resistance">Support/Resistance Levels</th> <th class=value>Price</th> <th class="label pivot-points">Key Turning Points</th> </tr> </thead> <tbody> <tr data-ng-repeat="point in cheatSheetData | filter:categoryFilter" data-ng-class=point.class> <td class="label support-resistance" data-ng-class="{\'highlight\': point.labelSupportResistance}"> [[ point.labelSupportResistance ]] </td> <td class=value> [[ point.value ]] </td> <td class="label pivot-points" data-ng-class="{\'highlight\': point.labelTurningPoints}"> [[ point.labelTurningPoints ]] </td> </tr> </tbody> </table> </div>'
    },
    pmun: function(e, t) {
        e.exports = '<div class=bc-portfolio__portfolios-edit-all> <h4>[[ $ctrl.groupName ]] Group</h4> <form name=chartListForm> <div class=bc-datatable-toolbar> <div class="bc-dropdown filter"> <select data-ng-model=$ctrl.sortOrder data-ng-change=$ctrl.sortRows();> <option selected=selected value="">Sort List</option> <option value=name>Alphabetically by Name</option> <option value=symbol>Alphabetically by Symbol</option> </select> </div> </div> <div ui-tree=$ctrl.sortOptions class="bc-tools-edit__tool-symbols-row organize-page"> <bc-error-component data-errors=$ctrl.errors data-use-server-errors=true data-form-name=chartListForm></bc-error-component> <div class="bc-tools-edit__symbols-list-header clearfix"> <div class=bc-portfolio__portfolios-edit-all-caption>Chart Name</div> <div class="bc-portfolio__portfolios-edit-all-total show-for-medium-up">Symbol</div> <div class=bc-portfolio__portfolios-edit-all-order>Order</div> <div class="bc-portfolio__portfolios-edit-eod-email show-for-medium-up">End-of-Day Email</div> </div> <ul ui-tree-nodes class=bc-tools-edit__symbols-list data-ng-model=$ctrl.treeCharts> <li ui-tree-node class="bc-tools-edit__symbols-list-symbol clearfix" data-ng-repeat="node in $ctrl.treeCharts track by node.id" data-ng-class-odd="\'odd\'"> <span class="left bc-glyph-minus-circle bc-tools-edit__symbol-delete visibility-animated" data-ng-class="{\'invisible\': $ctrl.pendingChartDelete === node}" data-ng-click=$ctrl.removeChart(node)></span> <div class=bc-tools-edit__delete-symbol data-ng-show="$ctrl.pendingChartDelete === node"> <span class=block-title>Delete [[ node.name ]]?</span> <a class="bc-button small light-blue" data-ng-click="$ctrl.removeChartConfirm($index, node)">Yes</a> <a class="bc-button small grey" data-ng-click=$ctrl.removeChartCancel()>No</a> </div> <div class=bc-tools-edit__symbol-data> <div class="bc-tools__edit-all-caption visibility-animated" data-ng-class="{\'invisible\': $ctrl.pendingChartDelete === node}"> <div class=pencil-icon-wrapper> <input type=text name=name[[node.id]] data-ng-model=node.name required data-ng-maxlength=50 data-ng-class="{\'invalid\': chartListForm.name[[node.id]].$invalid}" data-ng-model-options="{updateOn: \'blur\'}" data-ng-change="$ctrl.save(chartListForm, node)" value=node.name /> <i class=bc-glyph-pencil></i> </div> <div class=error-text data-ng-show=chartListForm.name[[node.id]].$invalid> <span data-ng-show=chartListForm.name[[node.id]].$error.maxlength>Group name cannot be longer than 50 characters.</span> <span data-ng-show=chartListForm.name[[node.id]].$error.uniqueName>Group name must be unique.</span> <span data-ng-show=chartListForm.name[[node.id]].$error.required>Fill the required fields.</span> </div> </div> <div ui-tree-handle class="right bc-glyph-bars bc-tools-edit__symbol-drag-icon"></div> <div class="bc-portfolio__portfolios-edit-eod-email checkbox show-for-medium-up" data-nodrag> <div class=input-checkbox data-ng-click="$ctrl.showMessage($ctrl.isNewDisabled && !node.email)"> <input id="bc-chart__send-report-[[ node.id]]" data-ng-model=node.email data-ng-change=$ctrl.sendEmail(node) data-ng-disabled="$ctrl.isNewDisabled && !node.email" class=no-disable name=email type=checkbox> <label for="bc-chart__send-report-[[ node.id]]"> <span class=bc-glyph-check></span> </label> </div> </div> <div class="right bc-glyph-arrow-up bc-tools-edit__symbol-up-icon" data-ng-click=$ctrl.moveSymbolTop($index)> </div> <div class="bc-portfolio__portfolios-edit-all-total visibility-animated show-for-medium-up" data-ng-class="{\'invisible\': $ctrl.pendingChartDelete === node}"> <span> [[ node.symbol ]] </span> </div> </div> </li> </ul> </div> </form> </div> '
    },
    pnkz: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    groups: "@"
                },
                controller: ["_", "myChartsApiService", "Notification", "utils", "$scope", "$window", function(e, t, a, i, r, o) {
                    var n = this;

                    function s() {
                        setTimeout(function() {
                            var a = e.pluck(n.treeGroups, "id"),
                                i = e.pluck(n.chartGroups, "id");
                            JSON.stringify(a) !== JSON.stringify(i) && t.orderGroups(a).then(function() {
                                n.chartGroups = angular.copy(n.treeGroups)
                            })
                        })
                    }
                    n.chartGroups = JSON.parse(n.groups), n.treeGroups = angular.copy(n.chartGroups), n.errors = {}, n.pendingGroupDelete = null, n.save = function(i, r) {
                        n.errors = {};
                        var o = e.pluck(n.treeGroups, "name"),
                            s = e.filter(o, function(t, a, i) {
                                return e.includes(i, t, a + 1)
                            });
                        Object.keys(n.treeGroups).forEach(function(e) {
                            var t = i["name" + n.treeGroups[e].id];
                            s.length && -1 !== s.indexOf(n.treeGroups[e].name) ? t.$setValidity("uniqueName", !1) : t.$setValidity("uniqueName", !0)
                        }), i.$invalid ? Object.keys(i.$error).forEach(function(e) {
                            "uniqueName" !== e && "maxlength" !== e && "required" !== e && (n.errors[e] = !0)
                        }) : t.updateGroup(r.id, {
                            name: r.name
                        }).then(function() {
                            a.success("Group name has been changed.")
                        })
                    }, n.removeGroup = function(e) {
                        n.pendingGroupDelete = e
                    }, n.removeGroupCancel = function() {
                        n.pendingGroupDelete = null
                    }, n.removeGroupConfirm = function(r, o) {
                        var s = o.id,
                            l = i.htmlEntities(o.name),
                            c = e.findIndex(n.chartGroups, function(e) {
                                return e.id === s
                            });
                        t.removeGroup(s).then(function() {
                            a.success("Group " + l + " has been deleted."), n.treeGroups.splice(r, 1), n.chartGroups.splice(c, 1)
                        }).catch(function(e) {
                            e && e.error && e.error.message ? a.error(e.error.message) : a.error("Something went wrong. Please try again."), n.pendingGroupDelete = null
                        })
                    }, n.moveSymbolTop = function(e) {
                        n.treeGroups.splice(0, 0, n.treeGroups.splice(e, 1)[0]), s()
                    }, n.sortOptions = {
                        dragStop: function() {
                            s()
                        }
                    }, n.sortRows = function() {
                        n.treeGroups = e.sortBy(n.treeGroups, function(e) {
                            return e.name.toLowerCase()
                        }, ["asc"]), s(), n.sortOrder = ""
                    }, r.$on("myChartsNewGroupCreated", function(e, t) {
                        n.chartGroups.push(t), n.treeGroups.push(t)
                    }), n.getLink = function(e) {
                        return i.route(o.config.routes["my.organizeChartsInGroup"], {
                            group: e
                        })
                    }
                }],
                controllerAs: "$ctrl",
                template: a("FFdE")
            }
        }
    },
    poAY: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                scope: {},
                link: function(a, i, r) {
                    i.on("change", function() {
                        var a = i.val();
                        t.location.href = e.appendQueryParam(e.getUrlInfo().origin + e.getUrlInfo().pathname, "watchlist", a)
                    })
                }
            }
        }
        i.$inject = ["utils", "$window"], e.exports = i
    },
    pqMY: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                transclude: !0,
                controller: ["$scope", function(t) {
                    t.triggered = 0;
                    var a, i = JSON.parse(t.symbol);
                    e.isLoggedIn() && (a = t.$watch(function() {
                        return e.getUserData().alerts_triggered
                    }, function() {
                        void 0 !== e.getUserData().alerts_triggered && (e.getUserData().alerts_triggered.forEach(function(e) {
                            e.conditions[0].property.target.identifier === i.symbol && t.triggered++
                        }), a())
                    }))
                }],
                link: function(a, i) {
                    var r, o = JSON.parse(a.symbol);

                    function n() {
                        r[o.symbol] = !1, t.set("symbolAlertsNotification", r), a.$evalAsync(function() {
                            a.showAlerts = !1
                        }), i.off("click", n)
                    }
                    e.isLoggedIn() && (r = ~t.keys().indexOf("symbolAlertsNotification") ? t.get("symbolAlertsNotification") : {}, a.showAlerts = !r.hasOwnProperty(o.symbol) || r[o.symbol], !0 === a.showAlerts && i.on("click", n))
                },
                template: a("r/Gd"),
                scope: {
                    symbol: "@"
                }
            }
        }
        i.$inject = ["authService", "localStorageService"], e.exports = i
    },
    psvu: function(e, t) {
        e.exports = "<div> <div class=input-checkbox> <input type=checkbox id=show-industrial name=show-industrial data-ng-change=changeFilter() data-ng-model=showIndustrial> <label class=checkbox for=show-industrial> <span class=bc-glyph-check></span> Only show Industries with 10 or more Stocks </label> </div> </div>"
    },
    pvdn: function(e, t, a) {
        "use strict";
        angular.module("CheatSheet", []).directive("cheatSheet", a("TrvR"));
        e.exports = {
            enable: !0,
            name: "CheatSheet"
        }
    },
    pxzd: function(e, t) {
        e.exports = '<div class="modal-content-wrapper news-widget-wrapper-modal"> <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> <div class=news-header><h3>Free Educational Webinars</h3></div> <div class=news-content> <bc-news-subscription-form data-title="\'Enhance your knowledge of the website. Be the first to know when Barchart schedules a free live webinar. Learn how to best use the site tools to better analyze the markets.\'" data-list="\'barchartWebinars\'"></bc-news-subscription-form> </div> </div>'
    },
    "q+UY": function(e, t) {
        e.exports = '<div class="bc-dropdown filter expiration-name" data-ng-class="{\'disable\' : disabled}"> <select data-broadcast-on-change data-on-change=onChangeFn data-need-auth="[[ offAuth ]]" data-premier="[[ premier ]]" data-event-name=onExpirationDateChanged data-ng-model=selected data-ng-disabled=disabled> <option data-ng-repeat="expiration in expirations track by $index" value="[[ expiration ]]" data-ng-bind=expiration></option> </select> </div>'
    },
    qBno: function(e, t, a) {
        "use strict";
        e.exports = function(e) {
            return {
                "1d": e.ONE_DAY,
                "5d": e.FIVE_DAYS,
                "1m": e.ONE_MONTH,
                "3m": e.THREE_MONTHS,
                "6m": e.SIX_MONTHS,
                "1y": e.ONE_YEAR,
                "3y": e.THREE_YEARS,
                "5y": e.FIVE_YEARS,
                "25y": e.MAX
            }
        }
    },
    qCzi: function(e, t, a) {
        "use strict";
        a("N+ca");
        angular.module("common", ["bcSocial"]).run(a("JZM8")).config(a("XSTz")).constant("httpVerbs", a("UAKT")).constant("viewsConstants", a("I9u5")).constant("flipchartDefaultSettings", a("l+Gm")).constant("events", a("yCFO")).constant("textsConstant", a("wUqu")).constant("preferencesSettings", a("3gdR")).factory("utils", a("ZOWL")).factory("gaAnalyticsService", a("/oTr")).factory("bcResetErrorsFn", a("fltN")).controller("common.GiveFeedback", a("6jH6")).controller("bcSymbolWidgetsModalCtrl", a("kBiu")).service("assert", a("7bz8")).service("bcDataService", a("9tPm")).service("bcHeatmapService", a("N7MB")).service("barchartTableSortService", a("oeVl")).service("barchartTableQuickLinksService", a("vqZ8")).service("quotesService", a("yEcd")).service("locationService", a("3YQP")).service("userPreferencesService", a("i8NO")).service("barchartTableSymbolsListService", a("h1iM")).service("datatableAllDataService", a("deu8")).service("searchConnectionService", a("TdAT")).service("bcInlineData", a("iI+U")).service("waitService", a("p1jd")).service("bcExpiredFuturesValidation", a("NAIc")).service("bcAdsModalService", a("bXYz")).service("bcWebinarModalService", a("VLmy")).service("bcSurveyModalService", a("J7WF")).service("bcCustomModalService", a("ZfHQ")).service("bcSavePreferencesService", a("i4J0")).service("bcFormGenerator", a("OXx/")).service("bcAdsControlService", a("PSYn")).filter("stripTag", a("PYpY")).filter("toTrust", a("mW5s")).filter("addSymbol", a("xDb8")).factory("bcFormValidationFactory", a("9V2S")).filter("characterLimit", a("6D3h")).filter("ucfirst", a("x3yd")).filter("encodeUri", a("/gYY")).filter("addTargetBlank", a("nS1d")).filter("bcReplacement", a("cIi/")).factory("dataProvider", a("YFV/")).factory("dateService", a("KUt5")).factory("bcNewsFeedsSrv", a("pcKT")).factory("datatableApiFactory", a("7910")).directive("bcErrorComponent", a("w+BU")).directive("tabletDblclick", a("CPBu")).directive("broadcastOnChange", a("jt4L")).directive("barchartSideWidget", a("IJDV")).directive("leftRightArrow", a("E9a5")).directive("bcFormValidation", a("0YOt")).directive("barchartMinitable", a("/f0w")).directive("barchartMinitableDoubleRow", a("sVFg")).directive("barchartDatatabs", a("mlmU")).directive("barchartDatatabsTabTemplate", a("pAVT")).directive("barchartRowChart", a("yHch")).directive("barchartHistogram", a("wpOF")).directive("barchartQuoteOverviewChart", a("TzHL")).directive("barchartNavDropdown", a("Em3m")).directive("barchartClearInput", a("QKxi")).directive("bcCreditCardValidation", a("8CUx")).directive("barchartRemoveDisabled", a("kbw+")).directive("bcTypeahead", a("LHW0")).directive("bcScrollbar", a("V/2W")).directive("bcAutoFocus", a("z6gb")).directive("bcModalSetFeed", a("tac7")).directive("bcNewsFeed", a("sg/F")).directive("bcHeatmapHover", a("GvFo")).directive("bcHeatmapHover", a("GvFo")).directive("bcWatchlist", a("tq7l")).directive("bcFlipcharts", a("y6Uc")).directive("bcVideoTutorialModal", a("cwIa")).directive("bcResponsiveImageMap", a("R2xK")).directive("isNumber", a("XOIQ")).directive("bcDownloadButton", a("bIpk")).directive("bcScreen", a("2L3L")).directive("bcDropdownFlexible", a("sKoa")).directive("bcCheckbox", a("Gcsc")).directive("bcEqualHeights", a("9kXl")).directive("bcChangeTitle", a("ZzNa")).directive("bcEqualHeightsItem", a("uauV")).directive("bcModuleOverAuth", a("Ym56")).directive("bcHideOverAuth", a("ksJV")).directive("bcDropdownFix", a("R37q")).directive("bcFullChartLink", a("BjbU")).directive("bcNgEmailValidation", a("dH3A")).directive("bcNgOnewordValidation", a("S4Zv")).directive("bcNewsSubscriptionForm", a("h3hR")).controller("bcNewsSubscriptionFormModalCtrl", a("Zr9/")).directive("bcCcardCvv", a("fWRm")).directive("bcEquals", a("2Q5W")).directive("bcViewFilterListener", a("vUam")).directive("bcFeedback", a("LFRK")).directive("bcSymbolAutocomplete", a("MiTI")).directive("bcColorPicker", a("MlPG")).directive("bcLineWidthSelector", a("Z6tb")).directive("bcClickOutside", a("nOLR")).directive("bcDateMask", a("Cr7S")).directive("bcAutofocus", a("VfjX")).directive("bcReadonly", a("oiKp")).directive("bcBindUnsafe", a("nzGs")).directive("bcRecaptcha", a("NP4I")).directive("bcPreventLink", a("7Bul")).directive("bcConvertToNumber", a("hpht")).directive("bcTablePagination", a("pdnJ")).directive("bcScrollTo", a("hb46")).directive("bcPreferablePage", a("Xxsq")).directive("bcSymbolWidgetsModal", a("N+w6")).directive("bcSymbolWidgetOverview", a("Lz3e")).directive("bcSymbolWidgetOpinion", a("fZX3")).directive("bcSymbolWidgetTechnicalAnalysis", a("gzXl")).directive("bcSymbolWidgetKeyStatisticsStocks", a("ehgW")).directive("bcSymbolWidgetKeyStatisticsEtf", a("GTCz")).directive("bcSymbolWidgetPerShareInfo", a("vmDW")).directive("bcSymbolWidgetRatios", a("QnWM")).directive("bcSymbolWidgetInvestmentInfoEtf", a("ALgY")).directive("bcSymbolWidgetCommodityProfile", a("OLeP")).directive("bcSymbolWidgetDescription", a("LJlV")).directive("bcSymbolWidgetPerformance", a("EQnp")).directive("bcSymbolWidgetHeadlines", a("05fI")).directive("bcDragSortable", a("tovJ")).directive("bcHashFix", a("00Va")).directive("barchartCustomSubscription", a("CovQ")).directive("bcShareImage", a("HQv3")).directive("bcCustomHelpModal", a("pe39")).directive("bcEnabledOnlyForPremier", a("hk5j")).directive("bcCloseExternalAds", a("ON1N")).directive("bcPremierAdsBlock", a("40wb")).directive("bcCmdtyAdsBlock", a("BAaH")).controller("bcShareImageCtrl", a("ma9G")).factory("bcModuleOverAuthApiFactory", a("kbtF")).factory("watchlistApiFactory", a("XQqj")).factory("textFactory", a("1CqW")).factory("bcNewsSubscriptionApiFactory", a("E2iH"))
    },
    qDzW: function(e, t) {
        e.exports = "<div class=bc-side-widget> <ng-transclude></ng-transclude> </div>"
    },
    qIN0: function(e, t) {
        e.exports = "<div class=bc-portfolio__show-notes> <div data-ng-show=rawData.tooltip.notes data-bs-tooltip=rawData.tooltip.notes data-placement=left> <i class=bc-glyph-sticky-note data-ng-click=editTransaction()></i> </div> <i class=bc-glyph-sticky-note-o data-ng-show=!rawData.tooltip.notes data-ng-click=editTransaction()></i> </div> "
    },
    qKQd: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filters: "=",
                    type: "@",
                    defaultFilter: "@"
                },
                controller: ["$scope", function(a) {
                    function s() {
                        a.filteredFilterItems = o("screenerIgnoreOptionsFilter")(a.filterItems, a.ignoreList)
                    }
                    a.addFilter = function() {
                        if (!n.checkPermissions()) return !1;
                        var t = a.selectFilter;
                        if (void 0 !== t) {
                            if (null === t.value) return !1;
                            if (l.hasOwnProperty(t.value)) {
                                var i = angular.copy(l[t.value]);
                                i.directive = r[i.type], i.key = t.value, e.addFilter(i)
                            } else console.error(t.value + " does not exist in filter data from /api/v1/screeners/fields");
                            a.ignoreList.push(t.value), s()
                        }
                    };
                    var l = {};
                    a.routes = t.config.routes, a.ignoreList = [], a.isPremier = i.isLoggedIn() && 2 === i.getUserData().subscription, a.$watchCollection("filters", function(e) {
                        a.ignoreList = [], e.forEach(function(e) {
                            a.ignoreList.push(e.key)
                        }), s()
                    }), e.getFilterItems(a.type).then(function(e) {
                        e.hasOwnProperty(a.defaultFilter) && delete e[a.defaultFilter], "cad" === t.config.user.market && delete e["options.symbolType"], a.filterItems = e, s()
                    }), e.getFiltersData(a.type).then(function(e) {
                        l = e
                    })
                }],
                template: a("wzub")
            }
        }
        i.$inject = ["screenerFilterService", "$window", "authService", "screenerDirectiveMapper", "$filter", "screenerPermissionService"], e.exports = i
    },
    qLsb: function(e, t) {
        e.exports = '<div class="bc-watchlist bc-dropdown-fix [[ positionClasses ]]" id="bc-watchlist-dropdown-[[ ::quid ]]" data-ng-class="{\'f-dropdown watchlist-dropdown\': !hide}"> <ul> <li data-ng-repeat="item in items track by item.id"> <div class=input-checkbox> <input id="symbol-watchlist-[[ ::quid ]]-[[ ::item.id ]]" data-ng-disabled="isLast(item.symbols) || limitReached(item)" data-checklist-model=item.symbols data-checklist-value=symbol name=watchlist[item.id] type=checkbox> <label class=checkbox for="symbol-watchlist-[[ ::quid ]]-[[ ::item.id ]]"> <span class=bc-glyph-check></span> <span data-ng-bind-html=::item.name></span> </label> </div> <div data-ng-show=isLast(item.symbols) class=last-notification> Symbol cannot be removed as a watchlist must have at least one symbol. Delete the watchlist instead. </div> <div data-ng-show=limitReached(item) class=last-notification> Watchlist has reached its maximum of 1000 symbols/rows. </div> </li> </ul> <ul data-ng-show=!items.length> <li> <div class=input-checkbox> <input id="symbol-watchlist-[[ ::quid ]]-0" data-ng-model=newList name=watchlist[0] type=checkbox> <label class=checkbox for="symbol-watchlist-[[ ::quid ]]-0"> <span class=bc-glyph-check></span> My Watchlist </label> </div> </li> </ul> <div class=button-wrapper> <input data-ng-show=::items.length type=button name=ok class=button data-ng-click=submit() value=Ok> <input data-ng-show=::!items.length type=button name=ok class=button data-ng-click=createNew() value=Ok> </div> </div> '
    },
    qNC6: function(e, t) {
        e.exports = '<a class="bc-button big dark-blue bc-screener__save-screener-button" data-ng-click=$ctrl.saveScreenerModal()>Save Screener</a>'
    },
    qRbO: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i) {
                    var r = ["height=" + screen.height, "width=" + screen.width, "fullscreen=yes", "resizable=yes", "scrollbars=yes"].join(","),
                        o = t.url().replace("watchlist", "watchlist/fullscreen");
                    e.$on("$locationChangeSuccess", function() {
                        o = t.url().replace("watchlist", "watchlist/fullscreen")
                    }), i.on("click", function() {
                        window.open(o, "", r).moveTo(0, 0)
                    })
                }
            }
        }
        i.$inject = ["$rootScope", "$location"], e.exports = i
    },
    qSXD: function(e, t) {
        e.exports = '<div class="interactive-chart-premier-ads show-for-medium-up" data-ng-class="{\'show\': !$ctrl.hideContent}" data-ng-hide=$ctrl.hideContent> <div class=modal-close-wrapper data-ng-click=$ctrl.close()> <i class=bc-glyph-times></i> </div> <p> Did you know <strong>Barchart Premier Members</strong> can download raw chart data <span data-ng-show=$ctrl.isTechnical>through <strong>Interactive Charts</strong></span> and get their favorite technical charts emailed to them each and every day after market close? See what else Barchart Premier can do for you, <a target=_self data-ng-href="[[ $ctrl.premierLink ]]">Sign up for a risk-free 30-day trial today</a>. </p> </div> '
    },
    qUKK: function(e, t, a) {
        "use strict";

        function i(e, t) {
            this.top10Holding = function(e) {
                e[0].data[0].meta = {
                    field: {
                        shortName: {
                            symbol: "SYMBOL",
                            symbolName: "NAME",
                            percentHolding: "%HOLDINGS"
                        }
                    }
                }, e[0].data[0].data = e[0].data[0].holdings, this.content = e[0].data
            }, this.hoursPriceIndexNameFormat = function(e) {
                var t = window.config.housePriceAliases || {};
                e[0].data.forEach(function(e) {
                    t.hasOwnProperty(e.symbol) && (e.symbolName = t[e.symbol])
                }), this.content[0] = e[0]
            }, this.advancedSearchHighlightData = function(t) {
                var a;
                a = this.apiConfig.api.q, t[0].data.forEach(function(e) {
                    e.symbolName = e.symbolName.replace(new RegExp(a, "gi"), "<b>$&</b>")
                }), e.$broadcast("advancedSearchResponse", {
                    count: t[0].data.length
                }), this.content[0] = t[0]
            }, this.stocksTop100 = function(e) {
                var a = angular.copy(e[0]);
                delete a.meta.field.shortName.symbolName, delete a.meta.field.shortName.symbolType, delete a.meta.field.shortName.symbolCode, delete a.meta.field.shortName.lastPrice, delete a.meta.field.shortName.dailyLastPrice, a.data.forEach(function(e) {
                    e.symbolSector = t.getSector(e.symbolType), delete e.lastPrice, delete e.dailyLastPrice
                }), this.content = a
            }, this.lastWatchlist = function(e) {
                var a = angular.copy(e[0]);
                delete a.meta.field.shortName.symbolName, delete a.meta.field.shortName.symbolType, delete a.meta.field.shortName.symbolCode, a.data.forEach(function(e) {
                    e.symbolSector = t.getSector(e.symbolType)
                }), this.content = a
            }, this.worldMarketMapWorld = function(e) {
                var t = e[0];
                if (t.meta.field.shortName.trendSpotterSignal && (t.meta.field.shortName.trendSpotterSignal = "TrendSpotter"), this.options.marketMapMapping) {
                    var a = this.options.marketMapMapping;
                    t.data.forEach(function(e) {
                        e.country && !e.raw.country && a[e.symbol] && (e.country = a[e.symbol], e.raw.country = a[e.symbol])
                    })
                }
            }, this.changeTimeHeader = function(e) {
                var t = e[0];
                t.meta.field.shortName.tradeTime && (t.meta.field.shortName.tradeTime = "Last Trade")
            }, this.changeMetalIndexes = function(e) {
                var t = e[0];
                t.meta.field.shortName.symbolName && (t.meta.field.shortName.symbolName = "Cash Index Name"), t.data && t.data.length && t.data.forEach(function(e) {
                    e.symbolName = e.symbolName.replace("cmdty ", "").substring(0, 40)
                })
            }
        }
        i.$inject = ["$rootScope", "quotesService"], e.exports = i
    },
    qXPv: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = this;
            i.templates = t.getTemplatesList(), i.selectedTemplate = a.getChartTemplate(), i.link = config.routes["my.customChartTemplates.interactive"], i.close = function() {
                e.dismiss()
            }, i.apply = function() {
                e.close({
                    id: i.selectedTemplate
                })
            }
        }
        i.$inject = ["$modalInstance", "interactiveChartTemplates", "interactiveChartSettings"], e.exports = i
    },
    qbc3: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u) {
            var p = [];

            function m(r) {
                (function(a) {
                    var i = e.defer(),
                        r = o.getFeed().getHeadlessChart();
                    r.load(a.definition);
                    var s = [];
                    r.change(d.expressionAdditionalPlotGet()).forEach(function(e) {
                        "PLACEHOLDER" !== e.title && e.title.match(/{([\w-.$^*]*)}/g).forEach(function(e) {
                            s.push(e.slice(1, -1))
                        })
                    }), s.length > 0 ? n.addInlineDataForSymbols(t.uniq(s)).then(function() {
                        i.resolve()
                    }) : i.resolve();
                    return i.promise
                })(r).then(function() {
                    var e, t, o = JSON.parse(r.template);
                    i.loadDefinition(r.definition, {
                        keepOldAnnotations: !0,
                        keepNewAnnotations: !1,
                        keepOldCompare: !0,
                        keepNewCompare: !1
                    }), !0 === o.settings.preventLabelOverlap && i.changePreventLabelOverlap(!0), s.setChartTemplate(r.id), "YTD" === o.period && i.changePeriod("P" + (e = new Date, t = new Date(e.getFullYear(), 0, 0), Math.floor((e - t) / 864e5)) + "D");
                    var n = -1 !== [1, 7].indexOf(i.getSymbolData().symbolType) && i.getSymbolData().raw.hasBats;
                    a.isLoggedIn() && n && s.getChartSettings().batsData ? i.setCurrentChartSymbol(s.getSymbol() + ".BZ") : i.setCurrentChartSymbol(s.getSymbol());
                    var l = s.getChartMainPlotExpression();
                    if (l) i.changeMainPlotToExpression(l);
                    else {
                        var c = i.getExpressions();
                        i.restoreCurrentSymbolPlot(), c && c.length > 0 && i.changeCurveStyle(o.settings.barType, "Symbol"), i.render()
                    }
                })
            }
            return a.isLoggedIn() && (p = angular.copy(a.getUserData().interactive_chart_templates)), {
                getTemplatesList: function() {
                    return angular.copy(p)
                },
                addTemplateToList: function(e) {
                    p.push(angular.copy(e))
                },
                updateTemplateInList: function(e) {
                    var a = t.findIndex(p, {
                        id: e.id
                    });
                    p[a] = angular.copy(e)
                },
                createTemplate: function(e) {
                    var a = angular.copy(e);
                    a.template = s.getChartGlobalConfig(), a.template.template = null, a.template.expression = null, a.template.compareSymbols = r.compareSymbols, a.template.taxonomies = {
                        studies: [],
                        fundamentals: []
                    };
                    var n = i.getTechnicalStudies();
                    if (n && n.length) {
                        var c = o.getTaxonomies().studies;
                        n.forEach(function(e) {
                            var i = e.title,
                                r = t.find(c, {
                                    id: e.studyId
                                });
                            if (r && (i = r.meta.title, e.inputs && e.inputs.length)) {
                                var o = [];
                                e.inputs.forEach(function(e) {
                                    o.push(e.value)
                                }), i += " (" + o.join(",") + ")"
                            }
                            a.template.taxonomies.studies.push({
                                name: i,
                                item: l.convertStudyFromApi(e)
                            })
                        })
                    }
                    var d = i.getFundamentals();
                    return d.BalanceSheet.length && d.BalanceSheet.forEach(function(e) {
                        var t = l.convertFundamentalFromApi(e, "BalanceSheet");
                        t.type = "BalanceSheet", a.template.taxonomies.fundamentals.push({
                            name: e.title,
                            item: t
                        })
                    }), d.IncomeStatement.length && d.IncomeStatement.forEach(function(e) {
                        var t = l.convertFundamentalFromApi(e, "IncomeStatement");
                        t.type = "IncomeStatement", a.template.taxonomies.fundamentals.push({
                            name: e.title,
                            item: t
                        })
                    }), a.template = JSON.stringify(a.template), a.definition = JSON.stringify(i.getDefinition(!1)), a
                },
                applyTemplate: function(a, i, r) {
                    var o = e.defer(),
                        n = angular.copy(t.find(p, {
                            id: a
                        }));
                    if (!n) return !1;
                    n = u(n);
                    var l = JSON.parse(n.template);
                    if (!0 !== l.aggregation.isContractVolume || i || (l.aggregation.isContractVolume = void 0), !0 !== l.settings.backAdjust || i || (l.settings.backAdjust = void 0), "None" !== l.aggregation.spec && !1 === i && (l.aggregation.spec = "None"), s.setChartAggregation(l.aggregation), s.setChartPeriod(l.period), s.resetChartRange(), s.setChartTemplate(a), l.range && s.setChartRange(l.range), s.setChartSettings(l.settings), n.definition) {
                        var d = JSON.parse(n.definition);
                        "None" !== d.data.aggregation.spec && !1 === i && (d.data.aggregation.spec = "None"), n.definition = JSON.stringify(d), r || m(n), o.resolve()
                    } else c.getTemplateDefinition(JSON.parse(n.template)).then(function(e) {
                        n.definition = JSON.stringify(e), m(n), o.resolve()
                    });
                    return o.promise
                },
                resetTemplate: function() {
                    s.resetChartGlobalConfig();
                    var e = i.getDefaultTemplate();
                    i.loadDefinition(JSON.stringify(e), {
                        keepOldAnnotations: !0,
                        keepNewAnnotations: !1,
                        keepOldCompare: !1,
                        keepNewCompare: !1
                    }), i.restoreCurrentSymbolPlot().render()
                },
                getDefinition: function(e, a) {
                    var i = t.find(p, {
                        id: e
                    });
                    if (!i) return !1;
                    i = u(i);
                    var r = JSON.parse(i.definition);
                    return "None" !== r.data.aggregation.spec && !1 === a && (r.data.aggregation.spec = "None"), r
                }
            }
        }
        i.$inject = ["$q", "_", "authService", "interactiveChartApi", "interactiveChartDefaultConfig", "bcMarketDataChart", "bcInlineData", "interactiveChartSettings", "interactiveChartConverter", "interactiveChartTemplateDefinitionService", "interactiveChartApiActionsService", "interactiveChartFallback"], e.exports = i
    },
    qdmw: function(e, t) {
        e.exports = '<div> <div class="bc-datatable-toolbar bc-corporate-actions"> <div class=form-wrapper> <form novalidate class="bc-form clearfix" name=filterByPeriodForm> <div class="input-checkbox ng-scope" data-ng-repeat="(key, filter) in filters"> <input data-ng-model=type data-ng-value=key id="filter-by-period-[[ key ]]" type=checkbox data-ng-click=updateResult() data-checklist-model=types data-checklist-value=key data-ng-disabled="(types.length < 2 && types.indexOf(key) > -1) || loading" checked=checked> <label for="filter-by-period-[[ key ]]"> <span class=bc-glyph-check></span> [[ filter ]] </label> </div> <div class="buttons right"> <a class="bc-btn-icon toolbar-button download" data-ref=historical data-bc-download-button="[[ symbol ]]_corporate_actions"> <i class=bc-glyph-download></i> download </a> </div> </form> </div> </div> <div class=barchart-content-block> <div class="throbber-wrapper ng-hide" data-ng-show=loading> <img src=/img/throbber.gif alt="Please wait..."> </div> <div class="table-wrapper bc-price-history-corporate-actions"> <table> <tr> <th>[[ meta.shortName.date ]]</th> <th>[[ meta.shortName.eventType ]]</th> <th>[[ meta.shortName.value ]]</th> </tr> <tr data-ng-repeat="item in items" data-ng-class-odd="\'odd\'"> <td><div>[[ item.date ]]</div></td> <td><div>[[ item.eventType ]]</div></td> <td><div>[[ item.value ]]</div></td> </tr> </table> </div> </div> </div>'
    },
    qfMg: function(e, t, a) {
        "use strict";
        e.exports = function() {
            var e = {
                settings: null,
                template: null
            };
            this.saveSettings = function(t) {
                var a = angular.copy(t);
                a.indicators || (a.indicators = null), console.log("[Technical Chart State Storage]: Save settings", a), e.settings = a
            }, this.saveTemplate = function(t) {
                var a = angular.copy(t);
                a && !a.indicators && (a.indicators = null), console.log("[Technical Chart State Storage]: Save template", a), e.template = a
            }, this.load = function() {
                return e
            }
        }
    },
    qks2: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    portfolioId: "=",
                    item: "=",
                    editableComment: "=",
                    symbolsData: "=",
                    publicView: "="
                },
                controller: ["$scope", function(t) {
                    function a(e) {
                        t.errorMessage = e && e.message && e.message.body ? e.message.body[0] : "Something went wrong"
                    }
                    t.actions = {
                        "-1": "Sell",
                        1: "Buy"
                    }, t.showFull = !1, t.item.comment && t.item.comment.body && (t.comment = t.item.comment.body), t.setIconClass = function(e) {
                        switch (e.type) {
                            case "delete":
                                return "trash";
                            case "exit":
                                return "archive";
                            default:
                                return 1 === e.action ? "usd up" : "usd down"
                        }
                    }, t.setActionClass = function(e) {
                        return 1 === e ? "up" : "down"
                    }, t.editComment = function() {
                        t.editableComment.item_id = t.item.item_id, t.editableComment.type = t.item.type
                    }, t.close = function() {
                        t.editableComment.item_id = !1, t.editableComment.type = !1, t.errorMessage = !1, t.item.comment && t.item.comment.body && (t.comment = t.item.comment.body)
                    }, t.saveComment = function() {
                        if (t.errorMessage = !1, t.comment || t.item.comment)
                            if (!t.comment && t.item.comment && t.item.comment.id) e.deleteComment(t.portfolioId, t.item.comment.id).then(function() {
                                t.item.comment = !1, t.close()
                            });
                            else if (t.item.comment && t.item.comment.id) e.editComment(t.portfolioId, t.item.comment.id, {
                            body: t.comment
                        }).then(function(e) {
                            t.item.comment = e.data[0], t.close()
                        }, function(e) {
                            a(e.error)
                        });
                        else {
                            var i = {
                                item_id: t.item.item_id,
                                type: t.item.type,
                                body: t.comment
                            };
                            e.addComment(t.portfolioId, i).then(function(e) {
                                t.item.comment = e.data[0], t.close()
                            }, function(e) {
                                a(e.error)
                            })
                        } else t.close()
                    }, t.isCurrentOpen = function() {
                        return t.editableComment.item_id === t.item.item_id && t.editableComment.type === t.item.type
                    }
                }],
                template: a("bcWs")
            }
        }
        i.$inject = ["portfolioApiFactory", "utils", "$window", "quotesService"], e.exports = i
    },
    qp6g: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                getSearchResults: function(r) {
                    var o = r.method || "/search";
                    return delete r.method, e.call(a.buildUrl(i.API_URL + o, r), t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig"], e.exports = i
    },
    qqGh: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    content: "=",
                    isAnalystPage: "="
                },
                controller: ["$scope", function(e) {
                    var a, r = angular.copy(t.investment),
                        o = {
                            "Strong Buy": "#007D34",
                            "Moderate Buy": "#66B185",
                            Hold: "#BBBBBB",
                            "Moderate Sell": "#DC6666",
                            "Strong Sell": "#C40000"
                        };
                    r.options.tooltip = {
                        useHTML: !0,
                        formatter: function() {
                            return "<b>" + this.point.description + "</b>"
                        }
                    }, r.options.plotOptions.pie.size = "120%", r.options.pie.center = ["30%", "50%"], r.options.legend = {
                        align: "right",
                        verticalAlign: "middle",
                        layout: "vertical",
                        x: -50,
                        labelFormatter: function() {
                            return this.description
                        },
                        itemStyle: {
                            color: "#000000",
                            fontWeight: "normal"
                        },
                        symbolRadius: 0
                    }, e.isAnalystPage && (r.options.plotOptions.pie.size = "55%", r.options.plotOptions.pie.center = ["50%", "25%"], r.options.legend.align = "bottom", r.options.legend.verticalAlign = "top", r.options.legend.y = 150, r.options.legend.x = 70), i.isMobileAndTablet() && (r.options.legend.x = 0), e.config = r, r.series[0].data = [], Object.keys(o).forEach(function(t) {
                        e.content[t] && (a = o[t] || !1, r.series[0].data.push({
                            name: t,
                            y: e.content[t].percent,
                            description: e.content[t].value + " " + t,
                            color: a
                        }))
                    })
                }],
                template: a("jQ1H")
            }
        }
        i.$inject = ["highchartsNG", "chartsSettings", "utils"], e.exports = i
    },
    qwMP: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                scope: {},
                bindToController: {
                    defaultPeriod: "@",
                    exclude: "=",
                    symbolSector: "@",
                    onChartPeriodChanged: "&"
                },
                controllerAs: "$ctrl",
                controller: [function() {
                    var r, o = this,
                        n = e.isMobileOnly() ? t.quick_chart.mobile : t.quick_chart.desktop,
                        s = a("qBno")(n);
                    o.exclude = o.exclude || [], o.period = o.defaultPeriod || "6m", o.periods = {}, Object.keys(s).forEach(function(e) {
                        ~o.exclude.indexOf(e) || (o.periods[e] = s[e])
                    }), r = i.getByPeriod(o.period), o.applyQuickSetting = function(e) {
                        o.period = e, r = i.getByPeriod(o.period), o.onChartPeriodChanged({
                            period: o.period,
                            periodSettings: r
                        })
                    }
                }],
                template: a("5bpx")
            }
        }
        i.$inject = ["utils", "technicalChartLabels", "technicalChartPeriodSettings"], e.exports = i
    },
    qy0q: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p, m, h, g) {
            var f = this,
                b = o.getUserData() || {},
                v = b.preferences ? b.preferences.charts_style : "interactive";
            f.saving = !1, f.model = {
                symbol: e.symbol,
                name: e.name,
                group: angular.copy(t)
            }, f.allowChangeSymbol = !!a, f.searchResultsVisible = !1, f.searchResults = null, f.invalidSymbol = !1;
            var y = e.symbol;
            f.close = function() {
                i.dismiss()
            }, f.save = function(e) {
                if (!e.$invalid) {
                    f.saving = !0;
                    var a = {
                        group_id: f.model.group.id,
                        type: v,
                        symbol: f.model.symbol,
                        name: f.model.name,
                        email: !1
                    };
                    "interactive" === v ? (a.state = JSON.stringify(c.getDefinition(!0)), a.configuration = JSON.stringify(d.getChartGlobalConfig())) : a.state = JSON.stringify(p.getApiSettings()), r.createChart(a).then(function(e) {
                        s.addChart(a.group_id, e.data[0], a.type), i.close("OK");
                        var r = u.htmlEntities(f.model.name);
                        n.success("Chart " + r + " has been copied"), f.model.group.id !== t.id ? l.$broadcast("myChartMovedToAnotherGroup", {
                            oldGroup: angular.copy(t),
                            newGroup: angular.copy(f.model.group),
                            chart: angular.copy(e.data[0])
                        }) : l.$broadcast("myChartCopied", {
                            chart: angular.copy(e.data[0])
                        })
                    }).catch(function() {
                        f.saving = !1, n.error("Something went wrong. Please try again.")
                    })
                }
            }, f.preSymbolEnter = function() {
                f.model.symbol = ""
            }, f.pastSymbolEnter = function() {
                f.model.symbol || (f.model.symbol = y)
            }, f.useSearch = function() {
                var e;
                f.model.symbol ? (e = f.model.symbol, m.connect().then(function() {
                    m.getSearchResults(e).then(function(e) {
                        var t;
                        e.instruments.length > 0 ? (t = e.instruments, f.selectedItemIndex = null, f.searchResults = t.slice(0, 6), f.searchResultsVisible = !0) : f.searchResults = null, g.$digest()
                    })
                })) : f.clearSearch()
            }, f.keyboardNavigation = function(e) {
                switch (e.keyCode) {
                    case 38:
                        l.$broadcast("autoCompleteMoveToPrevItem");
                        break;
                    case 40:
                        l.$broadcast("autoCompleteMoveToNextItem");
                        break;
                    case 13:
                        l.$broadcast("autoCompleteUseSelectedItem")
                }
            }, f.selectSymbol = function(e) {
                f.model.symbol = e.symbol, f.searchResultsVisible = !1, f.searchResults = null, f.selectedItemIndex = null
            }, f.clearSearch = function() {
                g.$evalAsync(function() {
                    f.search = null, f.searchResultsVisible = !1, f.searchResults = null
                })
            }, h.addEventListener("click", function() {
                setTimeout(function() {
                    document.activeElement !== document.querySelector(".js-interactive-chart-symbol-selector-input") && f.model.symbol && f.searchResultsVisible && (document.activeElement.blur(), f.clearSearch())
                }, 300)
            })
        }
        i.$inject = ["chart", "group", "allowChangeSymbol", "$modalInstance", "myChartsApiService", "authService", "Notification", "userMyChartStorageService", "$rootScope", "interactiveChartApi", "interactiveChartSettings", "utils", "chartApiService", "searchConnectionService", "$window", "$scope"], e.exports = i
    },
    qz5x: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-add-my-chart"> <input type=hidden /> <div class=bc-modal-content-inner> <div class=modal-header> Apply action for [[ ::$ctrl.currentSymbol.symbol ]] <i class="bc-glyph-times form-close right" data-ng-click=$ctrl.close()></i> </div> <div class=dropdown-container> <div class=inner> <ul> <li data-ng-click=$ctrl.deleteChart() class=padding-left-20 data-ng-class="{\'disable-option\': $ctrl.gridIsActive}" data-ng-hide="$ctrl.type !== \'tab\'"> <a>Delete Chart</a> </li> <li data-ng-hide="$ctrl.type !== \'watchlist\'" data-ng-if=::$ctrl.isLoggedIn data-ng-click=$ctrl.removeFromWatchlist() class=padding-left-20> <a>Remove From Watchlist</a> </li> <li data-ng-hide="$ctrl.type !== \'portfolio\'" data-ng-if=::$ctrl.isLoggedIn data-ng-click=$ctrl.removeFromPortfolio() class=padding-left-20> <a>Remove From Portfolio</a> </li> <li data-ng-click=$ctrl.renameChart() data-ng-class="{\'disable-option\': $ctrl.gridIsActive}" data-ng-hide="$ctrl.type !== \'tab\'" class=padding-left-20> <a>Rename Chart</a> </li> <li data-ng-click=$ctrl.copyChart() data-ng-class="{\'disable-option\': $ctrl.gridIsActive}" data-ng-hide="$ctrl.type !== \'tab\'" class=padding-left-20> <a>Copy Chart</a> </li> <hr class=line-separator data-ng-hide="$ctrl.type !== \'tab\'"/> <li data-bc-symbol-widgets-modal data-symbol-data=$ctrl.currentSymbol data-ng-click=$ctrl.close() class=padding-left-20> <a>More Data</a> </li> <li class=padding-left-20 data-bc-modal-login=alerts data-remove-touch-start=true data-bc-show-alerts-modal data-symbol="[[ $ctrl.currentSymbol | json ]]" data-ng-click=$ctrl.close()> <a>Set Alert</a> </li> <li data-ng-if=::$ctrl.isLoggedIn data-ng-click=$ctrl.addToWatchlist() class=padding-left-20> <a>Add to Watchlist</a> </li> <li data-bc-modal-login=watchlist data-stay-on-page=true data-ng-if=::!$ctrl.isLoggedIn class=padding-left-20> <a> Add to Watchlist</a> </li> <li data-ng-if=$ctrl.enableMyCharts data-ng-click=$ctrl.saveToMyCharts() data-ng-class="{\'disable-option\': $ctrl.gridIsActive}" class=padding-left-20 data-ng-hide="$ctrl.type === \'tab\'"> <a>Save to My Charts</a> </li> <li class=padding-left-20 data-ng-click=$ctrl.close()> <chart-share data-type="[[ ::$ctrl.chartStyle ]]" data-use-default-page-link=true data-label="Social Share" data-dashboard-mode=true> </chart-share> </li> <li class=padding-left-20 data-ng-class="{\'disable-option\': $ctrl.gridIsActive}" data-ng-click=$ctrl.savePng()> <a>Save PNG</a> </li> </ul> </div> </div> </div> </div> '
    },
    "r/Gd": function(e, t) {
        e.exports = '<div class=set-alerts> <div data-ng-transclude></div> <span class=microbar__alerts-notification data-ng-if="triggered > 0 && showAlerts" data-ng-bind=triggered></span> </div> '
    },
    "r/yK": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l) {
            var c = this;
            c.disable = !1, c.cancel = function() {
                i.dismiss()
            }, c.ok = function() {
                c.disable = !0, i.dismiss();
                var d = l.find(n.getUserData().watchlists, {
                    id: parseInt(e)
                });
                if (l.remove(d.symbols, function(e) {
                        return e === t
                    }), a) {
                    var u = [];
                    Object.keys(a).forEach(function(e) {
                        e !== t && a[e] === t && u.push(e)
                    }), u && l.remove(d.symbols, function(e) {
                        return -1 !== u.indexOf(e)
                    })
                }
                d.symbols.length ? o.saveWatchlist(d).then(function(a) {
                    a.error && a.error.message ? r.error("Cannot delete symbol from watchlist. " + a.error.message.symbol[0]) : (s.$broadcast("dashboardWatchlistSelected", {
                        id: parseInt(e)
                    }), r.success("Symbol " + t + " has been removed from the Watchlist."))
                }) : r.error("Symbol cannot be removed as a watchlist must have at least one symbol. Delete the watchlist instead.")
            }
        }
        i.$inject = ["watchlist", "symbol", "meta", "$modalInstance", "Notification", "watchlistEditApiFactory", "authService", "$rootScope", "_"], e.exports = i
    },
    r57p: function(e, t) {
        e.exports = '<div class="technical-chart-quick-links-component clearfix hide-for-print"> <div class=technical-chart-quick-links__right> <div class=link-apply-template> <a class="bc-button white-with-border small" data-ng-click=toggleChartForm() data-ng-show=fullScreen> Settings </a> </div> <div class=popout> <a class="chart-tools-icon popup-chart" title="Pop chart out to a new window." data-ng-click=openFullScreen()> <i class=bc-glyph-long-arrow-ne></i> </a> </div> <div class=link-apply-template data-ng-show=!user> <a class="bc-button white-with-border small" data-bc-modal-login=templates href="">Apply Template</a> </div> <div class=apply-template-wrapper data-ng-show="user && userChartTemplates.length"> <label class=apply-template-label for=technical-chart-template data-ng-show=fullScreen>Template:</label> <a class=apply-template-label target=_self href="[[ chartTemplatesUrl ]]" data-ng-hide=fullScreen>Template:</a> <div class="bc-dropdown styled apply-template-drop-down"> <select id=technical-chart-template name=userChartTemplate data-ng-model=appliedChartTemplate data-ng-change=applyChartTemplate() data-ng-options="template as template.name for template in userChartTemplates"> <option value="" selected=selected>None</option> </select> </div> </div> <div class=apply-template-wrapper data-ng-show="user && !userChartTemplates.length"> <a class="apply-template-label create-new" target=_self href="[[ chartTemplatesUrl ]]">Create Chart Template</a> </div> </div> <dashboard-change-symbol-box data-ng-if=!myChartsMode data-form-data=formData data-current-symbol=currentSymbol data-error=error> </dashboard-change-symbol-box> <div class=periods> <div class=period-num> <span class=header>Quick Chart:</span> <ul> <li data-ng-repeat="(key,label) in periods" data-ng-class="{\'active\': key == period && !appliedChartTemplate}" data-ng-click=applyQuickSetting(key) data-ng-bind=label></li> </ul> </div> </div> </div>'
    },
    rB8e: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterData.default = e.filterData.default || {}, e.filterData.default.field = e.filterData.default.field || e.filters.default.field[0].key, e.filterData.default.operator = e.filters.default.operator
                }],
                template: a("Qj9k")
            }
        }
    },
    rBgr: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterData.default = e.filterData.default || {
                        value: ""
                    }, e.filterData.default.operator = e.filters.default.operator[0].key
                }],
                template: a("gZwS")
            }
        }
        i.$inject = [], e.exports = i
    },
    rCjt: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    portfolio: "=",
                    dataLoading: "=",
                    publicView: "="
                },
                controller: ["$scope", function(e) {
                    function a(a) {
                        var o = {
                            page: e.page,
                            limit: e.limit
                        };
                        e.onlyCommentary && (o.comments_only = e.onlyCommentary), "all" !== e.symbolFilter && (o.symbol_filter = e.symbolFilter), t.getTimeline(e.portfolio.id, o).then(function(t) {
                            e.timeline = a ? r.union(e.timeline, t.data) : t.data, e.total = t.meta.event_count, e.symbols = r.uniq(t.meta.symbols), i()
                        })
                    }

                    function i() {
                        t.getSymbolsMainData(e.symbols).then(function(t) {
                            if (t.data && t.data.forEach(function(t) {
                                    e.symbolsData[t.symbol] = t
                                }), t.meta.symbol.normalized) {
                                var a = r.keys(t.meta.symbol.normalized),
                                    i = r.keys(e.symbolsData),
                                    o = r.filter(a, function(e) {
                                        return -1 === i.indexOf(e)
                                    });
                                o.length && o.forEach(function(a) {
                                    t.meta.symbol.normalized[a] && e.symbolsData[t.meta.symbol.normalized[a]] && (e.symbolsData[a] = e.symbolsData[t.meta.symbol.normalized[a]])
                                })
                            }
                            t.errors && t.errors.invalidSymbols && r.remove(e.symbols, function(e) {
                                return -1 !== r.indexOf(t.errors.invalidSymbols, e)
                            }), e.loading = !1, e.loadingMore = !1
                        })
                    }
                    e.loading = !0, e.loadingMore = !1, e.symbolsData = {}, e.timeline = [], e.symbolFilter = "all", e.editableComment = {}, e.onlyCommentary = !1, e.deletePending = {
                        comment: !1
                    }, e.limit = 25, e.page = 1, e.addComment = function() {
                        e.errorMessage = !1, e.newComment && t.addComment(e.portfolio.id, {
                            body: e.newComment
                        }).then(function(t) {
                            e.newComment = "", e.timeline.unshift(t.data[0]), t.meta.symbols.length && (e.symbols = r.sortBy(r.uniq(r.merge(e.symbols, t.meta.symbols))), i())
                        }, function(t) {
                            e.errorMessage = t.error && t.error.message && t.error.message.body ? t.error.message.body[0] : "Something went wrong"
                        })
                    }, e.deleteComment = function(a) {
                        t.deleteComment(e.portfolio.id, a).then(function(t) {
                            var i = r.findIndex(e.timeline, function(e) {
                                return e.id === a
                            });
                            e.timeline.splice(i, 1), e.count--
                        })
                    }, a(), e.reloadData = function() {
                        e.page = 1, e.loading = !0, a()
                    }, e.loadMore = function() {
                        e.page++, e.loadingMore = !0, a(!0)
                    }
                }],
                template: a("VQbD")
            }
        }
        i.$inject = ["$rootScope", "portfolioApiFactory", "portfolioModalFactory", "_", "utils", "$window", "authService", "quotesService"], e.exports = i
    },
    rOA4: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterItem: "=",
                    removeFilter: "&",
                    filterIndex: "@",
                    type: "@",
                    isOptions: "@",
                    defaultFilter: "@"
                },
                link: function(a, l) {
                    if (void 0 === a.filterItem.directive) throw new PropertyRequiredError("directiveName is required property of filter item");
                    if (a.market = e.config.settings.markets[e.config.user.market].uri, a.detectFundMarket = function(e, t) {
                            if ("FUND" === t.toUpperCase()) switch (e) {
                                case "ca":
                                    e = "cadfunds";
                                    break;
                                case "us":
                                    e = "fund"
                            } else if ("ETF" === t.toUpperCase()) switch (e) {
                                case "ca":
                                    e = "cadetf";
                                    break;
                                case "us":
                                    e = "etf"
                            }
                            return e
                        }, a.market = a.detectFundMarket(a.market, a.type), a.stockUsExchange = "STK" === a.type && "us" === a.market && "exchange" === a.filterItem.type, a.hideDeleting = !1, "no" === a.isOptions && (a.hideFilter = "exchange" === a.filterItem.type && (!Array.isArray(a.filterItem.filters[a.market].value) || 1 === a.filterItem.filters[a.market].value.length)), "exchange" === a.filterItem.type && "no" === a.isOptions && (a.hideDeleting = !0), ~t.options.indexOf(a.type.toUpperCase()) && a.filterItem.key === a.defaultFilter && (a.hideDeleting = !0), a.filterItem.data = void 0 !== a.filterItem.data ? a.filterItem.data.filters : {}, void 0 === a.filterItem.data) {
                        var c = n.find(o.filters, "guid", a.filterItem.guid);
                        a.filterItem.data = c.data
                    }
                    a.removeDialogOpen = !1, a.askToRemoveRowFilter = function() {
                        if (!s.checkPermissions()) return !1;
                        a.removeDialogOpen = !0
                    }, a.confirmFilterRemove = function() {
                        i.$broadcast("removeRowFilter", a.filterItem.guid), i.$broadcast(r.ON_SCREENER_DELETE_FILTER, {
                            key: a.filterItem.key
                        })
                    }, a.cancelFilterRemove = function() {
                        a.removeDialogOpen = !1
                    }
                },
                template: a("GIcn")
            }
        }
        i.$inject = ["$window", "screenerTypes", "$rootScope", "events", "screenerCurrentConfigService", "_", "screenerPermissionService"], e.exports = i
    },
    rOCC: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                getPriceSurprisesData: function() {
                    return e.call("/data/widget/price-surprises", t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "_"], e.exports = i
    },
    rYpM: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                replace: !0,
                bindToController: {},
                controller: ["authService", "localStorageService", "dataProvider", "apiConfig", "httpVerbs", "Notification", function(e, t, a, i, r, o) {
                    var n = this;
                    if (e.isLoggedIn()) {
                        var s = e.getUserPreferences();
                        n.hideContent = !!s.hide_scrollbar_feature_ads
                    } else n.hideContent = t.get("hideScrollbarFeatureAds");
                    n.close = function() {
                        e.isLoggedIn() ? a.call(i.API_URL + "/preferences", r.PUT, {
                            name: "hide_scrollbar_feature_ads",
                            value: !0
                        }, []).then(function() {
                            n.hideContent = !0
                        }).catch(function() {
                            o.error("Something went wrong. Please try again.")
                        }) : (t.set("hideScrollbarFeatureAds", !0), n.hideContent = !0)
                    }
                }],
                controllerAs: "$ctrl",
                template: a("xM60")
            }
        }
    },
    rZiK: function(e, t) {
        e.exports = '<div class=bc-form> <div class="template-form-container borders clearfix"> <div class="template-form-block edit"> <form class=bc-form name=templateForm novalidate> <div class=form-items> <div class="form-item name"> <label>Name:</label> <div class=pencil-icon-wrapper> <input type=text name=templateName data-ng-model=template.name data-unique-name=existedNames data-ng-maxlength=30 placeholder="Enter a name..." required> <i class=bc-glyph-pencil></i> </div> </div> <div class=form-item-errors> <span class=ng-hide data-ng-show=templateForm.templateName.$error.uniqueName> A Template already exists with that name. Please enter a new name. </span> <span class=ng-hide data-ng-show=templateForm.templateName.$error.maxlength> Template name cannot be longer than 30 characters. </span> </div> <div class="form-item description"> <label>Description:</label> <input type=text name=templateDescription data-ng-model=template.description data-ng-maxlength=80 placeholder=(Optional)> </div> <div class=form-item-errors> <span class=ng-hide data-ng-show=templateForm.templateDescription.$error.maxlength> Template description cannot be longer than 80 characters. </span> </div> </div> <div class=form-buttons> <input type=button class="bc-button save grey" data-ng-click=cancel() value=Cancel><input type=submit class="bc-button save light-blue" data-ng-click=saveTemplate(templateForm) data-ng-disabled=templateForm.$invalid value=Save> </div> </form> </div> </div> <div class=template-settings-container> <form novalidate name=settingsForm> <div class=bc-technical-chart> <div class=chart-form> <technical-chart-basic-settings data-disable-auto-year-fill=true data-form=settingsForm data-form-submitted=formSubmitted data-form-data=template data-symbol-sector="\'futures\'"> </technical-chart-basic-settings> </div> </div> </form> </div> </div>'
    },
    ri2E: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filters: "=",
                    type: "@"
                },
                controller: ["$scope", function(a) {
                    a.filtersNumber = 0, a.filterItems = {};
                    var o = {};
                    a.$watchCollection(function() {
                        return e.getFilters()
                    }, function() {
                        a.filtersNumber = e.countFilters()
                    }), e.getFilterItems(a.type, r.config.user.market).then(function(e) {
                        a.filterItems = e
                    }), e.getFiltersData(a.type).then(function(e) {
                        o = e
                    }), a.addFilter = function() {
                        if (!i.checkPermissions()) return !1;
                        var r = a.selectFilterLevel2 || a.selectFilterLevel1 || a.selectFilterLevel0;
                        if (void 0 !== r) {
                            if (null === r.value) return !1;
                            if (o.hasOwnProperty(r.value)) {
                                if (-1 !== ["watchlist", "portfolio", "indexGroups"].indexOf(r.value) && o[r.value].requiresPremier && !i.checkPermissionsForList(o[r.value].requiresPremier)) return !1;
                                var n = angular.copy(o[r.value]);
                                n.directive = t[n.type], n.key = r.value, e.addFilter(n)
                            } else console.error(r.value + " does not exist in filter data from /api/v1/screeners/fields");
                            a.selectFilterLevel2 ? a.selectFilterLevel2 = null : a.selectFilterLevel1 ? a.selectFilterLevel1 = null : a.selectFilterLevel0 = null
                        }
                    }
                }],
                template: a("eK4P")
            }
        }
        i.$inject = ["screenerFilterService", "screenerDirectiveMapper", "screenerPermissionService", "$window"], e.exports = i
    },
    rjiJ: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                subscribeWatchlists: function(i) {
                    return a.call(e.API_URL + "/watchlist/update-subscription", t.POST, i, [])
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider"], e.exports = i
    },
    rm9P: function(e, t, a) {
        var i = a("urOV"),
            r = angular.module(i.name);
        r.filter("parseDecimals", function() {
            return function(e, t) {
                return e.toFixed(t)
            }
        }), r.filter("parseCommas", function() {
            return function(e) {
                for (;
                    /(\d+)(\d{3})/.test(e.toString());) e = e.toString().replace(/(\d+)(\d{3})/, "$1,$2");
                return e
            }
        }), r.filter("formatDate", function() {
            return function(e) {
                return new Date(e).toLocaleTimeString("en-us", {
                    weekday: "short",
                    year: "numeric",
                    month: "short",
                    day: "numeric",
                    hour: "2-digit",
                    minute: "2-digit"
                })
            }
        }), r.filter("substr", function() {
            return function(e, t, a) {
                var i = e.length,
                    r = e.substr(t, a);
                return i > a ? r + "..." : r
            }
        }), r.filter("parseOpinion", function() {
            return function(e) {
                return "S" == e ? "Sell" : "B" == e ? "Buy" : "Hold"
            }
        }), r.filter("parseOpinionColor", function() {
            return function(e) {
                return "S" == e || "Sell" == e ? "text-red" : "B" == e || "Buy" == e ? "text-green" : ""
            }
        }), r.filter("lowerCase", function() {
            return function(e) {
                return e.toLowerCase()
            }
        }), r.filter("parseChangeColors", function() {
            return function(e) {
                return e ? (e = parseFloat(e)) > 0 ? "change-positive" : e < 0 ? "change-negative" : "change-neutral" : ""
            }
        }), r.filter("parseBuySell", function() {
            return function(e) {
                if (e) return e.indexOf("Buy") > -1 ? "opinionBuy" : e.indexOf("Sell") > -1 ? "opinionSell" : "opinionHold"
            }
        }), r.filter("screener", function() {
            return function(e, t, a) {
                var i = [];
                return t ? (angular.forEach(e, function(e) {
                    for (var r = !0, o = 0; o < t.length; o++) {
                        var n = t[o].field,
                            s = t[o].type;
                        if ("" !== a[n]) {
                            if (!a[n]) return;
                            "slider" === s ? r && e.raw[n] >= a[n].min && e.raw[n] <= a[n].max || (r = !1) : "opinion" === s && a[n] !== e.raw[n] && (r = !1)
                        }
                    }
                    r && i.push(e)
                }), i) : e
            }
        }), r.filter("sortTable", function() {
            return function(e, t, a) {
                if (!t.length) return e;
                for (var i = [], r = 0; r < e.length; r++) i.push(e[r]);
                return i.sort(function(e, a) {
                    return e.raw[t] > a.raw[t] ? 1 : -1
                }), a && i.reverse(), i
            }
        }), r.filter("parseOpinionBackground", function() {
            return function(e, t) {
                return "B" == e || "Buy" == e ? "strong" != t ? "opinionBuy" : "opinionBuyStrong" : "S" == e || "Sell" == e ? "strong" != t ? "opinionSell" : "opinionSellStrong" : "strong" != t ? "opinionHold" : "opinionHoldStrong"
            }
        }), r.filter("parseTenPointStrength", function() {
            return function(e) {
                return 1 == e || 2 == e ? "Minimum" : 3 == e || 4 == e ? "Weak" : 7 == e || 8 == e ? "Strong" : 9 == e || 10 == e ? "Strongest" : "Average"
            }
        }), r.filter("parseTenPointDirection", function() {
            return function(e) {
                return 1 == e || 2 == e ? "Weakest" : 3 == e || 4 == e ? "Weak" : 7 == e || 8 == e ? "Strengthening" : 9 == e || 10 == e ? "Strongest" : "Average"
            }
        }), r.filter("makeBar", function(e) {
            return function(t, a, i) {
                var r = parseFloat(t);
                if (a = parseFloat(a), i = parseFloat(i), r > 0) var o = r / a * 100,
                    n = "background-green";
                else if (r < 0) o = r / i * 100, n = "background-red";
                else o = 0;
                return e.trustAsHtml('<span style="width:' + o + '%;" class="longBar ' + n + '"><span class="longBarPercent">' + t + "</span></span>")
            }
        }), r.filter("formatDecimal", function() {
            function e(e, t) {
                return ["000", Math.floor(e)].join("").substr(-1 * t)
            }
            return function(t, a) {
                var i = t >= 0 ? "" : "-";
                switch (t = Math.abs(t), a) {
                    case "2":
                        return [i, Math.floor(t), "-", e(8 * (t - Math.floor(t)), 1)].join("");
                    case "3":
                        return [i, Math.floor(t), "-", e(16 * (t - Math.floor(t)), 2)].join("");
                    case "4":
                        return [i, Math.floor(t), "-", e(32 * (t - Math.floor(t)), 2)].join("");
                    case "5":
                    case "6":
                    case "7":
                        return [i, Math.floor(t), "-", e(320 * (t - Math.floor(t)), 3)].join("");
                    case "8":
                        return i + t.toFixed(0);
                    case "9":
                        return i + t.toFixed(1);
                    case "A":
                        return i + t.toFixed(2);
                    case "B":
                        return i + t.toFixed(3);
                    case "C":
                        return i + t.toFixed(4);
                    case "D":
                        return i + t.toFixed(5);
                    case "E":
                        return i + t.toFixed(6);
                    default:
                        return i + t
                }
            }
        }), r.filter("parseForex", function() {
            return function(e) {
                var t = e.replace("^", "");
                return 6 !== t.length ? e : t.substring(0, 3) + "/" + t.substring(3)
            }
        }), r.filter("truncate", function() {
            return function(e, t, a, i) {
                if (!e) return "";
                if (!(a = parseInt(a, 10))) return e;
                if (e.length <= a) return e;
                if (e = e.substr(0, a), t) {
                    var r = e.lastIndexOf(" "); - 1 != r && (e = e.substr(0, r))
                }
                return e + (i || " â€¦")
            }
        }), r.filter("imagesOnly", function() {
            return function(e) {
                return null != e.image
            }
        })
    },
    rpPB: function(e, t) {
        e.exports = '<div class=modal-two-column-wrapper> <data-ref-component data-ref=ref data-go-to-register=goToRegister data-ng-show=ref></data-ref-component> <div class=sign-in-block> <span data-ng-class="{\'sign-in-full\': ref}"> <div class=header>Log in</div> <div> <form novalidate name=loginForm id=bc-login-form class="bc-form bc-login-form" data-ng-submit=login(loginForm)> <div class=form-group data-ng-class="{\'error-input\':loginForm.email.$invalid && loginForm.$submitted}"> <input type=text class="form-input form-field-login" data-ng-class="{\'remove-chrome-highlight\':loginForm.email.$invalid && loginForm.$submitted}" placeholder="Login with email" name=email autofocus required data-ng-model=user.email> </div> <div class="form-group group-pass-submit row collapse"> <div class="small-10 columns field-password-wrapper" data-ng-class="{\'error-input\':loginForm.password.$invalid && loginForm.$submitted, \'small-12\': !ref}"> <input type=password data-hj-masked id=login-form-password data-ng-class="{\'remove-chrome-highlight\':loginForm.password.$invalid && loginForm.$submitted}" class="form-input form-field-password" placeholder=Password name=password required data-ng-model=user.password> <data-show-password password-id="\'login-form-password\'" class=peek-at-password></data-show-password> </div> <div data-ng-if=ref class="small-2 columns"> <input type=submit data-ng-class="{\'increase-line-height\':loginForm.password.$invalid && loginForm.$submitted}" class=form-field-submit value=GO> </div> </div> <div class="form-group row collapse form-extra-nav"> <div class="small-6 columns"> <div class=input-checkbox> <input id=rememeber_me name=rememeber_me data-ng-model=user.remember data-ng-init="user.remember=true" type=checkbox checked=checked> <label for=rememeber_me> <span class=bc-glyph-check></span> Remember Me </label> </div> </div> <div class="small-6 columns forgot-pass-link"> <a href="" data-ng-click=goToForgot()>Forgot Password?</a> </div> </div> <div id=g-login-component class=g-recaptcha></div> <div> <errors-component class=error-block data-ng-show=hasErrors data-form=loginForm data-errors=errors></errors-component> </div> <div data-ng-if=!ref class="form-group text-center"> <button type=submit class="bc-button light-blue full-width-login-btn">Log In</button> </div> </form> </div> <div class=social> <div class=social-text>Or, Log in with:</div> <data-social-component data-ref=ref></data-social-component> </div> <p data-ng-hide=ref class=back-link> <a href="" class="bc-button white-with-border login-button" data-ng-click=goToRegister()>Not a member? Create a free account</a> </p> </span> </div> </div>'
    },
    rpp4: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    fullScreen: "=",
                    dashboardMode: "=",
                    flipChartMode: "=",
                    resetDialogFn: "&",
                    currentSymbol: "=",
                    enableMyCharts: "="
                },
                controller: ["authService", "interactiveChartApi", "watchlistFormModalService", "interactiveChartUtils", "interactiveChartModals", "bcModalLoginSrv", "interactiveChartExpand", "dashboardModalsService", "$scope", "myChartModalService", "interactiveChartExportFacade", function(e, t, a, i, r, o, n, s, l, c, d) {
                    var u = this;

                    function p() {
                        angular.element(document.querySelector(".js-bc-interactive-chart-dropdown-hamburger")).click()
                    }
                    u.symbol = t.getSymbolData(), u.isAuthenticated = e.isLoggedIn(), u.isPremier = e.isLoggedIn() && e.getUserData().is_premier, window.inProgress = !1, u.clearChart = function() {
                        u.resetDialogFn(), p()
                    }, u.addToWatchlist = function() {
                        a.addToWatchlist(u.symbol.symbol, u.symbol.symbolName, u.dashboardMode), p()
                    }, u.hide = function() {
                        p()
                    }, u.comparisonModal = function() {
                        r.comparisonModal(), p()
                    }, u.openExpressionsListModal = function() {
                        r.expressionsListModal(u.fullScreen, u.dashboardMode), p()
                    }, u.openApplyTemplateModal = function() {
                        u.isAuthenticated && r.applyTemplateModal(), p()
                    }, u.saveTemplateModal = function() {
                        u.isAuthenticated && r.saveTemplateModal(), p()
                    }, u.openFullScreenChart = function() {
                        n.openInNewWindow(u.symbol), p()
                    }, u.saveChartAsImage = function() {
                        var e = u.symbol.symbol + "_Barchart_Interactive_Chart_" + window.moment(new Date).format("MM/DD/YYYY"),
                            a = t.getSVGForExport();
                        i.saveAsImage(a, e)
                    }, u.showPremierModal = function() {
                        o.showPremier("stream"), p()
                    }, u.downloadChartData = function() {
                        d.exportCSV(u.symbol.symbol)
                    }, u.saveToMyCharts = function() {
                        if (!e.isLoggedIn() || e.isLoggedIn() && !e.getUserData().is_premier) o.showPremier("myCharts");
                        else {
                            window.inProgress = !0;
                            var t = e.getUserData() || {};
                            "technical" === (t.preferences ? t.preferences.charts_style : "interactive") ? c.openWarningModal(): s.openSaveMyChartModal().finally(function() {
                                window.inProgress = !1
                            })
                        }
                    }, l.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        u.symbol = t
                    }), l.$on("microbarSaveToMyCharts", function() {
                        window.inProgress || u.saveToMyCharts()
                    })
                }],
                controllerAs: "$ctrl",
                template: a("YFPR")
            }
        }
    },
    rx24: function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-premier__form-modal"> <div class=form-close-wrapper> <i data-ng-click=closeModal() class="bc-glyph-times form-close"></i> </div> <form novalidate class=bc-form name=editAddress> <div class=input-inner-wrapper> <label for=premier_street_address>Street Address:</label> <input id=premier_street_address type=text name=address class=rounded data-ng-class="{\'invalid\': editAddress.$submitted && editAddress.address.$invalid}" data-ng-model=addressData.address required> </div> <div class=input-inner-wrapper> <label for=premier_street_address2>Address #2: <span>(optional)</span></label> <input id=premier_street_address2 type=text name=address2 class=rounded data-ng-model=addressData.address2> </div> <div class=input-inner-wrapper> <label for=premier_city>City:</label> <input id=premier_city type=text name=city class=rounded data-ng-class="{\'invalid\': editAddress.$submitted && editAddress.city.$invalid}" data-ng-model=addressData.city required> </div> <div class=input-inner-wrapper> <label for=premier_country>Country:</label> <div class="bc-dropdown styled rounded arrow-black" data-ng-class="{\'invalid\': editAddress.$submitted && editAddress.country.$invalid}"> <select name=country id=premier_country data-ng-model=addressData.country data-ng-options="country.code as country.description for country in countriesList" data-ng-change=onCountryChange() required></select> </div> </div> <div data-ng-if=statesList.length class=input-inner-wrapper> <label for=premier_state>State:</label> <div class="bc-dropdown styled rounded arrow-black" data-ng-class="{\'invalid\': editAddress.$submitted && editAddress.state.$invalid}"> <select name=state id=premier_state data-ng-model=addressData.state data-ng-options="state.code as state.description for state in statesList" required> <option value="" disabled=disabled selected=selected>Select One</option> </select> </div> </div> <div class=input-inner-wrapper> <label for=premier_zip_code>Zip Code:</label> <input id=premier_zip_code type=text name=zip class=rounded data-ng-class="{\'invalid\': editAddress.$submitted && editAddress.zip.$invalid}" data-ng-model=addressData.zip data-ng-pattern=/^[0-9]+$/ required> </div> <div class=form-buttons> <a class="bc-button grey save" data-ng-click=closeModal()>Cancel</a> <a class="bc-button light-blue save" data-ng-click=saveModalData(editAddress)>Save</a> </div> <div class=form-errors data-ng-if="editAddress.$submitted && editAddress.$invalid"> <span data-ng-if=editAddress.$error.required> All fields are required. Please complete the form above. </span> </div> </form> </div>'
    },
    rxcw: function(e, t, a) {
        "use strict";
        var i = "FiftyTwoWeekNewHighsLows";
        angular.module(i, []).controller(i + ".FiftyTwoWeekNewHighsLowsCtrl", a("IvBp"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    rzjB: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v, y, w, C, S) {
            var x = this,
                k = n.getUserData() || {};
            x.type = i, x.meta = r, x.currentSymbol = a || f.getSymbolData(), v.config.currentSymbol = x.currentSymbol, x.isLoggedIn = n.isLoggedIn(), x.chartStyle = k.preferences ? k.preferences.charts_style : "interactive", x.enableMyCharts = g.isMyChartsEnabled(), x.close = function() {
                o.dismiss()
            }, x.gridIsActive = 1 !== b.getView(), x.addToWatchlist = function() {
                s.addToWatchlist(x.currentSymbol.symbol, x.currentSymbol.symbolName, !0), o.dismiss()
            }, x.removeFromWatchlist = function() {
                x.gridIsActive || (o.dismiss(), c.openDeleteSymbolFromWatchlistModal(g.getParameter("watchlistId"), x.currentSymbol.symbol, x.meta))
            }, x.removeFromPortfolio = function() {
                o.dismiss(), y.deletePortfolioConfirm().result.then(function() {
                    w.deleteTransaction(g.getParameter("portfolioId"), x.currentSymbol.id).then(function() {
                        C.success("Symbol " + x.currentSymbol.symbol + " has been removed from the Portfolio."), S.$broadcast("updateControllerListData", {
                            useMasterDb: !0
                        })
                    })
                })
            }, x.saveToMyCharts = function() {
                x.gridIsActive || (!n.isLoggedIn() || n.isLoggedIn() && !n.getUserData().is_premier ? l.showPremier("myCharts") : (o.dismiss(), c.openSaveMyChartModal()))
            }, x.savePng = function() {
                if (!x.gridIsActive) {
                    var e = x.currentSymbol.symbol + "_Barchart_Interactive_Chart_" + window.moment(new Date).format("MM/DD/YYYY");
                    switch (x.chartStyle) {
                        case "interactive":
                            u.saveAsImage(d.getSVGForExport(), e);
                            break;
                        case "technical":
                            p.saveAsImage(m.getChartData().image, e)
                    }
                }
            }, x.deleteChart = function() {
                x.gridIsActive || (o.dismiss(), c.openDeleteMyChartModal(e, t))
            }, x.renameChart = function() {
                x.gridIsActive || (o.dismiss(), c.openRenameMyChartModal(e, t))
            }, x.copyChart = function() {
                x.gridIsActive || (o.dismiss(), c.openCopyMyChartModal(e, t))
            }, x.toggleDailyMail = function(e) {
                x.gridIsActive || (e.stopPropagation(), x.chart.email = !x.chart.email, h.updateChart(x.chart.id, {
                    email: x.chart.email
                }))
            }
        }
        i.$inject = ["chart", "group", "currentSymbol", "type", "meta", "$modalInstance", "authService", "watchlistFormModalService", "bcModalLoginSrv", "dashboardModalsService", "interactiveChartApi", "interactiveChartUtils", "technicalChartUtils", "technicalChartImageStorage", "myChartsApiService", "dashboardSettingsService", "dashboardSymbolStorage", "dashboardGridSettings", "$window", "portfolioModalFactory", "portfolioApiFactory", "Notification", "$rootScope"], e.exports = i
    },
    rzpc: function(e, t) {
        e.exports = '<div> <div id="[[ ::$ctrl.id ]]" class=g-recaptcha></div> <input type=hidden name=captcha data-ng-model=$ctrl.captcha /> </div>'
    },
    sAHu: function(e, t, a) {
        "use strict";
        e.exports = {
            current: "standardDeviation",
            daily: "dailyStandardDeviation",
            weekly: "weeklyStandardDeviation",
            monthly: "monthlyStandardDeviation"
        }
    },
    "sBE+": function(e, t, a) {
        "use strict";
        var i = "FuturesInhouseAds";
        angular.module(i, []).controller("FuturesInhouseAdsController", a("YTlT"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    sDvR: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close();></i> </div> <div class=modal-inner-wrapper> <h4>Welcome to the New Barchart.com</h4> <p> By logging in, I agree to the new <a target=_blank href=/terms#terms-of-service>terms of use</a> and <a target=_blank href=/terms#privacy-policy>privacy policy</a>. My Barchart account will be converted to the new site format.</p> <button type=button data-ng-click=loginMe() class="form-field-submit create-account-btn">I Agree, Log Me In</button> </div> </div> </div>'
    },
    sIFy: function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <div class=bc-tools__modal-with-header-header> <div class="bc-tools__modal-with-header-close bc-glyph-times" data-ng-click=cancel();></div> <div class=bc-tools__modal-with-header-wrapper> [[ symbolData.name ]] ([[ symbolData.symbol ]]) </div> </div> <div class=bc-tools__modal-with-header-content> <bc-watchlist data-symbol="[[ symbolData.symbol ]]" data-hide=true data-dashboard-mode=dashboardMode></bc-watchlist> </div> </div>'
    },
    sKoa: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                transclude: !0,
                scope: {
                    label: "=",
                    labelImg: "=",
                    labelFont: "=",
                    dropdownId: "@",
                    persistent: "=",
                    focusElementClass: "@",
                    removeMobileClick: "@",
                    removeMobileTouch: "@",
                    onClick: "&"
                },
                link: function(a, i, r, o) {
                    a.persistent && angular.element(i[0].querySelector(".f-dropdown")).bind("click", function(e) {
                        e.stopPropagation()
                    });
                    var n = "true" === a.removeMobileClick,
                        s = "true" === a.removeMobileTouch;

                    function l(e) {
                        e && function e(t) {
                            if (t.attributes && t.attributes.id && t.attributes.id.value === a.dropdownId) return !0;
                            if (!t.parentNode) return !1;
                            return e(t.parentNode)
                        }(e.target) || setTimeout(function() {
                            angular.element(document.querySelectorAll("#" + a.dropdownId)).removeClass("mobile-flexible-dropdown"), document.querySelector(".js-bc-interactive-chart__mobile-toolbar").style.overflow = "hidden", s || document.removeEventListener("touchstart", l), n || document.removeEventListener("click", l)
                        }, 0)
                    }
                    a.isMobile = t.isMobileAndTablet(), a.isMobile && setTimeout(function() {
                        i[0].querySelector(".js-bc-dropdown-flexible-toggle").addEventListener("click", function(e) {
                            angular.element(document.querySelectorAll("#" + a.dropdownId)).addClass("mobile-flexible-dropdown"), document.querySelector(".js-bc-interactive-chart__mobile-toolbar").style.overflow = "visible", setTimeout(function() {
                                s || document.addEventListener("touchstart", l), n || document.addEventListener("click", l)
                            }, 1e3)
                        })
                    }, 0), a.handleClick = function(e) {
                        a.onClick({
                            event: e
                        })
                    }, a.$on(e.ON_DROPDOWN_FLEXIBLE_CLOSE, function(e, t) {
                        t || angular.element(i[0].querySelector(".bc-dropdown-flexible-toggle")).triggerHandler("click"), a.isMobile && l()
                    }), a.focusElementClass && a.$watch(function() {
                        return angular.element(i[0].querySelector(".bc-dropdown-flexible-toggle")).hasClass("expanded")
                    }, function(e) {
                        i[0].querySelector("." + a.focusElementClass).focus()
                    })
                },
                template: a("I34Y")
            }
        }
        i.$inject = ["events", "utils"], e.exports = i
    },
    sLV8: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d) {
            return {
                restrict: "E",
                replace: !0,
                link: function(a, u) {
                    var p = o.getUserData() || {},
                        m = p.preferences ? p.preferences.charts_style : "interactive";
                    a.sort = {}, a.watchlists = o.isLoggedIn() ? o.getWatchlists() : [];
                    var h = !1;
                    if (a.watchlists.length) {
                        var g = i.find(a.watchlists, "id", parseInt(l.getParameter("watchlistId")));
                        a.watchlist = g ? String(g.id) : String(a.watchlists[0].id)
                    }
                    a.isGridViewEnabled = l.isGridViewEnabled(), a.loading = !0, a.currentSymbol = !1, a.createWatchlistLink = n.config.routes["watchlist.create"], a.options = {
                        colorize: ["priceChange", "percentChange"],
                        exclude: e.defaultExclude
                    }, a.view = l.getParameter("controllerView") || "main", a.changeView = function() {
                        l.updateParameter("controllerView", a.view), r.$broadcast("updateControllerListData")
                    }, a.closePanel = function() {
                        r.$broadcast("closeRightPanel")
                    }, a.openControllerModal = function() {
                        c.openControllerModal()
                    }, a.sortData = function(e) {
                        a.sort.orderBy && a.sort.orderBy === e ? a.sort.orderDir = "desc" === a.sort.orderDir ? "asc" : "desc" : (a.sort.orderBy = e, a.sort.orderDir = "desc"), a.watchlistChanged(!0)
                    }, a.watchlistChanged = function(o, n) {
                        a.loading = !0;
                        var s = angular.copy(e.defaultConfig);
                        (h = i.find(a.watchlists, "id", parseInt(a.watchlist))) ? (a.sort && a.sort.orderBy && (s.orderDir = a.sort.orderDir, s.orderBy = a.sort.orderBy), !n && l.getParameter("controllerView") || (h && h.view_id && ("default" === h.view_id ? p && p.preferences && p.preferences.default_view && (a.view = p.preferences.default_view.toLowerCase()) : a.view = h.view_id), l.updateParameter("controllerView", a.view)), l.updateParameter("watchlistId", a.watchlist), h.symbols.length ? (s.symbols = h.symbols.join(","), t.setSettings(s, "getWatchlistData"), t.getData().then(function(e) {
                            setTimeout(function() {
                                angular.element(u).find(".barchart-minitable-wrapper")[0].scrollTop = 0
                            }), o || (r.$broadcast("dashboardSymbolsListChanged"), a.changeSymbol(e.data[0])), a.options = d.colorizeFields(a.options, t.getFields().split(","))
                        })) : (a.content.data = [], a.loading = !1)) : a.loading = !1
                    }, a.changeSymbol = function(e) {
                        a.currentSymbol = e, r.$broadcast("dashboardCurrentSymbolChanged", a.currentSymbol)
                    }, a.$on("dashboardControlWidgetNextSymbol", function(e, t) {
                        a.changeSymbol(t)
                    }), a.$on("dashboardSymbolChangedFromSelector", function(e, t) {
                        "technical" === m && (a.currentSymbol = t)
                    }), a.$on("dashboardWatchlistSelected", function(e, t) {
                        a.watchlist = String(t.id), a.watchlistChanged()
                    }), a.$on("dashboardControlWidgetPrevSymbol", function(e, t) {
                        a.changeSymbol(t)
                    }), a.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        a.currentSymbol = t && t.newSymbol ? {} : t
                    }), a.$on("dashboardCurrentSymbolUpdated", function(e, t) {
                        a.currentSymbol = t && t.newSymbol ? {} : t
                    }), a.watchlistChanged(!0), a.getMore = function() {
                        t.needMore() && !a.moreLoading && (a.moreLoading = !0, t.getData())
                    }, a.$on("dashboardSymbolsListUpdated", function(e, t) {
                        a.content.data = t.data, a.content.meta = t.meta, a.moreLoading = !1, a.loading = !1, s.realtimeListener(a.content.data, "myBarchart"), r.$broadcast("dashboardSymbolsListLoaded", t.data)
                    }), a.$on("watchlistsUpdated", function() {
                        a.watchlists = o.isLoggedIn() ? o.getUserData().watchlists : [];
                        var e = i.find(a.watchlists, "id", parseInt(a.watchlist));
                        h.symbols.length !== e.symbols.length && a.watchlistChanged(!0)
                    }), a.$on("updateControllerListData", function() {
                        a.watchlistChanged(!0)
                    }), a.setClass = function(e, t, a) {
                        var i = "";
                        return "symbol" === e && (i = "text-left"), a.updatedFields && ~["lastPrice", "percentChange", "priceChange", "highPrice", "lowPrice", "volume"].indexOf(e) && ~a.updatedFields.indexOf(e) && ("volume" === e ? i += " up-highlight" : a.lastPriceDirection && (i += " " + a.lastPriceDirection + "-highlight")), i
                    }
                },
                scope: {
                    content: "="
                },
                template: a("XBcL")
            }
        }
        i.$inject = ["controlWidgetConfig", "dashboardDataService", "_", "$rootScope", "authService", "$window", "barchartDatatableRealtime", "dashboardSettingsService", "dashboardModalsService", "barchartDatatableColorize"], e.exports = i
    },
    sOBz: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {},
                replace: !0,
                bindToController: {
                    chart: "=",
                    group: "=",
                    symbol: "=",
                    meta: "=?",
                    type: "@"
                },
                controller: ["dashboardModalsService", function(e) {
                    var t = this;
                    t.showMenu = function() {
                        e.openQuickLinksModal(t.chart, t.group, t.symbol, t.type, t.meta)
                    }
                }],
                controllerAs: "$ctrl",
                template: a("IZVm")
            }
        }
    },
    sOXp: function(e, t) {
        e.exports = '<div class="modal-content-wrapper screener-save-as-watchlist-modal"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=$ctrl.close()></i> </div> <h5 class=modal-title>Save Results</h5> <div class=bc-tabs> <div class=bc-tabs__tab data-ng-class="{\'active\': $ctrl.currentTab === \'new\'}" data-ng-click="$ctrl.currentTab = \'new\'">New Watchlist</div> <div class=bc-tabs__tab data-ng-class="{\'active\': $ctrl.currentTab === \'append\'}" data-ng-click="$ctrl.currentTab = \'append\'">Append to Watchlist</div> </div> <div class="content-block new-watchlist" data-ng-if="$ctrl.currentTab === \'new\'"> <p> Save up to 1000 symbols from your Screener Results to a New Watchlist. </p> <div class=modal-content-form-wrapper-input> <form novalidate class=bc-form name=watchlistForm data-ng-submit=$ctrl.saveWatchlist(watchlistForm)> <div class=form-items> <div class="form-item clear-button-wrapper"> <input type=text maxlength=51 name=name data-ng-model=$ctrl.watchlist.name data-ng-class="{\'error\': watchlistForm.name.$invalid && watchlistForm.$submitted}" data-ng-maxlength=50 data-barchart-clear-input placeholder="Enter a watchlist name" required autofocus class=placeholder /> </div> </div> <div class=form-buttons> <input type=submit class="bc-button save light-blue" value=Save> </div> </form> <div class=form-item-errors> <div data-ng-show="watchlistForm.name.$error.maxlength && watchlistForm.$submitted"> Name must be between 1 and 50 characters </div> <div data-ng-show="watchlistForm.name.$error.required && watchlistForm.$submitted"> Name is required </div> <div data-ng-show="$ctrl.error && watchlistForm.$submitted" data-ng-bind=$ctrl.error></div> </div> </div> </div> <div class="content-block add-to-watchlist" data-ng-if="$ctrl.currentTab === \'append\'"> <p> Add Screener Results to an existing Watchlist. Watchlists are limited to 1000 symbols total. </p> <bc-watchlist data-get-symbols=$ctrl.getSymbols() data-hide=true></bc-watchlist> </div> </div>'
    },
    sRqu: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = {};
            this.setAlert = function(a) {
                return e.merge(t, a), this
            }, this.getAlert = function() {
                return t
            }, this.clearAlert = function() {
                return t = {}, this
            }, this.hasAlert = function() {
                return !e.isEmpty(t)
            }
        }
        i.$inject = ["_"], e.exports = i
    },
    sTEs: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["active_return_percent", "closed_return_percent", "daily_net_return_percent", "net_return_percent"],
                t = {
                    active_return_percent: "active_cost",
                    closed_return_percent: "closed_cost",
                    daily_net_return_percent: "daily_cost",
                    net_return_percent: "cost"
                },
                a = {
                    active_return_percent: "active_return",
                    closed_return_percent: "closed_return",
                    daily_net_return_percent: "daily_net_return",
                    net_return_percent: "net_return"
                };

            function i(e) {
                var t = e.toFixed(2).toString().split(".");
                return t[0] = t[0].replace(/\B(?=(\d{3})+(?!\d))/g, ","), t[1] && t[1].length > 2 && (t[1] = t[1].substring(0, 2)), t.join(".")
            }
            return {
                getGrandTotalsData: function(r, o) {
                    var n = {},
                        s = {};
                    return r.forEach(function(e) {
                        if (!o || -1 === o.indexOf(e.id)) {
                            var t = e.totals.raw;
                            Object.keys(t).forEach(function(e) {
                                s[e] = s[e] || 0, "number" == typeof t[e] ? s[e] = s[e] + t[e] || t[e] : s[e] = s[e] + parseFloat(t[e]) || s[e]
                            }), s.portfolio_cash_value = s.portfolio_cash_value + +e.raw.cash || +e.raw.cash
                        }
                    }), n.raw = s, Object.keys(n.raw).forEach(function(r) {
                        if (-1 !== e.indexOf(r)) {
                            var o = n.raw[t[r]] ? n.raw[a[r]] / n.raw[t[r]] * 100 : 0;
                            n[r] = o ? i(o) + "%" : "unch", o > 0 && (n[r] = "+" + n[r])
                        } else n[r] = "$" + i(n.raw[r])
                    }), n
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    sU8y: function(e, t, a) {
        "use strict";
        var i = "StrengthDirection";
        angular.module(i, []).controller(i + ".strengthDirectionCtrl", a("Bc27"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    sV5u: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                bindToController: {
                    url: "@",
                    containerId: "@",
                    title: "@"
                },
                scope: {},
                controller: [function() {}],
                controllerAs: "$ctrl",
                template: a("lnkH")
            }
        }
    },
    sVFg: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: !0,
                bindToController: {
                    loading: "=",
                    apiConfig: "@",
                    content: "=",
                    options: "=",
                    callback: "=",
                    linksOpenNewTab: "="
                },
                controller: ["apiFactory", "barchartDatatableCallbackHandlers", function(e, t) {
                    var a = this;
                    a.linksOpenNewTab = !!a.linksOpenNewTab, a.getColumnsCount = function() {
                        return Object.keys(a.content.meta.field.shortName).length
                    }, a.apiConfig ? (a.apiConfig = JSON.parse(a.apiConfig), e.makeRequest(a.apiConfig).then(function(e) {
                        var i = e[0];
                        if (void 0 !== a.options.callback && t.hasOwnProperty(a.options.callback)) return t[a.options.callback].call(a, e), void(a.loading = !1);
                        a.callback ? a.callback(i) : a.content = i, a.loading = !1
                    })) : a.loading = !1
                }],
                controllerAs: "barchartMinitableDoubleRowCtrl",
                template: a("5zSd"),
                link: function(e, t, a) {}
            }
        }
        i.$inject = ["apiFactory"], e.exports = i
    },
    sWk2: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {
                    marketData: "="
                },
                controller: ["$scope", "Velocity", "$window", function(e, t, i) {
                    e.marketsList = a("+4s5").markets;
                    var r = a("+4s5").marketConstants,
                        o = a("+4s5").marketSections,
                        n = {
                            usd: function() {
                                return {
                                    allUSEquities: [e.marketsList[o.ALL_US_EQUITIES].groupMarkets[r.AMEX], e.marketsList[o.ALL_US_EQUITIES].groupMarkets[r.NYSE], e.marketsList[o.ALL_US_EQUITIES].groupMarkets[r.NASDAQ]],
                                    allCanadianEquities: [],
                                    allOtherEquities: []
                                }
                            },
                            cad: function() {
                                return {
                                    allUSEquities: [],
                                    allCanadianEquities: [e.marketsList[o.ALL_CANADIAN_EQUITIES].groupMarkets[r.TSX]],
                                    allOtherEquities: []
                                }
                            },
                            lse: function() {
                                return {
                                    allUSEquities: [],
                                    allCanadianEquities: [],
                                    allOtherEquities: [e.marketsList[o.ALL_OTHER_EQUITIES].groupMarkets[r.LSE]]
                                }
                            },
                            nse: function() {
                                return {
                                    allUSEquities: [],
                                    allCanadianEquities: [],
                                    allOtherEquities: [e.marketsList[o.ALL_OTHER_EQUITIES].groupMarkets[r.NSE]]
                                }
                            },
                            asx: function() {
                                return {
                                    allUSEquities: [],
                                    allCanadianEquities: [],
                                    allOtherEquities: [e.marketsList[o.ALL_OTHER_EQUITIES].groupMarkets[r.ASX]]
                                }
                            }
                        },
                        s = i.config.user.market;
                    n.hasOwnProperty(s) ? e.selectedMarkets = n[s]() : e.selectedMarkets = n.usd(), e.$watch("selectedMarkets", function(t) {
                        e.marketsList.forEach(function(e) {
                            e.groupSelected = e.groupMarkets.length === t[e.groupName].length
                        })
                    }, !0), e.groupBatchUpdate = function(t) {
                        t.groupSelected ? e.selectedMarkets[t.groupName] = [].concat(t.groupMarkets) : e.selectedMarkets[t.groupName] = []
                    }, e.marketSelectorVisible = !0;
                    var l = document.querySelector(".js-bc-screener__market-selector");
                    e.hideMarketSelector = function() {
                        e.marketSelectorVisible = !1, t(l, "finish"), t(l, "slideUp", {
                            duration: 300
                        })
                    }, e.showMarketSelector = function() {
                        e.marketSelectorVisible = !0, t(l, "finish"), t(l, "slideDown", {
                            duration: 300
                        })
                    }
                }],
                template: a("Da4v")
            }
        }
    },
    "sY/5": function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = "ES*0",
                r = {
                    horizontalSplit: [80, 20],
                    verticalSplit: [50, 50],
                    isHidden: !0,
                    activeTab: null,
                    list: "indices",
                    portfolioId: !1,
                    watchlistId: !1,
                    lastSymbol: i,
                    showRibbon: !0,
                    controllerView: "main",
                    gridTemplate: null
                },
                o = ["isHidden"],
                n = !0,
                s = !0,
                l = t.getUserData() || {};
            if (t.isLoggedIn() && l.preferences && l.preferences.dashboard) try {
                void 0 === (r = JSON.parse(l.preferences.dashboard)).showRibbon && (r.showRibbon = !0), void 0 === r.controllerView && (r.controllerView = "main"), void 0 === r.gridTemplate && (r.gridTemplate = null)
            } catch (e) {}

            function c(e) {
                return e[0] = Math.round(100 * e[0]) / 100, e[1] = Math.round(100 * e[1]) / 100, e[0] + e[1] > 100 && (e[0] = 100 - e[1]), e
            }
            return {
                getParameter: function(e) {
                    return !r[e] || "verticalSplit" !== e && "horizontalSplit" !== e || (r[e] = c(r[e])), "lastSymbol" !== e || r[e] || (r[e] = i), r[e] || !1
                },
                updateParameter: function(a, i) {
                    "verticalSplit" !== a && "horizontalSplit" !== a || (i = c(i));
                    var n = r[a];
                    r[a] = i, t.isLoggedIn() && -1 === o.indexOf(a) && n !== i && (console.info("[Dashboard Settings:] Update <" + a + "> to value " + i), e.saveDashboardSettings({
                        name: "dashboard",
                        value: JSON.stringify(r)
                    }))
                },
                isMyChartsEnabled: function() {
                    return n
                },
                isGridViewEnabled: function() {
                    return s
                },
                toggleMyCharts: function(e) {
                    n = e
                },
                toggleGridView: function(e) {
                    s = e
                }
            }
        }
        i.$inject = ["dashboardApiFactory", "authService", "$q"], e.exports = i
    },
    sZ6t: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    period: "@"
                },
                controller: ["bcChartFactory", "$scope", "_", "dashboardGridChartApi", "dashboardGridSettings", "$rootScope", function(e, t, i, r, o, n) {
                    var s = this,
                        l = s.period || "P6M",
                        c = o.getChartSettings();
                    s.aggregationPeriod = c.period, s.quickPeriods = a("ZMek").quickChartPeriods, s.applyQuickAggregation = function(t) {
                        var a = angular.copy(t);
                        s.aggregationPeriod = t.period, o.getSymbolsData().forEach(function(t) {
                            var i = e.getChart(t.symbol); - 1 === [2, 12, 13, 14].indexOf(t.symbolType) && (a.aggregation.spec = "None"), r.changeAggregation(i, a.aggregation), r.changePeriod(i, a.period), o.setAggregationSettings(a.aggregation), o.setPeriodSettings(a.period)
                        }), o.saveState(), n.$broadcast("gridChartChanged", {
                            action: "aggregationAndPeriod",
                            data: angular.copy(a)
                        })
                    }, t.$on("dashboardGridHardReset", function() {
                        var e = i.find(s.quickPeriods, {
                            period: l
                        });
                        s.aggregationPeriod = e.period
                    }), t.$on("gridChartChanged", function(e, t) {
                        if ("aggregation" === t.action || "period" === t.action || "fullAggregation" === t.action || "template" === t.action || "aggregationMinutes" === t.action) {
                            var a = o.getChartSettings().period,
                                i = o.getChartSettings().aggregation;
                            s.aggregationPeriod = null, s.quickPeriods.forEach(function(e) {
                                e.period === a && i.size === e.aggregation.size && i.unit === e.aggregation.unit && (s.aggregationPeriod = e.period)
                            })
                        }
                    }), t.$on("gridUpdated", function() {
                        s.aggregationPeriod = o.getChartSettings().period
                    })
                }],
                controllerAs: "$ctrl",
                template: a("mRki")
            }
        }
    },
    sZhb: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            var s = this;
            s.user = e.getData() || {}, s.user.chartOfTheDay = !0, s.privacyPolicyLink = a.config.routes["home.termsOfUse"] + "##privacy-policy", s.termServiceLink = a.config.routes["home.termsOfUse"] + "#terms-of-service", s.ref = i, s.success = !1, s.hasErrors = !1, s.errors = {
                email: !1
            }, s.register = function(t) {
                if (s.hasErrors = t.$invalid, s.hasErrors) return !1;
                s.errors = {
                    email: !1
                }, a.config.ref && (s.user.refcode = a.config.ref), r.register(s.user).then(function(t) {
                    1 === t.count && void 0 !== t.data && (s.user = t.data, s.success = !0, n.onRegister.forEach(function(e) {
                        e(t.data)
                    }), e.clear())
                }, function(e) {
                    if (e.error && 409 === e.error.status_code) return s.goToLogin({
                        default: e.error.message
                    });
                    s.hasErrors = !0, angular.isString(e) ? s.errors.server_error = !0 : angular.isString(e.error.message) ? s.errors.unsafe_default = e.error.message : angular.isObject(e.error.message) && Object.keys(e.error.message).forEach(function(t) {
                        s.errors.hasOwnProperty(t) && (s.errors[t] = e.error.message[t] || !0)
                    })
                })
            }, s.close = function() {
                e.clearErrors(), e.clear(), t.dismiss()
            }, s.goToLogin = function(t) {
                e.clearErrors(), t && e.setErrors(t), e.setData(s.user), o.goToLogin(i)
            }, s.goToContact = function() {
                e.clearErrors(), e.setData(s.user), o.goToContact(i)
            }
        }
        i.$inject = ["userAuthFormData", "$modalInstance", "$window", "ref", "authApiService", "authRouteService", "authCallbacks"], e.exports = i
    },
    sajq: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            e.portfolios = [], e.totalsExcludedPortfolios = [], e.portfolioBaseLink = window.config.routes["my.portfolio"] + "?portfolio=", e.refreshGrandTotals = function() {
                e.portfoliosGrandTotals = a.getGrandTotalsData(e.portfolios, e.totalsExcludedPortfolios), o()
            };
            var o = function() {
                    e.downloadData = [];
                    var t = ["Porfolio", r.CASH_VALUE, r.ENTRY_VALUE, r.TOTAL_FEES, r.CURRENT_VALUE, r.ACTIVE_PL, r.CLOSED_PL, r.TODAYS_RETURN, r.TOTAL_PL];
                    e.downloadData.push(t), e.downloadData.push(n("Totals", e.portfoliosGrandTotals)), e.portfolios.forEach(function(t) {
                        if (-1 !== e.totalsExcludedPortfolios.indexOf(t.id)) return !1;
                        t.totals.portfolio_cash_value = t.cash, e.downloadData.push(n(t.caption, t.totals))
                    })
                },
                n = function(e, t) {
                    return [e, t.portfolio_cash_value, t.stock_cost, t.commission, t.stock_value, t.active_return + "(" + t.active_return_percent + ")", t.closed_return + "(" + t.closed_return_percent + ")", t.daily_net_return + "(" + t.daily_net_return_percent + ")", t.net_return + "(" + t.net_return_percent + ")"]
                };
            e.init = function(i) {
                e.publicUser = i || {}, i ? (e.portfolioBaseLink = "/user/" + e.publicUser.username + "/portfolio/", t.getAllPortfoliosTotals(e.publicUser.id).then(function(t) {
                    e.portfolios = t.data[e.publicUser.id], e.portfoliosGrandTotals = a.getGrandTotalsData(e.portfolios, e.totalsExcludedPortfolios), o()
                })) : t.getAllPortfoliosTotals().then(function(t) {
                    e.portfolios = t.data, e.portfoliosGrandTotals = a.getGrandTotalsData(e.portfolios, e.totalsExcludedPortfolios), o()
                })
            }
        }
        i.$inject = ["$scope", "portfolioApiFactory", "portfolioGrandTotalsDataProcessor", "_", "portfolioSettings"], e.exports = i
    },
    sbF0: function(e, t) {
        e.exports = '<div class="bc-dropdown filter futures-by-exchange" data-ng-class="{\'disable\' : disabled}"> <select data-broadcast-on-change data-event-name=onFuturesByExchangeChanged data-ng-model=selected data-ng-disabled=disabled> <option data-ng-repeat="future in exchangeSymbols track by future.symbolRoot" data-ng-selected="{{ future.symbolRoot == selected }}" value="[[ future.symbolRoot ]]" data-ng-bind=future.symbolName></option> </select> </div>'
    },
    "sg/F": function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                scope: {
                    bcNewsFeed: "@",
                    feedItems: "@"
                },
                controller: ["$scope", "_", "bcNewsFeedsSrv", function(e, t, a) {
                    if (e.bcNewsFeed && e.feedItems) {
                        var i = JSON.parse(t.unescape(e.feedItems));
                        a.addFeed(e.bcNewsFeed, i)
                    }
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    sgXQ: function(e, t, a) {
        "use strict";
        var i = "EarningsDividendsCalendar";
        angular.module(i, []).controller(i + ".earningsDividendsCalendarCtrl", a("usTH")).directive("bcScrollbarCalendar", a("hpai")).directive("bcEarningsDetails", a("fuaU")).directive("bcEarningsDividendsHistory", a("9Gxp")).service("earningsDividendsApiFactory", a("4hGt"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    slX1: function(e, t) {
        e.exports = '<div class="interactive-chart-field-minutes bc-form dashboard-grid-intraday-field-minutes"> <label class=interactive-chart-field-minutes__label>Mins.</label> <div class=interactive-chart-field-minutes__fieldset> <form name=interactiveChartFormMinutes data-ng-submit=$ctrl.updateAggregation(interactiveChartFormMinutes) novalidate> <input name=fieldInput type=number data-ng-model=$ctrl.aggregation.size data-ng-blur=$ctrl.updateAggregation(interactiveChartFormMinutes) min=1 max=999 data-ng-disabled="$ctrl.aggregation.unit !== \'Intraday\'" data-ng-show="$ctrl.aggregation.unit === \'Intraday\'"/> </form> <input type=number disabled=disabled data-ng-show="$ctrl.aggregation.unit !== \'Intraday\'"/> </div> </div>'
    },
    sn2E: function(e, t, a) {
        "use strict";
        var i = "FuturesOptionsQuotes";
        angular.module(i, []).controller(i + ".futuresOptionsQuotesCtrl", a("HRO4")).directive("futuresOptionsQuotesSplit", a("iAS8")).factory("futuresOptionsQuotesApiFactory", a("jLrc"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    svmv: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = t.getUserData() || {};
            this.chartStyle = i.preferences ? i.preferences.charts_style : "interactive", this.link = a.config.routes["my.sitePreferences"], this.close = function() {
                e.dismiss()
            }
        }
        i.$inject = ["$modalInstance", "authService", "$window"], e.exports = i
    },
    szoR: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p, m) {
            e.alertsContainer = {}, e.sortedAlertsContainer = {}, e.alertsSymbols = [], e.alertsSymbolsFilter = "", e.alertsSymbolsData = {}, e.alerts = [], e.user = l.getUserData(), e.alertServerUnavailable = !1, e.emailPriceAlertDelivery = !1;
            var h = null;

            function g(t) {
                var o = u.defer();
                if (t.length) {
                    var s = {
                        symbols: t.join(),
                        fields: "symbol,symbolType,symbolName,lastPrice,priceChange,percentChange,symbolCode"
                    };
                    a.query(s, "/quotes/get").then(function(t) {
                        t.data.length ? t.data.forEach(function(t) {
                            var a = i.getSector(t.symbolType);
                            t.link = r.route(config.routes["quotes.sectors"], {
                                sector: a,
                                symbol: t.symbol
                            }), t.symbolTypeSpec = f(t), e.alertsSymbolsData[t.symbol] = angular.copy(t), n.clearData(), o.resolve()
                        }) : o.reject()
                    })
                } else o.reject();
                return o.promise
            }

            function f(e) {
                var t = e.symbolType.toString();
                return ~e.symbolCode.indexOf(":") && (t += e.symbolCode.substring(e.symbolCode.indexOf(":"))), t
            }

            function b(e) {
                return e.conditions[0].property.target.identifier
            }
            e.filterCollection = function(t) {
                return e.alertsSymbolsFilter ? [e.alertsSymbolsFilter] : t
            }, e.edited = function(t) {
                var a = b(t);
                Array.isArray(e.sortedAlertsContainer[a]) && e.sortedAlertsContainer[a].every(function(i, r) {
                    return i.alert_id !== t.alert_id || (e.sortedAlertsContainer[a][r] = t, !1)
                })
            }, e.cancel = function() {}, e.clear = function(t) {
                delete e.sortedAlertsContainer[t.symbol], e.alertsSymbols.splice(e.alertsSymbols.indexOf(t.symbol), 1)
            }, e.addAlert = function(t) {
                if (p.alerts(y())) return !1;
                n.setData(e.alertsSymbolsData[t]);
                var a = c.$on("getSymbolData", function() {
                        c.$broadcast("setSymbolData", e.alertsSymbolsData[t]), a()
                    }),
                    i = {
                        onDelete: function(a) {
                            ! function(t, a) {
                                var i = s.findIndex(e.sortedAlertsContainer[a], function(e) {
                                    return e.alert_id === t.alert_id
                                }); - 1 !== i && e.sortedAlertsContainer[a].splice(i, 1);
                                e.sortedAlertsContainer[a] && 0 === e.sortedAlertsContainer[a].length && e.alertsSymbols.splice(e.alertsSymbols.indexOf(a), 1)
                            }(a, t)
                        },
                        onCreate: function() {}
                    };
                1 === e.user.subscription && e.sortedAlertsContainer[t].length >= 2 && (i.onOpen = function(e) {
                    e.subscriptionWarning = !0
                }), o.openModalSymbolAlertsList(i)
            }, e.setColor = function(e) {
                return r.setColor(e)
            }, e.changeDelivery = function() {
                !0 === e.emailPriceAlertDelivery ? h.active_alert_types.push("price") : h.active_alert_types.splice(h.active_alert_types.indexOf("price"), 1), t.assignPublisherTypeDefault(h).catch(function() {
                    m.error("Something went wrong. Please try again.")
                })
            }, t.getEmailPublisherType(l.getUserData().id).then(function(t) {
                h = t, -1 !== t.active_alert_types.indexOf("price") && (e.emailPriceAlertDelivery = !0)
            }), t.retrieveAlerts().then(function(t) {
                console.log("[Alerts Page Ctrl]: alertManagerService.retrieveAlerts()", t),
                    function(t) {
                        if (t.length) {
                            t.forEach(function(t) {
                                var a = b(t);
                                e.alertsContainer[a] || (e.alertsContainer[a] = []), e.alertsContainer[a].push(t), n.addSymbolAlert(a, t)
                            });
                            var a = s.sortBy(e.alertsContainer, function(e, t) {
                                return t
                            });
                            a.forEach(function(t) {
                                e.alertsSymbols.push(b(t[0]))
                            }), a.map(function(t) {
                                e.sortedAlertsContainer[b(t[0])] = t
                            })
                        }
                    }(t), g(e.alertsSymbols), e.$on(d.ON_ALERT_CHANGED, function(t, a) {
                        var i, r;
                        r = b(i = a), Array.isArray(e.sortedAlertsContainer[r]) || (e.sortedAlertsContainer[r] = [], e.alertsSymbols.push(r), g([r]).then(function() {
                            e.alertsSymbols.sort()
                        })), s.find(e.sortedAlertsContainer[r], function(e) {
                            return e.alert_id === i.alert_id
                        }) || e.sortedAlertsContainer[r].push(i)
                    })
            }), e.alertsSymbolSearch = null, e.symbolSearchErrorMessage = null, e.callSymbolAlertsModal = function(t) {
                var i = {
                    symbols: t,
                    fields: "symbol,symbolType,symbolName,lastPrice,priceChange,percentChange,symbolCode"
                };
                a.query(i, "/quotes/get").then(function(a) {
                    if (a.data.length) {
                        e.symbolSearchErrorMessage = null, a.data[0].symbolTypeSpec = f(a.data[0]), n.setData(a.data[0]);
                        var i = c.$on("getSymbolData", function() {
                            c.$broadcast("setSymbolData", a.data[0]), i()
                        });
                        o.openModalSymbolAlertsList({
                            onCreate: function() {}
                        })
                    } else e.symbolSearchErrorMessage = "Symbol not found: " + t
                })
            }, e.symbolSearchSubmit = function() {
                if (p.alerts(y())) return !1;
                e.callSymbolAlertsModal(e.alertsSymbolSearch)
            };
            var v = e.$on("onAlertServerUnavailable", function(t, a) {
                e.alertServerUnavailable = a, e.$digest(), v()
            });
            t.subscribeAlerts();
            var y = function() {
                var t = 0;
                return Object.keys(e.sortedAlertsContainer).forEach(function(a) {
                    t += e.sortedAlertsContainer[a].length
                }), t
            }
        }
        i.$inject = ["$scope", "alertManagerService", "apiFactory", "quotesService", "utils", "alertsModalFactory", "alertsSymbolDataFactory", "_", "authService", "$rootScope", "events", "$q", "limitsService", "Notification"], e.exports = i
    },
    "t+nV": function(e, t) {
        e.exports = '<div class="technical-chart-quick-links-component clearfix hide-for-print"> <div class=technical-chart-quick-links__right> <div class=link-apply-template> <a class="bc-button white-with-border small" data-ng-click=toggleChartForm() data-ng-show=fullScreen> Settings </a> </div> <div class="popout hide-for-small-only"> <a class="chart-tools-icon popup-chart" title="Pop chart out to a new window." data-ng-click=openFullScreen() data-ng-hide=fullScreen> <i class=bc-glyph-long-arrow-ne></i> </a> </div> <div class=link-apply-template data-ng-show=!user> <a class="bc-button white-with-border small" data-bc-modal-login=templates href="">Apply Template</a> </div> <div class=apply-template-wrapper data-ng-show="user && userChartTemplates.length"> <label class=apply-template-label for=technical-chart-template data-ng-show=fullScreen>Template:</label> <a target=_self class=apply-template-label href="[[ chartTemplatesUrl ]]" data-ng-hide=fullScreen>Template:</a> <div class="bc-dropdown styled apply-template-drop-down"> <select id=technical-chart-template name=userChartTemplate data-ng-model=appliedChartTemplate data-ng-change=applyChartTemplate() data-ng-options="template as template.name for template in userChartTemplates"> <option value="" selected=selected>None</option> </select> </div> </div> <div class=save-my-chart-wrapper data-ng-click=saveMyChart()> <a class="bc-button small white-with-border">Save Chart</a> </div> <div class=apply-template-wrapper data-ng-show="user && !userChartTemplates.length"> <a target=_self class="apply-template-label create-new" href="[[ chartTemplatesUrl ]]">Create Chart Template</a> </div> </div> <div class=periods> <div class=period-num> <span class=header>Quick Chart:</span> <ul> <li data-ng-repeat="(key,label) in periods" data-ng-class="{\'active\': key == period && !appliedChartTemplate}" data-ng-click=applyQuickSetting(key) data-ng-bind=label></li> </ul> <div class=bc-technical-chart__set-alerts data-ng-if=fullScreen> <a href class=set-alerts-link data-bc-modal-login=alerts data-bc-show-alerts-modal data-symbol="[[ currentSymbol ]]"> <i class=bc-glyph-exclamation-circle></i> Set Alerts </a> </div> <div class=bc-technical-chart__edit-watchlist data-ng-if=fullScreen> <a href class="split toggle-class" data-dropdown-toggle=#bc-watchlist-dropdown-technical-chart data-bc-dropdown-fix> <i class=bc-glyph-star></i> Watchlist </a> <bc-watchlist data-symbol="[[ currentSymbol.symbol ]]" data-quid=technical-chart></bc-watchlist> </div> <chart-share data-ng-show=fullScreen data-type=technical data-use-default-page-link=true></chart-share> </div> </div> </div>'
    },
    t1hJ: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            return {
                openInNewWindow: function(o, n) {
                    var s, l = ["height=" + screen.height, "width=" + screen.width, "fullscreen=yes", "resizable=yes", "scrollbars=yes"].join(",");
                    if (n && "mycharts" === r.getParameter("activeTab")) {
                        var c = i.getChartTab();
                        s = t.route(e.config.routes["quotes.fullChartTabScreen"], {
                            symbol: o.symbol,
                            sector: a.getSector(o.symbolType),
                            tabId: c.id
                        }), window.open(s, "", l).moveTo(0, 0)
                    } else s = t.route(e.config.routes["quotes.fullInteractiveChart"], {
                        symbol: o.symbol,
                        sector: a.getSector(o.symbolType)
                    }), window.open(s, "", l).moveTo(0, 0)
                }
            }
        }
        i.$inject = ["$window", "utils", "quotesService", "userChartTabService", "dashboardSettingsService"], e.exports = i
    },
    tEic: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d, u, p, m) {
            e.fillTransparencies = p.fillTransparencies, console.log("[Interactive Chart Modal Study Ctrl]:", i, l), e.labels = {}, e.submitText = r ? "Add" : void 0 !== i ? "Apply" : "Add", e.isEditMode = c, e.studyName = l.meta.title, e.studyLevels = null, e.studyBands = null, e.studyReady = !1, e.mainAxisPlacement = l.meta.overlay ? "overlay" : "withMain", e.overBought = null, e.overSold = null, e.middleLevel = null, e.isClone = r, e.studyApplyTo = {
                placement: r ? "clone" : l.meta.overlay ? e.mainAxisPlacement : "standalone",
                studyIndex: r ? i : void 0
            }, e.levelsOptions = {
                overBoughtOpacity: 1,
                overSoldOpacity: 1
            }, e.enumerations = {}, l.meta.enumerations && l.meta.enumerations.forEach(function(t) {
                e.enumerations[t.input] = t.values
            }), e.studyId = l.id;
            var h = d.getChartAggregation();
            e.volume = {
                type: !0 === h.isContractVolume ? "contract" : "total"
            }, e.isFuture = void 0 === d.getIsFutureSymbol() || e.isFuture, e.isFuture = void 0 === e.isFuture || e.isFuture, ("None" !== h.spec && "Continue" !== h.spec || void 0 !== h.isContractVolume) && ("None" !== h.spec && "Continue" !== h.spec || void 0 === h.isContractVolume || void 0 !== i) || (e.volume.type = "contract");
            var g = u.getTaxonomies().studies,
                f = a.find(g, {
                    id: l.id
                });

            function b(t, i) {
                var r, n, s;
                if (t.inputs && t.inputs.length && (t.inputs = (r = t.inputs, n = angular.copy(f.defaults.inputs), s = [], a.forEach(n, function(e) {
                        var t = a.find(r, {
                            name: e.name
                        });
                        t ? s.push(t) : s.push(e)
                    }), s), e.studyInputs = angular.copy(t.inputs)), t.bands && t.bands.length && (e.studyBands = angular.copy(t.bands)), t.curves && t.curves.length) {
                    e.studyCurves = angular.copy(t.curves);
                    var l = u.getTaxonomies().studyFields;
                    e.studyCurves.forEach(function(t) {
                        if ("Ribbon" === t.style) t.colors[0] = o.rgbaToHex(t.colors[0]).color, e.labels[t.fields.join()] = "Fill";
                        else {
                            var i = a.find(l, function(e) {
                                return e.id === t.fields[0]
                            });
                            e.labels[t.fields[0]] = i ? i.name : t.fields[0]
                        }
                    })
                }!i && t.placement && (e.studyApplyTo.placement = t.placement), t.levels && t.levels.length && (e.studyLevels = angular.copy(t.levels), e.studyLevels.forEach(function(t, a) {
                    var i = null;
                    t.name && "oversold" === t.name.toLowerCase() ? (e.overSold = t, e.overSoldIndex = a, e.studyBands || (1 === e.studyCurves.length && e.studyCurves[0].colors[0].indexOf("rgba") > -1 ? (i = o.rgbaToHex(e.studyCurves[0].colors[0]), e.studyCurves[0].colors[0] = i.color, e.levelsOptions.overSoldOpacity = i.opacity) : e.studyCurves.length > 1 && e.studyLevels[1].line.color.indexOf("rgba") > -1 && (i = o.rgbaToHex(e.studyLevels[1].line.color), e.studyLevels[1].line.color = i.color, e.levelsOptions.overSoldOpacity = i.opacity))) : t.name && "overbought" === t.name.toLowerCase() ? (e.overBoughtIndex = a, e.overBought = t, e.studyBands || (1 === e.studyCurves.length && e.studyCurves[0].colors[3] && e.studyCurves[0].colors[3].indexOf("rgba") > -1 ? (i = o.rgbaToHex(e.studyCurves[0].colors[3]), e.studyCurves[0].colors[3] = i.color, e.levelsOptions.overBoughtOpacity = i.opacity) : e.studyCurves.length > 1 && e.studyLevels[0].line.color.indexOf("rgba") > -1 && (i = o.rgbaToHex(e.studyLevels[0].line.color), e.studyLevels[0].line.color = i.color, e.levelsOptions.overBoughtOpacity = i.opacity))) : e.middleLevel = t
                })), e.studyReady = !0
            }
            void 0 !== i || r ? b(l.defaults, r) : m.isLoggedIn() ? s.loadStudyConfig(l.id).then(function(e) {
                var t = JSON.parse(e.data[0].value),
                    i = angular.copy(l.defaults),
                    r = a.merge(l.defaults, t);
                i.curves && t.curves && (r.curves = [], i.curves.forEach(function(e, a) {
                    t.curves[a] && e.style === t.curves[a].style && e.fields === t.curves[a].fields ? r.curves[a] = t.curves[a] : r.curves[a] = e
                })), b(r)
            }, function() {
                b(l.defaults)
            }) : b(l.defaults), e.resetStudyConfig = function() {
                var t = u.getTaxonomies(),
                    i = a.find(t.studies, function(t) {
                        return t.id === e.studyId
                    });
                e.studyApplyTo.placement = i.meta.overlay ? e.mainAxisPlacement : "standalone", b(i.defaults)
            }, e.removeConfirm = function() {
                t.close({
                    remove: !0,
                    index: i
                })
            }, e.toggleCurveVisibility = function(e) {
                e.visible = !e.visible
            }, e.cloneStudy = function() {
                l.cloneIndex = i, t.close({
                    isClone: !0,
                    study: l
                })
            }, e.getStudyPlacement = function() {
                return "withMain" === e.studyApplyTo.placement && l.meta.overlay ? "overlay" : e.studyApplyTo.placement
            }, e.addStudyConfirm = function() {
                var a = {
                    id: l.id,
                    placement: e.getStudyPlacement(),
                    cloneIndex: l.cloneIndex,
                    isMainWindow: "withMain" === e.studyApplyTo.placement || "overlay" === e.studyApplyTo.placement
                };
                if (e.studyInputs && e.studyInputs.length && (a.inputs = angular.copy(e.studyInputs)), e.studyCurves && e.studyCurves.length && (a.curves = angular.copy(e.studyCurves), a.curves.forEach(function(e) {
                        "Ribbon" === e.style && (e.colors[0] = o.hexToRgba(e.colors[0], .2))
                    })), e.studyBands && e.studyBands.length && (a.bands = angular.copy(e.studyBands), a.bands[0].fill.color = o.hexToRgba(e.studyCurves[0].colors[0], .2), e.studyLevels && 3 === e.studyLevels.length && (e.overSold.value = a.bands[0].range.to, e.overBought.value = a.bands[0].range.from, e.middleLevel && (e.middleLevel.value = (a.bands[0].range.to + a.bands[0].range.from) / 2))), e.studyLevels && e.studyLevels.length && (a = n.convertStudyLevelsToApi(a, e.studyLevels, e.levelsOptions.overBoughtOpacity, e.levelsOptions.overSoldOpacity)), m.isLoggedIn() && !r) {
                    var c = angular.copy(a);
                    delete c.id, s.saveStudyConfig(l.id, JSON.stringify(c))
                }
                var d = {
                    study: a,
                    name: l.meta.title
                };
                if ("VOL" === e.studyId && (d.isContractVolume = "contract" === e.volume.type), a.inputs && a.inputs.length) {
                    var u = [];
                    a.inputs.forEach(function(e) {
                        u.push(e.value)
                    }), d.name += " (" + u.join(",") + ")"
                }
                void 0 !== i && i >= 0 && (d.index = i), t.close(d)
            }, e.modalDismiss = function() {
                t.dismiss()
            }
        }
        i.$inject = ["$scope", "$modalInstance", "_", "studyIndex", "isClone", "utils", "interactiveChartConverter", "interactiveChartUserPreferencesApi", "studyData", "allowRemove", "interactiveChartSettings", "bcMarketDataChart", "interactiveChartAnnotationsConfig", "authService"], e.exports = i
    },
    tIM6: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            var r = "bc-alerts__alerts-modal-wrapper";
            return {
                openModalSymbolAlertsList: function(t, i) {
                    return e.open({
                        template: a("1Tzj"),
                        controller: "alertsSymbolAlertsListCtrl",
                        windowClass: r,
                        resolve: {
                            events: function() {
                                return t
                            },
                            isSymbolPage: function() {
                                return i || !1
                            }
                        }
                    })
                },
                openModalSymbolAlertsCreate: function(o) {
                    2 === t.getUserData().subscription && (r += " modal-wrapper-upper-pos");
                    var n = e.open({
                        template: a("GJHP"),
                        controller: "alertsSymbolAlertsCreateCtrl",
                        windowClass: r,
                        resolve: {
                            customEvents: function() {
                                return o
                            }
                        }
                    });
                    return n.result.finally(function() {
                        i.setFocusNotes(!1)
                    }), n.result
                },
                openModalVerificationNotification: function(t) {
                    return e.open({
                        controller: "alertsVerifyMobileCtrl",
                        template: a("xvTa"),
                        windowClass: "bc-light-modal",
                        resolve: {
                            smsPublishier: function() {
                                return t
                            }
                        }
                    })
                },
                openModalAddPhoneNumber: function(t) {
                    return e.open({
                        controller: "alertsVerifyMobileCtrl",
                        template: a("jWO2"),
                        windowClass: "bc-light-modal",
                        resolve: {
                            smsPublishier: function() {
                                return t
                            }
                        }
                    })
                },
                openModalRemovePhone: function() {
                    return e.open({
                        controller: "Alerts.modalAlertsRemoveMobileCtrl",
                        template: a("hPOE"),
                        windowClass: "bc-light-modal"
                    })
                },
                openModalActivatePhoneNumber: function(t) {
                    return e.open({
                        controller: "alertsVerifyMobileCtrl",
                        template: a("vOeJ"),
                        windowClass: "bc-light-modal bc-modal-narrow",
                        resolve: {
                            smsPublishier: function() {
                                return t
                            }
                        }
                    })
                },
                openModalSmSTextSetting: function(t) {
                    return e.open({
                        controller: "Alerts.SmsTextSettingsModalCtrl",
                        controllerAs: "$ctrl",
                        template: a("XrBn"),
                        windowClass: "bc-light-modal bc-modal-narrow",
                        resolve: {
                            smsPublisher: function() {
                                return t
                            }
                        }
                    })
                },
                openConfirmModal: function(t) {
                    return e.open({
                        controller: "Alerts.DeactivateModalCtrl",
                        controllerAs: "$ctrl",
                        template: a("gxIQ"),
                        windowClass: "bc-light-modal",
                        resolve: {
                            type: function() {
                                return t
                            }
                        }
                    })
                }
            }
        }
        i.$inject = ["$modal", "authService", "alertManagerService"], e.exports = i
    },
    tK7W: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = t;
            return {
                getApiConfigNews: function(e) {
                    return {
                        method: "/news/story",
                        api: {
                            id: e,
                            fields: "id,title,author,feed,feedName,feedUrl,published,image,content,symbols,related,sourceId,media,thumbnail"
                        }
                    }
                },
                getApiConfigFlipcharts: function(t, r) {
                    var o, n, s;
                    if (o = {
                            method: "/chart",
                            api: {}
                        }, (n = angular.copy(r)) && (s = n, Object.keys(s).forEach(function(e) {
                            (null === s[e] || "" === s[e] || ~i.indexOf(e)) && delete s[e]
                        })), t.symbolType && t.symbolType in a.FLIPCHART_MAPPING) {
                        var l = a.FLIPCHART_MAPPING[t.symbolType];
                        e.merge(o.api, a.FLIPCHART_SETTINGS[l])
                    }
                    return o.api.sym = t.symbol, t.chartSettings && e.merge(o.api, t.chartSettings), t.indicators && (o.api.indicators = t.indicators, o.api.studyheight = t.indicatorHeight || 100), t.height ? o.api.height = t.height : o.api.height = 500, o.api.width = 1060, e.merge(o.api, n), o.api.startDate && o.api.endDate ? o.api.daterange = "specific" : delete o.api.daterange, o
                },
                applyQuickSettings: function(t, a) {
                    var i = angular.copy(t);
                    return e.merge(i.api, a), i.api = e.omit(i.api, function(e) {
                        return null === e
                    }), i
                }
            }
        }
        i.$inject = ["_", "chartTemplateUrlIgnoredFields", "flipchartDefaultSettings"], e.exports = i
    },
    tUkH: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            function i(e) {
                var i, r = {};
                return Object.keys(e).forEach(function(o) {
                    switch (o) {
                        case t.FREQUENCY:
                            (i = function(e, a) {
                                if ("I" === e && !a[t.MINUTES_PERIOD]) return "invalidMinutes";
                                return !1
                            }(e[o], e)) && (r[t.FREQUENCY] = i);
                            break;
                        case t.MINUTES_PERIOD:
                            (i = function(e, i) {
                                if ("I" === i[t.FREQUENCY]) {
                                    if (!/^[1-9]([0-9]?)+$/.test(e) || +e < a.minutesRange.min || +e > a.minutesRange.max) return "invalidMinutes"
                                }
                                return !1
                            }(e[o], e)) && (r[t.MINUTES_PERIOD] = i)
                    }
                }), r
            }
            this.validateBasicForm = function(e) {
                return i(e)
            }, this.validateBasicFormPromise = function(t) {
                var a, r = e.defer(),
                    o = i(t);
                return Object.keys(o).every(function(e) {
                    return !1 === o.key || (a = !0, !1)
                }), a ? r.reject(o) : r.resolve(o), r.promise
            }
        }
        i.$inject = ["$q", "technicalChartFields", "technicalChartConfig"], e.exports = i
    },
    tWan: function(e, t) {
        e.exports = '<div class=technical-chart-vertical-share> <div class=modal-share-group> <p>Share</p> <ul bc-social-chart-share> <li class=facebook title="Share on Facebook"> <a data-bc-facebook-share-chart data-dynamic-title=$ctrl.socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=technical data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.currentSymbol.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-facebook></i> </a> </li> <li class=twitter title="Share on Twitter"> <a bc-twitter-share-chart data-dynamic-title=$ctrl.socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=technical data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=$ctrl.redirectUrl data-t-chart-data=$ctrl.chartData data-symbol=$ctrl.currentSymbol.symbol> <i class=bc-glyph-twitter></i> </a> </li> <li class=linkedin title="Share on LinkedIn"> <a bc-linkedin-share-chart data-dynamic-title=$ctrl.socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=technical data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=redirectUrl data-symbol=$ctrl.currentSymbol.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-linkedin></i> </a> </li> <li class=google-plus title="Share on Google+"> <a bc-gplus-share-chart data-dynamic-title=$ctrl.socialTitle data-description="[[ ::$ctrl.socialDesctiprion ]]" data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=technical data-redirect-url=$ctrl.redirectUrl data-set-chart-page-url=$ctrl.redirectUrl data-symbol=$ctrl.currentSymbol.symbol data-t-chart-data=$ctrl.chartData> <i class=bc-glyph-google-plus></i> </a> </li> <li class=email title="Share via Email"> <a data-bc-mail-share-chart data-convert-type="[[ ::$ctrl.socialImageType ]]" data-chart-type=technical data-t-chart-data=$ctrl.chartData data-current-symbol=$ctrl.currentSymbol data-use-default-title=true data-ref-link=$ctrl.redirectUrl class=emailShare> <i class=bc-glyph-envelope-o></i> </a> </li> <li class=print title=Print> <a bc-print-share data-container-id=technicalChartImage> <i class=bc-glyph-print></i> </a> </li> </ul> </div> </div>'
    },
    tXGS: function(e, t, a) {
        "use strict";

        function i(e, t) {
            e.showModal = function() {
                t.showModal()
            }
        }
        i.$inject = ["$scope", "bcWebinarModalService"], e.exports = i
    },
    tXHX: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            return {
                restrict: "A",
                scope: {},
                link: function(l, c, d) {
                    var u = {
                            name: null,
                            value: null
                        },
                        p = !!d.disableBroadcast;
                    if (u.name = d.name, void 0 === u.name) throw new Error('attribute "name" is required for current directive');

                    function m(e) {
                        var t = e.context.selectedIndex;
                        return void 0 !== t && e.context[t] ? e.context[t].text : ""
                    }
                    u.value = c.val(), u.caption = m(c), "viewName" !== u.name || "tile" !== o.search().viewName || e.isLoggedIn() && e.getUserData().is_premier || (c.val("main"), u.value = "main", o.search("viewName", "main")), l.$on("triggerFilterChange", function(e, t) {
                        void 0 !== t && ~t.indexOf(u.name) && r.$broadcast("filterChange", u)
                    }), p || l.$on("filterChangeFromUrl", function(e, t) {
                        t.name === u.name && (c.val(t.value), u.value = c.val(), u.caption = m(c), n.ignoreUrlChange || r.$broadcast("filterChange", u))
                    }), "viewName" === u.name && d.currentView && (u.value = d.currentView, i(function() {
                        o.search(u.name, u.value)
                    }, 0)), c.on("change", function() {
                        if (u.value = c.val(), "custom_create_view" !== u.value) {
                            if (!("viewName" !== u.name || "tile" !== u.value || e.isLoggedIn() && e.getUserData().is_premier)) return c.val(o.search().viewName || "main"), void s.showPremier("tileView");
                            o.search("orderBy", null), o.search("orderDir", null), "viewName" !== u.name && o.search().page && "all" !== o.search().page && o.search("page", null), o.search(u.name, u.value)
                        } else ! function() {
                            if (e.isLoggedIn()) t.location.href = t.config.routes["my.customViews"];
                            else {
                                var r = l.$on("authModalHasBeenClosed", function() {
                                    e.isLoggedIn() || (c.val("main"), u.value = "main", i(function() {
                                        o.search(u.name, u.value)
                                    }, 0)), r()
                                });
                                a.goToLogin("custom")
                            }
                        }()
                    })
                }
            }
        }
        i.$inject = ["authService", "$window", "authRouteService", "$timeout", "$rootScope", "$location", "screenerCurrentConfigService", "bcModalLoginSrv"], e.exports = i
    },
    tZQo: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = {},
                a = this;
            this.register = function(e, i) {
                return t.hasOwnProperty(e) || (t[e] = []), t[e].push(i), a
            }, this.unregister = function(e, i) {
                if (t.hasOwnProperty(e)) {
                    var r = t[e].indexOf(i); - 1 !== r && t[e].splice(r, 1)
                }
                return a
            }, this.import = function(e) {
                var t = this;
                return Object.keys(e).forEach(function(a) {
                    e[a].forEach(function(e) {
                        t.register(a, e)
                    })
                }), t
            }, this.resetAll = function() {
                return t = {}, a
            }, this.emit = function() {
                var a = Array.prototype.slice.call(arguments),
                    i = a.shift();
                t.hasOwnProperty(i) && t[i].forEach(function(t) {
                    e.hasOwnProperty(t) && e[t].apply(null, a), "function" == typeof t && t.apply(null, a)
                })
            }
        }
        i.$inject = ["screenersModifierFilterService"], e.exports = i
    },
    tac7: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                scope: {
                    bcModalSetFeed: "@"
                },
                controller: ["$rootScope", "$scope", "$element", function(e, t, a) {
                    a.bind("click", function() {
                        e.$broadcast("bc-modal-set-feed", {
                            feedName: t.bcModalSetFeed
                        })
                    })
                }]
            }
        }
        i.$inject = [], e.exports = i
    },
    tovJ: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "A",
                scope: {
                    items: "="
                },
                link: function(e, t) {
                    var a = t[0],
                        i = e.$watchCollection(function() {
                            return e.items
                        }, function() {
                            i(), window.Sortable.create(a, {
                                onUpdate: function(t) {
                                    e.items.splice(t.newIndex, 0, e.items.splice(t.oldIndex, 1)[0])
                                }
                            })
                        })
                }
            }
        }
    },
    tq7l: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            var s = [];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    bindModel: "=ngModel",
                    quid: "@",
                    hide: "@",
                    getSymbols: "&?",
                    dashboardMode: "="
                },
                link: function(t, a, i) {
                    t.hide = i.hide, t.symbol = i.symbol ? i.symbol.toUpperCase() : null, t.positionClasses = i.positionClasses, t.isLoggedIn = e.isLoggedIn(), t.isLoggedIn && (t.items = angular.copy(e.getWatchlists()), s = angular.copy(e.getWatchlists())), angular.element(a[0].querySelectorAll("ul")).bind("click touchstart", function(e) {
                        e.stopPropagation()
                    }), t.$watch(function() {
                        return a.css("display")
                    }, function(e, a) {
                        e !== a && "none" === e && t.$emit("setHoverIndex", null)
                    })
                },
                controller: ["$scope", function(a) {
                    a.dashboardMode && (window.dashboardOnWatchlistClicked = function(e) {
                        t.$broadcast("dashboardWatchlistSelected", {
                            id: +e
                        })
                    }), a.$on("$destroy", function() {
                        setTimeout(function() {
                            a.dashboardMode && (window.dashboardOnWatchlistClicked = void 0)
                        }, 5e3)
                    }), a.submit = function() {
                        c();
                        for (var e = [], t = 0, i = a.items.length; t < i; t++) ~a.items[t].symbols.indexOf(a.symbol) && e.push(a.items[t].id);
                        a.symbol ? l(e, a.symbol) : a.getSymbols().then(function(t) {
                            var a = [];
                            t.data.forEach(function(e) {
                                a.push(e.symbol)
                            }), l(e, a)
                        })
                    };
                    var l = function(l, c) {
                        i.updateWatchlists({
                            symbol: c,
                            ids: l
                        }).then(function(i) {
                            i.error && i.error.message ? o.error("Cannot add to watchlist. " + i.error.message.symbol[0]) : (e.setWatchlists(i.data), function() {
                                for (var e = "", t = "", i = "", l = 0, c = s.length; l < c; l++) {
                                    var d;
                                    ~s[l].symbols.indexOf(a.symbol) && !~a.items[l].symbols.indexOf(a.symbol) && (t.length && (t += ", "), d = r.buildUrl(n.config.routes["my.watchlist"], {
                                        watchlist: a.items[l].id
                                    }), a.dashboardMode ? t += "<u><a onclick=\"dashboardOnWatchlistClicked('" + a.items[l].id + "')\">" + a.items[l].name + "</a></u>" : t += '<u><a target="_self" href="' + d + '">' + a.items[l].name + "</a></u>"), ~a.items[l].symbols.indexOf(a.symbol) && !~s[l].symbols.indexOf(a.symbol) && (e.length && (e += ", "), d = r.buildUrl(n.config.routes["my.watchlist"], {
                                        watchlist: a.items[l].id
                                    }), a.dashboardMode ? e += "<u><a onclick=\"dashboardOnWatchlistClicked('" + a.items[l].id + "')\">" + a.items[l].name + "</a></u>" : e += '<u><a target="_self" href="' + d + '">' + a.items[l].name + "</a></u>")
                                }
                                e.length && (a.symbol ? i += a.symbol + " has been added to: " + e : i += "Screener results have been appended to: " + e), t.length && (i.length && (i += " <br/> "), i += a.symbol + " has been removed from: " + t), i.length && !r.isMobile() && o.success(i)
                            }()), s = angular.copy(e.getWatchlists()), a.items = angular.copy(e.getWatchlists()), t.$broadcast("watchlistsUpdated")
                        })
                    };
                    a.createNew = function() {
                        if (a.newList) {
                            c();
                            var n = {
                                name: "My Watchlist",
                                symbols: [a.symbol]
                            };
                            i.addWatchlist(n).then(function(i) {
                                if (n.error && n.error.message) o.error("Cannot create My Watchlist.");
                                else {
                                    if (e.setWatchlists(i.data), s = angular.copy(e.getWatchlists()), a.items = i.data, !r.isMobile())
                                        if (a.dashboardMode) {
                                            var l = a.symbol + " has been added to: <a onclick=\"dashboardOnWatchlistClicked('" + i.data[0].id + "')\">" + i.data[0].name + "</a>";
                                            o.success(l)
                                        } else o.success(a.symbol + " has been added to: " + n.name);
                                    a.dashboardMode && t.$broadcast("watchlistsUpdated")
                                }
                            }, function(e) {
                                return e
                            })
                        }
                    }, a.isLast = function(e) {
                        return !(1 !== e.length || !~e.indexOf(a.symbol))
                    }, a.limitReached = function(e) {
                        return !!(e.symbols.length >= 1e3 && -1 === e.symbols.indexOf(a.symbol))
                    };
                    var c = function() {
                        r.isIOS() && r.isMobile() && (a.hide ? angular.element(document.querySelector("#bc-watchlist-dropdown-" + a.quid)).hide() : angular.element(document.querySelector('[data-dropdown-toggle="#bc-watchlist-dropdown-' + a.quid + '"]')).triggerHandler("click"))
                    }
                }],
                template: a("qLsb")
            }
        }
        i.$inject = ["authService", "$rootScope", "watchlistApiFactory", "utils", "Notification", "$window"], e.exports = i
    },
    trsO: function(e, t, a) {
        "use strict";

        function i(e, t, i, r) {
            var o = ["$scope", function(a) {
                r.search().timeFrame && (r.search("timeframe", r.search().timeFrame), r.search("timeFrame", null));
                var o = {
                    current: "Latest",
                    daily: "End-of-Day",
                    weekly: "Weekly",
                    monthly: "Monthly"
                };
                "string" == typeof a.routes && (a.routes = JSON.parse(a.routes)), "string" == typeof a.apiConfig && (a.apiConfig = JSON.parse(a.apiConfig)), "string" == typeof a.timeFrames && (a.timeFrames = JSON.parse(a.timeFrames)), a.dataLoading = !0, a.indicatorsData = [], a.timeFrame = i.find(a.timeFrames, "default");
                var n = r.search().timeframe;

                function s() {
                    var t;
                    (t = a.apiConfig).api.timeframe = a.timeFrame.value, e.makeRequest(t).then(function(e) {
                        return function(e) {
                            return a.indicatorsData = e[0].data, e
                        }(e)
                    }).then(function() {
                        a.dataLoading = !1
                    })
                }
                void 0 !== n && (a.timeFrame = i.find(a.timeFrames, {
                    value: n
                }), a.dataLoading = !0), a.timeframeName = o[n] || "Latest", a.timeframeDate = window.moment(new Date).format("ddd, MMM Do, YYYY"), a.apiConfig && a.apiConfig.api && a.apiConfig.api.group && "futures" === a.apiConfig.api.group && (a.isFutures = !0), a.getStrongLink = function(e) {
                    var t;
                    switch (e) {
                        case "buy":
                            t = a.routes.strongBuy;
                            break;
                        case "sell":
                            t = a.routes.strongSell
                    }
                    return t += "?timeframe=" + a.timeFrame.value
                }, a.getIndicatorLink = function(e, i) {
                    var r = {};
                    return e = (e = e.replace(/\s+|\//g, "-")).replace(/-{2,}/g, "-"), r.indicator = e, r.signal = i, t.route(a.routes.indicator, r) + "?timeframe=" + a.timeFrame.value
                }, a.updateTimeFrame = function() {
                    r.search("timeFrame", a.timeFrame.value), a.dataLoading = !0, s(), a.timeframeName = o[a.timeFrame.value]
                }, s()
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    name: "@",
                    routes: "=",
                    apiConfig: "=",
                    timeFrames: "=",
                    indicatorsItems: "="
                },
                template: a("MC2Z"),
                controller: o
            }
        }
        i.$inject = ["apiFactory", "utils", "_", "$location"], e.exports = i
    },
    tv2z: function(e, t, a) {
        "use strict";

        function i(e, t) {
            this.type = t || "deactivate";
            var a = {
                deactivate: {
                    title: "Deactivate All Alerts",
                    description: "Are you sure you want to mark all alerts as inactive?"
                },
                deleteAll: {
                    title: "Delete All Alerts",
                    description: "You are about to delete ALL alerts. Are you sure?"
                },
                deleteInactive: {
                    title: "Delete Inactive Alerts",
                    description: "You are about to delete all inactive (unchecked) alerts. <br/> Are you sure?"
                }
            };
            this.data = a[this.type] || a.deactivate, this.close = function(t) {
                e.close({
                    status: t
                })
            }
        }
        i.$inject = ["$modalInstance", "type"], e.exports = i
    },
    twMf: function(e, t) {
        e.exports = '<div data-bindonce> <div class=views-list ui-tree=treeOptions> <div class="head-custom-views clearfix"> <div class="column-name left"> Name </div> <div class="column-description left"> Description </div> <div class="column-order right"> Order </div> <div class="column-report right show-for-medium-up" data-ng-if="tab !== \'options\'"> Edit </div> <div class="column-report right show-for-medium-up" data-ng-if="tab !== \'options\'"> Email </div> <div class="column-type right"> Type </div> </div> <ol class=tree-custom-views ui-tree-nodes data-ng-model=screeners> <li class=view-item ui-tree-node data-ng-repeat="screener in screeners"> <div class=clearfix ui-tree-handle> <div class=item-left-block data-nodrag> <div class=item-name-container data-ng-hide="pendingRemoveView === screener"> <div class=item-delete-button-block> <i class="bc-glyph-minus-circle red" data-ng-click=removeScreener(screener)></i> </div> <div class=item-name-block> <a target=_self data-bo-href="createLink(screener.type, screener.id)" data-bo-text=screener.name title="Edit screener filters"></a> </div> </div> <div class=item-delete-block data-ng-show="pendingRemoveView === screener"> <span class=block-title>Delete Screener?</span> <a class="bc-button small light-blue" data-ng-click="confirmRemoveScreener(screener, $index)">Yes</a> <a class="bc-button small grey" data-ng-click=cancelRemoveScreener()>No</a> </div> </div> <div class="item-right-block clearfix" data-ng-class="{\'add-reports\': tab !== \'options\'}"> <div class="item-description-block desktop"> <div class="item-edit right" data-ng-if="tab !== \'options\'" data-nodrag data-ng-click=checkPremier()> <a data-ng-click=editScreener(screener) data-ng-show=screener.send_report title=Edit><i class=bc-glyph-cog></i></a> <a class=disabled data-ng-show=!screener.send_report title=Edit><i class=bc-glyph-cog></i></a> </div> <div class="item-report right" data-ng-if="tab !== \'options\'" data-nodrag data-ng-click=checkPremier()> <div class=input-checkbox> <input id="bc-modal-save-screener__send-report-d_[[ screener.id]]" data-ng-model=screener.send_report data-ng-true-value=1 data-ng-false-value=0 data-ng-disabled=!isPremier data-ng-change="updateReport(screener.id, screener)" name=send_report type=checkbox> <label for="bc-modal-save-screener__send-report-d_[[ screener.id]]"> <span class=bc-glyph-check></span> </label> </div> </div> <div class=item-type data-bo-text=showType(screener.type)></div> <div class=item-description data-bo-text=screener.description></div> </div> <div class="item-description-block tablet" data-nodrag> <div class="item-edit right" data-ng-click=checkPremier() data-ng-if="tab !== \'options\'" data-nodrag> <a data-ng-click=editScreener(screener) data-ng-show=screener.send_report title=Edit><i class=bc-glyph-cog></i></a> <a class=disabled data-ng-show=!screener.send_report title=Edit><i class=bc-glyph-cog></i></a> </div> <div class="item-report right" data-ng-click=checkPremier() data-ng-if="tab !== \'options\'" data-nodrag> <div class=input-checkbox> <input id="bc-modal-save-screener__send-report_[[ screener.id]]" data-ng-model=screener.send_report data-ng-change="updateReport(screener.id, screener)" data-ng-true-value=1 data-ng-false-value=0 data-ng-disabled=!isPremier name=send_report type=checkbox> <label for="bc-modal-save-screener__send-report_[[ screener.id]]"> <span class=bc-glyph-check></span> </label> </div> </div> <div class=item-type data-bo-text=showType(screener.type)></div> <div class=item-description data-bo-text=screener.description></div> </div> <div class=item-bars-block> <i class=bc-glyph-bars></i> </div> </div> </div> </li> </ol> </div> </div>'
    },
    twWI: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-window bc-modal-button-error"> <input type=hidden /> <div class="bc-modal-login-content clearfix"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=errorClose()></i> </div> </div> <div class=settings data-ng-show=error> <p class=clear-text data-ng-bind-html=error></p> <div class=button-block> <button class="button cancel" data-ng-click=errorClose()>Close</button> <button class="button contact-us" data-ng-click=contact()>Contact Us</button> </div> </div> <div class=settings data-ng-show=reachedLimit> <p class="clear-text error-text">Download is limited to the first [[ limit ]] symbols.</p> <p class=clear-text>Consider using a screener to refine your results.</p> <p data-ng-if=!is_premier class=text-center> <a target=_self class=underline data-ng-href="[[ premierLink ]]">Sign up for Premier to download up to 5000 results.</a> </p> <div class=button-block> <button class="button download contact-us" data-ng-click=redirectToDownload(true)>Download Anyway</button> </div> </div> </div>'
    },
    txET: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            return {
                getRates: function(a) {
                    var o = a.method || "quotes/get";
                    return e.call(i.buildUrl(r.API_URL + "/" + o, a), t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "_", "utils", "apiConfig"], e.exports = i
    },
    tzpI: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            if (this.facebookLoading = !1, this.gplusLoading = !1, this.linkedinLoading = !1, this.twitterLoading = !1, this.title = r.config.meta.title, this.description = r.config.meta.description, this.redirectUrl = i.path(), r.config.currentSymbol) {
                if (this.symbol = r.config.currentSymbol.symbol, o) {
                    var n = t.getSector(r.config.currentSymbol.symbolType);
                    this.redirectUrl = a.route(r.config.routes["quotes.sectors.interactiveChart"], {
                        sector: n,
                        symbol: r.config.currentSymbol.symbol
                    })
                }
                this.title = r.config.currentSymbol.symbol + " | Custom Interactive Chart for " + r.config.currentSymbol.symbolName;
                var s = r.config.symbols.mapping[r.config.currentSymbol.symbolType],
                    l = "forex" === s ? r.config.currentSymbol.symbol.replace("^", "") : r.config.currentSymbol.symbol;
                "futures" !== s && 9 !== r.config.currentSymbol.symbolType && (l = "$" + l), this.twitterTitle = l + " | Check Out My Customized Interactive Chart #" + s, "futures" === s && r.config.currentSymbol.hasOwnProperty("symbolRoot") && (this.twitterTitle += " #" + r.config.currentSymbol.symbolRoot + "_F")
            }
            this.specificDesc = "Build and share your own charts with sophisticated technical studies and indicators for equities, futures, and more.", this.close = function() {
                e.close()
            }
        }
        i.$inject = ["$modalInstance", "quotesService", "utils", "$location", "$window", "useDefaultPageLink"], e.exports = i
    },
    u8kd: function(e, t, a) {
        "use strict";

        function i() {
            this.saveAsImage = function(e, t) {
                var a = document.createElement("form"),
                    i = document.createElement("input"),
                    r = document.createElement("input"),
                    o = document.createElement("input");
                a.setAttribute("method", "post"), a.setAttribute("action", "/download/interactive-chart/image"), o.setAttribute("type", "hidden"), o.setAttribute("name", "image"), o.setAttribute("value", e), r.setAttribute("type", "hidden"), r.setAttribute("name", "title"), r.setAttribute("value", t), i.setAttribute("value", angular.element('meta[name="csrf-token"]').attr("content")), i.setAttribute("name", "_token"), i.setAttribute("type", "hidden"), a.appendChild(i), a.appendChild(o), a.appendChild(r), document.getElementsByTagName("body")[0].appendChild(a), a.submit(), document.getElementsByTagName("body")[0].removeChild(a)
            }
        }
        i.$inject = [], e.exports = i
    },
    uASL: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g, f, b, v, y, w, C, S, x) {
            return {
                restrict: "E",
                scope: {
                    defaultSetting: "@",
                    currentSymbol: "=",
                    fullScreen: "=",
                    dashboardMode: "=",
                    tabChart: "="
                },
                controller: ["$scope", function(k) {
                    var D, T = [],
                        _ = !0,
                        P = !0,
                        E = !1,
                        A = 0,
                        $ = !1;

                    function M() {
                        k.error = {
                            symbol: null,
                            expression: null
                        }
                    }

                    function L(a) {
                        e.makeRequest(a, T).then(function(t) {
                            if (void 0 === t.data || void 0 === t.data.image || t.data.error) t.data && t.data.error && (k.chartError = t.data.error);
                            else {
                                if (k.chartError = !1, v.isLoggedIn() && k.tabChart) {
                                    var a = e.getApiSettings();
                                    x.updateChart(k.tabChart.id, {
                                        state: JSON.stringify(a)
                                    })
                                }
                                k.chartData = t.data, y.setChartData(k.chartData), k.mapDataEmpty = t.data.map && t.data.map.length ? null : "Mouse-over prices have been disabled due to the high density of this chart.";
                                var i = b.createImageMapMarkup(k.chartData.map, k);
                                angular.element(document.querySelector("#bc-technical-chart-image-map")).empty().append(i), p.scrollTo(0, 0), E = !1, P = !1
                            }
                            k.dataLoading = !1, z(), k.formSubmitted = !1, k.dateRangeError = !1
                        }, function(e) {
                            k.chartSettings.currentSetting === t.chartSettings.SPREAD && (k.error.expression = "Expression contains invalid symbols. Try again"), k.dataLoading = !1, k.formSubmitted = !1, k.dateRangeError = !1, z()
                        })
                    }

                    function O(e) {
                        var a = C.defer();
                        if (k.dataLoading = !0, function(e, a) {
                                if (P) return !0;
                                if (k.currentSymbol.primitiveSymbol.toUpperCase() !== e.toUpperCase() && k.chartSettings.currentSetting !== t.chartSettings.SPREAD && (!a || a !== e)) {
                                    var r = i.createRouteBySymbol(e.toUpperCase(), k.symbolSector, k.fullScreen);
                                    return a && (r += "&expiredSymbol=" + a), p.location.href = r, !1
                                }
                                return !$ || (p.location.reload(), !1)
                            }(e[n.SYMBOL], e.expiredSymbol))
                            if (k.mapDataEmpty = null, k.chartSettings.currentSetting === t.chartSettings.SPREAD) {
                                var r = k.formData.forms.spread[n.EXPRESSION];
                                r = b.findSymbolInExpression(r), k.currentSymbol.primitiveSymbol.toUpperCase() === r.toUpperCase() || e.expiredSymbol && e[n.SYMBOL] === e.expiredSymbol ? a.resolve(e) : w.validSymbol(r).then(function(t) {
                                    if (1 !== t.count || t.errors) S.validateSymbol(r).then(function(t) {
                                        e.expiredSymbol = e.sym, h.search("expiredSymbol", e.sym), e.sym = S.getRootSymbol(), k.symbolSector = s.getSector(t.symbolType);
                                        var a = i.createRouteBySymbol(e.sym, k.symbolSector, k.fullScreen);
                                        p.location.href = a
                                    }, function() {
                                        k.dataLoading = !1, k.error.expression = "Expression contains invalid symbols. Try again", a.reject()
                                    });
                                    else {
                                        var o = i.createRouteBySymbol(r.toUpperCase(), k.symbolSector, k.fullScreen);
                                        p.location.href = o
                                    }
                                })
                            } else a.resolve(e);
                        return a.promise
                    }

                    function I(e, a) {
                        switch (a = !!a, M(), h.search().expiredSymbol && (e.expiredSymbol = h.search().expiredSymbol), k.chartSettings.currentSetting) {
                            case t.chartSettings.BASIC:
                                b.drawBasicChart(e, k.currentSymbol).then(function(t) {
                                    k.symbolSector = s.getSector(t.symbolType), O(e).then(function(e) {
                                        e.expiredSymbol && (e.sym = e.expiredSymbol, m(function() {
                                            $ = !1
                                        })), L(e)
                                    })
                                }, function() {
                                    S.validateSymbol(e.sym).then(function(t) {
                                        e.expiredSymbol = e.sym, h.search("expiredSymbol", e.sym), e.sym = S.getRootSymbol(), k.symbolSector = s.getSector(t.symbolType), m(O(e).then(function(e) {
                                            L(e)
                                        }))
                                    }, function() {
                                        k.error.symbol = "Invalid symbol. Try again"
                                    })
                                });
                                break;
                            case t.chartSettings.SPREAD:
                                b.drawSpreadChart(e, a, k.symbolSector, k.fullScreen).then(function() {
                                    return O(e).then(function(e) {
                                        e.expiredSymbol && (e.sym = e.expiredSymbol, m(function() {
                                            $ = !1
                                        })), L(e)
                                    }), !0
                                });
                                break;
                            case t.chartSettings.COMPARISON:
                                b.drawComparisonChart(k.formData.forms.comparison, e, k.currentSymbol).then(function() {
                                    O(e).then(function(e) {
                                        e.expiredSymbol && (e.sym = e.expiredSymbol, m(function() {
                                            $ = !1
                                        })), L(e)
                                    })
                                }, function(e) {
                                    k.error.symbol = e.invalidSymbol ? "Invalid symbol. Try again" : null, k.error.symbols = e.invalidSymbols ? "Invalid symbol. Try again" : null, e.invalidSymbols && e.invalidSymbols.forEach(function(t) {
                                        k.error["overlay" + e.symbols.indexOf(t)] = !0
                                    })
                                })
                        }
                    }

                    function N() {
                        k.changedState = k.changedStates.QUICK_SETTINGS, ["id", "name", "description"].forEach(function(e) {
                            h.search(e, null), delete k.formData.forms[t.chartSettings.BASIC][e]
                        }), z(), d.$broadcast("templateChanged")
                    }

                    function F(e) {
                        e.expiredSymbol && (e[n.SYMBOL] = e.expiredSymbol), e[n.SYMBOL] = e[n.SYMBOL] || k.currentSymbol.symbol, l.mapSettingsFromUrl(k.formData.forms, e), l.mapData(k.formData.forms.basic), l.convertChartHeightToModel(k.formData.forms.basic), l.mapFrequencyFromUrl(k.formData.forms.basic, e[n.FREQUENCY], "futures" !== k.symbolSector), l.mapVolumeFromUrl(k.formData.forms.basic, e[n.VOLUME], "futures" !== k.symbolSector), e.id && m(function() {
                            d.$broadcast("setAppliedTemplate", e), k.formData.forms[t.chartSettings.BASIC].id = e.id
                        }, 0), void 0 !== e.isSpread && "1" === e.isSpread && (k.chartSettings.currentSetting = t.chartSettings.SPREAD), void 0 !== e.isComparison && "1" === e.isComparison && (k.chartSettings.currentSetting = t.chartSettings.COMPARISON, k.toolTipLeft = "60")
                    }
                    if (k.ignoreFields = T, k.changedState = "", k.chartError = !1, k.changedStates = {
                            APPLY_TEMPLATE: "APPLY_TEMPLATE",
                            DRAW: "DRAW",
                            CLEAR_SETTINGS: "CLEAR_SETTINGS",
                            QUICK_SETTINGS: "QUICK_SETTINGS",
                            RESET_EXPIRED_SYMBOL: "RESET_EXPIRED_SYMBOL"
                        }, k.fields = n, k.technicalChartConfig = t, k.symbolSector = s.getSector(k.currentSymbol.symbolType), k.symbolTypeName = s.getTypeName(k.currentSymbol.symbolType), k.dataLoading = !0, k.mapDataEmpty = null, k.formSubmitted = !1, k.dateRangeError = !1, k.toolTipLeft = "40", D = u.isMobileOnly() ? o.mobile : o.desktop, T = T.concat(f, n.INDICATORS_OBJECT), angular.extend(k, a("R6Lc")(D, k.symbolSector)), k.chartSettingTypes = a("Ffq+")(t), k.chartSettings = {
                            currentSetting: k.defaultSetting || t.chartSettings.BASIC
                        }, k.chartData = {}, k.initializeFormData = K, k.resetState = z, k.drawTechnicalChart = I, M(), K(), k.tabChart) H(JSON.parse(k.tabChart.state));
                    else {
                        var R = i.getSettingsFromUrl();
                        if (R && Object.keys(R).length > 1) {
                            if (R.isSpread) {
                                var B = R[n.SYMBOL];
                                B = b.findSymbolInExpression(B);
                                var U = new RegExp(k.currentSymbol.primitiveSymbol.replace(/(\^|\*|\$)/g, "\\$1").toUpperCase(), "i");
                                ~B.search(U) || (h.search(n.SYMBOL, k.currentSymbol.symbol), R[n.SYMBOL] = k.currentSymbol.primitiveSymbol)
                            } else h.search(n.SYMBOL, k.currentSymbol.symbol), R[n.SYMBOL] = k.currentSymbol.primitiveSymbol || k.currentSymbol.symbol;
                            if (R.id && v.isLoggedIn()) {
                                var V = r.find(v.getUserData().custom_chart_templates, "id", +R.id);
                                V && (R = angular.merge({}, R, V))
                            }
                            F(R), I(R, !0)
                        } else {
                            k.formData.forms.basic = r.merge(k.formData.forms.basic, c(k.symbolTypeName, n)), u.isMobileOnly() && !h.search()[n.STUDYHEIGHT] && (k.formData.forms.basic[n.STUDYHEIGHT] = "150"), u.isMobileOnly() && !h.search()[n.VOLUME] && (k.formData.forms.basic[n.VOLUME] = "0");
                            var q = angular.copy(k.formData.forms.basic);
                            if (l.prepareChartHeightBeforeRequest(q), v.isLoggedIn()) {
                                var j = v.getUserData().custom_chart_templates;
                                if (v.getUserPreferences().charts_template) r.find(j, "id", +v.getUserPreferences().charts_template) || I(q)
                            } else I(q)
                        }
                    }

                    function H(e) {
                        var a = {};
                        switch ("0" !== e[n.VOLUME] && (r.find(k.symbolVolume, "value", e[n.VOLUME]) || (a[n.VOLUME] = "total")), e[n.STUDYHEIGHT] && "number" == typeof e[n.STUDYHEIGHT] && (e[n.STUDYHEIGHT] = e[n.STUDYHEIGHT].toString()), null === e[n.STUDYHEIGHT] && delete e[n.STUDYHEIGHT], e[n.HEIGHT] && "number" == typeof e[n.HEIGHT] && (e[n.HEIGHT] = e[n.HEIGHT].toString()), e[n.HEIGHT]) {
                            case "325":
                                e[n.HEIGHT] = "250";
                                break;
                            case "350":
                                e[n.HEIGHT] = "375";
                                break;
                            case "450":
                                e[n.HEIGHT] = "500"
                        }
                        l.mapFrequencyFromUrl(e, e[n.FREQUENCY], "futures" !== k.symbolSector), null === e[n.HEIGHT] && delete e[n.HEIGHT], "" === e[n.INDICATORS] && (e[n.INDICATORS] = null), a[n.INDICATORS_OBJECT] = null, r.merge(k.formData.forms[t.chartSettings.BASIC], e, a), l.mapData(k.formData.forms[t.chartSettings.BASIC]), m(function() {
                            k.drawChart(), z()
                        }, 0)
                    }
                    k.$watch(function() {
                        return k.chartSettings.currentSetting
                    }, function(e) {
                        _ ? _ = !1 : (M(), N(), h.search().expiredSymbol && h.search("expiredSymbol", null), e === t.chartSettings.BASIC && (k.toolTipLeft = "40", void 0 !== k.formData.forms && k.formData.forms.basic[n.SYMBOL] !== k.currentSymbol.symbol && (k.formData.forms.basic[n.SYMBOL] = k.currentSymbol.symbol)), e === t.chartSettings.SPREAD && (k.toolTipLeft = "40", k.formData.forms.spread[n.EXPRESSION] = ""), e === t.chartSettings.COMPARISON && (k.formData.forms.basic[n.SYMBOL] = k.currentSymbol.symbol, k.toolTipLeft = "60"))
                    }), k.$watch(function() {
                        return k.formData.forms[t.chartSettings.BASIC]
                    }, function(e, t) {
                        e.id && !t.id || e.id && t.id && e.id !== t.id || (e[n.SYMBOL] === t[n.SYMBOL] ? t.id && !P && N() : h.search().expiredSymbol && (k.changedState = k.changedStates.RESET_EXPIRED_SYMBOL, h.search("expiredSymbol", null), $ = !0))
                    }, !0), i.subscribeOnUrlChanges(function() {
                        if (!1 === P) {
                            if (A++, r.isEmpty(h.search()) && A > 0) return;
                            if (!k.changedStates.hasOwnProperty(k.changedState)) {
                                if (E) return;
                                E = !0;
                                var e = i.getSettingsFromUrl();
                                e ? (F(e), I(e, !0)) : k.drawChart()
                            }
                        }
                    }), k.$on("applyTechnicalChartQuickSettings", function() {
                        k.changedState = k.changedStates.QUICK_SETTINGS
                    }), k.$on("templateSaved", function() {
                        k.drawChartButtonClick()
                    }), k.$on("applyTemplate", function(e, t) {
                        k.changedState = k.changedStates.APPLY_TEMPLATE, H(t)
                    }), k.drawChart = function() {
                        var e;
                        if (k.formSubmitted = !0, ! function(e, t) {
                                var a = {
                                        success: !0,
                                        errors: {}
                                    },
                                    i = t.basic.startDate,
                                    r = t.basic.endDate;
                                i ? "Invalid Date" === new Date(i).toString() && (e.dateFrom.$setValidity("date", !1), a.errors.dateFrom = "invalidDate", a.success = !1) : e.dateFrom.$setValidity("date", !0);
                                e.dateFrom.$invalid && (a.errors.dateFrom = "invalidDate", a.success = !1);
                                r ? "Invalid Date" === new Date(r).toString() && (e.dateTo.$setValidity("date", !1), a.errors.dateTo = "invalidDate", a.success = !1) : e.dateTo.$setValidity("date", !0);
                                e.dateTo.$invalid && (a.errors.dateTo = "invalidDate", a.success = !1);
                                return a
                            }(k.technicalChartForm, k.formData.forms).success) return (k.technicalChartForm.dateFrom.$invalid || k.technicalChartForm.dateTo.$invalid) && (k.dateRangeError = !0), !1;
                        e = g.getChartSettings(k.formData.forms, k.chartSettings.currentSetting), l.prepareChartHeightBeforeRequest(e), k.error.spreadForm || (i.applySettings(e, T), I(e), d.$broadcast("drawChartHasBeenCalled"))
                    }, k.drawChartButtonClick = function() {
                        k.changedState = k.changedStates.DRAW, d.$broadcast("drawChartHasBeenCalledViaButton"), k.toggleChartForm(), k.drawChart()
                    }, k.showTooltip = !1, k.tooltipData = null, k.tooltipBaseData = null;
                    var Y = ["open", "high", "low", "close", "Volume", "overlay1", "overlay2", "overlay3"];
                    k.shouldMapBeShown = function() {
                        return "1" === k.formData.forms.basic[n.PRICEBOX]
                    }, k.hideTooltip = function() {
                        k.showTooltip = !1
                    };
                    var G = !1,
                        W = !1;

                    function z() {
                        setTimeout(function() {
                            k.changedState = ""
                        }, 0)
                    }

                    function K() {
                        k.formData = {
                            name: "form",
                            forms: {
                                basic: {},
                                spread: {},
                                comparison: {}
                            }
                        }, k.formData.forms.basic = g.basic, k.formData.forms.spread = g.spread, k.formData.forms.comparison = angular.copy(g.comparison), k.formData.forms.basic[n.SYMBOL] = h.search().expiredSymbol || k.currentSymbol.primitiveSymbol
                    }
                    k.hideTooltipData = function() {
                        G = !1, W || (m(function() {
                            G || (k.showTooltip = !1), W = !1
                        }, 300), W = !0)
                    }, k.showAreaInfo = function(e) {
                        G = !0, k.tooltipData = {}, k.tooltipBaseData = {}, k.tooltipBaseData.open = e.open, k.tooltipBaseData.high = e.high, k.tooltipBaseData.low = e.low, k.tooltipBaseData.close = e.close, k.tooltipBaseData.overlay1 = e.overlay1, k.tooltipBaseData.overlay2 = e.overlay2, k.tooltipBaseData.overlay3 = e.overlay3, k.tooltipBaseData.Volume = e.Volume, Object.keys(e).forEach(function(t) {
                            -1 === Y.indexOf(t) && (k.tooltipData[t] = e[t])
                        }), k.showTooltip = !0
                    }, k.toggleChartForm = function() {
                        angular.element(document.querySelector(".chart-form-wrapper")).toggleClass("visible")
                    }
                }],
                template: a("g7Ky")
            }
        }
        i.$inject = ["chartApiService", "technicalChartConfig", "technicalChartUrlService", "_", "technicalChartLabels", "technicalChartFields", "quotesService", "technicalChartMappingService", "technicalChartDefaultSettings", "$rootScope", "utils", "$window", "$timeout", "$location", "technicalChartSettingsService", "chartTemplateUrlIgnoredFields", "technicalChartDrawService", "authService", "technicalChartImageStorage", "technicalChartValidationService", "$q", "bcExpiredFuturesValidation", "myChartsApiService"], e.exports = i
    },
    uDw0: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            function r(t) {
                if (this.options.exclude.push("volume"), t === e.MAIN) {
                    var a = this.apiConfig.api.fields,
                        i = a.slice(a.indexOf("percentChange") + "percentChange".length);
                    this.apiConfig.api.fields = a.slice(0, a.indexOf("percentChange") + "percentChange".length) + ",openPrice" + i
                }
            }

            function o(t, a) {
                t === e.MAIN && "alltime" !== a.timeFrame && (~this.apiConfig.api.lists.indexOf(".highs.") ? this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,volume,highHits1m,highPercent1m,lowPercent1m,tradeTime" : this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,volume,lowHits1m,highPercent1m,lowPercent1m,tradeTime")
            }

            function n(a, i) {
                if ("etf" === i.screener && s.call(this, i.screener, i), i.viewName === e.MAIN && "alltime" !== i.timeFrame) {
                    o.call(this, i.viewName, i);
                    var r = !1;
                    switch (i.timeFrame) {
                        case "2y":
                            this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,volume,highHits2y,monthlyHighPercent2y,monthlyLowPercent2y,monthlyDate1mAgo", r = !0;
                            break;
                        case "3y":
                            this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,volume,highHits3y,highPercent3y,lowPercent3y,weeklyDate1wAgo", r = !0;
                            break;
                        case "5y":
                            this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,volume,highHits5y,highPercent5y,lowPercent5y,weeklyDate1wAgo", r = !0;
                            break;
                        case "10y":
                            this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,volume,highHits10y,monthlyHighPercent10y,monthlyLowPercent10y,monthlyDate1mAgo", r = !0;
                            break;
                        case "20y":
                            this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,volume,highHits20y,monthlyHighPercent20y,monthlyLowPercent20y,monthlyDate1mAgo", r = !0
                    }
                    if (r) {
                        ~this.apiConfig.api.lists.indexOf(".lows.") && (this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/highHits[\d\w]*/, "lowHits" + i.timeFrame));
                        var n = this.apiConfig.api.fields.match(/monthlyHighPercent[\d\w]*|monthlyLowPercent[\d\w]*|highPercent[\d\w]*|lowPercent[\d\w]*/g);
                        return n && n.forEach(function(e) {
                            ~this.options.colorize.indexOf(e) || this.options.colorize.push(e)
                        }, this), !0
                    }
                    "ytd" === i.timeFrame && (i.timeFrame = t.ucfirst(i.timeFrame)), ~this.apiConfig.api.lists.indexOf(".highs.") ? this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/highHits[\d\w]*/, "highHits" + i.timeFrame) : this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/lowHits[\d\w]*/, "lowHits" + i.timeFrame);
                    var l = "highPercent" + i.timeFrame,
                        c = "lowPercent" + i.timeFrame;
                    return this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/highPercent[\d\w]*/, l), this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/lowPercent[\d\w]*/, c), ~this.options.colorize.indexOf(l) || this.options.colorize.push(l), void(~this.options.colorize.indexOf(c) || this.options.colorize.push(c))
                }
                "alltime" === i.timeFrame && i.viewName === e.MAIN ? this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,highPrice,lowPrice,volume,tradeTime" : o.call(this, i.viewName, i)
            }

            function s(e, t) {
                if ("etf" === e) {
                    this.apiConfig.api.lists = this.apiConfig.api.lists.replace(/\.etf/, ""), this.apiConfig.api.lists = this.apiConfig.api.lists.replace(/stocks/, "etfs");
                    var a;
                    ~["1y", "3y", "5y"].indexOf(t.timeFrame) ? ((a = this.apiConfig.api.lists.split("."))[2] = "weekly", this.apiConfig.api.lists = a.join(".")) : ~["2y", "10y", "20y"].indexOf(t.timeFrame) ? ((a = this.apiConfig.api.lists.split("."))[2] = "monthly", this.apiConfig.api.lists = a.join(".")) : ((a = this.apiConfig.api.lists.split("."))[2] = "current", this.apiConfig.api.lists = a.join("."))
                }
            }

            function l(t, a) {
                var i, r, o;
                switch (o = a.timeFrame, a.timeFrame) {
                    case "today":
                        i = "symbol,symbolName,lastPrice,priceChange,percentChange,openPrice,highPrice,lowPrice,tradeTime", r = "percentChange", ["lastPrice", "priceChange", "highPrice", "lowPrice", "tradeTime"], this.options.colorize.push("priceChange", "percentChange"), o = "";
                        break;
                    case "5d":
                        i = "symbol,symbolName,lastPrice,priceChange,priceChange5d,percentChange5d,highPrice5d,lowPrice5d,tradeTime", r = "percentChange5d", ["lastPrice", "priceChange", "priceChange5d", "highPrice5d", "lowPrice5d", "tradeTime"], this.options.colorize.push("priceChange5d", "percentChange5d");
                        break;
                    case "1m":
                        i = "symbol,symbolName,lastPrice,priceChange,priceChange1m,percentChange1m,highPrice1m,lowPrice1m,tradeTime", r = "percentChange1m", ["lastPrice", "priceChange", "priceChange1m", "highPrice1m", "lowPrice1m", "tradeTime"], this.options.colorize.push("priceChange1m", "percentChange1m");
                        break;
                    case "3m":
                        i = "symbol,symbolName,lastPrice,priceChange,priceChange3m,percentChange3m,highPrice3m,lowPrice3m,tradeTime", ["lastPrice", "priceChange", "priceChange3m", "highPrice3m", "lowPrice3m", "tradeTime"], r = "percentChange3m", this.options.colorize.push("priceChange3m", "percentChange3m");
                        break;
                    case "6m":
                        i = "symbol,symbolName,lastPrice,priceChange,priceChange6m,percentChange6m,highPrice6m,lowPrice6m,tradeTime", r = "percentChange6m", ["lastPrice", "priceChange", "priceChange6m", "highPrice6m", "lowPrice6m", "tradeTime"], this.options.colorize.push("priceChange6m", "percentChange6m");
                        break;
                    case "12m":
                        i = "symbol,symbolName,lastPrice,priceChange,priceChange1y,percentChange1y,highPrice1y,lowPrice1y,tradeTime", ["lastPrice", "priceChange", "priceChange1y", "highPrice1y", "lowPrice1y", "tradeTime"], r = "percentChange1y", this.options.colorize.push("priceChange1y", "percentChange1y"), o = "1y";
                        break;
                    case "ytd":
                        i = "symbol,symbolName,lastPrice,priceChange,priceChangeYtd,percentChangeYtd,highPriceYtd,lowPriceYtd,tradeTime", r = "percentChangeYtd", ["lastPrice", "priceChange", "priceChangeYtd", "highPriceYtd", "lowPriceYtd", "tradeTime"], this.options.colorize.push("priceChangeYtd", "percentChangeYtd"), o = "Ytd"
                }
                a.viewName === e.MAIN && (this.apiConfig.api.fields = i, this.apiConfig.api.orderBy = r), a.viewName === e.CHART && (this.field = "percentChange" + o, this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange" + o + "," + this.field + ",highPrice,lowPrice,tradeTime", this.tooltipFields = ["lastPrice", "priceChange" + o, "highPrice", "lowPrice", "tradeTime"], this.apiConfig.api.orderBy = this.field)
            }

            function c(e) {
                var t = i.config.fields,
                    a = ["General", "Technical Analysis", "Overall Opinion", "Price/Percent Change", "Historical Highs and Lows"],
                    r = ["symbol", "symbolName", "symbolShortName", "contractName", "exchange", "contractExpirationDate", "symbolType", "symbolCode", "~", "industry"];
                if (this.apiConfig.api.fields) {
                    var o = this.apiConfig.api.fields.split(",").map(function(e) {
                        return ~r.indexOf(e) ? e : ~a.indexOf(t[e]) ? "daily" + e[0].toUpperCase() + e.substring(1) : e
                    });
                    this.apiConfig.api.fields = o.join(",")
                }
            }
            return {
                volatility: r,
                commodity: r,
                "us-sectors": r,
                rangeChange: function(t) {
                    t === e.MAIN && (this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,range,highPrice,lowPrice,volume,tradeTime")
                },
                percentChange: function(t, a) {
                    var i, r;
                    if (void 0 === a.viewName || a.viewName === e.MAIN) {
                        r = "percentChange";
                        var o = ["symbol", "symbolName"];
                        if ("today" === (i = a.timeFrame)) this.apiConfig.api.fields = ["symbol", "symbolName", "lastPrice", "priceChange", "percentChange", "highPrice", "lowPrice", "volume", "averageVolume", "tradeTime"].join();
                        else {
                            var n = i;
                            switch (i) {
                                case "ytd":
                                    r += "Ytd", n = "Ytd";
                                    break;
                                case "12m":
                                    r += "1y", n = "1y";
                                    break;
                                default:
                                    r += i
                            }
                            o.push(r), o.push("lastPrice", "priceChange", "percentChange", "priceChange" + n, "highPrice" + n, "lowPrice" + n), ~["3y", "5y", "10y"].indexOf(i) ? o.push("averageVolume") : o.push("averageVolume" + n), o.push("tradeTime"), this.apiConfig.api.fields = o.join()
                        }
                        this.pathOrderParams || (this.apiConfig.api.orderBy = r), this.options.sort.columns.indexOf(r) < 0 && this.options.sort.columns.push(r), this.options.sort.column = r, this.options.sort.dir = this.apiConfig.api.orderDir, this.options.colorize && this.options.colorize.indexOf(r) < 0 && this.options.colorize.push(r)
                    } else {
                        if (r = "percentChange", "today" !== (i = a.timeFrame)) switch (i) {
                            case "ytd":
                                r += "Ytd";
                                break;
                            case "12m":
                                r += "1y";
                                break;
                            default:
                                r += i
                        }
                        this.pathOrderParams || (this.apiConfig.api.orderBy = r)
                    }
                },
                priceVolume: function(t) {
                    if (t === e.MAIN) {
                        var a = this.apiConfig.api.fields,
                            i = a.indexOf("volume") + "volume".length;
                        this.apiConfig.api.fields = a.slice(0, i) + ",priceVolume" + a.slice(i), ["highPrice", "lowPrice"].forEach(function(e) {
                            this.options.exclude.push(e)
                        }, this)
                    }
                },
                percentVolume: function(t) {
                    if (t === e.MAIN) {
                        var a = this.apiConfig.api.fields,
                            i = a.indexOf("volume") + "volume".length;
                        this.apiConfig.api.fields = a.slice(0, i) + ",percentVolume" + a.slice(i), this.options.colorize.push("percentVolume"), ["percentChange"].forEach(function(e) {
                            this.options.exclude.push(e)
                        }, this)
                    }
                },
                tradingLiquidity: function(t) {
                    t === e.MAIN && (this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,averageVolume100d,sharesOutstanding,tradingRatio,tradeTime", this.options.colorize.push("tradingRatio"))
                },
                major_etfs: function(t) {
                    t === e.MAIN && (this.apiConfig.api.fields = "symbol,symbolName,lastPrice,percentChange,percentChange5d,percentChange1m,trendSpotterSignal,opinion,tradeTime", this.options.colorize.push("percentChange5d"), this.options.colorize.push("percentChange1m"), this.options.colorize.push("percentChange"), this.options.opinion = ["opinion", "trendSpotterSignal"])
                },
                gapUpDown: function(t) {
                    t === e.MAIN && (this.apiConfig.api.fields = this.apiConfig.api.fields.replace("percentChange", "percentChange," + this.options.api.orderBy + "," + this.options.api.orderBy + "Percent"))
                },
                highsLowsViewFilter: o,
                highsLowsTimeFilter: n,
                etfsHighsLowsTimeFilter: function(e, t) {
                    var a;
                    switch (n.call(this, e, t), t.timeFrame) {
                        case "1y":
                        case "3y":
                        case "5y":
                            a = "weekly";
                            break;
                        case "2y":
                        case "10y":
                        case "20y":
                            a = "monthly";
                            break;
                        default:
                            a = "current"
                    }
                    this.apiConfig.api.lists = this.apiConfig.api.lists.replace(/\.current/, "." + a)
                },
                highsLowsScreenerFilter: s,
                futurePriceSurpriseView: function(t, a) {
                    this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/symbolName/, "contractName"), a.viewName !== e.CHART ? (this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/volume,/, ""), this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/percentChange,/, ""), this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/contractName(.*),lastPrice/, "contractName,currentStandardDeviation,lastPrice")) : (this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/contractName(.*),lastPrice/, "contractName,currentStandardDeviation,lastPrice"), this.field = "currentStandardDeviation"), this.pathOrderParams || (this.apiConfig.api.orderBy = "currentStandardDeviation")
                },
                upgradeDowngradesTime: function(t, a) {
                    if (a.viewName === e.MAIN) switch (a.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,opinion,opinionPrevious,opinionChange";
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,symbolName,dailyLastPrice,dailyPriceChange,dailyPercentChange,dailyOpinion,dailyOpinionPrevious,dailyOpinionChange"
                    }
                },
                signalsTopBottomTime: function(t, a) {
                    if (this.pathOrderParams || delete this.apiConfig.api.orderBy, a.viewName === e.MAIN) switch (a.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,opinion,opinionPrevious,opinionLastWeek,opinionLastMonth";
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,symbolName,dailyLastPrice,dailyPriceChange,dailyPercentChange,dailyOpinion,dailyOpinionPrevious,dailyOpinionLastWeek,dailyOpinionLastMonth"
                    }
                },
                signalsDirectionStrength: function(t, a) {
                    if (a.viewName === e.MAIN) switch (this.pathOrderParams || (this.apiConfig.api.orderBy = "symbol"), a.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,percentChange,opinion,opinionPrevious,opinionLastWeek,opinionLastMonth";
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,symbolName,dailyLastPrice,dailyPriceChange,dailyPercentChange,dailyOpinion,dailyOpinionPrevious,dailyOpinionLastWeek,dailyOpinionLastMonth"
                    }
                },
                etfsMutualPriceSurprises: function(t, a) {
                    if (a.viewName === e.MAIN) switch (a.timeFrame) {
                        case "daily":
                            this.apiConfig.api.fields = "symbol,symbolName,dailyStandardDeviation,dailyLastPrice,dailyPriceChange,dailyPercentChange,dailyDate1dAgo", this.pathOrderParams || (this.apiConfig.api.orderBy = "dailyStandardDeviation");
                            break;
                        case "weekly":
                            this.apiConfig.api.fields = "symbol,symbolName,weeklyStandardDeviation,weeklyLastPrice,weeklyPriceChange,weeklyPercentChange,weeklyDate1wAgo", this.pathOrderParams || (this.apiConfig.api.orderBy = "weeklyStandardDeviation");
                            break;
                        case "monthly":
                            this.apiConfig.api.fields = "symbol,symbolName,monthlyStandardDeviation,monthlyLastPrice,monthlyPriceChange,monthlyPercentChange,monthlyDate1mAgo", this.pathOrderParams || (this.apiConfig.api.orderBy = "monthlyStandardDeviation")
                    }
                },
                etfsMutualHighsLows: function(e, t) {
                    var a, i, r, o;
                    switch (r = "Percent", n.call(this, e, t), "alltime" === t.timeFrame && (this.apiConfig.api.lists = this.receivedApiConfig.api.lists.replace(/{%timeFrame%}/, "all")), "1y" === t.timeFrame && (this.apiConfig.api.lists = this.receivedApiConfig.api.lists.replace(/{%timeFrame%}/, "12m")), this.apiConfig.api.fields = this.apiConfig.api.fields.replace(",volume,", ","), ~this.apiConfig.api.lists.indexOf(".highs.") ? (i = "low", o = "desc") : (i = "high", o = "asc"), t.timeFrame) {
                        case "ytd":
                            a = "Ytd";
                            break;
                        case "alltime":
                            a = "", r = "Price";
                            break;
                        default:
                            a = t.timeFrame
                    }
                    this.pathOrderParams || (this.apiConfig.api.orderBy = i + r + a, this.apiConfig.api.orderDir = o)
                },
                commodityGroupings: function(t, i) {
                    if (this.apiConfig.api.lists = this.receivedApiConfig.api.lists, this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/symbolName/, "contractName"), this.pathOrderParams || delete this.apiConfig.api.orderBy, i.viewName === e.MAIN) switch (i.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = "symbol,contractName,lastPrice,priceChange,openPrice,highPrice,lowPrice,volume,tradeTime";
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,contractName,dailyLastPrice,dailyPriceChange,dailyOpen1dAgo,dailyHigh1dAgo,dailyLow1dAgo,dailyVolume,dailyDate1dAgo"
                    }
                    if (i.viewName === e.TECHNICAL) switch (i.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = a.technical.api.fields;
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,contractName,dailyLastPrice,dailyOpinion,dailyRelativeStrength20d,dailyHistoricVolatility20d,dailyAverageVolume20d,dailyLowPrice1y,dailyHighPrice1y"
                    }
                    if (i.viewName === e.PERFORMANCE) switch (i.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = a.performance.api.fields;
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,contractName,dailyLastPrice,dailyWeightedAlpha,dailyPercentChangeYtd,dailyPercentChange1m,dailyPercentChange3m,dailyPercentChange1y"
                    }
                },
                commodityGroupingsAll: function(t, a) {
                    if (this.apiConfig.api.lists = this.receivedApiConfig.api.lists, this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/symbolName/, "contractName"), this.apiConfig.api.groupBy = "category", delete this.apiConfig.api.orderBy, a.viewName === e.MAIN) switch (a.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = "symbol,contractName,lastPrice,priceChange,openPrice,highPrice,lowPrice,volume,tradeTime";
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,contractName,dailyLastPrice,dailyPriceChange,dailyOpen1dAgo,dailyHigh1dAgo,dailyLow1dAgo,dailyVolume,dailyDate1dAgo"
                    } else if (a.viewName === e.TECHNICAL) switch (a.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = "symbol,contractName,lastPrice,opinion,relativeStrength20d,historicVolatility20d,averageVolume20d,lowPrice1y,highPrice1y";
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,contractName,dailyLastPrice,dailyOpinion,dailyRelativeStrength20d,dailyHistoricVolatility20d,dailyAverageVolume20d,dailyLowPrice1y,dailyHighPrice1y"
                    } else if (a.viewName === e.PERFORMANCE) switch (a.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = "symbol,contractName,lastPrice,weightedAlpha,percentChangeYtd,percentChange1m,percentChange3m,percentChange1y";
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,contractName,dailyLastPrice,dailyWeightedAlpha,dailyPercentChangeYtd,dailyPercentChange1m,dailyPercentChange3m,dailyPercentChange1y"
                    }
                    this.apiConfig.api.fields = this.apiConfig.api.fields + ",category,hasOptions"
                },
                etfsMutualPriceChange: function(t, a) {
                    a.viewName === e.MAIN && (this.apiConfig.api.fields = "symbol,symbolName,dailyLastPrice,dailyPriceChange,dailyPercentChange,percentChangeYtd,tradeTime")
                },
                etfsMutualPercentChange: function(t, a) {
                    var i = "symbol,symbolName,percentChangeYtd,lastPrice,priceChange,percentChange,tradeTime",
                        r = "percentChange";
                    switch (a.timeFrame) {
                        case "1d":
                            i = "symbol,symbolName,percentChange,priceChange,highPrice,lowPrice,tradeTime", r = "percentChange";
                            break;
                        case "5d":
                            i = "symbol,symbolName,percentChange5d,lastPrice,priceChange,percentChange,priceChange5d,highPrice5d,lowPrice5d,tradeTime", r = "percentChange5d";
                            break;
                        case "1m":
                            i = "symbol,symbolName,percentChange1m,lastPrice,priceChange,percentChange,priceChange1m,highPrice1m,lowPrice1m,tradeTime", r = "percentChange1m";
                            break;
                        case "3m":
                            i = "symbol,symbolName,percentChange3m,lastPrice,priceChange,percentChange,priceChange3m,highPrice3m,lowPrice3m,tradeTime", r = "percentChange3m";
                            break;
                        case "6m":
                            i = "symbol,symbolName,percentChange6m,lastPrice,priceChange,percentChange,priceChange6m,highPrice6m,lowPrice6m,tradeTime", r = "percentChange6m";
                            break;
                        case "ytd":
                            i = "symbol,symbolName,percentChangeYtd,lastPrice,priceChange,percentChange,priceChangeYtd,highPriceYtd,lowPriceYtd,tradeTime", r = "percentChangeYtd";
                            break;
                        case "12m":
                            i = "symbol,symbolName,percentChange1y,lastPrice,priceChange,percentChange,priceChange1y,highPrice1y,lowPrice1y,tradeTime", r = "percentChange1y";
                            break;
                        case "3y":
                            i = "symbol,symbolName,percentChange3y,weeklyLastPrice,weeklyPriceChange,weeklyPercentChange,priceChange3y,highPrice3y,lowPrice3y,tradeTime", r = "percentChange3y";
                            break;
                        case "5y":
                            i = "symbol,symbolName,percentChange5y,weeklyLastPrice,weeklyPriceChange,weeklyPercentChange,priceChange5y,highPrice5y,lowPrice5y,tradeTime", r = "percentChange5y";
                            break;
                        case "10y":
                            i = "symbol,symbolName,percentChange10y,monthlyLastPrice,monthlyPriceChange,monthlyPercentChange,priceChange10y,highPrice10y,lowPrice10y,tradeTime", r = "percentChange10y";
                            break;
                        default:
                            i = "symbol,symbolName,percentChange,priceChange,highPrice,lowPrice,tradeTime", r = "percentChange"
                    }
                    a.viewName === e.MAIN && (this.apiConfig.api.fields = i, this.apiConfig.api.orderBy = r)
                },
                futuresHighsLows: function(t, a) {
                    var i;
                    switch (this.apiConfig.api.lists = this.receivedApiConfig.api.lists, a.timeFrame) {
                        case "ytd":
                            i = "Ytd", this.options.colorize.push("highPercentYtd", "lowPercentYtd");
                            break;
                        case "12m":
                            i = "1y", this.options.colorize.push("highPercent" + i, "lowPercent" + i);
                            break;
                        default:
                            i = a.timeFrame, this.options.colorize.push("highPercent" + i, "lowPercent" + i)
                    }
                    if (this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/symbolName/, "contractName"), a.viewName === e.MAIN) {
                        this.options.exclude.push("highHit" + i, "lowHit" + i), this.options.hit = {
                            high: "highHit" + i,
                            low: "lowHit" + i
                        };
                        var r = [];
                        ["highPrice", "highDate", "highPercent", "lowPrice", "lowDate", "lowPercent", "highHit", "lowHit"].forEach(function(e) {
                            r.push(e + i)
                        }, this), this.apiConfig.api.fields = "symbol,contractName,lastPrice," + r.join(","), this.pathOrderParams || delete this.apiConfig.api.orderBy
                    }
                    "futures.category.us.all" !== this.receivedApiConfig.api.lists && "futures.category.euro.all" !== this.receivedApiConfig.api.lists || (this.apiConfig.api.fields += ",category", this.apiConfig.api.groupBy = "category")
                },
                forexHighsLows: function(t, a) {
                    var i;
                    switch (this.apiConfig.api.lists = this.receivedApiConfig.api.lists, a.timeFrame) {
                        case "12m":
                            i = "1y", this.options.colorize.push("highPercent" + i, "lowPercent" + i);
                            break;
                        case "ytd":
                            i = "Ytd", this.options.colorize.push("highPercent" + i, "lowPercent" + i);
                            break;
                        default:
                            i = a.timeFrame, this.options.colorize.push("highPercent" + i, "lowPercent" + i)
                    }
                    if (a.viewName === e.MAIN) {
                        this.options.exclude.push("highHit" + i, "lowHit" + i), this.options.hit = {
                            high: "highHit" + i,
                            low: "lowHit" + i
                        };
                        var r = [];
                        ["highPrice", "highDate", "highPercent", "lowPrice", "lowDate", "lowPercent", "highHit", "lowHit"].forEach(function(e) {
                            r.push(e + i)
                        }, this), this.apiConfig.api.fields = "symbol,symbolName,lastPrice," + r.join(","), this.pathOrderParams || delete this.apiConfig.api.orderBy
                    }
                },
                futuresMostActive: function(t, a) {
                    this.apiConfig.api.lists = this.receivedApiConfig.api.lists, a.viewName === e.MAIN && (this.apiConfig.api.fields = this.receivedApiConfig.api.fields), this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/symbolName/, "contractName"), "futures.category.us.all" !== this.receivedApiConfig.api.lists && "futures.category.euro.all" !== this.receivedApiConfig.api.lists || (this.apiConfig.api.limit = 20)
                },
                industryPerformance: function(a, i) {
                    i.viewName === e.MAIN && (this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,highPrice,lowPrice,numberOfStocks,tradeTime"), "12m" === i.timeFrame && (i.timeFrame = "1y"), "ytd" === i.timeFrame && (i.timeFrame = t.ucfirst(i.timeFrame)), ~this.options.colorize.indexOf("priceChange" + i.timeFrame) || this.options.colorize.push("priceChange" + i.timeFrame), i.viewName === e.MAIN && ("1d" === i.timeFrame ? this.apiConfig.api.fields = "symbol,symbolName,lastPrice,priceChange,highPrice,lowPrice,numberOfStocks,tradeTime" : this.apiConfig.api.fields = "symbol,symbolName,priceChange" + i.timeFrame + ",lastPrice,priceChange,highPrice" + i.timeFrame + ",lowPrice" + i.timeFrame + ",numberOfStocks,tradeTime"), this.pathOrderParams || ("1d" === i.timeFrame ? this.apiConfig.api.orderBy = "priceChange" : this.apiConfig.api.orderBy = "priceChange" + i.timeFrame)
                },
                futurePerformanceLeaders: function(t, a) {
                    var i;
                    switch (this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/symbolName/, "contractName"), a.timeFrame) {
                        case "today":
                            i = "";
                            break;
                        case "ytd":
                            i = "Ytd";
                            break;
                        case "12m":
                            i = "1y";
                            break;
                        default:
                            i = a.timeFrame
                    }
                    if (a.viewName === e.MAIN) {
                        var r = [];
                        ["priceChange", "percentChange", "highPrice", "lowPrice"].forEach(function(e) {
                            r.push(e + i)
                        }, this), this.options.colorize.push("priceChange" + i, "percentChange" + i), this.apiConfig.api.fields = "symbol,contractName,lastPrice,priceChange," + r.join(",") + ",tradeTime", this.pathOrderParams || (this.apiConfig.api.orderBy = "percentChange" + i)
                    }
                    a.viewName === e.CHART && (this.field = "percentChange" + i, this.apiConfig.api.fields = "symbol,contractName,lastPrice,priceChange" + i + "," + this.field + ",highPrice,lowPrice,tradeTime", this.tooltipFields = ["lastPrice", "priceChange" + i, "highPrice", "lowPrice", "tradeTime"], this.pathOrderParams || (this.apiConfig.api.orderBy = this.field))
                },
                forexPerformanceLeaders: l,
                cryptoPerformanceLeaders: function(e, t) {
                    l.call(this, e, t), this.apiConfig.api.lists = this.receivedApiConfig.api.lists
                },
                futureLongTerm: function(t, a) {
                    this.apiConfig.api.fields = this.apiConfig.api.fields.replace(/symbolName/, "contractName"), a.viewName === e.MAIN && (this.apiConfig.api.fields = this.receivedApiConfig.api.fields), this.apiConfig.api.lists = this.receivedApiConfig.api.lists, this.pathOrderParams || (this.apiConfig.api.orderBy = this.receivedApiConfig.api.orderBy)
                },
                forexLongTerm: function(t, a) {
                    a.viewName === e.MAIN && (this.apiConfig.api.fields = this.receivedApiConfig.api.fields), this.apiConfig.api.lists = this.receivedApiConfig.api.lists, this.pathOrderParams || (this.apiConfig.api.orderBy = this.receivedApiConfig.api.orderBy)
                },
                allFutures: function(t, a) {
                    var i = "";
                    switch (a.viewName) {
                        case e.MAIN:
                            i = "current" === a.timeFrame ? "lastPrice,priceChange,openPrice,highPrice,lowPrice,previousPrice,volume,openInterest,tradeTime" : "dailyLastPrice,dailyPriceChange,dailyOpenPrice,dailyHighPrice,dailyLowPrice,dailyPreviousPrice,dailyVolume,dailyOpenInterest,dailyDate1dAgo";
                            break;
                        case e.TECHNICAL:
                            i = "current" === a.timeFrame ? "opinion,relStr20d,hisVol20d,averageVolume20d,lowPrice1y,highPrice1y,tradeTime" : "dailyLastPrice,dailyOpinion,dailyRelativeStrength20d,dailyAverageVolume20d,dailyLowPrice1y,dailyHighPrice1y,dailyTradeTime";
                            break;
                        case e.PERFORMANCE:
                            i = "current" === a.timeFrame ? "weightedAlpha,movingAverageYtd,percentChangeYtd,percentChange1m,percentChange3m,percentChange1y,tradeTime" : "dailyWeightedAlpha,dailyMovingAverageYtd,dailyPercentChangeYtd,dailyPercentChange1m,dailyPercentChange3m,dailyPercentChange1y,dailyDate1dAgo";
                            break;
                        default:
                            i = this.apiConfig.api.fields, this.options.exclude.push("contractSymbol")
                    }
                    this.apiConfig.api.fields = "symbol,contractSymbol," + i, this.pathOrderParams || delete this.apiConfig.api.orderBy
                },
                top100Stocks: function(t, a) {
                    a.viewName === e.MAIN && (this.apiConfig.api.fields = "symbol,symbolName,weightedAlpha,lastPrice,priceChange,percentChange,highPrice1y,lowPrice1y,percentChange1y,tradeTime")
                },
                stocksPriceSurprise: function(t, a) {
                    var i = a.timeFrame;
                    if (a.viewName === e.MAIN) switch (this.apiConfig.api.fields = "symbol,symbolName,standardDeviation,lastPrice,priceChange,percentChange,highPrice,lowPrice,volume,tradeTime", i) {
                        case "current":
                            this.apiConfig.api.fields = "symbol,symbolName,standardDeviation,lastPrice,priceChange,percentChange,highPrice,lowPrice,volume,tradeTime";
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "symbol,symbolName,dailyStandardDeviation,dailyLastPrice,dailyPriceChange,dailyPercentChange,dailyHighPrice,dailyLowPrice,dailyVolume,dailyDate1dAgo";
                            break;
                        case "weekly":
                            this.apiConfig.api.fields = "symbol,symbolName,weeklyStandardDeviation,weeklyLastPrice,weeklyPriceChange,weeklyPercentChange,weeklyHighPrice,weeklyLowPrice,weeklyVolume,weeklyDate1wAgo";
                            break;
                        case "monthly":
                            this.apiConfig.api.fields = "symbol,symbolName,monthlyStandardDeviation,monthlyLastPrice,monthlyPriceChange,monthlyPercentChange,monthlyHighPrice,monthlyLowPrice,monthlyVolume,monthlyDate1mAgo"
                    }
                    if (!this.pathOrderParams) switch (i) {
                        case "current":
                            this.apiConfig.api.orderBy = "standardDeviation";
                            break;
                        case "daily":
                            this.apiConfig.api.orderBy = "dailyStandardDeviation";
                            break;
                        case "weekly":
                            this.apiConfig.api.orderBy = "weeklyStandardDeviation";
                            break;
                        case "monthly":
                            this.apiConfig.api.orderBy = "monthlyStandardDeviation"
                    }
                },
                setApiFieldsForMainView: function(t, a) {
                    if (a.viewName === e.MAIN) this.apiConfig.api.fields = this.options.apiFields;
                    else {
                        var i = window.location.search.split("=");
                        i && "daily" === i[1] && c.call(this, a)
                    }
                },
                useReceivedApiConfig: function(t, a) {
                    a.viewName === e.MAIN && (this.apiConfig.api.fields = this.receivedApiConfig.api.fields)
                },
                competitorsBySector: function(e, t) {
                    this.apiConfig.api.lists = "stocks.inSector.all(" + e + ")"
                },
                updateFuturesOptionsMergedFields: function(e, t) {
                    switch (t.futuresOptionsTime) {
                        case "intraday":
                            this.apiConfig.api.fields = "strike,openPrice,highPrice,lowPrice,lastPrice,priceChange,volume,openInterest,premium,tradeTime,longSymbol";
                            break;
                        case "daily":
                            this.apiConfig.api.fields = "strike,dailyOpenPrice,dailyHighPrice,dailyLowPrice,dailyLastPrice,dailyPriceChange,dailyVolume,dailyOpenInterest,delta,premium,longSymbol"
                    }
                },
                handleEoDFilter: c,
                commodityIndex: function(t, i) {
                    if (this.apiConfig.api.lists = this.receivedApiConfig.api.lists, i.viewName === e.MAIN) switch (i.timeFrame) {
                        case "daily":
                            c.call(this, i)
                    }
                    if (i.viewName === e.TECHNICAL) switch (i.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = a.technical.api.fields;
                            break;
                        case "daily":
                            c.call(this, i)
                    }
                    if (i.viewName === e.PERFORMANCE) switch (i.timeFrame) {
                        case "current":
                            this.apiConfig.api.fields = a.performance.api.fields;
                            break;
                        case "daily":
                            c.call(this, i)
                    }
                },
                updateFuturesByExchange: function(e) {
                    this.apiConfig.api.root = e
                },
                stocksBySector: function(e, t) {
                    var a;
                    switch (i.config.user.market) {
                        case "usd":
                            a = "us";
                            break;
                        default:
                            a = "ca"
                    }
                    this.apiConfig.api.lists = "stocks.optionable.by_sector." + t.stocksBySector + "." + a
                }
            }
        }
        i.$inject = ["viewsConstants", "utils", "viewApiConfig", "$window"], e.exports = i
    },
    uLLb: function(e, t) {
        e.exports = '<div class=bc-modal-content> <input type=hidden /> <div class=bc-modal-content-inner> <div class=modal-header> Expressions <i class="bc-glyph-times form-close right" data-ng-click=modalDismiss()></i> </div> <div data-ng-show="expressions && expressions.length"> <div class=label>Current Expressions</div> <ul class="expressions-list current-expressions-list"> <li class=expressions-list-item data-ng-repeat="expression in expressions track by $index"> <i class=bc-glyph-times data-ng-click="removeExpression(expression, $index)"></i> <a data-ng-click="editExpression(expression, $index)">[[ ::expression.title ]]</a> </li> </ul> </div> <div class=text-center style="margin:20px 0"> <button class="bc-button ok dark-blue" data-ng-click=createNewExpression()>Create Expression</button> </div> </div> </div> '
    },
    uNz1: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = e.API_URL + "/interactive-chart-templates";
            return {
                getChartTemplatesList: function() {
                    return a.call(r, t.GET, {
                        orderBy: "sort_order",
                        orderDir: "asc"
                    }).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                getChartTemplate: function(e) {
                    var i = r + "/" + e;
                    return a.call(i, t.GET).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                saveChartTemplate: function(e) {
                    return a.call(r, t.POST, e).then(function(e) {
                        return e.data
                    }, function(e) {
                        return e
                    })
                },
                updateChartTemplate: function(e) {
                    var i = r + "/" + e.id;
                    return a.call(i, t.PUT, e).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                deleteChartTemplate: function(e) {
                    var i = r + "/" + e;
                    return a.call(i, t.DELETE).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                },
                updateChartTemplatesOrder: function(e) {
                    var i = r + "/order",
                        o = {
                            ids: e
                        };
                    return a.call(i, t.POST, o).then(function(e) {
                        return e
                    }, function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider", "_"], e.exports = i
    },
    "uPM/": function(e, t) {
        e.exports = '<div class=bc-premier> <p class=since-date>Premier Member Since [[ orderDate ]]</p> <div class=bc-premier__trial-countdown data-ng-class="{\'trial\': premier.order.trialDays, \'pending\': !trialDays && order.order_status_code == 12}"> <span class=bc-premier__trial-countdown-active data-ng-if=trialDays> Your FREE trial of Barchart Premier expires on [[ trialDays ]]. Do nothing to continue your subscription for $29.95/month. <span data-ng-show=notificationOnly>To update the email address associated with your account as well as your billing information, go to the <a target=_self href=/my/profile>My Profile</a> page.</span> For help, or questions about your subscription, <a href=/contact>Contact Us</a>. </span> <span class=bc-premier__trial-countdown-inactive data-ng-if="!trialDays && order.bill_term_id === \'11210\' && order.order_status_code === \'0\'"> Your annual Barchart Premier subscription is active. Your membership will auto-renew on [[ formatDate(order.next_bill_date) ]]. <span data-ng-show=notificationOnly>To update the email address associated with your account as well as your billing information, go to the <a target=_self href=/my/profile>My Profile</a> page.</span> For help, or questions about your subscription, <a href=/contact>Contact Us</a>. </span> <span class=bc-premier__trial-countdown-inactive data-ng-if="!trialDays && !order.bill_term_id && order.order_status_code === \'0\'"> Your Barchart Premier subscription is active. <span data-ng-show=notificationOnly>To update the email address associated with your account as well as your billing information, go to the <a target=_self href=/my/profile>My Profile</a> page.</span> For help, or questions about your subscription, <a href=/contact>Contact Us</a>. </span> <span class=bc-premier__trial-countdown-inactive data-ng-if="!trialDays && order.bill_term_id === \'11180\' && order.order_status_code !== 12"> Your month-to-month Barchart Premier subscription is active, Your membership will auto-renew on [[ formatDate(order.next_bill_date) ]]. <span data-ng-show=notificationOnly>To update the email address associated with your account as well as your billing information, go to the <a target=_self href=/my/profile>My Profile</a> page.</span> For help, or questions about your subscription, <a href=/contact>Contact Us</a>. <span class=promotion> <b>Want to save on your subscription?</b> <a href=/contact>Contact Us</a> to switch to an annual plan at $199.95 (save 44% off the monthly rate). </span> </span> <span class=bc-premier__trial-countdown-inactive data-ng-if="!trialDays && order.order_status_code == 12"> Your Barchart Premier subscription is active, Pending Cancellation. For help, or questions about your subscription, <a href=/contact>Contact Us</a>. </span> </div> <div class="bc-premier__panels inner-wrapper" data-ng-if=!notificationOnly> <div class=block-wrapper> <div class=bc-premier__block> <div class="bc-premier__block-header clearfix"> Billing Address </div> <ul class=bc-premier__block-content> <li> <a data-ng-click=editContactModal()>Edit</a> <div class=bc-premier__row-label>First Name:</div> <div class=bc-premier__row-data> [[ userData.contact.first_name ]] </div> </li> <li> <a data-ng-click=editContactModal()>Edit</a> <div class=bc-premier__row-label>Last Name:</div> <div class=bc-premier__row-data> [[ userData.contact.last_name ]] </div> </li> <li> <a data-ng-click=editAddressModal()>Edit</a> <div class=bc-premier__row-label>Street Address:</div> <div class=bc-premier__row-data> <div>[[ userData.order.address.address ]]</div> <div data-ng-if=userData.order.address.address2>[[ userData.order.address.address2 ]]</div> <div>[[ userData.order.address.city ]], <span data-ng-if=userData.order.address.country>[[ userData.order.address.country ]]</span> <span data-ng-if=userData.order.address.state>[[ userData.order.address.state ]]</span> </div> <div>[[ userData.order.address.zip ]]</div> </div> </li> </ul> </div> </div> <div class=block-wrapper> <div class=bc-premier__block> <div class=bc-premier__block-header> Credit Card Information </div> <ul class=bc-premier__block-content> <li> <a data-ng-click=editCardModal()>Edit</a> <div class=bc-premier__row-label>Name:</div> <div class=bc-premier__row-data> [[ userData.order.creditcard.name ]] </div> </li> <li> <a data-ng-click=editCardModal()>Edit</a> <div class=bc-premier__row-label>Card on File:</div> <div class=bc-premier__row-data> **** **** **** [[ userData.order.creditcard.last_four ]] </div> </li> </ul> </div> </div> </div> </div> '
    },
    uQ0n: function(e, t, a) {
        "use strict";
        var i = angular.module("megaMenu", []).controller("desktopMenuController", a("3pIW")).controller("mobileMenuController", a("O9AV"));
        i.directive("hoverMenu", a("jRtP")), i.directive("mobileMenu", a("lC8T")), i.directive("openInNewWindow", a("xKFM")), e.exports = {
            enable: !0,
            name: "megaMenu"
        }
    },
    uU7e: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                link: function(t, a) {
                    document.body.scrollHeight > document.body.clientHeight ? a.on("click", function() {
                        e(document.body, "scroll", {
                            duration: 300
                        })
                    }) : a.addClass("hide-scroll")
                }
            }
        }
        i.$inject = ["Velocity"], e.exports = i
    },
    uauV: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "A",
                require: "^bcEqualHeights",
                link: function(e, t, a, i) {
                    var r = i.allocateMe();
                    e.$watch(function() {
                        var e = t.clone().removeAttr("bc-equal-heights").css({
                            height: "",
                            width: t[0].clientWidth + "px",
                            position: "fixed",
                            top: 0,
                            left: 0,
                            visibility: "hidden"
                        });
                        t.after(e);
                        var a = e[0].clientHeight;
                        return e.remove(), a
                    }, function(e) {
                        e && i.updateMyHeight(r, e)
                    }), e.$watch(i.getTallestHeight, function(e) {
                        e && t.css("height", e + "px")
                    })
                }
            }
        }
        i.$inject = [], e.exports = i
    },
    ugIc: function(e, t) {
        e.exports = '<div class=bc-alerts-deactivate-all> <a data-ng-click=$ctrl.showMenu() class="bc-button white-with-border extra">Deactivate / Delete Alerts</a> <div class=bc-alerts-deactivate-menu data-ng-show=$ctrl.openMenu> <ul> <li><a data-ng-click=$ctrl.deactivateAll()>Deactivate All Alerts</a></li> <li>---------------------------</li> <li><a data-ng-click=$ctrl.deleteInactive()>Delete Inactive Alerts</a></li> <li><a data-ng-click=$ctrl.deleteAll()>Delete All Alerts</a></li> </ul> </div> </div>'
    },
    umTJ: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            this.email = e, this.message = t, this.close = function() {
                a.clearErrors(), a.clear(), i.dismiss()
            }
        }
        i.$inject = ["predefinedEmail", "predefinedMessage", "userAuthFormData", "$modalInstance"], e.exports = i
    },
    "up/T": function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login bc-modal-delete-my-chart"> <input type=hidden /> <div class=bc-modal-content-inner> <form> <p class=text>Are you sure you want to delete this chart?</p> <div class=btn-actions> <button class="bc-button grey upper" data-ng-click=$ctrl.cancel() type=button>Cancel</button> <button class="bc-button light-blue upper" data-ng-click=$ctrl.ok() data-ng-disabled=$ctrl.disable type=submit>Ok</button> </div> </form> </div> </div>'
    },
    urLz: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s) {
            return {
                restrict: "E",
                replace: !0,
                link: function(a, l) {
                    var c = !1;
                    a.activeTab = null, a.content = {}, a.invalid = !1, a.selectedMyChart = null, a.flipchartVisibility = o.getParameter("showRibbon");
                    var d = s.getUserData() || {},
                        u = d.preferences ? d.preferences.charts_style : "interactive";
                    a.realtimeUpdate = function(t) {
                        var i = a.content && a.content.data ? a.content.data : [],
                            r = ["lastPrice", "priceChange", "percentChange", "highPrice", "lowPrice", "volume", "tradeTime"],
                            o = "";
                        Object.keys(i).forEach(function(a) {
                            if (i[a].updatedFields = [], o = i[a].symbol, t[o] && t[o].symbol === o) {
                                var n = e.profile[o];
                                Object.keys(r).forEach(function(e) {
                                    if (t[o][r[e]] && i[a][r[e]] && i[a].raw[r[e]] !== t[o][r[e]] && (i[a].updatedFields.push(r[e]), i[a].raw && (i[a].raw[r[e]] = t[o][r[e]]), ~["highPrice", "lowPrice"].indexOf(r[e]) && n && (i[a][r[e]] = n.formatPrice(t[o][r[e]])), "priceChange" === r[e] && n && (i[a][r[e]] = n.formatPriceChange(t[o][r[e]], !0)), "percentChange" === r[e] && n && (i[a][r[e]] = n.formatPercentChange(t[o][r[e]], !0))), t[o].lastPrice) {
                                        var s = n.formatPrice(t[o].lastPrice);
                                        "s" !== t[o].flag && "p" !== t[o].flag || t[o].lastPrice !== t[o].settlementPrice || (s = n.formatPriceForSettlement(t[o].lastPrice)), i[a].lastPrice && "lastPrice" === r[e] && n && i[a].lastPrice !== s && (i[a].updatedFields.push("lastPrice"), i[a].lastPrice = s)
                                    }
                                }), i[a].raw.volume && (i[a].volume = n.formatVolume(i[a].raw.volume)), i[a].tradeTime && t[o].timeDisplay && (i[a].tradeTime !== t[o].timeDisplay && (i[a].tradeTime = t[o].timeDisplay), i[a].raw.tradeTime = t[o].timeDisplay), i[a].lastPriceDirection = t[o].lastPriceDirection
                            }
                        })
                    }, a.$on("dashboardChangeTab", function(e, t) {
                        a.activeTab = t, o.updateParameter("activeTab", t), a.selectedMyChart && (a.selectedMyChart = null),
                            function(e) {
                                var t = "main",
                                    a = d && d.preferences ? d.preferences : null,
                                    i = a && a.default_view ? a.default_view.toLowerCase() : "main";
                                switch (e) {
                                    case "markets":
                                        t = i;
                                        break;
                                    default:
                                        t = null
                                }
                                o.updateParameter("controllerView", t)
                            }(t)
                    }), a.$on("dashboardWatchlistSelected", function(e, t) {
                        "watchlist" !== a.activeTab && (o.updateParameter("watchlistId", t.id), r.$broadcast("dashboardForceSelectTab", {
                            tab: "watchlist"
                        }))
                    }), a.$on("myChartCreated", function(e, t) {
                        "mycharts" !== a.activeTab && r.$broadcast("dashboardForceSelectTab", {
                            tab: "mycharts"
                        }), a.selectedMyChart = t.chart
                    }), a.$on("realtimeUpdate", function() {
                        t.isEmpty(e.symbols) || a.realtimeUpdate(e.symbols)
                    }), a.$on("realtimeDeleteClasses", function() {
                        var e = a.content && a.content.data ? a.content.data : [];
                        Object.keys(e).forEach(function(t) {
                            e[t].updatedFields = []
                        })
                    }), a.$on("dashboardSymbolChangedFromSelector", function(e, t) {
                        o.getParameter("isHidden") || (a.activeTab = null, r.$broadcast("closeRightPanel")), "technical" === u && (c = t, n.setSymbolData(c))
                    });
                    var p = !1;

                    function m() {
                        if (p) return !1;
                        document.querySelector(".bc-control-widget").offsetHeight > document.querySelector(".barchart-minitable-wrapper table").offsetHeight && i.needMore() && (p = !0, i.getData().then(function() {
                            p = !1, i.updateLimit(30), r.$broadcast("dashboardSymbolsListChanged")
                        }))
                    }

                    function h(e) {
                        var i, o;
                        0 !== l.width() && (40 === e.keyCode && (i = t.findIndex(a.content.data, function(e) {
                            return e.symbol === c.symbol
                        }), (o = a.content.data[i + 1]) && o.symbol !== c.symbol && r.$broadcast("dashboardControlWidgetNextSymbol", o)), 38 === e.keyCode && (i = t.findIndex(a.content.data, function(e) {
                            return e.symbol === c.symbol
                        }), (o = a.content.data[i - 1]) && o.symbol !== c.symbol && r.$broadcast("dashboardControlWidgetPrevSymbol", o)))
                    }
                    a.$on("controlWidgetSizeChanging", m), a.$on("dashboardSymbolsListUpdated", function() {
                        setTimeout(function() {
                            m()
                        }, 0)
                    }), a.$on("dashboardCurrentSymbolChanged", function(e, t) {
                        c = t && t.newSymbol ? {} : t, n.setSymbolData(c)
                    }), a.$on("$destroy", function() {
                        document.removeEventListener("keydown", h)
                    }), a.toggleFlipcharts = function() {
                        parseInt(a.flipchartVisibility) ? (o.updateParameter("showRibbon", !0), r.$broadcast("dashboardShowRibbon")) : (o.updateParameter("showRibbon", a.flipchartVisibility), r.$broadcast("dashboardHideRibbon"))
                    }, document.addEventListener("keydown", h)
                },
                template: a("woVx")
            }
        }
        i.$inject = ["realtimeConnectService", "_", "dashboardDataService", "$rootScope", "dashboardSettingsService", "dashboardSymbolStorage", "authService"], e.exports = i
    },
    urOV: function(e, t, a) {
        "use strict";
        e.exports = {
            name: "barchartApp"
        }
    },
    usTH: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o, n, s, l, c, d, u, p = {
                    fields: "totalEarnings,totalDividends,date",
                    country: "us",
                    raw: 1
                },
                m = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                h = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                g = !1;
            window.currentTab = "earnings", i.currentTab = window.currentTab, e.dataLoading = !0, e.dataUpdating = !1, e.items = [], e.currentDate = y(new Date), e.date = e.currentDate, e.minDateLoaded = !1, e.apiConfig = !1;
            var f = new Date,
                b = new Date;

            function v(e) {
                var t = 1e3 * e.getTimezoneOffset() * 60;
                return new Date(e.getTime() + t)
            }

            function y(e, t) {
                return n = e.getMonth() < 9 ? "0" + (e.getMonth() + 1) : e.getMonth() + 1, s = e.getDate() < 10 ? "0" + e.getDate() : e.getDate(), t ? n + "-" + s + "-" + e.getFullYear() : e.getFullYear() + "-" + n + "-" + s
            }

            function w(e, t) {
                return t || (t = 0 === e.totalEarnings && 0 !== e.totalDividends ? "dividends" : "earnings"), t
            }

            function C(t) {
                var a = new Date(t);
                0 === (a = v(a)).getDay() ? a.setDate(a.getDate() + 1) : 6 === a.getDay() && a.setDate(a.getDate() + 2), a = y(a), p.startDate = a, (o = new Date(a)).setDate(o.getDate() + 16), o = v(o), p.endDate = y(o), e.items = [], e.dataLoading = !0, x(!0), e.currentDate = y(v(new Date(a))), l.startDate = e.currentDate, c.startDate = e.currentDate, c.endDate = e.currentDate
            }

            function S() {
                f > p.startDate && (e.minDateLoaded = !0)
            }

            function x(a) {
                t.getData(p).then(function(t) {
                    if (t.data) {
                        var r = [];
                        t.data.forEach(function(e) {
                            var t = v(new Date(e.raw.date));
                            0 !== t.getDay() && 6 !== t.getDay() && (e.currentDate = m[t.getMonth()] + " " + t.getDate(), e.currentDay = h[t.getDay()], e.formattedDate = y(t), r.push(e))
                        }), g ? (e.items = r.concat(e.items), g = !1) : e.items = e.items.concat(r)
                    }
                    e.dataLoading = !1, e.dataUpdating = !1, a && e.changeTab(w(e.items[0], !1), !0), S(), i.$broadcast("bc-scroll-refresh")
                })
            }

            function k(e) {
                var t;
                switch (e.getDay()) {
                    case 1:
                        t = 1;
                        break;
                    case 6:
                        t = 2;
                        break;
                    default:
                        t = 0
                }
                return e.setDate(e.getDate() + t), y(e)
            }
            f.setDate(f.getDate() - 29), b.setDate(b.getDate() - 30), f = k(f), b = k(b), e.calendarStartDate = b, e.init = function(t) {
                l = t.dividends, c = t.earnings, d = t.dividendsOptions, u = t.earningsOptions, p.country = t.market, i.$broadcast("bcDownloadTitleChanged", "Earnings-" + y(v(new Date(e.currentDate)), !0)), a.isIOS() && C(e.currentDate)
            }, a.isIOS() ? angular.element(document.querySelector(".js-calendar-input")).on("blur", function() {
                if (e.minDateLoaded = !1, e.date || (e.date = y(v(new Date))), b > e.date) {
                    var t = new Date(b);
                    t.setHours(0, 0, 0, 0), e.date = t
                }
                e.date !== e.currentDate && C(e.date)
            }) : e.$watch("date", function(t) {
                e.minDateLoaded = !1, t || (t = y(v(new Date))), C(t)
            }), e.$on("load-dates", function(t, a) {
                var i;
                if (e.dataUpdating) return !1;
                if ("forward" === a.scroll)(i = new Date(v(new Date(e.items[e.items.length - 1].raw.date)))).setDate(i.getDate() + 1), p.startDate = y(i), i.setDate(i.getDate() + 9), p.endDate = y(i);
                else {
                    if (g = !0, i = v(new Date(e.items[0].raw.date)), f > y(i)) return;
                    var r;
                    switch (p.endDate = y(i), i.getDay()) {
                        case 1:
                            r = 3;
                            break;
                        case 6:
                            r = 2;
                            break;
                        default:
                            r = 1
                    }
                    i.setDate(i.getDate() - r), p.startDate = y(i), S()
                }
                e.dataUpdating = !0, x(!1)
            }), e.changeDate = function(t, a) {
                e.currentDate = t.raw.date, l.startDate = e.currentDate, c.startDate = e.currentDate, c.endDate = e.currentDate, e.changeTab(w(t, a), !0)
            }, e.changeTab = function(t, a) {
                r.search().page && r.search("page", null), window.currentTab !== t && (r.search("orderBy", null), r.search("orderDir", null)), i.$broadcast("bcDownloadTitleChanged", t + "-" + y(v(new Date(e.currentDate)), !0)), window.currentTab === t && void 0 === a || (e.apiConfig = !1, setTimeout(function() {
                    "earnings" === t ? (e.apiConfig = {
                        api: angular.copy(c)
                    }, e.options = u) : (e.apiConfig = {
                        api: angular.copy(l)
                    }, e.options = d)
                }), window.currentTab = t, i.currentTab = window.currentTab)
            }, e.getClass = function(e) {
                return e === window.currentTab ? "active" : ""
            }
        }
        i.$inject = ["$scope", "earningsDividendsApiFactory", "utils", "$rootScope", "$location"], e.exports = i
    },
    usmz: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l, c, d) {
            this.exportCSV = function(u) {
                if (!e.isLoggedIn() || e.isLoggedIn() && !e.getUserData().is_premier) t.showPremier("chartDownload");
                else {
                    var p = c.getChartAggregation(),
                        m = -1 !== [2, 12, 13, 14].indexOf(i.getSymbolData().symbolType),
                        h = p.unit,
                        g = "";
                    m ? d.periodsFutures.forEach(function(e) {
                        e.unit === p.unit && e.spec === p.spec && (h = e.label.replace(/\s/g, "_"))
                    }) : d.periods.forEach(function(e) {
                        e.unit !== p.unit || m || (h = e.label)
                    }), "Intraday" === p.unit && (g = p.size + "m_");
                    var f = u + "_Barchart_Interactive_Chart_" + h + "_" + g + a.moment(new Date).format("MM/DD/YYYY"),
                        b = i.exportData();
                    r.call(a.config.routes.interactiveChartExportCsv, o.POST, {
                        onlyCheckPermissions: !0
                    }).then(function(e) {
                        if (e.error && e.error.message) n.error(e.error.message);
                        else {
                            var t = e.data.count;
                            s.generateAndSubmit(a.config.routes.interactiveChartExportCsv, {
                                title: f,
                                content: b
                            }), n.success(l("DOWNLOAD_CONFIRMATION_PREMIUM_USER", {
                                count: t,
                                limit: a.config.limits.downloads
                            }))
                        }
                    }, function() {
                        n.error("Something went wrong. Please try again")
                    })
                }
            }
        }
        i.$inject = ["authService", "bcModalLoginSrv", "$window", "interactiveChartApi", "dataProvider", "httpVerbs", "Notification", "bcFormGenerator", "textFactory", "interactiveChartSettings", "interactiveChartAggregationConfig"], e.exports = i
    },
    uxEa: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "_", "authService", "CustomChartTemplatesApiFactory", "MyBarchartModalService", function(e, t, a, i, r) {
                var o, n, s = a.getUserData();
                e.templates = s.custom_chart_templates, e.pendingRemoveTemplate = null, s.preferences && s.preferences.charts_template && (o = parseInt(s.preferences.charts_template)), s.preferences && "technical" === s.preferences.flipcharts_style && s.preferences.flipcharts_template && (n = parseInt(s.preferences.flipcharts_template)), e.treeOptions = {
                    dragStop: function(a) {
                        var r = t.pluck(e.templates, "id");
                        i.updateChartTemplatesOrder(r).then(function(e) {
                            return e
                        }, function(e) {
                            console.warn("Update views order fail: " + e)
                        })
                    }
                }, e.removeTemplate = function(t) {
                    t.id === o || t.id === n ? r.showError("defaultChartTemplate") : e.pendingRemoveTemplate = t
                }, e.confirmRemoveTemplate = function() {
                    var t = this.$index,
                        a = e.templates,
                        r = a[t];
                    i.deleteChartTemplate(r.id).then(function(i) {
                        a.splice(t, 1), e.pendingRemoveTemplate = null
                    })
                }, e.cancelRemoveTemplate = function() {
                    e.pendingRemoveTemplate = null
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                template: a("2GMn"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    "v+Qg": function(e, t) {
        e.exports = '<div class=bc-alerts__premier-condition> <div class=bc-alerts__premier-condition-title> <div class=bc-alerts__condition-title data-ng-show=!removeDialogOpen data-ng-class="{\'extra-padding\': disableRemoving}"> <i class="bc-glyph-minus-circle bc-alerts__remove-condition" data-ng-if=!disableRemoving data-ng-click=askToRemoveRowFilter()></i> <span class=bc-alerts__condition-name>Select a Condition:</span> </div> <div class="bc-alerts__delete-condition-dialog ng-hide" data-ng-if=!disableRemoving data-ng-show=removeDialogOpen> <span class=block-title>Delete?</span> <a class="bc-button small light-blue" data-ng-click=confirmFilterRemove()>Yes</a> <a class="bc-button small grey" data-ng-click=cancelFilterRemove()>No</a> </div> </div> <div class=bc-alerts__premier-condition-form> <div class=bc-alerts__condition-fields-row> <div class="bc-dropdown styled arrow-black rounded"> <select data-ng-model=baseCondition data-ng-change=changeBaseCondition() data-ng-options="item as item.label group by item.group for item in ::conditionDropDown"> </select> </div> <div class="bc-dropdown styled arrow-black rounded" data-ng-show=useRightDropDown> <select data-ng-model=rightModel data-ng-change=changeRightModel() data-ng-options="item as item for item in rightDropDownList"></select> </div> <div class="bc-dropdown styled arrow-black rounded" data-ng-show=useItemsDropDown> <select data-ng-model=itemModel data-ng-change=changeItem() data-ng-options="item as item.label for item in itemsDropDownList"></select> </div> </div> <div data-ng-show=!skipConditionOperator class=bc-alerts__condition-fields-row> <div class="bc-dropdown styled arrow-black rounded"> <select data-ng-model=conditionOperator data-ng-change=changeConditionOperator() data-ng-class="{\'disable\': conditionOperatorsList.length === 0}" data-ng-disabled="conditionOperatorsList.length === 0" data-ng-options="item as item.display.long for item in conditionOperatorsList"> </select> </div> <div class=input-wrapper data-ng-show="conditionOperator.operand_type === \'number\'"> <div class=bc-alerts__input-group data-ng-class="{\'suffix\': type === \'percent\'}"> <input type=text class=rounded data-ng-change=changeOperand(conditionOperand) data-ng-class="{\'error\' : invalidOperand}" data-ng-model=conditionOperand /> <span data-ng-show="type === \'percent\'" class=bc-alerts__input-group-suffix>%</span> </div> </div> </div> <div class=bc-alerts__condition-fields-row data-ng-show=withModifier> <span class=premier-field-label>Within</span> <div class=input-wrapper> <div class="bc-alerts__input-group suffix"> <input type=text class=rounded data-ng-change=setModifier() data-ng-class="{\'error\' : modifierInvalid}" data-ng-model=modifierModel /> <span class=bc-alerts__input-group-suffix>%</span> </div> </div> </div> </div> </div> '
    },
    vBKH: function(e, t) {
        e.exports = '<span data-bs-tooltip data-placement=bottom data-title="[[ barchartTableHeaderCellSortCtrl.content.meta.field.description[barchartTableHeaderCellSortCtrl.cellKey] ]]" data-ng-click=barchartTableHeaderCellSortCtrl.sort()> [[ barchartTableHeaderCellSortCtrl.cellValue ]] <span data-ng-class=barchartTableHeaderCellSortCtrl.getSortClass()></span> </span>'
    },
    vLBM: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "A",
                link: function(e, t, a) {
                    var i = angular.element('<div class="mobile-search-overlay hide-for-medium-up hide-for-small-only"></div>');
                    i.on("click", function() {
                        n()
                    }), angular.element(document.querySelector(".main-content-wrapper")).append(i);
                    var r = angular.element(document.querySelector(".search-panel")),
                        o = angular.element(document.querySelector(".close-search-panel-btn"));

                    function n() {
                        r.addClass("hide-for-small-only"), r.find("select").val(""), e.emptySearch(), i.addClass("hide-for-small-only"), t.removeClass("hide-for-small-only"), o.addClass("hide-for-small-only")
                    }
                    t.on("click", function() {
                        r.removeClass("hide-for-small-only"), i.removeClass("hide-for-small-only"), t.addClass("hide-for-small-only"), o.removeClass("hide-for-small-only"), angular.element(document.querySelector(".js-quick-search input")).focus()
                    }), o.on("click", function(e) {
                        e.preventDefault(), n()
                    })
                }
            }
        }
    },
    vOeJ: function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-alerts-settings__modal-form bc-activate-phone-modal"> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <h5 class=modal-title>Activate Phone Number</h5> <div class=modal-content-form-wrapper-input> <form novalidate class=bc-form name=phoneForm data-ng-submit=verifyPhone(phoneForm)> <div class=bc-form__fieldset-vertical> <label for=phone-form__phone>An activation code will be sent to:</label> <div class="clear-button-wrapper phone-form__phone"> <input id=phone-form__phone type=text class="placeholder rounded" name=phone data-ng-model=phone.phone data-ng-change=updatePhoneStorage() data-ng-pattern="/^[\\(\\)0-9- ]+$/" data-barchart-clear-input placeholder="Enter phone number" data-ng-class="{\'error\' : (phoneForm.phone.$error.required && phoneForm.$submitted) || (invalidPhone && phoneForm.$submitted)}" required/> </div> <button type=submit data-ng-disabled=disableGetCode class="bc-button extra dark-blue ng-click-active">Get Code</button> </div> <div class="bc-form__fieldset-vertical bc-activate-phone-modal-code"> <label for=phone-form__phone-code>Please enter the code and click ACTIVATE:</label> <div class="clear-button-wrapper phone-form__phone-code"> <input id=phone-form__phone-code type=text class=placeholder name=code data-ng-model=phone.code data-barchart-clear-input data-ng-class="{\'error\' : phoneForm.code.$dirty && phoneForm.code.$error.required && phoneForm.$submitted}" required/> </div> <a data-ng-click=resendCode() data-ng-class="{\'disable-link\': disableResendCode}">Resend Code</a> </div> <div class=bc-form__buttons-block> <input type=button data-ng-click=close() class="bc-button save grey" value=Cancel> <input type=button data-ng-disabled=phoneForm.$invalid data-ng-click=activateCode(phoneForm) class="bc-button save light-blue" value=Activate> </div> <div class=form-item-errors> <div data-ng-show="phoneForm.phone.$error.required && phoneForm.$submitted"> Phone is required </div> <div data-ng-show="invalidPhone && phoneForm.$submitted"> Phone number is invalid </div> <div data-ng-show="error === \'VALIDATION_FAILED_WRONG_CODE\'"> Wrong activation code </div> <div data-ng-show="error === \'VALIDATION_FAILED_TOO_MANY_ATTEMPTS\'"> Too many attempts </div> <div data-ng-show="error === \'VALIDATION_FAILED_UNKNOWN_PHONE\'"> Code expired, please click resend code </div> <div data-ng-show="phoneForm.code.$dirty && phoneForm.code.$error.required && phoneForm.$submitted"> Code is required </div> </div> </form> </div> </div>'
    },
    vUam: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                restrict: "A",
                link: function() {
                    if (!a.get("datatableOnboardingCardDisabled")) {
                        var i = null !== a.get("bcDatatableViews") ? a.get("bcDatatableViews") : 0;
                        i > 3 ? setTimeout(function() {
                            t.isLoggedIn() || e.$broadcast("showOnboardingCard", "datatable")
                        }, 0) : (i++, a.set("bcDatatableViews", i))
                    }
                }
            }
        }
        i.$inject = ["$rootScope", "authService", "localStorageService"], e.exports = i
    },
    vZYo: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s) {
            var l = s.getUserData();
            e.portfolioInitData = null, e.dataLoading = !0, e.currentTab = "portfolio", e.publicUser = !1, e.initPortfolio = function(t, a) {
                e.portfolioInitData = t, a && (e.publicUser = a), c()
            }, e.addTransaction = function() {
                e.portfolio.items && e.portfolio.items.length >= 500 ? i.showError("portfolioLimitReached") : a.transactionForm(e.portfolio, !1)
            };
            var c = function() {
                var a = {
                    useMasterDb: !1
                };
                r.search().timeFrame && "daily" === r.search().timeFrame && (a.eod = !0), a.view = r.search().portfolioViewName || e.portfolioInitData.default_view, e.page = r.search().page, a.page = e.page, "all" !== e.page ? (e.paginationParams = {
                    currentPage: parseInt(e.page) || 1
                }, o.isMobileOnly() ? a.limit = n.config.pagination.mobile || 25 : o.isTabletOnly() ? a.limit = n.config.pagination.tablet || 50 : a.limit = n.config.pagination.desktop || 100) : (e.paginationParams = {
                    currentPage: 1
                }, delete a.limit, a.page = 1), "default" === a.view && (l.preferences && l.preferences.default_view ? a.view = l.preferences.default_view : a.view = e.portfolioInitData.default_view), t.getPortfolio(e.portfolioInitData.id, a).then(function(i) {
                    1 !== e.paginationParams.currentPage && 0 === i.data[0].items.length && i.data[0].item_count > 0 ? (e.paginationParams = {
                        currentPage: 1
                    }, a.page = 1, r.search("page", null), t.getPortfolio(e.portfolioInitData.id, a).then(function(t) {
                        e.portfolio = t.data[0], e.dataLoading = !1
                    })) : (e.portfolio = i.data[0], e.dataLoading = !1)
                })
            }
        }
        i.$inject = ["$scope", "portfolioApiFactory", "portfolioModalFactory", "MyBarchartModalService", "$location", "utils", "$window", "authService"], e.exports = i
    },
    "vhZ+": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            function n(e, t) {
                Object.keys(e).forEach(function(a) {
                    (null === e[a] || "" === e[a] || ~t.indexOf(a)) && delete e[a]
                })
            }
            return {
                applySettings: function(a, i, r) {
                    var o = t.merge({}, a);
                    n(o, i = i || []), e.search().expiredSymbol && (o.expiredSymbol = e.search().expiredSymbol), angular.isObject(o) && (e.search({}), r && (o.isSpread = 1), o.sym = o.sym.toUpperCase(), e.search(o))
                },
                getSettingsFromUrl: function() {
                    var t = {},
                        i = e.search();
                    return Object.keys(i).forEach(function(e) {
                        var r = i[e];
                        "false" === r && (r = !1), "true" === r && (r = !0), ~r.toString().indexOf("I:") && (+r.toString().substr(r.toString().indexOf("I") + 2) || (r = "I:15")), e !== a.DATE_TO && e !== a.DATE_FROM || (r = r.split(" ").shift()), t[e] = r
                    }), t
                },
                compareUrls: function(t) {
                    return t = (t = e.protocol() + "://" + e.host() + t).split("#")[0], e.absUrl().split("#")[0] === t
                },
                createRouteBySymbol: function(e, t, a) {
                    var i = "/" + t + "/quotes/" + e + "/technical-chart";
                    return (i += a ? "/fullscreen" : "") + o.location.search
                },
                getFullPath: function() {},
                eraseParam: function(t) {
                    e.search(t, null)
                },
                subscribeOnUrlChanges: function(t) {
                    i.$on("$locationChangeSuccess", function() {
                        "/technical-chart" !== e.path() && "" !== e.path() || t()
                    })
                },
                getUrlBySettings: function(a, i, r) {
                    var o = t.merge({}, a);
                    if (n(o, i = i || []), e.search().expiredSymbol && (o.expiredSymbol = e.search().expiredSymbol), angular.isObject(o)) {
                        e.search({}), r && (o.isSpread = 1), o.sym = o.sym.toUpperCase();
                        var s = "";
                        return Object.keys(o).forEach(function(e) {
                            s += e + "=" + o[e] + "&"
                        }), s.substring(0, s.length - 1)
                    }
                    return null
                }
            }
        }
        i.$inject = ["$location", "_", "technicalChartFields", "$rootScope", "technicalChartMappingService", "$window"], e.exports = i
    },
    vkwz: function(e, t, a) {
        e.exports = [a("NKC+"), a("pEh1"), a("qCzi"), a("caPe"), a("0x+1"), a("2yQB"), a("ReF2"), a("gS/N"), a("Zw6a"), a("hL5k"), a("MIqE"), a("S3lD"), a("Ptny"), a("zrWK"), a("/rTH"), a("YV9C"), a("d/bi"), a("yT3A"), a("Vjk/"), a("Y91r"), a("Rd4j"), a("uQ0n"), a("1V8Y"), a("kNdq"), a("38yg"), a("CIU/"), a("/2ZT"), a("YpC/"), a("xdA6"), a("ymzd"), a("JETF"), a("rxcw"), a("CO79"), a("JIQe"), a("c3th"), a("a1qb"), a("KWph"), a("l75+"), a("8zng"), a("/SZW"), a("BSFd"), a("68vt"), a("sgXQ"), a("NtPV"), a("0Cpv"), a("+/S2"), a("KzvF"), a("34k3"), a("/DrK"), a("kcHO"), a("y8+0"), a("++YA"), a("+2vj"), a("PUYv"), a("/YJv"), a("4md1"), a("FikV"), a("Jspq"), a("msOO"), a("PSo9"), a("BNlM"), a("m+VR"), a("SDYH"), a("Rsdk"), a("PgTq"), a("I/2d"), a("87Up"), a("SHuS"), a("pvdn"), a("HwnX"), a("iEqH"), a("ms8G"), a("Aned"), a("n8Zl"), a("nJyb"), a("6Qfp"), a("60bQ"), a("sn2E"), a("1uEf"), a("sU8y"), a("VNvu"), a("037f"), a("najL"), a("2SJq"), a("YGab"), a("zohp"), a("nF04"), a("TGsO"), a("b0xg"), a("yvnB"), a("NcfW"), a("PAIb"), a("lY1j"), a("mIsD"), a("9j6B"), a("HX3x"), a("gzmO"), a("OTgG"), a("zdIH"), a("3Hs9"), a("+F5q"), a("kt/d"), a("9FZc"), a("IPgN"), a("6I2R"), a("Esl3"), a("yh13"), a("hry1"), a("geCq"), a("sBE+")]
    },
    vlJL: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    rawData: "=",
                    transactionId: "=",
                    portfolioPublicView: "="
                },
                link: function(t) {
                    t.editTransaction = function() {
                        t.portfolioPublicView || e.$broadcast("showEditTransactionModal", {
                            id: t.transactionId,
                            note: !0
                        })
                    }
                },
                template: a("qIN0")
            }
        }
        i.$inject = ["$rootScope"], e.exports = i
    },
    vmDW: function(e, t, a) {
        "use strict";

        function i() {
            var e = ["$scope", "quotesService", function(e, t) {
                e.lists = {
                    left: [{
                        field: "epsRecent",
                        label: "Most Recent Earnings"
                    }, {
                        field: "nextEarningsDate",
                        label: "Next Earnings Date",
                        colorize: !1
                    }, {
                        field: "epsAnnual",
                        label: "Earnings Per Share ttm"
                    }, {
                        field: "epsGrowthQuarter",
                        label: "EPS Growth vs. Prev Qtr"
                    }, {
                        field: "epsGrowthYear",
                        label: "EPS Growth vs. Prev Year"
                    }, {
                        field: "split",
                        label: "Most Recent Split"
                    }],
                    right: [{
                        field: "dividend",
                        label: "Most Recent Dividend"
                    }, {
                        field: "dividendExDate",
                        label: "Next Ex-Dividends Date"
                    }, {
                        field: "paymentDate",
                        label: "Dividend Payable Date"
                    }, {
                        field: "dividendPayout",
                        label: "Dividend Payout Ratio"
                    }, {
                        field: "dividendRateForward",
                        label: "Annual Dividend Rate, $"
                    }, {
                        field: "dividendYieldForward",
                        label: "Annual Dividend Yield"
                    }]
                };
                var a = angular.copy(e.widgetData.data[0]);
                if (a.epsRecent += " on " + a.epsDate, a.split += " on " + a.splitDate, a.dividend += " on " + a.dividendDate, a.raw.nextEarningsDate && a.raw.nextEarningsDate === a.raw.epsDate) a.nextEarningsDate = "N/A";
                else if (a.raw.nextEarningsDate) {
                    var i = new Date(a.raw.nextEarningsDate),
                        r = new Date;
                    r.setHours(0, 0, 0, 0);
                    var o = i.getTime() - 6048e5,
                        n = r.getTime() - 1728e5;
                    o < r.getTime() && i.getTime() > n && (e.lists.left[1].colorize = !0)
                }
                e.data = a, e.sector = t.getSector(e.symbolType), e.filterEmptyRows = function(t) {
                    return null !== e.data.raw[t.field]
                }
            }];
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    symbol: "@",
                    widgetData: "="
                },
                template: a("8HkX"),
                controller: e
            }
        }
        i.$inject = [], e.exports = i
    },
    vqZ8: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            this.getOverviewLink = function(e, t) {
                return {
                    text: "Quote Overview",
                    href: this.setLink(t) + e
                }
            }, this.getChartLink = function(e, a) {
                return {
                    text: t.getChartName(),
                    href: this.setLink(a) + e + "/" + t.getChartLink()
                }
            }, this.getOptionsQuotesLink = function(e, t) {
                return {
                    text: "Options Quotes",
                    href: this.setLink(t) + e + "/options"
                }
            }, this.getOpinionLink = function(e, t) {
                return {
                    text: "Barchart Opinion",
                    href: this.setLink(t) + e + "/opinion"
                }
            }, this.getTechnicalAnalysisLink = function(e, t) {
                return {
                    text: "Technical Analysis",
                    href: this.setLink(t) + e + "/technical-analysis"
                }
            }, this.getAllContractsLink = function(e, t, a) {
                return {
                    text: "All Futures",
                    href: "/futures/quotes/" + e + "/all-futures"
                }
            }, this.getLink = function(t, i, r) {
                var o = {
                    symbol: t
                };
                return i && e.getSector(i) && (o.sector = e.getSector(i)), {
                    text: r.title,
                    href: a.route(r.route, o)
                }
            }, this.setLink = function(t) {
                var a = "";
                return t && e.getSector(t) && (a = "/" + e.getSector(t)), a + "/quotes/"
            }
        }
        i.$inject = ["quotesService", "userPreferencesService", "utils"], e.exports = i
    },
    vsoW: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterData.signal = e.filterData.signal || {}, e.filterData.signal.value = e.filterData.signal.value || e.filters.signal.value[0].key
                }],
                template: a("fH85")
            }
        }
        i.$inject = [], e.exports = i
    },
    vusA: function(e, t, a) {
        "use strict";
        e.exports = ["name", "description", "style", "link", "expiredSymbol"]
    },
    vzS2: function(e, t) {
        e.exports = "<div class=toggle-wrapper> <div data-ng-click=toggleMenu() class=bc-dashboard-header__top-control-arrow data-ng-class=\"{'direction-right': hiddenMenu, 'direction-left': !hiddenMenu}\"></div> <span data-ng-click=toggleMenu() class=ctrl-text data-ng-show=!hiddenMenu>Hide right menu</span> <span data-ng-click=toggleMenu() class=ctrl-text data-ng-show=hiddenMenu>Show right menu</span> </div>"
    },
    "w+BU": function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                scope: {},
                bindToController: {
                    errors: "=",
                    formName: "@",
                    useServerErrors: "="
                },
                controller: ["$scope", function(t) {
                    var i = a("8321").default;
                    this.formName && a("8321")[this.formName] && (i = e.merge(i, a("8321")[this.formName])), this.errorTemplates = i
                }],
                controllerAs: "$ctrl",
                template: a("8x9n")
            }
        }
        i.$inject = ["_"], e.exports = i
    },
    w3y3: function(e, t) {
        e.exports = "<div class=\"barchart-symbol-widget widget-opinion\"> <div class=barchart-symbol-widget__title> Opinion <a data-ng-href=\"[[  '/' + sector + '/quotes/' + symbol + '/opinion' ]]\" class=\"bc-button small white-with-border right\" target=_blank> Full Opinion </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href=\"[[  '/' + sector + '/quotes/' + symbol + '/opinion' ]]\" target=_blank> <div class=barchart-symbol-widget__columns> <div class=barchart-symbol-widget__left-column> <div data-ng-if=\"data.opinion !== 'N/A'\"> <div class=widget-opinion__overall-block-title>Overall Average:</div> <div class=widget-opinion__overall-block-opinion data-ng-class=signal>[[ opinion ]]</div> <div class=widget-opinion__overall-block-opinion-text data-ng-show=\"signal === 'buy' || signal === 'sell'\"> <div class=margin-bottom-10 data-ng-show=\"data.opinionDirection === 'Top 1%'\"> The Barchart Technical Opinion rating is a <strong>[[ data.opinion ]]</strong> and ranks in the <strong>Top 1%</strong> of all short term signal directions. </div> <div class=margin-bottom-10 data-ng-show=\"data.opinionDirection !== 'Top 1%'\"> The Barchart Technical Opinion rating is a <b>[[ data.opinion ]]</b> with a <b>[[ data.opinionDirection ]] short term outlook</b> on maintaining the current direction. </div> <div class=margin-bottom-10> <span data-ng-show=\"data.opinionStrength === 'Top 1%'\"> Longer term, the trend strength is in the <b>Top 1%</b>. </span> <span data-ng-show=\"data.opinionStrength !== 'Top 1%'\"> Longer term, the trend strength is <b>[[ data.opinionStrength ]]</b>. </span> <span data-ng-show=\"(['100% Buy', '67% Buy'].indexOf(data.opinionLongTerm) > -1 && signal === 'buy') || (['100% Sell', '67% Sell'].indexOf(data.opinionLongTerm) > -1 && signal === 'sell')\"> Long term indicators fully support a continuation of the trend. </span> <span data-ng-show=\"(data.opinionLongTerm === '33% Buy' && signal === 'buy') || (data.opinionLongTerm === '33% Sell' && signal === 'sell')\"> Long term indicators mostly agree with the trend. </span> <span data-ng-show=\"(data.opinionLongTerm === '33% Sell' && signal === 'buy') || (data.opinionLongTerm === '33% Buy' && signal === 'sell')\"> Long term indicators are in flux. </span> <span data-ng-show=\"(['100% Sell', '67% Sell'].indexOf(data.opinionLongTerm) > -1 && signal === 'buy') || (['100% Buy', '67% Buy'].indexOf(data.opinionLongTerm) > -1 && signal === 'sell')\"> Long term indicators signal a short term trend correction. </span> </div> <div class=margin-bottom-10> <span data-ng-show=\"data.raw.stochasticK14d > 90 && signal === 'buy'\"> The market is in highly overbought territory. Beware of a trend reversal. </span> <span data-ng-show=\"data.raw.stochasticK14d > 80 && data.raw.stochasticK14d <= 90 && signal === 'buy'\"> The market is approaching overbought territory. Be watchful of a trend reversal. </span> <span data-ng-show=\"data.raw.stochasticK14d < 10 && signal === 'sell'\"> The market is in highly oversold territory. Beware of a trend reversal. </span> <span data-ng-show=\"data.raw.stochasticK14d < 20 && data.raw.stochasticK14d >= 10 && signal === 'sell'\"> The market is approaching oversold territory. Be watchful of a trend reversal. </span> </div> </div> <div class=widget-opinion__overall-block-opinion-text data-ng-show=\"signal !== 'buy' && signal !== 'sell'\"> <p>The Barchart Opinion rating is a <b>Hold</b>. Short term, the outlook is <b>[[ data.opinionDirection ]]</b>.</p> </div> </div> <div class=margin-top-5 data-ng-if=\"data.opinion === 'N/A'\"> <span class=error>In order to properly form an accurate opinion, the symbol has to have more than 6 months of trading activity.</span> </div> </div> <div class=barchart-symbol-widget__right-column> <div class=\"barchart-symbol-widget__title uppercase\"> Indicator Summary: </div> <ul class=barchart-symbol-widget__list> <li> <span class=\"right text-uppercase\" data-ng-class=\"{'up': data.raw.opinionShortTermSignal > 0, 'down': data.raw.opinionShortTermSignal < 0, 'unch': data.raw.opinionShortTermSignal === 0}\"> [[ data.opinionShortTermPercent ]] [[ data.opinionShortTermSignal ]] </span> Short Term Indicators </li> <li> <span class=\"right text-uppercase\" data-ng-class=\"{'up': data.raw.opinionMediumTermSignal > 0, 'down': data.raw.opinionMediumTermSignal < 0, 'unch': data.raw.opinionMediumTermSignal === 0}\"> [[ data.opinionMediumTermPercent ]] [[ data.opinionMediumTermSignal ]] </span> Medium Term Indicators </li> <li> <span class=\"right text-uppercase\" data-ng-class=\"{'up': data.raw.opinionLongTermSignal > 0, 'down': data.raw.opinionLongTermSignal < 0, 'unch': data.raw.opinionLongTermSignal === 0}\"> [[ data.opinionLongTermPercent ]] [[ data.opinionLongTermSignal ]] </span> Long Term Indicators </li> <li class=uppercase> <span class=\"right text-uppercase\" data-ng-class=\"{'up': data.raw.opinionSignal > 0, 'down': data.raw.opinionSignal < 0, 'unch': data.raw.opinionSignal === 0}\"> [[ data.opinionPercent ]] [[ data.opinionSignal ]] </span> Overall Average: </li> <li> <span class=right>[[ data.opinionStrength ]]</span> Current Strength </li> <li> <span class=right>[[ data.opinionDirection ]]</span> Current Direction </li> </ul> </div> </div> </a> </div>"
    },
    w5Ho: function(e, t, a) {
        "use strict";
        e.exports = {
            api: {
                method: "/quotes/get",
                symbols: "IBM",
                lists: "etfs.related.toStock",
                fields: "symbol,symbolName,percentHolding,percentChange3m",
                orderBy: "percentHolding",
                orderDir: "desc",
                meta: "field.shortName",
                limit: 5
            }
        }
    },
    wGBz: function(e, t) {
        e.exports = "<div class=row-chart data-ng-class=\"{'marking': mark || value, 'performance': isPerformance, 'row-chart-colored': colored}\"> <div class=row-chart-inner data-ng-style=\"{ 'width': approach + '%' }\"> <div class=row-chart-bar data-ng-class=\"{'right-position': approach > 50}\"> <span data-ng-if=value>[[ value ]]</span> </div> </div> <div class=mark data-ng-if=markValue data-ng-style=\"{ 'left': mark + '%' }\"> <span data-ng-class=\"{ 'text-left': mark <= 25, 'text-right': mark >= 75 }\">[[ markText ]] [[ markValue ]]</span> </div> <div class=mark data-ng-if=openPrice data-ng-style=\"{ 'left': mark + '%' }\"> <span> [[ markText ]] [[ openPrice ]]</span> </div> </div> "
    },
    wHvS: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    userEmail: "@",
                    close: "&"
                },
                controller: ["$scope", function(a) {
                    a.hasErrors = !1, a.isLoggedIn = i.isLoggedIn(), a.user = t.getData() || {}, i.isLoggedIn() && (a.user.email = i.getUserData().email, a.user.name = i.getUserData().fname), n.for("grecaptcha").then(function() {
                        r.grecaptcha.render("g-recapcha-contact", {
                            sitekey: o.grecaptchaKey,
                            callback: l
                        })
                    });
                    var s = !1;

                    function l() {
                        s = !0
                    }
                    a.errors = {}, a.submit = function(t) {
                        if (a.errors.recaptcha = !1, a.hasErrors = !1, a.hasErrors = !!t.$invalid, a.hasErrors) return !1;
                        if (!s && !i.isLoggedIn()) return a.hasErrors = !0, a.errors.recaptcha = !0, !1;
                        var r = [];
                        Object.keys(a.user.interest).forEach(function(e) {
                            a.user.interest[e] && r.push(e)
                        }), a.user.interest = r, e.advRequest(a.user).then(function(e) {
                            !0 === e.data.success && (a.success = !0)
                        })
                    }
                }],
                template: a("Y53E")
            }
        }
        i.$inject = ["advApiService", "userAuthFormData", "authService", "$window", "appConfig", "waitService"], e.exports = i
    },
    wT2o: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                restrict: "A",
                link: function(e, t) {
                    function i() {
                        a.goToContact()
                    }
                    t.on("click", i), e.$on("$destroy", function() {
                        t.off("click", i)
                    })
                }
            }
        }
        i.$inject = ["$modal", "$window", "authRouteService"], e.exports = i
    },
    wUAA: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                scope: {},
                bindToController: {
                    savedScreener: "=",
                    type: "@"
                },
                controller: ["$scope", "authService", "locationService", "_", "$rootScope", "events", "$location", "screenerFilterService", "screenerCurrentConfigService", function(e, t, a, i, r, o, n, s, l) {
                    var c = this;
                    if (c.applySavedScreener = function() {
                            c.savedScreener ? (l.ignoreUrlChange = !0, c.savedScreener.view ? (n.search("viewName", c.savedScreener.view), n.search("orderBy", c.savedScreener.order_by), n.search("orderDir", c.savedScreener.order_dir)) : (n.search("viewName", "filter_view"), n.search("orderBy", null), n.search("orderDir", null)), r.$broadcast(o.ON_SCREENER_APPLY_SAVED, {
                                screener: c.savedScreener
                            })) : r.$broadcast(o.ON_SCREENER_APPLY_EMPTY_TEMPLATE)
                        }, t.isLoggedIn()) {
                        var d = config.settings.markets[config.user.market].uri;
                        c.screeners = Array.prototype.slice.call(t.getUserData().screeners).filter(function(e) {
                            if (e.type === c.type) {
                                var t = JSON.parse(e.filters),
                                    a = i.find(t, "key", "exchange");
                                if (a && !a.filters) return !1;
                                if (!a || a.filters[d]) return !0;
                                if ("us" === d && (a.filters.etf || a.filters.fund)) return !0;
                                if ("ca" === d && (a.filters.cadetf || a.filters.cadfunds)) return !0
                            }
                            return !1
                        }), c.screeners.forEach(function(e) {
                            e.name = i.unescape(e.name)
                        })
                    } else c.screeners = [];
                    var u = n.search().screener;
                    void 0 !== u && (~i.findIndex(c.screeners, {
                        id: parseInt(u, 10)
                    }) ? c.savedScreener = i.find(c.screeners, {
                        id: parseInt(u, 10)
                    }) : (n.search("screener", null), n.search("tab", null), s.removeAllFilters(), s.addFilterByName("exchange"))), e.$on("onSaveScreener", function(e, t) {
                        t.screener[0] && t.screener[0].name && (t.screener[0].name = i.unescape(t.screener[0].name)), c.screeners = c.screeners.concat(t.screener), c.savedScreener = t.screener[0], -1 !== ["stk", "etf", "fund"].indexOf(c.savedScreener.type.toLowerCase()) && setTimeout(function() {
                            c.applySavedScreener()
                        })
                    }), e.$on("onUpdateScreener", function(e, t) {
                        var a = i.findIndex(c.screeners, {
                            id: t.screener.id
                        });
                        t.screener[0] && t.screener[0].name && (t.screener[0].name = i.unescape(t.screener[0].name)), c.screeners[a] = angular.copy(t.screener), c.savedScreener = c.screeners[a], -1 !== ["stk", "etf", "fund"].indexOf(c.savedScreener.type.toLowerCase()) && setTimeout(function() {
                            c.applySavedScreener()
                        })
                    })
                }],
                controllerAs: "$ctrl",
                template: a("KiYY")
            }
        }
    },
    wUqu: function(e, t) {
        e.exports = {
            TECHNICAL_CHART_SAVE_TEMPLATE: "{name} has been saved as a template.",
            PASSWORD_HAS_BEEN_CHANGED: "Password has been changed.",
            SCREENER_SAVE_AS_WATCHLIST: 'Screener results have been saved to your new watchlist, <a target="_self" href="{link}">{name}</a>.',
            ALERT_DEACTIVATED_SUCCESS: "All alerts have been deactivated.",
            ALERT_DEACTIVATED_DELETE: "All inactive alerts have been deleted.",
            ALERT_DELETE_ALL: "All alerts have been deleted.",
            ALERT_TEXT_SETTINGS_SAVED: "Your text alert settings have been saved.",
            ALERT_PHONE_HAS_BEEN_REMOVED: "SMS text alerts have been cancelled and your number has been deleted.",
            DOWNLOAD_CONFIRMATION_SIMPLE_USER: 'Please wait while your file is being downloaded. You have used <span class="red">{count}</span> of your {limit} daily downloads. <a target="_self" class="underline" href="{link}?ref=moreDownloads">Get more downloads with Barchart Premier.</a>',
            DOWNLOAD_CONFIRMATION_PREMIUM_USER: 'Please wait while your file is being downloaded. You have used <span class="red">{count}</span> of your {limit} daily downloads.',
            DOWNLOAD_CONFIRMATION_PREMIUM_USER_EMAIL: 'Download files greater than 1000 records will be emailed to the primary address on your account. Please check your inbox. You have used <span class="red">{count}</span> of your {limit} daily downloads.',
            MAX_EOD_REPORTS: 'You\'ve reached the maximum number of reports that can be sent through your account. Please <a  href="/contact">Contact Us</a> to discuss premium market data delivery options through Barchart OnDemand.',
            MAX_EOD_REPORTS_CHARTS: 'You\'ve reached the maximum number of charts that can be sent through your account. Please <a  href="/contact">Contact Us</a> to discuss premium market data delivery options through Barchart OnDemand.'
        }
    },
    wVl2: function(e, t) {
        e.exports = '<div data-ng-show=::BarchartOpinionCtrl.has6m class="module barchart-opinion"> <a target=_self data-ng-href="/[[ ::BarchartOpinionCtrl.quotesService.getSector(BarchartOpinionCtrl.currentSymbol.symbolType) ]]/quotes/[[ ::BarchartOpinionCtrl.currentSymbol.symbol ]]/opinion"> <h4>Barchart Opinion</h4> <div class=module-table> <div class=module-row data-ng-repeat="(key, item) in ::BarchartOpinionCtrl.data track by $index"> <div> [[ item.title ]]</div> <div class="histogram-wrapper index-[[ ::key ]]"> <div class="bar-wrap [[ ::item.position ]]" data-ng-style="BarchartOpinionCtrl.getLeftMargin(item.position, item.opinionPercent)"> <div style="width:[[ item.opinionPercent ]]" class=bar-inner></div> </div> </div> <div class=opinion> [[ ::item.opinion ]] </div> </div> </div> </a> </div> '
    },
    wYMy: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    currentSymbol: "=",
                    chartData: "="
                },
                controller: ["$window", "utils", function(e, t) {
                    var a;
                    this.socialTitle = this.currentSymbol.symbol + " | Custom Technical Chart for " + this.currentSymbol.symbolName, this.socialDesctiprion = "Build and share your own charts with sophisticated technical studies and indicators for equities, futures, and more.", this.socialImageType = "base64", this.redirectUrl = (a = this.currentSymbol, t.route(e.config.routes["quotes.sectors.technicalChart"], {
                        symbol: a.symbol,
                        sector: e.config.symbols.mapping[a.symbolType]
                    }) + location.search)
                }],
                controllerAs: "$ctrl",
                template: a("tWan")
            }
        }
    },
    wavG: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            e.existingTemplates = [], e.templateName = null, i.getChartTemplatesList().then(function(t) {
                e.templates = t.data, e.templates.forEach(function(t) {
                    e.existingTemplates.push(t.name)
                })
            }), e.createTemplate = function(i, o) {
                if ((i = i || window.event).preventDefault(), r.chartTemplates()) return !1;
                if (o.templateName.$invalid) return !1;
                var n = {
                    name: e.templateName
                };
                a.checkNameLength(n).then(function(e) {
                    document.getElementById("templateForm").submit()
                }, function(e) {
                    t.showError(e)
                })
            }
        }
        i.$inject = ["$scope", "MyBarchartModalService", "CustomChartTemplatesService", "interactiveChartTemplateApiFactory", "limitsService"], e.exports = i
    },
    "wg/N": function(e, t) {
        e.exports = '<div class=bc-media-overlay-classic-chart> <div class="modal-mobile-navigation hide-for-medium-up"> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class="modal-sidebar-left show-for-medium-up"> <div class=modal-sidebar-background></div> </div> <div class="modal-sidebar-right show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class=modal-share-group> <p>Share</p> <ul bc-social-share> <li class=facebook title="Share on Facebook"> <a bc-facebook-share data-url="[[ sharingUrl ]]"> <i class=bc-glyph-facebook></i> </a> </li> <li class=twitter title="Share on Twitter"> <a bc-twitter-share data-title=sharingTitle data-url="[[ sharingUrl ]]"> <i class=bc-glyph-twitter></i> </a> </li> <li class=linkedin title="Share on LinkedIn"> <a bc-linkedin-share data-title=sharingTitle data-description="" data-url="[[ sharingUrl ]]"> <i class=bc-glyph-linkedin></i> </a> </li> <li class=google-plus title="Share on Google+"> <a bc-gplus-share data-url="[[ sharingUrl ]]"> <i class=bc-glyph-google-plus></i> </a> </li> <li class=email title="Share via Email"> <a href="mailto:?body=[[ sharingUrl ]]"> <i class=bc-glyph-envelope-o></i> </a> </li> <li class=print title=Print> <a bc-print-share data-container-id=bcModalFlipchartContent> <i class=bc-glyph-print></i> </a> </li> </ul> </div> <div class=modal-inner> <div class=modal-content> <div class=bc-flipchart__title> <a target=_self class=bc-flipchart__title-link href="[[ flipChartSymbolIntChartUrl ]]">[[ currentSymbol.symbolName | limitTo:35 ]]</a> <strong class="bc-flipchart__study-name right"> [[ chartData.title ]] </strong> </div> <div class=bc-media-overlay-classic-chart__price-data> <span class=text-uppercase>[[ chartData.direction ]] Price:</span> <strong>[[ chartData.price ]]</strong> on <span>[[ chartData.date ]]</span> <strong class=text-uppercase data-ng-class="{\'up\': chartData.action === \'buy\', \'down\': chartData.action === \'sell\'}">[[ chartData.action ]]</strong> </div> <div data-ng-if=!dataLoading> <interactive-chart data-current-symbol=currentSymbol data-full-screen=false data-flip-chart-mode=true data-chart-init-settings=chartSettings></interactive-chart> </div> </div> </div> </div> '
    },
    wgoC: function(e, t, a) {
        "use strict";

        function i(e, t) {
            var a = {
                    IV: function() {
                        return "IV(16750848)"
                    }
                },
                i = {
                    IV: function(e, t) {
                        return t
                    }
                };
            return {
                convertStudyToString: function(e, t) {
                    if (void 0 === e.name || void 0 === e.code) throw new Error("Study must have the following properties: name and properties");
                    e.parameters = e.parameters || [];
                    var i = "";
                    if (i += t || e.name, a.hasOwnProperty(i.toUpperCase())) return i = a[i.toUpperCase()](e);
                    if (e.parameters.length > 0) {
                        i += " (";
                        var r = [];
                        e.parameters.forEach(function(e) {
                            e.hasOwnProperty("default") && r.push(e.default)
                        }), i += r = r.join(","), i += ")"
                    }
                    return i
                },
                convertFromStringToStudy: function(a) {
                    var r = a.substr(0, ~a.indexOf("(") ? a.indexOf("(") : a.length),
                        o = e.find(t.studies, function(e) {
                            return e.code === r
                        }),
                        n = o ? angular.copy(o) : null;
                    if (n) return i.hasOwnProperty(n.code.toUpperCase()) ? i[n.code.toUpperCase()](a, n) : (~a.indexOf("(") && ~a.indexOf(")") && a.substring(a.indexOf("(") + 1, a.indexOf(")")).split(",").forEach(function(e, t) {
                        n.parameters[t] && n.parameters[t].hasOwnProperty("default") && (n.parameters[t].default = e)
                    }), n);
                    return null
                }
            }
        }
        i.$inject = ["_", "technicalChartStudies"], e.exports = i
    },
    "wh/I": function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            e.contactData = angular.copy(t), e.saveModalData = function() {
                i.updateContactInfo(e.contactData).then(function(t) {
                    a.close({
                        response: t,
                        data: e.contactData
                    })
                })
            }, e.closeModal = function() {
                a.close()
            }
        }
        i.$inject = ["$scope", "contactData", "$modalInstance", "barchartPremierService"], e.exports = i
    },
    woVx: function(e, t) {
        e.exports = '<div class=bc-control-widget-inner> <div class=flipchart-controller data-ng-show=!hiddenMenu> <span>Flipcharts<span>:</span></span> <div class=bc-toggle-flpcharts__row> <div class=input-radio> <input type=radio data-ng-model=flipchartVisibility data-ng-change=toggleFlipcharts(flipchartVisibility) name=flipchartVisibility value=1 id=bc-toggle-flpcharts-show-radio> <label for=bc-toggle-flpcharts-show-radio> Show <span></span> </label> </div> <div class=input-radio> <input type=radio data-ng-model=flipchartVisibility data-ng-change=toggleFlipcharts(flipchartVisibility) name=flipchartVisibility value=0 id=bc-toggle-flpcharts-hide-radio> <label for=bc-toggle-flpcharts-hide-radio> Hide <span></span> </label> </div> </div> </div> <div class="content-block markets" data-ng-class="{\'hide-me\': hiddenMenu}" data-ng-if="activeTab === \'markets\'"> <bc-markets-table data-content=content></bc-markets-table> </div> <div class="content-block watchlist" data-ng-class="{\'hide-me\': hiddenMenu}" data-ng-if="activeTab === \'watchlist\'"> <bc-watchlists-table data-content=content></bc-watchlists-table> </div> <div class="content-block portfolio" data-ng-class="{\'hide-me\': hiddenMenu}" data-ng-if="activeTab === \'portfolio\'"> <bc-portfolios-table data-content=content></bc-portfolios-table> </div> <div class="content-block mycharts" data-ng-class="{\'hide-me\': hiddenMenu}" data-ng-if="activeTab === \'mycharts\'"> <my-charts-table data-selected-chart=selectedMyChart></my-charts-table> </div> </div>'
    },
    wpOF: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    width: "=",
                    positive: "="
                },
                template: a("Okc7")
            }
        }
        i.$inject = [], e.exports = i
    },
    wtSk: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = e.API_URL + "/watchlist";
            return {
                organiseWatchlists: function(e, r, o) {
                    return a.call(i + "/organize", t.POST, {
                        order: e,
                        delete: r,
                        rename: o
                    })
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider"], e.exports = i
    },
    wzub: function(e, t) {
        e.exports = '<div class="bc-screener__toolbar bottom-toolbar"> <span class=bc-screener__toolbar-title> Add a Filter: </span> <div class="bc-dropdown filter bc-screener__toolbar-select bc-screener__select-level-0"> <select name=selectFilter data-ng-class="{\'selection\': selectFilter}" data-ng-model=selectFilter data-ng-options="item.title for item in filteredFilterItems"> <option class=bc-screener__select-empty-option value="">(select)</option> </select> </div> <button class="bc-button dark-blue add bc-screener__add-filter-button" data-ng-click=addFilter() data-ng-disabled=!selectFilter>Add</button> <div class=bc-screener__premier-text data-ng-hide=isPremier>Additional Filters available for Barchart Premier members. <a target=_self data-ng-href="[[ routes[\'my.barchartPremier\'] ]]?ref=advOptions">First Month Free - Learn More</a></div> </div>'
    },
    "x+SF": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o) {
            var n = i.getUserData();
            e.portfolio = a, e.portfolios = r.filter(n.portfolios, function(e) {
                return e.id !== a.portfolioId
            }), e.updatingPortfolio = !1, e.portfolioRoute = window.config.routes["my.portfolio"], e.cash = e.portfolios[0].cash, e.newPortfolio = e.portfolios[0].id, e.adjust_cash = "0", e.cancel = function() {
                t.dismiss()
            }, e.change = function(t) {
                e.error = !1, e.adjust_cash = t
            }, e.moveTo = function() {
                e.updatingPortfolio = !0, o.transaferTransaction(e.portfolio.transactionId, e.portfolio.portfolioId, {
                    adjust_cash: e.adjust_cash,
                    new_portfolio: e.newPortfolio
                }).then(function() {
                    t.close()
                }, function(t) {
                    e.updatingPortfolio = !1, e.error = t.error.message
                })
            }, e.changeCash = function(t) {
                e.cash = t.cash, e.newPortfolio = t.id
            }
        }
        i.$inject = ["$scope", "$modalInstance", "portfolio", "authService", "_", "portfolioApiFactory"], e.exports = i
    },
    x33O: function(e, t, a) {
        "use strict";

        function i(e, t, i, r, o, n, s, l, c, d, u, p, m, h, g, f) {
            e.showPrice = !0, e.showNews = o.symbolEquitityValidate(), e.$modalInstance = t, e.symbol = o.getData().symbol, e.props = r.props, e.isPremier = u.getUserData().is_premier, e.premierErrorType = null, e.submitProcess = !1, e.errors = {
                alertNewsEmpty: !1,
                operandInvalidInPremierAlert: !1,
                operandInvalidAlert: !1
            };
            var b = c.getAlert();
            e.alertModel = new s.AlertModel, e.conditionModel = new s.AlertConditionModel, e.isPremier && (e.conditions = [], e.conditions.push(e.conditionModel)), e.alertIsNew = !0, e.symbolHasNewsAlert = !1;
            var v = o.getSymbolAlerts(e.symbol);
            if (e.symbolHasNewsAlert = o.hasNewsAlert(v), e.allFeedsSelected = !0, e.newsFeedsCheckboxes = a("/25k"), c.hasAlert()) {
                if (e.alertIsNew = !1, l.merge(e.alertModel, b), "price" === e.alertModel.alert_type && (e.isPremier ? e.conditions = b.conditions.map(function(e) {
                        return new s.AlertConditionModel(e)
                    }) : l.merge(e.conditionModel, b.conditions.shift())), "news" === e.alertModel.alert_type) {
                    e.allFeedsSelected = !0;
                    var y = b.conditions[0].operator.operand;
                    e.newsFeedsCheckboxes.forEach(function(t) {
                        t.feeds.forEach(function(t) {
                            t.forEach(function(t) {
                                ~y.indexOf(t.feed) ? t.selected = !0 : e.allFeedsSelected = !1
                            })
                        })
                    })
                }
                c.clearAlert()
            } else e.alertModel.alert_type = "price", 1 === u.getUserData().subscription && v.every(function(t) {
                if ("price" === t.alert_type) return e.showPrice = !1, e.alertModel.alert_type = "news", e.conditionModel.property.property_id = r.props.FEED, e.conditionModel.operator.operator_id = r.oprs.CONTAINED, !1
            });

            function w(a) {
                e.submitProcess = !1, t.close(), d && "function" == typeof d.onCreate ? d.onCreate(a) : n.openModalSymbolAlertsList()
            }

            function C(t, a) {
                i.createAlert(t, a).then(function(e) {
                    setTimeout(function() {
                        i.enableAlert(e)
                    }, 0), o.addSymbolAlert(a, e), w(e)
                }, function() {
                    e.submitProcess = !1
                })
            }

            function S(t, a) {
                i.editAlert(t).then(function(e) {
                    setTimeout(function() {
                        i.enableAlert(e)
                    }, 0), o.editSymbolAlert(a, t, e), void 0 !== d && "function" == typeof d.onEdit && d.onEdit(e), w(e)
                }, function() {
                    e.submitProcess = !1
                })
            }
            e.conditionModel.property.target.identifier = e.symbol, e.setAlertType = function(t) {
                g(e.errors), e.alertModel.alert_type = t
            }, e.cancel = function() {
                if (t.close(), void 0 === d || "function" != typeof d.onCancel) {
                    var e = p.$on("getSymbolData", function() {
                        p.$broadcast("setSymbolData", o.getData()), e()
                    });
                    n.openModalSymbolAlertsList(d)
                } else d.onCancel()
            }, e.activate = function(t) {
                if (!e.submitProcess) switch (e.submitProcess = !0, g(e.errors), i.getPublisherTypeDefaults().then(function(e) {
                    var t, a = !1;
                    Object.keys(e).forEach(function(i) {
                        e[i].active_alert_types.length && e[i].default_recipient && (a = !0), "email" === e[i].transport && (t = e[i])
                    }), !a && t && (t.default_recipient = u.getUserData().email, t.active_alert_types = ["price", "news"], i.assignPublisherTypeDefault(t))
                }), e.alertModel.alert_type) {
                    case "price":
                        e.activatePriceAlert(t);
                        break;
                    case "news":
                        e.activateNewsAlert()
                }
            }, e.activatePriceAlert = function(t) {
                if (e.showPremierError = !1, t.$invalid) e.submitProcess = !1;
                else {
                    if (e.isPremier) {
                        e.errors.operandInvalidInPremierAlert = !1, e.errors.operandInvalidAlert = !1;
                        var a = h.validateConditions(e.conditions);
                        if (a.hasErrors) return e.premierErrorType = a.errorName, e.$broadcast(m.ON_CONDITION_VALIDATE), e.showPremierError = !0, e.errors.operandInvalidInPremierAlert = e.showPremierError && "operandInvalid" !== e.premierErrorType, e.errors.operandInvalidAlert = e.showPremierError && "operandInvalid" === e.premierErrorType, e.submitProcess = !1, !1;
                        e.conditions.forEach(function(e) {
                            delete e.name, e.operator.operand_display = void 0, "percent" === e.property.type && (e.operator.operand = (e.operator.operand / 100).toString()), e.operator.modifiers && 1 === e.operator.modifiers.length && (e.operator.modifiers[0].value = (e.operator.modifiers[0].value / 100).toString())
                        }), e.alertModel.conditions = e.conditions, e.alertModel.name = ""
                    } else e.alertModel.conditions = [], delete e.conditionModel.name, e.alertModel.conditions.push(e.conditionModel), e.alertModel.name = "";
                    var i = f.beforeSave(e.alertModel);
                    e.alertModel.alert_id && 36 === e.alertModel.alert_id.length ? S(i, e.symbol) : C(i, e.symbol)
                }
            }, e.activateNewsAlert = function() {
                e.alertModel.conditions = [];
                var t = new s.AlertConditionModel;
                if (t.property.property_id = r.props.FEED, t.property.target.identifier = e.symbol, t.operator.operator_id = r.oprs.CONTAINED, t.operator.operand = [], e.newsFeedsCheckboxes.forEach(function(e) {
                        e.feeds.forEach(function(e) {
                            e.forEach(function(e) {
                                e.selected && t.operator.operand.push(e.feed)
                            })
                        })
                    }), !t.operator.operand.length) return e.errors.alertNewsEmpty = !0, void(e.submitProcess = !1);
                e.alertModel.conditions.push(t), e.alertModel.name = "News Alert", e.alertModel.alert_id && 36 === e.alertModel.alert_id.length ? S(e.alertModel, e.symbol) : C(e.alertModel, e.symbol)
            }
        }
        i.$inject = ["$scope", "$modalInstance", "alertManagerService", "alertProperties", "alertsSymbolDataFactory", "alertsModalFactory", "alertModelFactory", "_", "alertsCurrentAlertService", "customEvents", "authService", "$rootScope", "events", "alertsUtilsService", "bcResetErrorsFn", "alertPrepareService"], e.exports = i
    },
    x3yd: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e) {
                return e.charAt(0).toUpperCase() + e.slice(1)
            }
        }
    },
    x4aU: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o = e.API_URL + "/watchlist";
            return {
                saveWatchlist: function(e) {
                    var i = o + "/" + e.id;
                    return a.call(i, t.PUT, e, {
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    })
                },
                createWatchlist: function(e) {
                    var n = i.defer();
                    return a.call(o, t.POST, e, {
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    }).then(function(e) {
                        var t = r.getWatchlists();
                        t.push(e.data[0]), r.setWatchlists(t), n.resolve(e)
                    }, function(e) {
                        n.reject(e)
                    }), n.promise
                },
                getSymbolNames: function(i) {
                    var r = Array.isArray(i) ? i.join() : i,
                        o = e.API_URL + "/quotes/get?fields=symbol,symbolName,symbolRoot&symbols=" + r;
                    return a.call(o, t.GET)
                },
                validateWatchlistSymbols: function(e) {
                    var i = "/symbols/validate?symbols=" + (Array.isArray(e) ? e.join() : e);
                    return a.call(i, t.GET)
                },
                deleteWatchlist: function(e) {
                    var i = o + "/" + e;
                    return a.call(i, t.DELETE, {}, {
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    })
                },
                updateWatchlistSymbols: function(e, i) {
                    var r = o + "/" + i + "/symbols";
                    return a.call(r, t.POST, {
                        symbols: e
                    }, {
                        headers: {
                            Accept: "application/json",
                            "Content-Type": "application/json"
                        }
                    })
                }
            }
        }
        i.$inject = ["apiConfig", "httpVerbs", "dataProvider", "$q", "authService"], e.exports = i
    },
    xC49: function(e, t) {
        e.exports = '<div class="modal-content-wrapper bc-premier__form-modal form-modal-card"> <div class=form-close-wrapper> <i data-ng-click=closeModal() class="bc-glyph-times form-close"></i> </div> <form class=bc-form name=editCard novalidate data-ng-submit=saveModalData(editCard)> <div class=input-inner-wrapper> <label for=premier_cardholder>Cardholder:</label> <input type=text id=premier_cardholder name=ccname class=rounded data-ng-class="{\'invalid\': editCard.$submitted && editCard.ccname.$invalid}" data-ng-model=cardData.ccname required> </div> <div class=input-inner-wrapper> <label for=premier_card_type>Card Type:</label> <div class="bc-dropdown styled arrow-black" data-ng-class="{\'invalid\': editCard.$submitted && editCard.cctype.$invalid}"> <select id=premier_card_type name=cctype data-ng-model=cardData.cctype required> <option value="" disabled=disabled selected=selected>Select One</option> <option data-ng-repeat="type in cardTypes" value="[[ type ]]">[[ type ]]</option> </select> </div> </div> <div class=input-inner-wrapper> <label for=premier_card_number>Card Number:</label> <input type=text id=premier_card_number name=ccnum class=rounded data-ng-class="{\'invalid\': editCard.$submitted && editCard.ccnum.$invalid}" data-ng-model=cardData.ccnum data-ng-pattern="cardData.cctype === \'AMEX\' ? \'[0-9]{15}\' : \'[0-9]{16}\'" required> </div> <div class=input-inner-wrapper> <label>Expiration Date:</label> <div class="bc-dropdown styled arrow-black bc-premier__select-card-month" data-ng-class="{\'invalid\': editCard.$submitted && editCard.ccexpMonth.$invalid}"> <select name=ccexpMonth data-ng-model=cardData.ccexpMonth required> <option value="" disabled=disabled selected=selected>Select One</option> <option data-ng-repeat="month in cardMonths" value="[[ month ]]" data-ng-disabled=isMonthDisabled(month)> [[ month ]] </option> </select> </div> <div class="bc-dropdown styled arrow-black bc-premier__select-card-year" data-ng-class="{\'invalid\': editCard.$submitted && editCard.ccexpYear.$invalid}"> <select name=ccexpYear data-ng-model=cardData.ccexpYear required> <option value="" disabled=disabled selected=selected>Select One</option> <option data-ng-repeat="year in cardYears" value="[[ year.code ]]" data-ng-disabled=isYearDisabled(year.code)> [[ year.description ]] </option> </select> </div> </div> <div class=input-inner-wrapper> <label for=premier_card_cid>CID:</label> <input type=text name=ccvercode id=premier_card_cid class=rounded data-ng-class="{\'invalid\': editCard.$submitted && editCard.ccvercode.$invalid}" data-ng-model=cardData.ccvercode data-bc-ccard-cvv=cardData.cctype data-hj-masked required> </div> <div class=input-help-wrapper> Visa/MC/Discover - 3 digits on back<br/> AmEx - 4 digits on front </div> <div class=form-buttons> <a class="bc-button grey save" data-ng-click=closeModal()>Cancel</a> <button type=submit class="bc-button light-blue save">Save</button> </div> <div class=form-errors data-ng-if="(editCard.$submitted && editCard.$invalid) || editCardFormError.ccard"> <span data-ng-if=editCard.$error.required> All fields are required. Please complete the form above. </span> <span data-ng-if="(editCard.ccnum.$invalid && !editCard.ccnum.$error.required && editCard.ccnum.$error.pattern)\n                    || (editCard.ccvercode.$invalid && !editCard.ccvercode.$error.required && editCard.ccvercode.$error.cvvValid)"> The credit card information entered is invalid. Please correct the errors and resubmit. </span> <span data-ng-if=editCardFormError.ccard> The credit card information entered was rejected by the issuer. Please correct the errors and resubmit. If the problem persists <a href=mailto:support@barchart.com>contact us</a>. </span> </div> </form> </div>'
    },
    xD5U: function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <h5>[[ errorTitle ]]</h5> <p>[[ errorDescription ]]</p> <div> <a class="bc-button ok light-blue" data-ng-click=cancel()>Ok</a> </div> </div>'
    },
    xDN7: function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = a("Xxa5"),
            r = a.n(i);

        function o(e, t) {
            var a = null,
                i = function(i, o) {
                    var n, s, l = Barchart.RealtimeWidgets.Charts;
                    i.fetch = (n = r.a.mark(function e(a, i) {
                        var o, n;
                        return r.a.wrap(function(e) {
                            for (;;) switch (e.prev = e.next) {
                                case 0:
                                    return (o = new Headers).append("X-XSRF-TOKEN", t.get("XSRF-TOKEN")), e.next = 4, fetch("/proxies/" + a + i, {
                                        headers: o
                                    });
                                case 4:
                                    return n = e.sent, e.next = 7, n.text();
                                case 7:
                                    return e.abrupt("return", e.sent);
                                case 8:
                                case "end":
                                    return e.stop()
                            }
                        }, e, this)
                    }), s = function() {
                        var e = n.apply(this, arguments);
                        return new Promise(function(t, a) {
                            return function i(r, o) {
                                try {
                                    var n = e[r](o),
                                        s = n.value
                                } catch (e) {
                                    return void a(e)
                                }
                                if (!n.done) return Promise.resolve(s).then(function(e) {
                                    i("next", e)
                                }, function(e) {
                                    i("throw", e)
                                });
                                t(s)
                            }("next")
                        })
                    }, function(e, t) {
                        return s.apply(this, arguments)
                    });
                    var c = o ? l.MarketDataFeed : l.BarchartSiteDataFeed;
                    return a = l.initFeed(c, i), o && (a.connection = new l.Connection, a.connection.connect(e.config.services.jerq_ws.host, "wwwchartshigh_rt", "wwwcharts2high_rt")), a
                };
            return {
                getFeed: function(e, t) {
                    return e = e || {}, a || i(e, t)
                },
                getTaxonomies: function() {
                    return Barchart.RealtimeWidgets.Charts.getTaxonomies()
                }
            }
        }
        o.$inject = ["$window", "$cookies"], t.default = o
    },
    xDb8: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return function(e, t, a) {
                if (void 0 !== e) switch ((a = a || "after").toLowerCase()) {
                    case "before":
                        e = t + e;
                        break;
                    case "after":
                        e += t;
                        break;
                    default:
                        throw new Error("third parameter of addSymbol filter is optional and could accept two values: before or after.")
                }
                return e
            }
        }
    },
    xGPI: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    form: "=",
                    errors: "=",
                    messages: "="
                },
                controller: ["$scope", "$sce", function(t, a) {
                    t.$sce = a, t.errorMessages = {
                        email: "Enter a valid email.",
                        not_found: e.config.errors.auth.not_found,
                        incomplete: e.config.errors.auth.incomplete,
                        invalidOneword: "Only one value is allowed."
                    }, void 0 !== t.messages && Object.keys(t.messages).forEach(function(e) {
                        t.errorMessages.hasOwnProperty(e) && (t.errorMessages[e] = t.messages[e])
                    })
                }],
                template: a("a398")
            }
        }
        i.$inject = ["$window"], e.exports = i
    },
    xKFM: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                restrict: "A",
                link: function(i, r, o) {
                    o.close ? r.on("click", function(i) {
                        e.isLoggedIn() && o.logout ? t.call("/logout", a.GET).then(function() {
                            window.open("", "_self", "").close()
                        }) : window.open("", "_self", "").close()
                    }) : r.on("click", function(e) {
                        var t = ["height=" + screen.height, "width=" + screen.width, "fullscreen=yes", "resizable=yes", "scrollbars=yes"].join(",");
                        window.open(o.openInNewWindow, "", t).moveTo(0, 0)
                    })
                }
            }
        }
        i.$inject = ["authService", "dataProvider", "httpVerbs"], e.exports = i
    },
    xLQv: function(e, t) {
        e.exports = '<div class=bc-interactive-chart-template-drop-down> <a class=bc-dropdown-flexible-toggle data-ng-if=$ctrl.isAuthenticated data-ng-click=$ctrl.openApplyTemplateModal()> <span class=ng-binding>[[ $ctrl.label ]]</span> <i class="bc-glyph-chevron-down bc-dropdown-flexible-arrow"></i> </a> <a class=bc-dropdown-flexible-toggle data-ng-if=!$ctrl.isAuthenticated data-bc-modal-login=icharts data-stay-on-page=true data-login-callback=$ctrl.saveChartCallback> <span class=ng-binding>[[ $ctrl.label ]]</span> <i class="bc-glyph-chevron-down bc-dropdown-flexible-arrow"></i> </a> </div> '
    },
    xM60: function(e, t) {
        e.exports = "<div class=interactive-chart-scrollbar-feature-ads data-ng-hide=$ctrl.hideContent> <div class=modal-close-wrapper data-ng-click=$ctrl.close()> <i class=bc-glyph-times></i> </div> <p> Chart Scrollbar/Navigator is now found in Settings. Zoom the bars on the chart by holding the Shift key and scrolling with your mouse wheel over the chart. </p> </div>"
    },
    xQMk: function(e, t) {},
    xXnz: function(e, t) {
        e.exports = '<div> <div class="modal-mobile-navigation hide-for-medium-up"> <div class=modal-prev> <a data-ng-href="[[ flipChartPrevSymbol ]]" data-ng-if="flipChartPrevSymbol && !dataLoading"> <i class=bc-glyph-chevron-left></i> Previous </a> <span data-ng-if="!flipChartPrevSymbol || dataLoading"> <i class=bc-glyph-chevron-left></i> Previous </span> </div> <div class=modal-next> <a data-ng-href="[[ flipChartNextSymbol ]]" data-ng-if="flipChartNextSymbol && !dataLoading"> Next <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if="!flipChartNextSymbol || dataLoading"> Next <i class=bc-glyph-chevron-right></i> </span> </div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> </div> <div class="modal-sidebar-left show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-prev> <a data-ng-href="[[ flipChartPrevSymbol ]]" data-ng-if="flipChartPrevSymbol && !dataLoading"> <i class=bc-glyph-chevron-left></i> </a> <span data-ng-if="!flipChartPrevSymbol || dataLoading"> <i class=bc-glyph-chevron-left></i> </span> </div> </div> <div class="modal-sidebar-right show-for-medium-up"> <div class=modal-sidebar-background></div> <div class=modal-close> <span data-ng-click=hideOverlayModal()> <i class=bc-glyph-times></i> </span> </div> <div class=modal-next> <a data-ng-href="[[ flipChartNextSymbol ]]" data-ng-if="flipChartNextSymbol && !dataLoading"> <i class=bc-glyph-chevron-right></i> </a> <span data-ng-if="!flipChartNextSymbol || dataLoading"> <i class=bc-glyph-chevron-right></i> </span> </div> </div> <div class=modal-share-group data-ng-if="!dataLoading && flipChartSymbol"> <p>Share</p> <barchart-social-share data-url="[[ flipChartSharingUrl ]]" data-title="[[ flipChartSharingTitle ]]" data-container-id=bcModalFlipchartContent></barchart-social-share> </div> <div class=modal-inner> <div class=modal-content> <div class="bc-flipchart cot-chart"> <div class=bc-flipchart__symbols-scroller> <div data-ng-if=symbols.length> <bc-scrollbar> <ul class=bc-flipchart__scroller-list> <li class=bc-flipchart__scroller-item data-ng-class="{\'active\': symbolData.symbol === flipChartSymbol.symbol}" data-ng-click=loadChartForSymbol(symbolData) data-ng-repeat="symbolData in symbols" data-scroll-item-id="[[ symbolData.symbol ]]">[[ symbolData.symbol ]]</li> </ul> </bc-scrollbar> </div> </div> <div class=throbber-wrapper data-ng-show=dataLoading> <img alt="Loading, please wait..." src=/img/throbber.gif /> </div> <div id=bcModalFlipchartContent data-ng-if=flipChartSymbol> <div class="bc-flipchart__header header-interactive hide-for-print" data-ng-show=!dataLoading> <div class=bc-flipchart__title> <a target=_self class=bc-flipchart__title-link href="[[ flipChartSymbolIntChartUrl ]]" data-ng-click=closeThisModal(flipChartSymbolIntChartUrl)>[[ flipChartSymbol.symbolName | limitTo:35 ]]</a> <a class=add-to-watchlist data-ng-click=addToWatchlist()><i class=bc-glyph-star></i> <span>Watchlist</span></a> <div class="bc-flipchart__study-name right"> [[ options.title ]] </div> <div class="column small-12 medium-2 text-right right" data-ng-hide=dataLoading> <a target=_self class="bc-button white-with-border extra" href="[[ flipChartSymbolUrl ]]"> Go to COT Chart </a> </div> </div> </div> <interactive-chart data-current-symbol=flipChartSymbol data-full-screen=false data-flip-chart-mode=true data-chart-init-settings=chartSettings></interactive-chart> </div> <div class="bc-flipchart__text-block clearfix" data-ng-show=!dataLoading> <div class=text-block__item> <h5>The Commitment of Traders Report</h5> <div class=report-list> <p class=red-line> <span></span>Commercials, consisting of Producer/Merchant/Processor/User and Swap Dealers (<span>Red Line</span>)</p> <p class=green-line> <span></span>Non-Commercials or Large Speculators, consisting of Managed Money and Other Reportables (<span>Green Line</span>)</p> <p class=blue-line> <span></span>Small Speculators (<span>Blue Line</span>)</p> </div> </div> <div data-ng-show=!showLegendTTF() class=text-block__item> <h5>The Commitment of Traders Disaggregated Report</h5> <div class=report-list> <p class=red-line><span></span>Commercials - Producer/Merchant/Processor/User (<span>Red Line</span>)</p> <p class=green-line><span></span>Commercials - Swap Dealers (<span>Green Line</span>)</p> <p class=blue-line><span></span>Non-Commercial - Managed Money (<span>Blue Line</span>)</p> <p class=orange-line><span></span>Non-Commercials - Other Reportables (<span>Orange Line</span>)</p> </div> </div> <div data-ng-show=showLegendTTF() class=text-block__item> <h5>The Commitments of Traders Financial Traders (TFF) Report</h5> <div class=report-list> <p class=red-line><span></span>Dealer Intermediary (<span>Red Line</span>)</p> <p class=green-line><span></span>Asset Manager/Institutional (<span>Green Line</span>)</p> <p class=blue-line><span></span>Leveraged Funds (<span>Blue Line</span>)</p> <p class=orange-line><span></span>Other Reportables (<span>Orange Line</span>)</p> </div> </div> </div> </div> </div> </div> </div> '
    },
    xbhX: function(e, t, a) {
        "use strict";

        function i(e) {
            return {
                restrict: "A",
                scope: {
                    market: "@"
                },
                link: function(t, a, i) {
                    a.bind("click", function() {
                        e.getHref(t.market).then(function(e) {
                            e.href && (window.location.href = e.href)
                        })
                    })
                }
            }
        }
        i.$inject = ["changeMarketFactory"], e.exports = i
    },
    xdA6: function(e, t, a) {
        "use strict";
        var i = "webinarNewsletter";
        angular.module(i, []).controller("webinarNewsletterCtrl", a("tXGS"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    xg0C: function(e, t) {
        e.exports = '<div class="interactive-chart-field-minutes bc-form"> <label class=interactive-chart-field-minutes__label>Mins.</label> <div class=interactive-chart-field-minutes__fieldset> <form name=interactiveChartFormMinutes data-ng-submit=updateAggregation(interactiveChartFormMinutes) novalidate autocomplete=off> <input name=fieldInput type=number data-ng-model=settingsAggregation.size data-ng-blur=updateAggregation(interactiveChartFormMinutes) min=1 max=999 class=js-chart-form-minutes data-ng-disabled="settingsAggregation.unit !== \'Intraday\'" data-ng-show="settingsAggregation.unit === \'Intraday\'"/> </form> <input type=number disabled=disabled data-ng-show="settingsAggregation.unit !== \'Intraday\'"/> </div> </div>'
    },
    xhG0: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {},
                bindToController: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    var t = this;
                    t.filterData.signal = t.filterData.signal || {}, t.filterData.signal.value = t.filterData.signal.value || t.filters.signal.value[0].key, t.filterData.percent = t.filterData.percent || {
                        value: ""
                    }, t.filterData.percent.operator = t.filterData.percent.operator || t.filters.percent.operator[0].key;
                    var a = null;
                    e.$watch(function() {
                        return t.filterData.percent.operator
                    }, function() {
                        "between" === t.filterData.percent.operator ? t.filterData.percent.value = Array.isArray(t.filterData.percent.value) ? t.filterData.percent.value : ["", ""] : t.filterData.percent.value = Array.isArray(t.filterData.percent.value) ? null : t.filterData.percent.value
                    }), e.$watch(function() {
                        return t.filterData.signal.value
                    }, function() {
                        "h" === t.filterData.signal.value ? (a = t.filterData.percent, delete t.filterData.percent) : null !== a && (t.filterData.percent = a, a = null)
                    })
                }],
                controllerAs: "$ctrl",
                template: a("2Smn")
            }
        }
        i.$inject = [], e.exports = i
    },
    xjiV: function(e, t) {
        e.exports = '<div class="bc-screener__range-selector-helper clearfix"> <div class=bc-screener__range-selector-helper-item data-ng-repeat="option in helperData" data-ng-click=updateFilter($index) data-ng-class="{\'active\': option.active, \'no-description\': !option.description}"> <div class=bc-screener__range-selector-helper-item-title>[[ option.title ]]</div> <div class=bc-screener__range-selector-helper-item-value>[[ option.description ]]</div> </div> </div>'
    },
    xqvM: function(e, t) {
        e.exports = "<div class=bc-average-rate-map> <highchart data-ng-if=chartConfig data-config=chartConfig></highchart> </div>"
    },
    xvTa: function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <h5 class=modal-title>Please Verify Your Mobile Number</h5> <div class=modal-content-form-wrapper-input> <p>You must add a mobile phone number before you can receive alerts via text message</p> <div> <button type=button class="bc-button save light-blue" data-ng-click=close()>OK</button> </div> </div> </div>'
    },
    xxp8: function(e, t) {
        e.exports = "<div class=bc-screener__common-filter-range-date> <span>Range:</span> <div class=bc-screener__common-datepicker> <input type=text autocomplete=off class=bc-screener__common-filter-range-field data-ng-model=formData[0] placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-bs-datepicker/> <i class=bc-glyph-calendar></i> </div> <span class=bc-screener__common-filter-range-separator>-</span> <div class=bc-screener__common-datepicker> <input type=text autocomplete=off class=bc-screener__common-filter-range-field data-ng-model=formData[1] placeholder=MM/DD/YYYY data-date-format=MM/dd/yyyy data-bs-datepicker/> <i class=bc-glyph-calendar></i> </div> </div>"
    },
    y6Uc: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            return {
                restrict: "A",
                scope: {
                    options: "=",
                    symbol: "=",
                    defaultPlot: "@"
                },
                link: function(s, l, c) {
                    var d = [],
                        u = s.options || {},
                        p = !1,
                        m = c.bcFlipcharts || "login";
                    u.hideSymbolsScroller = c.hideSymbolsScroller, u.authNotRequired = c.authNotRequired, c.symbol && c.symbolType && (u.symbol = {
                        symbol: c.symbol,
                        symbolType: c.symbolType,
                        chartSettings: {}
                    }, c.volume && (u.symbol.chartSettings.volume = c.volume), c.density && (u.symbol.chartSettings.density = c.density), c.plot && (u.symbol.chartSettings.plot = c.plot), c.title && (u.symbol.symbolName = c.title)), s.$on("paginationEnabled", function() {
                        p = !0
                    }), s.$on("reloadPortfolioData", function() {
                        p = !0
                    }), l.bind("click", function() {
                        if (u.authNotRequired || t.isLoggedIn())
                            if (c.bcDownloadOrder ? s.symbols = r.getFlipchartsData(JSON.parse(c.bcDownloadOrder), c.symbolKey) : p || c.symbolKey || (s.symbols = r.getFlipchartsData(["default"], c.symbolKey)), u.hideSymbolsScroller || s.symbols) {
                                if (s.symbols && (d = s.symbols, s.symbols = !1), !d.length && !s.symbol && !u.symbol) return n.success("No symbols available for Flipcharts."), !1;
                                e.$broadcast("bc-modal-show-flipchart", {
                                    symbols: d,
                                    options: u,
                                    symbol: s.symbol || u.symbol || !1,
                                    defaultPlot: s.defaultPlot
                                })
                            } else i.getSymbolsList(c.symbolKey).then(function(t) {
                                var a = [];
                                if ((d = t.data[0].data).forEach(function(e) {
                                        c.symbolKey && e[c.symbolKey] && (e.symbol = e[c.symbolKey]), e.symbol && "~" !== e.symbol && "BLANK" !== e.symbol && !o.find(a, "symbol", e.symbol) && a.push(e)
                                    }), !a.length) return n.success("No symbols available for Flipcharts."), !1;
                                e.$broadcast("bc-modal-show-flipchart", {
                                    symbols: a,
                                    options: u,
                                    symbol: s.symbol || u.symbol || !1,
                                    defaultPlot: s.defaultPlot,
                                    pagination: {
                                        currentPage: t.currentPage,
                                        totalPages: t.totalPages
                                    }
                                })
                            });
                        else a.goToLogin(m)
                    })
                }
            }
        }
        i.$inject = ["$rootScope", "authService", "authRouteService", "barchartTableSymbolsListService", "datatableAllDataService", "_", "Notification"], e.exports = i
    },
    "y8+0": function(e, t, a) {
        "use strict";
        var i = "AnnualBalanceSheet";
        angular.module(i, []).directive("annualBalanceSheet", a("dvFY"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    y9C9: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i, r) {
                    var o, n, s, l, c, d, u, p = t.isTabletOnly(),
                        m = void 0 !== r.delayedId,
                        h = +r.offsetScrollY || 220,
                        g = +r.top || 120;
                    if (t.isMobileOnly()) o = r.bcImageMapTooltip, n = document.getElementById(o), angular.element(n).addClass("hide-hard");
                    else {
                        o = r.bcImageMapTooltip, n = document.getElementById(o), m && setTimeout(function() {
                            n = document.getElementById(o)
                        }, 0), s = r.imageClass;
                        var f = function() {
                                angular.element(n).addClass("hide")
                            },
                            b = function(t) {
                                t.touches ? (document.getElementsByClassName(s)[0].offsetHeight, t.touches[0].pageX, this.offsetParent.offsetLeft, t.touches[0].screenY, this.offsetParent.offsetTop, e(function() {
                                    angular.element(n).removeClass("hide")
                                }, 0)) : p && "touchstart" === t.type ? (u = +r.tooltipLeft || 20, (n = document.getElementById(o)).style.visibility = "hidden", l = document.getElementsByClassName(s)[0].getBoundingClientRect(), c = t.originalEvent.touches[0].clientX - l.left, d = window.scrollY || window.pageYOffset || document.documentElement.scrollTop, n.style.top = d > h ? g + "px" : l.top + 50 + "px", l.width / 2 < c ? n.style.left = l.left + u + "px" : n.style.left = l.left + l.width - 250 + "px", n.style.visibility = "visible") : (n = document.getElementById(o), u = +r.tooltipLeft || 40, l = document.getElementsByClassName(s)[0].getBoundingClientRect(), c = t.clientX - l.left, d = window.scrollY || window.pageYOffset || document.documentElement.scrollTop, n.style.top = d > h ? g + "px" : l.top + 50 + "px", l.width / 2 < c ? n.style.left = l.left + u + "px" : n.style.left = l.left + l.width - 250 + "px")
                            };
                        angular.element(document).on("touchstart", f), angular.element(document).on("mousemove touchstart", b), a.$on("$destroy", function() {
                            angular.element(document).off("mousemove touchstart", b), angular.element(document).off("touchstart", f)
                        })
                    }
                },
                $attrs: {
                    bcImageMapTooltip: "@",
                    imageClass: "@",
                    tabletOffset: "@",
                    delayedId: "@",
                    tooltipLeft: "=",
                    minScrollY: "@",
                    top: "@"
                }
            }
        }
        i.$inject = ["$timeout", "utils"], e.exports = i
    },
    yA4G: function(e, t) {
        e.exports = "<table class=bc-major-market-sectors-table> <thead> <tr> <th class=sector> <div class=sector-title-wrapper> [[ sectorsData.meta.field.name.symbolName ]] <span class=price-range-column-title> [[ sectorsData.meta.field.name.priceRange ]] </span> </div> </th> <th class=last-price> [[ sectorsData.meta.field.name.lastPrice ]] </th> <th class=\"heat-price today-price\"> [[ sectorsData.meta.field.name['percentChange' + timeFrame.postfix] ]] </th> <th class=\"price-range hide-for-medium-down show-for-print\"> [[ sectorsData.meta.field.name.priceRange ]] </th> </tr> </thead> <tbody data-ng-repeat=\"(itemKey, item) in sectorsData.data\" data-ng-class=\"itemKey === 0 ? 'major-index' : 'comparable-index'\" data-ng-class-even=\"'even'\"> <tr class=small-only-sector-prices-row> <td colspan=3 class=hide-for-print> <table> <tbody> <tr> <td colspan=3 class=sector> <div class=expand-button data-ng-if=isExpandable(item)> <i data-ng-class=\"expandedSector !== item ? 'bc-glyph-plus' : 'bc-glyph-minus'\" data-ng-click=showSectorGroups(item)></i> </div> <div class=title-wrapper> <a target=_self data-ng-href=\"[[ ::getLink(item, true) ]]\"> [[ item.symbolName ]] </a> </div> </td> </tr> <tr> <td class=sector-industries> <div> <span data-ng-if=isExpandable(item)> [[ item.groups.length ]] Industries </span> </div> </td> <td class=last-price> [[ item.lastPrice ]] </td> <td class=\"heat-price today-price print-only\" style=\"background-color:[[ item['percentChange' + timeFrame.postfix + 'Color'] ]]!important;opacity:[[ item['percentChange' + timeFrame.postfix + 'Opacity'] ]]!important\"> <span style=color:#fff!important;vertical-align:middle> [[ item['percentChange' + timeFrame.postfix] ]] </span> </td> <td class=\"heat-price today-price hide-for-print\"> <span data-ng-class=\"getValueClass(item['percentChange' + timeFrame.postfix])\"> [[ item['percentChange' + timeFrame.postfix] ]] </span> </td> </tr> </tbody> </table> </td> <td colspan=4 class=show-for-print style=\"border-left:1px solid #ccc!important\"> <table> <tbody> <tr> <td colspan=3 class=sector> <div class=title-wrapper> <a target=_self data-ng-href=\"[[ ::getLink(item) ]]\"> [[ item.symbolName ]] </a> </div> </td> <td rowspan=2 class=price-range style=text-align:center;width:50%> <major-market-sector-histogram></major-market-sector-histogram> </td> </tr> <tr> <td class=sector-industries> <div> <span data-ng-if=isExpandable(item)> [[ item.groups.length ]] Industries </span> </div> </td> <td class=last-price> [[ item.lastPrice ]] </td> <td class=\"heat-price today-price print-only\" style=\"background-color:[[ item['percentChange' + timeFrame.postfix + 'Color'] ]]!important;opacity:[[ item['percentChange' + timeFrame.postfix + 'Opacity'] ]]!important\"> <span style=color:#fff!important;vertical-align:middle> [[ item['percentChange' + timeFrame.postfix] ]] </span> </td> <td class=\"heat-price today-price hide-for-print\"> <span data-ng-class=\"getValueClass(item['percentChange' + timeFrame.postfix])\"> [[ item['percentChange' + timeFrame.postfix] ]] </span> </td> </tr> </tbody> </table> </td> </tr> <tr class=medium-up-sector-prices-row> <td class=sector> <div class=expand-button data-ng-if=isExpandable(item)> <i data-ng-class=\"expandedSector !== item ? 'bc-glyph-plus' : 'bc-glyph-minus'\" data-ng-click=showSectorGroups(item)></i> </div> <div class=title-wrapper> <a target=_self data-ng-href=\"[[ ::getLink(item, true) ]]\"> [[ item.symbolName ]] </a> <p data-ng-if=\"itemKey !== 0 && isExpandable(item)\"> [[ item.groups.length ]] Industries </p> </div> <major-market-sector-histogram></major-market-sector-histogram> </td> <td class=last-price> [[ item.lastPrice ]] </td> <td class=\"heat-price today-price\"> <span data-ng-if=\"itemKey === 0\" data-ng-class=\"getValueClass(item['percentChange' + timeFrame.postfix])\"> [[ item['percentChange' + timeFrame.postfix] ]] </span> <div data-ng-if=\"itemKey !== 0\" data-ng-style=\"{background: item['percentChange' + timeFrame.postfix + 'Color'], opacity: item['percentChange' + timeFrame.postfix + 'Opacity']}\"> <span>[[ item['percentChange' + timeFrame.postfix] ]]</span> </div> </td> <td class=\"price-range show-for-large-up\"> <major-market-sector-histogram></major-market-sector-histogram> </td> </tr> <tr class=expandable-area data-expandable-symbol=\"[[ item.symbol ]]\" data-ng-if=isExpandable(item)> <td colspan=3 class=\"small-medium-groups hide-for-print\"> <major-market-sector-groups></major-market-sector-groups> </td> <td colspan=4 class=\"small-medium-groups show-for-print\"> <major-market-sector-groups></major-market-sector-groups> </td> <td colspan=4 class=large-up-groups data-ng-if=!isMobileOrTablet()> <major-market-sector-groups></major-market-sector-groups> </td> </tr> </tbody> </table>"
    },
    yCFO: function(e, t, a) {
        "use strict";
        e.exports = {
            ON_SCREENER_CLEAR: "onScreenerClear",
            ON_SCREENER_APPLY_SAVED: "onScreenerApplySaved",
            ON_SCREENER_DELETE_FILTER: "onDeleteScreenerFilter",
            ON_SCREENER_APPLY_EMPTY_TEMPLATE: "onScreenerApplyEmptyTemplate",
            ON_TECHNICAL_CHART_DEFAULT_TEMPLATE_SET: "onTechnicalChartDefaultTemplateSet",
            ON_ALERT_CHANGED: "onAlertChanged",
            ON_ALERT_DELETED: "onAlertDeleted",
            ON_ALERT_CREATED: "onAlertCreated",
            ON_ALERT_TRIGGERED: "onAlertTriggered",
            ON_DROPDOWN_FLEXIBLE_CLOSE: "bcDropdownFlexibleClose",
            ON_INTERACTIVE_CHART_RESET: "onInteractiveChartReset",
            ON_INTERACTIVE_CHART_SET_PERIOD: "onInteractiveChartSetPeriod",
            ON_INTERACTIVE_CHART_SET_AGGREGATION: "onInteractiveChartSetAggregation",
            ON_ALERT_ERRORS: "onAlertErrors",
            ON_CONDITION_VALIDATE: "onConditionValidate",
            ON_INTERACTIVE_CHART_TEMPLATE_APPLIED: "onInteractiveChartTemplateApplied",
            ON_INTERACTIVE_CHART_COMPARISON_APPLIED: "onInteractiveChartComparisonApplied"
        }
    },
    yEQ8: function(e, t) {
        e.exports = '<div class=modal-content-wrapper> <div class=form-close-wrapper> <i class="bc-glyph-times form-close" data-ng-click=close()></i> </div> <h5>[[ rawData.symbolName ]] ([[ rawData.symbol ]])</h5> <div class=inner-content data-ng-show="tab === \'earnings\'"> <div class="header clearfix"> <h5>Earnings History - Surprises*</h5> <a class="bc-button white-with-border small right" target=_self data-ng-href="[[ link ]]">Full Earnings History</a> </div> <div class=earnings-table-content> <barchart-table-scroll> <table> <thead> <tr> <th></th> <th data-ng-repeat="period in periods"> <span class=text-nowrap>[[ period.title ]]</span> <span>[[ data[\'earningsDate\'+ period.key] ]]</span> </th> </tr> </thead> <tbody> <tr data-ng-repeat="row in rows" data-ng-class-even="\'odd\'"> <td class=text-left> <span>[[ row.title ]]</span> </td> <td data-ng-repeat="period in periods" data-ng-class="getClass(row, data[row.key + period.key])"> [[ data[row.key + period.key] ]] </td> </tr> </tbody> </table> </barchart-table-scroll> </div> <div class=description>* Earnings are based on GAAP income from continuing operations.</div> </div> <div class=inner-content data-ng-show="tab === \'dividends\'"> <div class="header clearfix"> <h5>Dividends History</h5> </div> <div class=dividends-table-content> <div class="t-head row"> <div class="text-left small-6 column">Date</div> <div class="text-right small-6 column">Value</div> </div> <div class=t-body> <div class=row data-ng-repeat="row in data" data-ng-class-even="\'odd\'"> <div class="text-left small-6 column">[[ row.date ]]</div> <div class="text-right small-6 column">[[ row.value ]]</div> </div> </div> </div> </div> </div> '
    },
    yEZo: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                template: a("z8as"),
                controller: ["$scope", function(e) {}]
            }
        }
        i.$inject = [], e.exports = i
    },
    yEcd: function(e, t, a) {
        "use strict";

        function i() {
            var e = config.symbols.mapping,
                t = config.symbols.type_names;
            this.getSector = function(t, a) {
                if (void 0 === t || "N/A" === t) return "stocks";
                var i = t;
                return void 0 !== a && "Y00" == a.substr(-3) ? t = 2 : e[i] && (t = i), e[t] || "stocks"
            }, this.getTypeName = function(e) {
                if (void 0 === e) return "UsEquity";
                var a = e;
                return t[a] && (e = a), t[e]
            }
        }
        i.$inject = [], e.exports = i
    },
    yGWH: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    passwordId: "="
                },
                link: function(e, t) {
                    var a = null;
                    e.label = "show", e.$on("$destroy", function() {
                        a = null, t.off("click")
                    }), t.on("click", function() {
                        "password" === (a = a || document.getElementById(e.passwordId)).getAttribute("type") ? (a.setAttribute("type", "text"), e.$evalAsync(function() {
                            e.label = "hide"
                        })) : (a.setAttribute("type", "password"), e.$evalAsync(function() {
                            e.label = "show"
                        }))
                    })
                },
                template: a("S9Zk")
            }
        }
    },
    yHch: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    approach: "=",
                    value: "@",
                    mark: "=",
                    markText: "=",
                    markValue: "=",
                    isPerformance: "=",
                    openPrice: "=",
                    colored: "="
                },
                template: a("wGBz")
            }
        }
        i.$inject = [], e.exports = i
    },
    yMUY: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "E",
                scope: {
                    label: "@",
                    operator: "=",
                    selectedOperator: "@",
                    selectedValue: "@",
                    value: "=",
                    formData: "="
                },
                controller: ["$scope", function(e) {
                    if (void 0 === e.operator || void 0 === e.value) throw new Error("Directive screener-value requires operator and value attributes");
                    e.formData.operator = e.selectedOperator || e.operator[0].key, e.formData.value = e.selectedValue || e.value[0].key
                }],
                template: a("8cr2")
            }
        }
    },
    yNVj: function(e, t) {
        e.exports = "<div class=\"barchart-symbol-widget widget-technical-analysis\"> <div class=barchart-symbol-widget__title> Technical Analysis <a data-ng-href=\"[[  '/' + sector + '/quotes/' + symbol + '/technical-analysis' ]]\" class=\"bc-button small white-with-border right\" target=_blank> All Technicals </a> </div> <a class=barchart-symbol-widget__wrapper-link data-ng-href=\"[[  '/' + sector + '/quotes/' + symbol + '/technical-analysis' ]]\" target=_blank> <div class=barchart-symbol-widget__columns> <div class=barchart-symbol-widget__left-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat=\"item in lists.left | filter:filterEmptyRows\"> <span class=right data-ng-class=setColor(item)> [[ ::data[item.field] ]] </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> <div class=barchart-symbol-widget__right-column> <ul class=barchart-symbol-widget__list> <li data-ng-repeat=\"item in lists.right | filter:filterEmptyRows\"> <span class=right data-ng-class=setColor(item)> [[ ::data[item.field] ]] </span> [[ item.label || meta[item.field] ]] </li> </ul> </div> </div> </a> </div>"
    },
    yT3A: function(e, t, a) {
        "use strict";
        angular.module("companyInfo", []).controller("companyInfoHeader", a("h8BL")).directive("showHideCompanyInfo", a("4iiL"));
        e.exports = {
            enable: !0,
            name: "companyInfo"
        }
    },
    yUB1: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            var i = e.hash();
            if (i) {
                var r = document.querySelector("#" + i);
                !t.isMobile() && r.offsetTop > 120 && (a.yOffset = 120), a(i)
            }
        }
        i.$inject = ["$location", "utils", "$anchorScroll"], e.exports = i
    },
    yVSV: function(e, t, a) {
        "use strict";

        function i(e, t, i) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    rawData: "=",
                    options: "="
                },
                link: function(t) {
                    function r() {
                        t.rawData && (t.data = t.options.watchlistFlags[t.rawData.symbol], t.data && t.data.raw && (0 !== t.data.raw.low_flag && null !== t.data.raw.low_flag || (t.data.low_flag = ""), 0 !== t.data.raw.high_flag && null !== t.data.raw.high_flag || (t.data.high_flag = ""), (t.data.raw.low_flag || t.data.raw.high_flag || t.data.raw.notes) && (t.data.lastPrice = t.rawData.lastPrice || t.rawData.dailyLastPrice)))
                    }
                    r(), t.editExtraData = function() {
                        e.open({
                            template: a("p3Nb"),
                            controller: "watchlistEditExtraFieldsModalCtrl",
                            windowClass: "reveal-modal bc-watchlist__edit-modal-wrapper",
                            resolve: {
                                symbolData: function() {
                                    return t.rawData
                                },
                                options: function() {
                                    return t.options
                                }
                            }
                        })
                    }, t.$on("tableHasBeenSorted", function() {
                        i(function() {
                            r()
                        })
                    }), t.$on("notesHasBeenUpdated", r)
                },
                template: a("St/a")
            }
        }
        i.$inject = ["$modal", "$rootScope", "$timeout"], e.exports = i
    },
    yVWT: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                restrict: "A",
                scope: !1,
                link: function(r, o) {
                    function n(r) {
                        if (r.preventDefault(), "/login" === e.path()) {
                            var o = e.search().ref;
                            a.clearErrors(), i.goToRegister(o || null)
                        } else t.location.href = t.config.routes["auth.register"]
                    }
                    o.on("click", n), r.$on("$destroy", function() {
                        o.off("click", n)
                    })
                }
            }
        }
        i.$inject = ["$location", "$window", "userAuthFormData", "authRouteService"], e.exports = i
    },
    yXux: function(e, t, a) {
        "use strict";
        e.exports = function() {
            return {
                restrict: "AE",
                replace: !0,
                scope: !0,
                bindToController: {
                    cellValue: "=",
                    isOpinion: "="
                },
                controller: [function() {
                    var e = this;
                    e.getCellColorizeClass = function() {
                        if (e.cellValue < 0 || e.cellValue && 0 === e.cellValue.indexOf("-")) return "down";
                        if (e.cellValue > 0 || e.cellValue && 0 === e.cellValue.indexOf("+")) return "up";
                        if ("N/A" === e.cellValue) return null;
                        if ("0" === e.cellValue || e.cellValue && e.cellValue.match(/^unch/)) return "unch";
                        if (e.isOpinion) {
                            if (~e.cellValue.toLowerCase().indexOf("buy")) return "up";
                            if (~e.cellValue.toLowerCase().indexOf("sell")) return "down";
                            if (~e.cellValue.toLowerCase().indexOf("hold")) return "unch"
                        }
                        return 0 === e.cellValue.indexOf("$") ? parseFloat(e.cellValue.replace("$", "")) > 0 ? "up" : "unch" : null
                    }
                }],
                controllerAs: "$ctrl",
                template: a("5VzN")
            }
        }
    },
    yf6b: function(e, t) {
        e.exports = '<div class=bc-table-pagination data-ng-hide="count === total"> <div class=pagination-info> Showing [[ startItemNumber ]]-[[ endItemNumber ]] of [[ total ]] </div> <div class=pagination-controls> <a class=left-arrows data-ng-hide="pagination.currentPage === 1" data-ng-click=getPage(1)>&lt;&lt;</a> <a class=previous data-ng-show="(pagination.currentPage - 2) > 0 && pagination.currentPage === lastPage" data-ng-click="getPage(pagination.currentPage - 2)">[[ pagination.currentPage - 2 ]]</a> <a class=previous data-ng-show="(pagination.currentPage - 1) > 0" data-ng-click="getPage(pagination.currentPage - 1)">[[ pagination.currentPage - 1 ]]</a> <a class=current>[[ pagination.currentPage ]]</a> <a class=next data-ng-show="pagination.currentPage < lastPage" data-ng-click="getPage(pagination.currentPage + 1)">[[ pagination.currentPage + 1 ]]</a> <a class=next data-ng-show="pagination.currentPage === 1 && pagination.currentPage + 1 < lastPage" data-ng-click="getPage(pagination.currentPage + 2)">[[ pagination.currentPage + 2 ]]</a> <span data-ng-show="(pagination.currentPage + 1) < lastPage"> ... </span> <a class=right-arrows data-ng-click=getPage(lastPage) data-ng-hide="pagination.currentPage === lastPage">>></a> <span data-ng-if=showAll class=delimiter>|</span> <a data-ng-if=showAll class=show-all data-ng-click=getAll()>Show all</a> </div> </div> '
    },
    yfuJ: function(e, t) {
        e.exports = '<button class="bc-button white-with-border small" data-ng-click=$ctrl.showAggregationModal()> <i class="bc-glyph-calendar calendar-icon"></i> </button>'
    },
    yh13: function(e, t, a) {
        "use strict";
        angular.module("MyCharts", []).directive("myChartGroupsEditForm", a("pnkz")).directive("myChartGroupsCreateForm", a("1OJY")).directive("changeMyChartGroup", a("WulW")).directive("addChartGroup", a("AMZz")).directive("myChartList", a("9gY/")).directive("myChartsToolbar", a("Ew2Y")).directive("myChartsChart", a("dBpo")).service("myChartModalService", a("7wS6")).controller("myChartsAddNewGroupModalCtrl", a("HPJQ")).controller("myChartPreferenceWarningModalCtrl", a("svmv")).controller("myChartsManagementCtrl", a("KDeg"));
        e.exports = {
            enable: !0,
            name: "MyCharts"
        }
    },
    yhtt: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return {
                savePreferencesItem: function(i, r) {
                    return e.call(t.API_URL + "/preferences", a.PUT, {
                        name: i,
                        value: r
                    }, [])
                },
                saveAnnotationConfig: function(i, r) {
                    var o = {
                        type: "annotation",
                        name: i,
                        value: r
                    };
                    return e.call(t.API_URL + "/interactive-chart-preferences", a.POST, o)
                },
                loadAllAnnotationsConfig: function() {
                    return e.call(t.API_URL + "/interactive-chart-preferences/annotation", a.GET)
                },
                saveStudyConfig: function(i, r) {
                    var o = {
                        type: "study",
                        name: i,
                        value: r
                    };
                    return e.call(t.API_URL + "/interactive-chart-preferences", a.POST, o)
                },
                loadStudyConfig: function(i) {
                    return e.call(t.API_URL + "/interactive-chart-preferences/study/" + i, a.GET)
                },
                saveFundamentalConfig: function(i, r) {
                    var o = {
                        type: "fundamental",
                        name: i,
                        value: r
                    };
                    return e.call(t.API_URL + "/interactive-chart-preferences", a.POST, o)
                },
                loadFundamentalConfig: function(i) {
                    return e.call(t.API_URL + "/interactive-chart-preferences/fundamental/" + i, a.GET)
                },
                saveGrid: function(i, r) {
                    var o = {
                        type: "grid",
                        name: "grid",
                        value: JSON.stringify({
                            configuration: i,
                            state: r
                        })
                    };
                    return e.call(t.API_URL + "/interactive-chart-preferences", a.POST, o)
                },
                getGrid: function() {
                    return e.call(t.API_URL + "/interactive-chart-preferences/grid", a.GET)
                },
                clearGrid: function() {
                    return e.call(t.API_URL + "/interactive-chart-preferences/grid/grid", a.DELETE)
                }
            }
        }
        i.$inject = ["dataProvider", "apiConfig", "httpVerbs"], e.exports = i
    },
    ymzd: function(e, t, a) {
        "use strict";
        var i = "LongTermTrends";
        angular.module(i, []).controller(i + ".LongTermTrendsCtrl", a("kCWv"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    yvnB: function(e, t, a) {
        "use strict";
        var i = "MyBarchart.WatchlistEdit";
        angular.module(i, []).controller(i + ".watchlistModalController", a("cHrA")).controller(i + ".addToWatchlistModalCtrl", a("gqxf")).directive("watchlistEditForm", a("SiIE")).directive("applyDefaultWatchlistView", a("hgiS")).filter("blankRow", a("T8Qk")).directive("broadcastCurrentWatchlist", a("H0DN")).factory("watchlistEditApiFactory", a("x4aU")).service("watchlistFormModalService", a("WU3l"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    z0E8: function(e, t) {
        e.exports = '<div class="social-list row"> <div class="small-12 medium-6 column"> <div class="social-icon icon-facebook"> <a data-ng-click="connectDisconnect(\'facebook\')"> <i class=bc-glyph-facebook title=Facebook></i> <span data-ng-hide=connected.facebook>Connect</span> <span data-ng-show=connected.facebook>Disconnect</span> Facebook </a> </div> <div class="social-icon icon-google"> <a data-ng-click="connectDisconnect(\'google\')"> <span class=google-wrapper><i class=bc-glyph-google></i></span> <span data-ng-hide=connected.google>Connect Google</span> <span data-ng-show=connected.google>Disconnect Google</span> </a> </div> </div> <div class="small-12 medium-6 column"> <div class="social-icon icon-linkedin"> <a data-ng-click="connectDisconnect(\'linkedin\')"> <i class=bc-glyph-linkedin title=LinkedIn></i> <span data-ng-hide=connected.linkedin>Connect</span> <span data-ng-show=connected.linkedin>Disconnect</span> Linkedin </a> </div> <div class="social-icon icon-twitter"> <a data-ng-click="connectDisconnect(\'twitter\')"> <i class=bc-glyph-twitter title=Twitter></i> <span data-ng-hide=connected.twitter>Connect</span> <span data-ng-show=connected.twitter>Disconnect</span> Twitter </a> </div> </div> </div>'
    },
    z2Co: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    portfolio: "=",
                    showClosedPositions: "=",
                    timeFrame: "="
                },
                controller: ["$scope", function(t) {
                    t.portfolioData = {}, t.$on("portfolioTransactionUpdated", function() {
                        a()
                    }), t.$watch("showClosedPositions", function(e, t) {
                        e !== t && a()
                    }), t.$watch("timeFrame", function(e, t) {
                        e !== t && a()
                    });
                    var a = function() {
                        t.dataLoading = !0, e.getVisualizationData(t.portfolio.id, t.showClosedPositions, t.timeFrame).then(function(e) {
                            t.dataLoading = !1, e.data && e.data && (t.portfolioData = e.data)
                        }, function(e) {
                            console.warn("reason", e)
                        })
                    };
                    a()
                }],
                template: a("AKGV")
            }
        }
        i.$inject = ["portfolioApiFactory", "$rootScope"], e.exports = i
    },
    z2TB: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            return {
                get1dAgoData: function(r) {
                    var o = {
                        symbol: r,
                        fields: "symbol,date1dAgo,previousPrice,lastPrice1dAgo",
                        meta: "field.name",
                        raw: 1
                    };
                    return e.call(a.buildUrl(i.API_URL + "/quotes/get", o), t.GET).then(function(e) {
                        return e
                    })
                }
            }
        }
        i.$inject = ["dataProvider", "httpVerbs", "utils", "apiConfig"], e.exports = i
    },
    z6gb: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return {
                restrict: "A",
                link: function(a, i, r) {
                    var o = r.bcAutoFocus || "all",
                        n = "true" === r.bcAutoFocusDisable,
                        s = "true" === r.findInput;
                    if (!n) switch (o) {
                        case "mobile":
                            t.isMobileAndTablet() && l();
                            break;
                        case "desktop":
                            t.isMobileAndTablet() || l();
                            break;
                        case "all":
                            l()
                    }

                    function l() {
                        e(function() {
                            "true" !== r.bcAutoFocusDisable && (s ? i.find("input") && i.find("input")[0] && i.find("input")[0].focus() : i[0].focus())
                        }, 100)
                    }
                }
            }
        }
        i.$inject = ["$timeout", "utils"], e.exports = i
    },
    z8as: function(e, t) {
        e.exports = '<div class=expandable-table-wrapper> <table> <tbody data-ng-repeat="(itemKey, item) in item.groups"> <tr class=mobile-sector-row> <td colspan=2> <a target=_self data-ng-href="[[ ::getLink(item) ]]"> [[ item.symbolName ]] </a> </td> <td colspan=2 class="price-range print-only" style="width:100%!important;padding:10px 10px 10px 0!important"> <major-market-sector-histogram></major-market-sector-histogram> </td> </tr> <tr class=mobile-prices-row> <td class=last-price> [[ item.lastPrice ]] </td> <td class=today-price> <span data-ng-class="getValueClass(item[\'percentChange\' + timeFrame.postfix])"> [[ item[\'percentChange\' + timeFrame.postfix] ]] </span> </td> <td colspan=2 class=print-only style=width:100%!important> &nbsp; </td> </tr> <tr class=medium-up-sector-prices-row> <td class=sector> <div class=title-wrapper> <a target=_self data-ng-href="[[ ::getLink(item) ]]"> [[ item.symbolName ]] </a> </div> </td> <td class=last-price> [[ item.lastPrice ]] </td> <td class=today-price> <span data-ng-class="getValueClass(item[\'percentChange\' + timeFrame.postfix])"> [[ item[\'percentChange\' + timeFrame.postfix] ]] </span> </td> <td class="price-range show-for-large-up"> <major-market-sector-histogram></major-market-sector-histogram> </td> </tr> <tr class=medium-histogram-row> <td colspan=3> <major-market-sector-histogram></major-market-sector-histogram> </td> </tr> </tbody> </table> </div>'
    },
    zA0A: function(e, t) {
        e.exports = '<div class=bc-custom-help-modal> <div class=bc-custom-help-modal__title> [[ content.title ]] <div class=form-close-wrapper> <i data-ng-click=close(); class="bc-glyph-times form-close"></i> </div> </div> <div class=bc-custom-help-modal__content data-ng-bind-html=content.helpText> </div> </div>'
    },
    zJPR: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <div class=modal-header> Expressions & Spreads <i class="bc-glyph-times form-close right" data-ng-click=modalDismiss()></i> </div> <div class=bc-modal-content-inner> <div class=modal-expression__select-apply-expression-to> <label for=interactive-chart-modal-expression__select-apply-to>Apply Study to:</label> <div class="bc-dropdown styled"> <select id=interactive-chart-modal-expression__select-apply-to data-ng-model=expression.applyTo> <option value=mainPane>Main Chart</option> <option value=newPane>New Pane</option> </select> </div> </div> <form class="bc-form modal-expression__form-expression" data-ng-submit=applyExpression()> <input type=text placeholder="Enter an expression..." class=modal-expression__input-expression data-ng-model=expression.text data-ng-class="{\'error\': expressionError}"> <div class=modal-expression__expression-example>Example: {AAPL} - {AMZN} + {NVDA}</div> <p class=error-text data-ng-cloak data-ng-show=isSymbolError> Invalid symbol. Please try again. </p> <div class=modal-expression__select-popular-spread> <div class=modal-expression__select-popular-spread-prefix>or</div> <div class="bc-dropdown styled"> <select data-ng-options="spread.value as spread.label for spread in popularSpreads" data-ng-model=selectedPopularSpread data-ng-change=selectPopularSpread(selectedPopularSpread)> <option value="">Select a popular spread...</option> </select> </div> </div> <interactive-chart-bar-type-selector data-allowed-bar-types="[\'Line\', \'Area\']" data-bar-type-model=expression.barType></interactive-chart-bar-type-selector> <div class=modal-expression__form-actions> <button type=submit class="bc-button ok light-blue" data-ng-disabled=addingExpression>Apply</button> </div> </form> </div> </div>'
    },
    zK4F: function(e, t) {
        e.exports = '<div class=bc-datatable> <bc-filter-etfs-leverage data-ng-if=::options.leverageFilter data-leverage-key=options.leverageFilter data-only-long=::options.onlyLongLeveraged></bc-filter-etfs-leverage> <div class=throbber-wrapper data-ng-show=dataLoading data-ng-style="{\'paddingTop\':throbberTop}"> <img src=/img/throbber.gif alt="Please wait..."> </div> <div data-ng-show="!dataLoading && content[0].count" class="bc-table-wrapper table-size-[[ content[0].count ]] [[ options.class ]] table-guid-[[ guid ]]" data-ng-class="{\'sticky-row\': sticky && content && content[0].count, \'has-error\': error, \'symbol-details\': options.symbolDetails, \'links-enabled\':options.quickLinks , \'datatable-processing\': processing}"> <barchart-table-scroll data-ng-if=!dataLoading> <table data-barchart-table-show-symbol-details data-barchart-expland-new-rows data-ng-class="{\'ordered-triggered\': orderHasBeenATriggered, \'symbol-widgets-expanded\': symbolWidgetsExpanded}"> <thead> <tr> <th class="quick-links show-for-medium-up hide-for-print" data-ng-if=::options.quickLinksLeft> Links </th> <th class="[[ ::columnKey ]]" data-ng-if=exclude(columnKey) data-ng-repeat="(columnKey, columnTitle) in metaFilterExclude(content[0].meta.field.shortName, content[0].data) track by $index" data-ng-class="{\'text-left\': isLeftAligned(columnKey, $index)}" data-barchart-sorting-key=columnKey data-barchart-sorting-content=content data-barchart-sorting-guid=guid data-barchart-sorting-blacklist=options.sort.blacklist data-field-types=content[0].meta.field.type data-barchart-sorting-options=options data-barchart-sorting-order-by=orderBy data-barchart-sorting-order-dir=orderDir data-barchart-sorting-order-shared="[[ ::sharedSorting ]]" data-barchart-sorting> <span data-bs-tooltip data-placement=bottom data-bs-enabled="content[0].count == 0 ? \'false\' : \'true\'" data-ng-if=::!options.pagination data-ng-show="columnKey !== \'logo\'" data-title="[[ content[0].meta.field.description[columnKey] ]]"> [[ columnTitle ]] </span> <span data-bs-tooltip data-placement=bottom data-bs-enabled="content[0].count == 0 ? \'false\' : \'true\'" data-ng-if=::options.pagination data-ng-show="columnKey !== \'logo\'" data-title="[[ ::content[0].meta.field.description[columnKey] ]]"> [[ ::columnTitle ]] </span> </th> <th class="signal-chart-link show-for-medium-up" data-ng-if=::options.signalChartLink> <span data-bs-tooltip data-placement=bottom data-title="View the Indicator on a chart."> Chart </span> </th> <th class="performance-link show-for-medium-up" data-ng-if=::options.performanceLink> <span data-bs-tooltip data-placement=bottom data-title="View hypothetical performance for the indicator."> P&L </span> </th> <th class="portfolio-notes text-center" data-ng-hide=options.portfolioHideNotes data-ng-if="::options.portfolioTransaction || (options.watchlist && [\'main\', \'technical\', \'performance\'].indexOf(watchStates.viewName) !== -1)"> Notes </th> <th class="portfolio-notes-icon text-center" data-ng-if=::options.earningsDividendsDetails> History </th> <th class="portfolio-notes-icon text-center" data-ng-if=::options.earningsDetails> Details </th> <th class="portfolio-edit-transaction text-center" data-ng-if="::options.portfolioTransaction && !options.portfolioPublicView"> Edit </th> <th class="quick-links show-for-medium-up hide-for-print" data-ng-if=::options.quickLinks> Links </th> </tr> </thead> <tbody data-ng-repeat="rows in content"> <tr class=trending data-ng-if=tabs> <td>&nbsp;</td> <td colspan=100 class=text-left> [[ ::tabs[$index].title ]] <span class=arrow data-ng-class=::tabs[$index].class></span> </td> </tr> <tr sly-repeat="row in rows.data" data-ng-class-odd="\'odd\'" data-ng-class="{\'in-money\': inMoney(row), \'bc-blank-table-row\': row.blankRow === true, \'hover\': currentIndex === $index}" data-ng-init="rowIndex = $index" data-current-index="[[ ::$index ]]" data-current-symbol="[[ options.symbolDetailsOptions ? row[options.symbolDetailsOptions.symbol] : row.symbol ]]"> <td data-ng-hide="row.blankRow === true" class="quick-links options-left-links show-for-medium-up hide-for-print" data-ng-if="options.quickLinksLeft && [\'-\',\'.\',\'\'].indexOf(row.symbol) === -1" data-ng-class="::{\'tooltip-bottom\': (rows.data.length - $index) <= 2}"> <barchart-quick-links data-ng-if=row.symbolName_left data-symbol-direction="\'left\'" data-total=::content[0].count data-table-id=::guid data-index=::$index data-expanded-symbol=currentSym data-expand-row="showSymbolWidgets(row, rowIndex)" data-collapse-row=hideSymbolWidgets() data-row=row data-meta=content[0].meta data-datatable-options=options></barchart-quick-links> </td> <td data-ng-if="row.blankRow === true" class=bc-blank-row>&nbsp;</td> <td data-ng-if=row.logo class=coin-icon> <div><img data-ng-show=row.raw.logo title="[[ row.symbolName ]]" data-ng-src="[[ row.logo ]]"/></div> </td> <td data-ng-if="row.blankRow !== true && key !== \'logo\'" data-ng-repeat="(key, cell) in filterExclude(row) track by $index" class="[[ ::key ]]" data-ng-class="setDataClasses(key, cell, $index, row)"> <div data-ng-show="key !== \'logo\'" data-ng-class="::setHitClass(key, row)"> <span class=symbol-widgets-controls data-ng-if="::$index === 0 && options.symbolDetails" sly-prevent-evaluation-when-hidden> <i class=bc-glyph-plus data-ng-show="rowIndex !== currentSym" data-ng-click="showSymbolWidgets(row, rowIndex)"></i> <i class=bc-glyph-spinner data-ng-show="rowIndex === currentSym && widgetsDataLoading"></i> <i class=bc-glyph-minus data-ng-show="rowIndex === currentSym && !widgetsDataLoading" data-ng-click=hideSymbolWidgets()></i> </span> <span class=symbol-widgets-controls data-ng-if="::$index === 0 && options.addNewRows" sly-prevent-evaluation-when-hidden> <span data-ng-if=hasNewRows(row)> <i class=bc-glyph-plus data-ng-show="rowIndex !== currentSym" data-ng-click="addNewRows(row, rowIndex)"></i> <i class=bc-glyph-spinner data-ng-show="rowIndex === currentSym && rowsDataLoading"></i> <i class=bc-glyph-minus data-ng-show="rowIndex === currentSym && !rowsDataLoading" data-ng-click=hideSymbolRows()></i> </span> </span> <span data-ng-if="::isLink(key, row)"> <a target=_self data-ng-class=setTriggeredClass(row) data-ng-href="[[ setLink(row, key) ]]" data-ng-bind=cell></a> </span> <span data-ng-if=::!isElementLink> <span data-ng-if=::!options.filter> <span data-ng-bind=cell></span> </span> <span data-ng-if=::options.filter> <span data-ng-if=::options.filter.parseHTML> <span data-ng-if="!options.filter.parseHTML.columns || options.filter.parseHTML.columns.indexOf(key) !== -1" data-ng-bind-html="cell | parseHTML"></span> <span data-ng-if="options.filter.parseHTML.columns && options.filter.parseHTML.columns.indexOf(key) === -1" data-ng-bind=cell></span> </span> </span> </span> </div> </td> <td data-ng-hide="row.blankRow === true" class="signal-chart-link show-for-medium-up" data-ng-if=::options.signalChartLink> <barchart-signal-chart-link data-options=options.signalChartLink data-symbol=row.symbol></barchart-signal-chart-link> </td> <td data-ng-hide="row.blankRow === true" class="performance-link show-for-medium-up" data-ng-if=::options.performanceLink> <barchart-performance-link data-symbol="row.symbol || row.baseSymbol" data-symbol-type=row.symbolType data-custom-data=options.customData> </barchart-performance-link> </td> <td data-ng-hide="row.blankRow === true || options.portfolioHideNotes" class="portfolio-notes-icon text-center" data-ng-if=::options.portfolioTransaction> <portfolio-show-notes data-raw-data=row.raw data-transaction-id=row.raw.transactionId data-portfolio-public-view=options.portfolioPublicView> </portfolio-show-notes> </td> <td class="portfolio-notes-icon text-center" data-ng-if=::options.earningsDividendsDetails> <bc-earnings-dividends-history data-raw-data=row.raw> </bc-earnings-dividends-history> </td> <td class="portfolio-notes-icon text-center" data-ng-if=::options.earningsDetails> <bc-earnings-details data-raw-data=row.raw> </bc-earnings-details> </td> <td data-ng-hide="row.blankRow === true" class="portfolio-notes-icon text-center" data-ng-if="options.watchlist && [\'main\', \'technical\', \'performance\'].indexOf(watchStates.viewName) !== -1" data-ng-class=setTriggeredClass(row)> <watchlist-show-notes data-raw-data=row.raw data-options=options> </watchlist-show-notes> </td> <td data-ng-hide="row.blankRow === true" class="portfolio-edit-transaction text-center" data-ng-class=setTriggeredClass(row) data-ng-if="::options.portfolioTransaction && !options.portfolioPublicView"> <barchart-portfolio-edit-transaction data-transaction-id=row.raw.transactionId data-row=row> </barchart-portfolio-edit-transaction> </td> <td data-ng-hide="row.blankRow === true" class="quick-links show-for-medium-up hide-for-print" data-ng-if="options.quickLinks && [\'-\',\'.\',\'\'].indexOf(row.symbol) === -1" data-ng-class="::{\'tooltip-bottom\': (rows.data.length - $index) <= 2}"> <barchart-quick-links data-ng-show="row.symbol || row.symbolName_right || row.longSymbol || row.baseSymbol || options.spreadSymbol" data-symbol-direction="\'right\'" data-total=::content[0].count data-table-id=::guid data-index=::$index data-expanded-symbol=currentSym data-expand-row="showSymbolWidgets(row, rowIndex)" data-collapse-row=hideSymbolWidgets() data-row=row data-meta=content[0].meta data-datatable-options=options></barchart-quick-links> </td> <td data-ng-hide="row.blankRow === true" data-ng-if="[\'-\',\'.\',\'\'].indexOf(row.symbol) !== -1"> &nbsp; </td> <td class=bc-blank-row data-ng-if="row.blankRow === true" colspan="[[ visibleDatatableColumns ]]">&nbsp;</td> </tr> </tbody> <tbody data-ng-if=::options.customFooter> <tr barchart-datatable-custom-footer data-items=content></tr> </tbody> <tfoot data-ng-if="::options.footer || (content[0].count >= 50 && options.footer === undefined)"> <tr> <th class="quick-links show-for-medium-up hide-for-print" data-ng-if=::options.quickLinksLeft> Links </th> <td class="[[ ::columnKey ]]" data-ng-if=exclude(columnKey) data-ng-repeat="(columnKey, columnTitle) in metaFilterExclude(content[0].meta.field.shortName, content[0].data) track by $index" data-barchart-sorting-key=columnKey data-barchart-sorting-content=content data-barchart-sorting-guid=guid data-ng-class="{\'text-left\': isLeftAligned(columnKey, $index)}" data-barchart-sorting-blacklist=options.sort.blacklist data-barchart-sorting-options=options data-barchart-sorting-order-by=orderBy data-barchart-sorting-order-dir=orderDir data-field-types=content[0].meta.field.type data-barchart-sorting-order-shared="[[ ::sharedSorting ]]" data-barchart-sorting> <span data-bs-tooltip data-placement=top data-ng-if=::!options.pagination data-ng-show="columnKey !== \'logo\'" data-title="[[ content[0].meta.field.description[columnKey] ]]"> [[ columnTitle ]] </span> <span data-bs-tooltip data-placement=top data-ng-if=::options.pagination data-ng-show="columnKey !== \'logo\'" data-title="[[ ::content[0].meta.field.description[columnKey] ]]"> [[ ::columnTitle ]] </span> </td> <td class="signal-chart-link show-for-medium-up" data-ng-if=::options.signalChartLink> <span data-bs-tooltip data-placement=top data-title="View the Indicator on a chart."> Chart </span> </td> <td class="performance-link show-for-medium-up" data-ng-if=::options.performanceLink> <span data-bs-tooltip data-placement=top data-title="View hypothetical performance for the indicator."> P&L </span> </td> <td data-ng-hide=options.portfolioHideNotes class="portfolio-edit-transaction text-center" data-ng-if="::options.portfolioTransaction || (options.watchlist && [\'main\', \'technical\', \'performance\'].indexOf(watchStates.viewName) !== -1)"> Notes </td> <td class="portfolio-notes-icon text-center" data-ng-if=::options.earningsDividendsDetails> History </td> <td class="portfolio-notes-icon text-center" data-ng-if=::options.earningsDetails> Details </td> <td class="portfolio-edit-transaction text-center" data-ng-if="::options.portfolioTransaction && !options.portfolioPublicView"> Edit </td> <td class="quick-links show-for-medium-up hide-for-print" data-ng-if=::options.quickLinks> Links </td> </tr> </tfoot> </table> </barchart-table-scroll> </div> <div class=error-page data-ng-if="!dataLoading && !content[0].count"> <div class=error-text> <span data-ng-bind=options.emptyText></span> </div> </div> <bc-table-pagination data-ng-if="options.pagination && content[0].count && !options.noPagination && !dataLoading && totalItems > options.pagination" data-total=totalItems data-count=content[0].count data-pagination=paginationParams data-show-all=!options.paginationHideShowAll data-pagination-callback=loadPage() data-load-all=loadAllData()> </bc-table-pagination> <div data-ng-show=error> <span class=error-text data-ng-bind=error></span> </div> </div> '
    },
    zLPB: function(e, t, a) {
        "use strict";
        var i = a("urOV");
        angular.module(i.name).run(["$window", "Notification", function(e, t) {
            e.config.showNewsletterTokenInvalidNotification && t.warning("Your email verification link has expired. Please request a new one using the form below.")
        }])
    },
    "zNk/": function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l) {
            n = n || {};
            var c = angular.copy(r.traits),
                d = null,
                u = 2,
                p = a.getSymbolData().lastPrice,
                m = -1 !== p.toString().indexOf("-");
            try {
                u = p.substring(-1 !== p.indexOf(".") ? p.indexOf(".") + 1 : p.length).length
            } catch (e) {
                console.error("[interactive-chart-modal-tool-profit-loss-ctrl.js]: Can not get lastPrice of symbol"), u = 2
            }
            try {
                d = l.getInlineDataForSymbol(a.getSymbolData().symbol).instrument.unitCode
            } catch (e) {
                console.error("[interactive-chart-modal-tool-profit-loss-ctrl.js]: Can not get baseCode of symbol"), console.warn(e.message)
            }
            var h = a.getSymbolData().raw.pointValue || 1;
            "forex" === window.config.symbols.mapping[a.getSymbolData().symbolType] && (h = Math.pow(10, Barchart.Utilities.convert.unitCodeToBaseCode(d))), e.lineTypes = r.lineTypes, e.numOfDecimal = u, e.formData = {
                entryPrice: null,
                stopLoss: null,
                targetPrice: null,
                contracts: 1,
                direction: "Long",
                showPrices: n.drawLines || !1,
                reward: null,
                risk: null,
                ratio: null,
                line: n.traits ? y(n.traits.line) : y(c.line)
            }, e.annotationEditMode = !!n.uid;
            var g = {
                entryPrice: {},
                stopLoss: {},
                targetPrice: {}
            };
            n.uid && setTimeout(function() {
                ! function() {
                    e.formData = {
                        entryPrice: n.extras.prices[0],
                        stopLoss: n.extras.prices[1],
                        targetPrice: n.extras.prices[2],
                        contracts: n.extras.numContracts,
                        direction: n.extras.pos,
                        showPrices: n.extras.drawLines,
                        reward: n.extras.reward,
                        risk: n.extras.risk,
                        ratio: n.extras.ratio,
                        line: angular.copy(n.traits.line)
                    }, 5 === n.points.length && (g.entryPrice.time = n.points[2].time, g.stopLoss.time = n.points[3].time, g.targetPrice.time = n.points[4].time);
                    e.calculateResult()
                }()
            }, 0);
            var f = null,
                b = Barchart.RealtimeWidgets.Charts.PubSub.subscribe(Barchart.RealtimeWidgets.Charts.Topics.CH_ANNPOINTPICKED, function(t, a) {
                    var i = a.point.price;
                    m && (i = Barchart.Utilities.priceFormatter("-").format(i, d)), f && (g[f] = a.point),
                        function(t) {
                            if (f) switch (e.formData[f] = t, e.calculateResult(), f) {
                                case "entryPrice":
                                    f = null, angular.element("#calc-tools-form__input-stop-loss").focus();
                                    break;
                                case "stopLoss":
                                    f = null, angular.element("#calc-tools-form__input-target-price").focus();
                                    break;
                                case "targetPrice":
                                    angular.element("#calc-tools-form__input-target-price").blur(), f = null
                            }
                        }(m ? i : v(i, u))
                });

            function v(e, t) {
                return +(Math.round(e + "e+" + t) + "e-" + t)
            }

            function y(e) {
                var t = angular.copy(e);
                return t.color || (t.color = "#000"), t.dashStyle || (t.dashStyle = "Solid"), t.width || (t.width = 1), t
            }
            e.listenForChartClick = function(e) {
                f = e, a.useTool("PickPoint")
            }, e.unsubscribePickListener = function() {
                a.useTool(null)
            }, e.removeAnnotation = function() {
                a.deleteTool({
                    uid: n.uid
                }), e.close()
            }, e.calculateResult = function() {
                if (e.formData.entryPrice && e.formData.stopLoss && e.formData.targetPrice && e.formData.contracts >= 0) {
                    var t = e.formData.entryPrice,
                        a = e.formData.targetPrice,
                        i = e.formData.stopLoss;
                    m && (t = s.string2Decimal(t, d)), m && (a = s.string2Decimal(a, d)), m && (i = s.string2Decimal(i, d));
                    var r = a - t,
                        o = i - t;
                    e.formData.reward = ("Short" === e.formData.direction ? -r : r) * e.formData.contracts * h, e.formData.risk = ("Short" === e.formData.direction ? -o : o) * e.formData.contracts * h, e.formData.ratio = Math.abs(Math.round(e.formData.reward / e.formData.risk * 100) / 100)
                } else e.formData.reward = null, e.formData.risk = null, e.formData.ratio = null
            }, e.close = function() {
                Barchart.RealtimeWidgets.Charts.PubSub.unsubscribe(b), o.dismiss()
            }, e.confirm = function() {
                var r = {
                    line: angular.copy(e.formData.line)
                };
                u > 0 && (e.formData.entryPrice = v(e.formData.entryPrice, u), e.formData.stopLoss = v(e.formData.stopLoss, u), e.formData.targetPrice = v(e.formData.targetPrice, u)), g.entryPrice.price || (g.entryPrice.price = e.formData.entryPrice, m && (g.entryPrice.price = s.string2Decimal(e.formData.entryPrice, d))), g.entryPrice.time || (g.entryPrice.time = +new Date), g.stopLoss.price || (g.stopLoss.price = e.formData.stopLoss, m && (g.stopLoss.price = s.string2Decimal(e.formData.stopLoss, d))), g.stopLoss.time || (g.stopLoss.time = +new Date), g.targetPrice.price || (g.targetPrice.price = e.formData.targetPrice, m && (g.targetPrice.price = s.string2Decimal(e.formData.targetPrice, d))), g.targetPrice.time || (g.targetPrice.time = +new Date);
                var o = {
                    prices: [e.formData.entryPrice, e.formData.stopLoss, e.formData.targetPrice],
                    points: [g.entryPrice, g.stopLoss, g.targetPrice],
                    drawLines: e.formData.showPrices,
                    textLines: ["Entry price: " + e.formData.entryPrice, "Stop Loss: " + e.formData.stopLoss, "Target Price: " + e.formData.targetPrice, "Nbr Contracts: " + e.formData.contracts, e.formData.direction, "Reward: $" + v(e.formData.reward, 2).toFixed(2), "Risk: $" + v(e.formData.risk, 2).toFixed(2), "Ratio: " + e.formData.ratio + " : 1"],
                    pos: e.formData.direction,
                    numContracts: e.formData.contracts,
                    reward: e.formData.reward,
                    risk: e.formData.risk,
                    ratio: e.formData.ratio,
                    kind: "RewardRisk"
                };
                if (t.isLoggedIn() && i.saveAnnotationConfig("CalculateRewardRisk", JSON.stringify({
                        drawLines: e.formData.showPrices,
                        traits: r
                    })), n.uid) {
                    var l = [];
                    5 === n.points.length ? l = [n.points[0], n.points[1], g.entryPrice, g.stopLoss, g.targetPrice] : (console.error("[interactive-chart-modal-tool-profit-loss-ctrl.js]: Something went wrong with reward/risk annotation points. Make fallback to origin values", n), l = n.points), a.updateTool({
                        uid: n.uid,
                        traits: r,
                        extras: o,
                        points: l
                    })
                } else a.useTool("ComputedText", r, o);
                e.close()
            }
        }
        i.$inject = ["$scope", "authService", "interactiveChartApi", "interactiveChartUserPreferencesApi", "interactiveChartAnnotationsConfig", "$modalInstance", "annotationData", "utils", "bcInlineData"], e.exports = i
    },
    zRmJ: function(e, t, a) {
        "use strict";

        function i() {
            return {
                restrict: "E",
                replace: !0,
                scope: {
                    filterData: "=",
                    filters: "=",
                    filterKey: "@"
                },
                controller: ["$scope", function(e) {
                    e.filterData.default = e.filterData.default || {}, e.filterData.default.value && angular.isObject(e.filterData.default.value) && (e.filterData.default.value = [e.filterData.default.value[0], e.filterData.default.value[1]]), e.filterData.default.field = e.filterData.default.field || e.filters.default.field[0].key, e.filterData.default.value || (e.filterData.default.value = ["", ""])
                }],
                template: a("5nEK")
            }
        }
        i.$inject = [], e.exports = i
    },
    zRsR: function(e, t) {
        e.exports = '<div class="bc-modal-content bc-modal-login"> <input type=hidden /> <div class=modal-inner> <div class=modal-title> Select Chart Saving Mechanism </div> <div class=modal-subtitle> Any tools added to the chart are always saved, regardless of your Saving Mechanism. </div> <div class=radio-button-group> <div class=input-radio> <input type=radio id=interactive-chart-saving-mechanism-radio-last data-ng-model=formData.savingMechanism data-ng-value="\'last\'"> <label for=interactive-chart-saving-mechanism-radio-last> <span></span> Use Last-Viewed Chart Settings </label> </div> <div class=radio-button-description> Always use your last-viewed chart settings when moving from chart-to-chart for a continuous experience. <span class="bold warn">(Our Recommended Setting)</span> </div> </div> <div class=radio-button-group> <div class=input-radio> <input type=radio id=interactive-chart-saving-mechanism-radio-every data-ng-model=formData.savingMechanism data-ng-value="\'every\'"> <label for=interactive-chart-saving-mechanism-radio-every> <span></span> Save Every Chart </label> </div> <div class=radio-button-description> Each chart is configured and saved individually to keep its unique settings for the next time you view it. </div> <div class="radio-button-description bold"> Settings are not passed chart-to-chart. </div> </div> <div class=radio-button-group> <div class=input-radio> <input type=radio id=interactive-chart-saving-mechanism-radio-template data-ng-model=formData.savingMechanism data-ng-value="\'template\'"> <label for=interactive-chart-saving-mechanism-radio-template> <span></span> Use Chart Template </label> </div> <div class=radio-button-description> Always use the template selected below; changes to charts are not saved and will always load using this template. </div> <div class="radio-button-description bold"> If no template is selected, a 6-Month OHLC bar chart is used. </div> </div> <div class=template-selector-group data-ng-class="{\'disabled\': formData.savingMechanism !== \'template\'}"> <label class=label>Use Template:</label> <div class=form-control> <div class="bc-dropdown styled"> <select data-ng-model=formData.template data-ng-disabled="formData.savingMechanism !== \'template\'" data-ng-options="item.id as item.name for item in templatesList" name=interactive_charts_template> </select> </div> </div> </div> </div> <div class="modal-controls-row text-center"> <button class="bc-button light-blue" data-ng-click=apply() data-ng-disabled=applyingSettings>Apply</button> </div> </div> '
    },
    zbOV: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            var s = this;
            s.smsPublisher = e, s.timezoneList = t.config.timezoneList || {}, s.dateRange = ["1:00", "2:00", "3:00", "4:00", "5:00", "6:00", "7:00", "8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "24:00"], s.saveTextSettings = function() {
                r.assignPublisherTypeDefault(s.smsPublisher).then(function() {
                    o.success(n("ALERT_TEXT_SETTINGS_SAVED")), a.close()
                })
            }, s.editMobilePhone = function() {
                a.close(), i.openModalActivatePhoneNumber(s.smsPublisher)
            }, s.close = function() {
                a.close()
            }, s.removePhone = function() {
                i.openModalRemovePhone().result.then(function(e) {
                    "continue" === e && (s.smsPublisher.default_recipient = "", s.smsPublisher.default_recipient_hmac = "", s.smsPublisher.active_alert_types = [], r.assignPublisherTypeDefault(s.smsPublisher).then(function() {
                        o.success(n("ALERT_PHONE_HAS_BEEN_REMOVED")), a.close()
                    }))
                })
            }
        }
        i.$inject = ["smsPublisher", "$window", "$modalInstance", "alertsModalFactory", "alertManagerService", "Notification", "textFactory"], e.exports = i
    },
    zdIH: function(e, t, a) {
        "use strict";
        var i = "BarchartPremierBenefits";
        angular.module(i, []).directive("barchartBenefitsTable", a("7sYl"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    zdTK: function(e, t, a) {
        "use strict";
        var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            r = "function" == typeof Symbol && "symbol" === i(Symbol.iterator) ? function(e) {
                return void 0 === e ? "undefined" : i(e)
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : void 0 === e ? "undefined" : i(e)
            };

        function o(e) {
            return {
                applyMarket: function(t) {
                    if (!1 === t.hasOwnProperty("api")) throw new Error("key 'api' is required");
                    if (!t.hasOwnProperty("usd") && !t.hasOwnProperty("cad")) throw new Error("usd or cad keys must be specified");
                    if (t.hasOwnProperty(config.user.market)) {
                        var a = t[config.user.market];
                        "object" === (void 0 === a ? "undefined" : r(a)) && Object.keys(a).forEach(function(i) {
                            "object" === r(a[i]) ? e.merge(t.api[i], a[i]) : a.hasOwnProperty(i) && (t.api[i] = t[config.user.market][i])
                        })
                    }
                    return t
                }
            }
        }
        o.$inject = ["_"], e.exports = o
    },
    zohp: function(e, t, a) {
        "use strict";
        var i = "SeasonalChart";
        angular.module(i, []).controller(i + ".seasonalChartCtrl", a("5rOw"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    zrWK: function(e, t, a) {
        "use strict";
        var i = "OnboardingCard";
        angular.module(i, []).controller("onboardingCardCtrl", a("C0mA")).directive("triggerEventOnClick", a("matC"));
        e.exports = {
            enable: !0,
            name: i
        }
    },
    zxxL: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            function o() {
                var a = e.defer(),
                    i = t.getFeed({
                        defaultTemplate: "/chart-headless.def.json"
                    });
                return i.ready().then(function() {
                    a.resolve(i.getHeadlessChart())
                }), a.promise
            }

            function n(e) {
                var t = e.split("-");
                return t.forEach(function(e, a) {
                    t[a] = parseInt(e)
                }), t[1] = t[1] - 1, t
            }
            return {
                getTemplateDefinition: function(t) {
                    var r = e.defer();
                    return o().then(function(e) {
                        t.settings.barType && "Hollow" === t.settings.barType.curveAttribute && (t.settings.barType.curveStyle = "HollowCandles", delete t.settings.barType.curveAttribute);
                        var o = angular.merge({}, t.aggregation, {
                            dividendsAdjust: t.settings.dividendsAdjust,
                            backAdjust: t.settings.backAdjust
                        });
                        o.spec = t.aggregation.spec, t.settings.contractRoll && (o.contractRoll = t.settings.contractRoll), "expiration" === o.contractRoll && (o.daysToExpiration = t.settings.daysToExpiration);
                        var s, l, c = "";
                        switch (t.period) {
                            case "CUSTOM":
                                t.range && t.range.from && (c = function(e, t) {
                                    var a = n(e.from),
                                        i = {
                                            from: new Date(a[0], a[1], a[2]).getTime()
                                        };
                                    if (e.to) {
                                        var r = n(e.to);
                                        i.to = new Date(r[0], r[1], r[2]).getTime(), t && (i.to += 864e5)
                                    }
                                    return i
                                }(t.range, t.aggregation && "Intraday" === t.aggregation.unit));
                                break;
                            case "YTD":
                                c = "P" + (s = new Date, l = new Date(s.getFullYear(), 0, 0), Math.floor((s - l) / 864e5)) + "D";
                                break;
                            default:
                                c = t.period
                        }
                        e.change(a.curveStyle(t.settings.barType)), e.change(a.aggregation(o)), "CUSTOM" === t.period && t.range && t.range.from && e.change(a.range(c)), "CUSTOM" !== t.period && e.change(a.period(c)), e.change(a.events(t.settings.events)), e.change(a.scaleType(t.settings.scaleType)), e.change(a.maxPaddibg(t.settings.maxPaddibg)), e.change(a.minPaddibg(t.settings.minPaddibg)), e.change(a.marginBars(t.settings.marginBars)), e.change(a.navigator(t.settings.navigator)), e.change(a.gridLines(t.settings.minorGridLines)), e.change(a.axisType(t.settings.scaleValue)), e.change(a.tooltip(t.settings.tooltip)), t.taxonomies.studies.forEach(function(t) {
                            if (t.item.defaults) {
                                var r = i.convertStudyToApi(t);
                                e.change(a.technicalStudyAdd(r))
                            } else e.change(a.technicalStudyAdd(t.item))
                        }), t.taxonomies.fundamentals.forEach(function(t) {
                            var r = i.convertFundamentalToApi(t);
                            e.change(a.fundamentalAdd(r))
                        }), r.resolve(e.asTemplate())
                    }), r.promise
                },
                updateTemplateByDefinition: function(n) {
                    var s = e.defer();
                    return o().then(function(e) {
                        e.load(n);
                        var o = {
                                studies: [],
                                fundamentals: []
                            },
                            l = e.change(a.technicalStudiesGet());
                        if (l && l.length) {
                            var c = t.getTaxonomies().studies;
                            l.forEach(function(e) {
                                var t = e.title,
                                    a = _.find(c, {
                                        id: e.studyId
                                    });
                                if (a && (t = a.meta.title, e.inputs && e.inputs.length)) {
                                    var r = [];
                                    e.inputs.forEach(function(e) {
                                        r.push(e.value)
                                    }), t += " (" + r.join(",") + ")"
                                }
                                o.studies.push({
                                    name: t,
                                    item: i.convertStudyFromApi(e)
                                })
                            })
                        }
                        var d = r.getFundamentals(e);
                        d.BalanceSheet.length && d.BalanceSheet.forEach(function(e) {
                            var t = i.convertFundamentalFromApi(e, "BalanceSheet");
                            t.type = "BalanceSheet", o.fundamentals.push({
                                name: e.title,
                                item: t
                            })
                        }), d.IncomeStatement.length && d.IncomeStatement.forEach(function(e) {
                            var t = i.convertFundamentalFromApi(e, "IncomeStatement");
                            t.type = "IncomeStatement", o.fundamentals.push({
                                name: e.title,
                                item: t
                            })
                        }), s.resolve(o)
                    }), s.promise
                }
            }
        }
        i.$inject = ["$q", "bcMarketDataChart", "interactiveChartApiActionsService", "interactiveChartConverter", "interactiveChartApi"], e.exports = i
    },
    zyNF: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n) {
            e.user = t.getUserData(), e.dataLoading = !1, e.error = !1, e.errorWatchlist = !1, e.isLoggedIn = t.isLoggedIn();
            e.user && e.user.watchlists.length && (e.watchlists = angular.copy(e.user.watchlists), e.watchlists.forEach(function(e) {
                e.eod_view || (e.eod_view = "main")
            })), e.updateView = function() {
                e.errorWatchlist = !1, e.user.is_premier && a.subscribeWatchlists({
                    watchlists: e.watchlists
                }).then(function(e) {
                    t.setWatchlists(e.data), i.success("End-of-Day Email preferences have been saved.")
                }, function(t) {
                    t.error && t.error.message && (e.errorWatchlist = t.error.message)
                })
            }, e.isNewDisabled = t.getEodReportsNumber("watchlists", "email") >= o.config.limits.reportsLimit, e.updateWatchlists = function(r) {
                if (e.errorWatchlist = !1, r.email && e.isNewDisabled) return r.email = !1, void i.warning({
                    message: n("MAX_EOD_REPORTS"),
                    delay: 8e3
                });
                a.subscribeWatchlists({
                    watchlists: e.watchlists
                }).then(function(a) {
                    if (a.data) {
                        var r = "";
                        t.setWatchlists(a.data), e.watchlists.forEach(function(e) {
                            e.email && (r += "<li>" + e.name + "</li>")
                        }), r ? i.success("<p>You will now receive End-of-Day emails for:</p><ul>" + r + "</ul>") : i.success("End-of-Day Email preferences have been saved."), e.isNewDisabled = t.getEodReportsNumber("watchlists", "email") >= o.config.limits.reportsLimit, !1
                    }
                }, function(t) {
                    t.error && t.error.message && (e.errorWatchlist = t.error.message)
                })
            }, e.attachCsv = function(t) {
                e.user.is_premier ? e.updateWatchlists() : (t.csv_attachment = 0, r.showPremier("csvWatchlist"))
            }
        }
        i.$inject = ["$scope", "authService", "barchartEodWatchlistEmailsApiFactory", "Notification", "bcModalLoginSrv", "$window", "textFactory"], e.exports = i
    },
    zzQi: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r, o, n, s, l) {
            var c = angular.copy(n.traits);
            e.lineTypes = n.lineTypes, e.fillTransparencies = n.fillTransparencies, e.annotationNames = n.annotationNames, console.log("[Interactive Chart Modal Annotation Ctrl]: annotationData:", a);
            var d = s.getSymbolData().lastPrice,
                u = -1 !== d.toString().indexOf("-"),
                p = l.getInlineDataForSymbol(s.getSymbolData().symbol).instrument.unitCode,
                m = 2;
            e.formData = {}, e.title = e.annotationNames[a.id] || a.id, e.annotationPoints = null;
            try {
                m = d.substring(-1 !== d.indexOf(".") ? d.indexOf(".") + 1 : d.length).length
            } catch (e) {
                console.error("interactive-chart-modal-annotation-ctrl.js: [Can not get lastPrice of a symbol]"), m = 2
            }

            function h(e) {
                var t = e.toString(16);
                return 1 === t.length ? "0" + t : t
            }
            s.getChartTaxonomy().then(function(t) {
                e.currentAnnotation = _.find(t.annotations, {
                    id: a.id
                }), e.currentAnnotation.options && e.currentAnnotation.options.length && e.currentAnnotation.options.forEach(function(t) {
                    switch (t) {
                        case "fill":
                            e.formData[t] = angular.copy(c[t]), a.traits[t] && (a.traits[t].color.indexOf("rgba") > -1 ? e.formData[t] = (i = a.traits[t].color, r = i.match(/^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+(\.\d+)?)\s*\)$/i), {
                                color: "#" + h(Number(r[1])) + h(Number(r[2])) + h(Number(r[3])),
                                opacity: Number(r[4])
                            }) : e.formData[t] = {
                                color: a.traits[t].color,
                                opacity: 1
                            });
                            break;
                        case "factors":
                            e.formData[t] = a.traits[t].map(function(e) {
                                return void 0 === e.shown ? {
                                    value: null === e ? null : parseFloat((100 * e).toFixed(1)),
                                    shown: !0
                                } : {
                                    value: null === e.value ? null : parseFloat((100 * e.value).toFixed(1)),
                                    shown: e.shown
                                }
                            });
                            break;
                        case "marker":
                            if (e.formData[t] = angular.copy(c[t]), a.traits[t]) switch (a.traits[t].vertex) {
                                case "start":
                                    e.formData[t].lineMarkerStart = !0;
                                    break;
                                case "end":
                                    e.formData[t].lineMarkerEnd = !0;
                                    break;
                                case "both":
                                    e.formData[t].lineMarkerStart = !0, e.formData[t].lineMarkerEnd = !0
                            }
                            break;
                        case "allowPricesChangeUI":
                            Array.isArray(a.points) && a.points.length > 0 && void 0 !== a.points[0].price && (e.annotationPoints = a.points.map(function(e) {
                                return e.price = u ? Barchart.Utilities.priceFormatter("-").format(e.price, p) : e.price.toFixed(m), e
                            }));
                            break;
                        default:
                            e.formData[t] = void 0 !== a.traits[t] ? a.traits[t] : angular.copy(c[t])
                    }
                    var i, r
                })
            }), e.resetConfigToDefault = function() {
                e.currentAnnotation.options && e.currentAnnotation.options.length && e.currentAnnotation.options.forEach(function(t) {
                    switch (e.formData[t] = angular.copy(c[t]), t) {
                        case "fill":
                            "Ellipse" !== a.id && "Rectangle" !== a.id || (e.formData[t].color = "#fff", e.formData[t].opacity = 0);
                            break;
                        case "showPrices":
                            ["FibonacciRetracement", "HorizontalLine", "VerticalLine"].indexOf(a.id) > -1 && (e.formData[t] = !0)
                    }
                    "FibonacciRetracement" === a.id && (e.formData.factors = c.factors.map(function(e) {
                        return {
                            value: null === e.value ? null : parseFloat((100 * e.value).toFixed(1)),
                            shown: e.shown
                        }
                    }))
                })
            }, e.updateConfirm = function() {
                var n = angular.copy(e.formData);
                if (n.fill && (n.fill = {
                        color: function(e, t) {
                            e = e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(e, t, a, i) {
                                return t + t + a + a + i + i
                            });
                            var a = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
                            return a ? "rgba(" + parseInt(a[1], 16) + ", " + parseInt(a[2], 16) + ", " + parseInt(a[3], 16) + ", " + t + ")" : null
                        }(n.fill.color, n.fill.opacity)
                    }), n.factors && (n.factors = n.factors.map(function(e) {
                        return {
                            value: null !== e.value && "number" == typeof e.value ? e.value / 100 : null,
                            shown: e.shown
                        }
                    })), n.marker && (n.marker.lineMarkerStart || n.marker.lineMarkerEnd)) {
                    var l = {
                        kind: "arrow"
                    };
                    n.marker.lineMarkerStart && (l.vertex = "start"), n.marker.lineMarkerEnd && (l.vertex = "end"), n.marker.lineMarkerStart && n.marker.lineMarkerEnd && (l.vertex = "both"), n.marker = l
                } else n.marker = {
                    vertex: "none"
                };
                i.isLoggedIn() && r.saveAnnotationConfig(a.id, JSON.stringify(n));
                var c = {
                    uid: a.uid,
                    traits: n
                };
                e.annotationPoints && (c.points = e.annotationPoints.map(function(e) {
                    return e.price = u ? o.string2Decimal(e.price.toString(), p) : +e.price, e
                })), s.updateTool(c), t.close()
            }, e.removeConfirm = function() {
                s.deleteTool({
                    uid: a.uid
                }), t.close()
            }, e.modalDismiss = function() {
                t.dismiss()
            }, e.cloneTool = function() {
                s.cloneTool({
                    uid: a.uid
                }), t.close()
            }, e.showPercentDiffChanged = function() {
                !0 === e.formData.showPercentDiff && !1 === e.formData.showPrices && (e.formData.showPrices = !0)
            }, e.showPricesChanged = function() {
                !1 === e.formData.showPrices && !0 === e.formData.showPercentDiff && (e.formData.showPercentDiff = !1)
            }
        }
        i.$inject = ["$scope", "$modalInstance", "annotationData", "authService", "interactiveChartUserPreferencesApi", "utils", "interactiveChartAnnotationsConfig", "interactiveChartApi", "bcInlineData"], e.exports = i
    }
});
